{
  "when": "2011-12-19T23:44:05-05:00", 
  "message": "Advanced mediators integration tests", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-0,0 +1,50", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample362 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample362.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample362() {\n", 
            "+        super(362);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testDbLookupReport() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Action of dbreport and dblookup mediators together\");\n", 
            "+\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+        log.info(\"Running test: Introduction to the dblookup mediator\");\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample362.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample362.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,47", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample390 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample390.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample390() {\n", 
            "+        super(390);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testXQuery() {\n", 
            "+        String addUrl = \"http://localhost:8280/services/StockQuoteProxy\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Introduction to the XQuery mediator\");\n", 
            "+        result = client.requestCustomQuote(addUrl, null, null, \"IBM\");\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample390.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample390.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,47", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample391 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample391.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample391() {\n", 
            "+        super(391);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testExternalXQuery() {\n", 
            "+        String addUrl = \"http://localhost:8280/services/StockQuoteProxy\";\n", 
            "+\n", 
            "+        log.info(\"Running test: How to use the data from an external XML document with in XQuery \");\n", 
            "+        result = client.requestStandardQuote(addUrl, null, null, \"IBM\",null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample391.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample391.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,48", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample351 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample351.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample351() {\n", 
            "+        super(351);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testScriptMediationInLineJS() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Introduction to the script mediator using js scripts \");\n", 
            "+        result = client.requestCustomQuote(addUrl, trpUrl, null, \"IBM\");\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample351.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample351.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,48", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample460 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample460.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample460() {\n", 
            "+        super(460);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testSpringBeanAsAMediator() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Spring Bean as a Mediator\");\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample460.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample460.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,48", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample352 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample352.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample352() {\n", 
            "+        super(352);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testAccesingAPIUsingScripting() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Accessing Synapse message context API methods using scripting language\");\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample352.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample352.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,47", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample370 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample370.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample370() {\n", 
            "+        super(370);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testThrottling() {\n", 
            "+        String addUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Introduction to throttle mediator and concurrency throttling\");\n", 
            "+        result = client.requestStandardQuote(addUrl, null, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample370.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample370.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,48", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample353 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample353.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample353() {\n", 
            "+        super(353);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testScriptMediationWithRuby() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Using Ruby scripts for mediation\");\n", 
            "+        result = client.requestCustomQuote(addUrl, trpUrl, null, \"IBM\");\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample353.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample353.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,47", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample380 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample380.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample380() {\n", 
            "+        super(380);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testCustomMediator() {\n", 
            "+        String addUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Demonstrate the use of Class mediator to extend the mediation functionality\");\n", 
            "+        result = client.requestStandardQuote(addUrl, null, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample380.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample380.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,48", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample354 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample354.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample354() {\n", 
            "+        super(354);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testScriptMediationWithInLineRuby() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Using In-lined Ruby scripts for mediation\");\n", 
            "+        result = client.requestCustomQuote(addUrl, trpUrl, null, \"IBM\");\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample354.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample354.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>430</sampleID>\n", 
            "+    <sampleName>Simple Callout Mediator for synchronizing web service invocation</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_430.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample430.xml", 
      "from": "java/modules/integration/src/test/resources/sample430.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>350</sampleID>\n", 
            "+    <sampleName>Introduction to the script mediator using js scripts</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_350.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample350.xml", 
      "from": "java/modules/integration/src/test/resources/sample350.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>450</sampleID>\n", 
            "+    <sampleName>Introduction to the URL Rewrite Mediator</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_450.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample450.xml", 
      "from": "java/modules/integration/src/test/resources/sample450.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>351</sampleID>\n", 
            "+    <sampleName>In-line script mediation with JavaScript</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_351.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample351.xml", 
      "from": "java/modules/integration/src/test/resources/sample351.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>451</sampleID>\n", 
            "+    <sampleName>Conditional URL Rewriting</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_451.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample451.xml", 
      "from": "java/modules/integration/src/test/resources/sample451.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>352</sampleID>\n", 
            "+    <sampleName>Accessing Synapse message context API methods using scripting language</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_352.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample352.xml", 
      "from": "java/modules/integration/src/test/resources/sample352.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>370</sampleID>\n", 
            "+    <sampleName>Introduction to throttle mediator and concurrency throttling</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_370.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample370.xml", 
      "from": "java/modules/integration/src/test/resources/sample370.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>353</sampleID>\n", 
            "+    <sampleName>Using Ruby scripts for mediation</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_353.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample353.xml", 
      "from": "java/modules/integration/src/test/resources/sample353.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>371</sampleID>\n", 
            "+    <sampleName>Restricting requests based on policies</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_371.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample371.xml", 
      "from": "java/modules/integration/src/test/resources/sample371.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>452</sampleID>\n", 
            "+    <sampleName>Conditional URL Rewriting with Multiple Rules</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_452.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample452.xml", 
      "from": "java/modules/integration/src/test/resources/sample452.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>354</sampleID>\n", 
            "+    <sampleName>Using In-lined Ruby scripts for mediation</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_354.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample354.xml", 
      "from": "java/modules/integration/src/test/resources/sample354.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>372</sampleID>\n", 
            "+    <sampleName>Use of both concurrency throttling and request rate based throttling</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_372.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample372.xml", 
      "from": "java/modules/integration/src/test/resources/sample372.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>390</sampleID>\n", 
            "+    <sampleName>Introduction to the XQuery mediator</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_390.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample390.xml", 
      "from": "java/modules/integration/src/test/resources/sample390.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>391</sampleID>\n", 
            "+    <sampleName>How to use data from an external XML document with in XQuery </sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_391.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample391.xml", 
      "from": "java/modules/integration/src/test/resources/sample391.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>420</sampleID>\n", 
            "+    <sampleName>Simple cache implemented on Synapse for the actual service</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_420.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample420.xml", 
      "from": "java/modules/integration/src/test/resources/sample420.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,20", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>360</sampleID>\n", 
            "+    <sampleName>Introduction to the dblookup mediator</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_360.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+\t<derbyServer id='1'>\n", 
            "+\t</derbyServer>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample360.xml", 
      "from": "java/modules/integration/src/test/resources/sample360.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,20", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>361</sampleID>\n", 
            "+    <sampleName>Introduction to the dbreport mediator</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_361.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+\t<derbyServer id='1'>\n", 
            "+\t</derbyServer>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample361.xml", 
      "from": "java/modules/integration/src/test/resources/sample361.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>460</sampleID>\n", 
            "+    <sampleName>How to initialize and use a Spring Bean as a Mediator</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_460.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample460.xml", 
      "from": "java/modules/integration/src/test/resources/sample460.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,20", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>362</sampleID>\n", 
            "+    <sampleName>Action of dbreport and dblookup mediators together</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_362.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+\t<derbyServer id='1'>\n", 
            "+\t</derbyServer>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample362.xml", 
      "from": "java/modules/integration/src/test/resources/sample362.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>380</sampleID>\n", 
            "+    <sampleName>Writing your own custom mediation in Java</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_380.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample380.xml", 
      "from": "java/modules/integration/src/test/resources/sample380.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-22,6 +22,7", 
          "lines": [
            " import junit.framework.TestSuite;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.tests.advanced.*;\n", 
            " import org.apache.synapse.samples.framework.tests.endpoint.*;\n", 
            " import org.apache.synapse.samples.framework.tests.message.*;\n", 
            " import org.apache.synapse.samples.framework.tests.proxy.*;\n"
          ]
        }, 
        {
          "locn": "-199,5 +200,27", 
          "lines": [
            "         sampleClassRepo.put(\"155\", Sample155.class);\n", 
            "         sampleClassRepo.put(\"156\", Sample156.class);\n", 
            "         sampleClassRepo.put(\"157\", Sample157.class);\n", 
            "+\n", 
            "+        //Advanced\n", 
            "+        sampleClassRepo.put(\"350\", Sample350.class);\n", 
            "+        sampleClassRepo.put(\"351\", Sample351.class);\n", 
            "+        sampleClassRepo.put(\"352\", Sample352.class);\n", 
            "+        sampleClassRepo.put(\"353\", Sample353.class);\n", 
            "+        sampleClassRepo.put(\"354\", Sample354.class);\n", 
            "+        sampleClassRepo.put(\"360\", Sample360.class);\n", 
            "+        sampleClassRepo.put(\"361\", Sample361.class);\n", 
            "+        sampleClassRepo.put(\"362\", Sample362.class);\n", 
            "+        //sampleClassRepo.put(\"370\", Sample370.class);   // neethi 3.0.x and wso2throttle incompatibility\n", 
            "+        //sampleClassRepo.put(\"371\", Sample371.class);\n", 
            "+        //sampleClassRepo.put(\"372\", Sample372.class);\n", 
            "+        sampleClassRepo.put(\"380\", Sample380.class);\n", 
            "+        sampleClassRepo.put(\"390\", Sample390.class);\n", 
            "+        sampleClassRepo.put(\"391\", Sample391.class);\n", 
            "+        sampleClassRepo.put(\"420\", Sample420.class);\n", 
            "+        //sampleClassRepo.put(\"430\", Sample430.class);  // Problem with repo path\n", 
            "+        sampleClassRepo.put(\"450\", Sample450.class);\n", 
            "+        sampleClassRepo.put(\"451\", Sample451.class);\n", 
            "+        sampleClassRepo.put(\"452\", Sample452.class);\n", 
            "+        sampleClassRepo.put(\"460\", Sample460.class);\n", 
            "     }\n", 
            " }\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,47", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample420 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample420.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample420() {\n", 
            "+        super(420);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testCache() {\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Simple cache implemented on Synapse for the actual service\");\n", 
            "+        result = client.requestStandardQuote(null, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample420.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample420.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,47", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample430 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample430.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample430() {\n", 
            "+        super(430);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testCallOut() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Simple Callout Mediator for synchronizing web service invocation\");\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample430.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample430.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,48", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample350 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample350.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample350() {\n", 
            "+        super(350);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testScriptMediationWithJS() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Introduction to the script mediator using js scripts \");\n", 
            "+        result = client.requestCustomQuote(addUrl, trpUrl, null, \"IBM\");\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample350.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample350.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,49", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample450 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample450.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample450() {\n", 
            "+        super(450);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testURLRewrite() {\n", 
            "+        //String repo = getConfiguration().getClientConfig().getClientRepo();\n", 
            "+        String addUrl = \"http://localhost:9000/soap/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Introduction to the URL Rewrite Mediator\");\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample450.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample450.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,50", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample360 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample360.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample360() {\n", 
            "+        super(360);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testDbLookup() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Introduction to dblookup mediator\");\n", 
            "+\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+        log.info(\"Running test: Introduction to the dblookup mediator\");\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample360.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample360.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,52", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample451 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample451.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample451() {\n", 
            "+        super(451);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testURLRewrite() {\n", 
            "+        log.info(\"Running test: Conditional URL Rewriting\");\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        String addUrl = \"jms://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\", null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+\n", 
            "+        addUrl = \"http://localhost:7575/services/SimpleStockQuoteService\";\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\", null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample451.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample451.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,50", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample361 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample361.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample361() {\n", 
            "+        super(361);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testDbReport() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Introduction to dbreport mediator\");\n", 
            "+\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+        log.info(\"Running test: Introduction to the dblookup mediator\");\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample361.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample361.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,49", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample452 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample452.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample452() {\n", 
            "+        super(452);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testURLRewriteMultiple() {\n", 
            "+        log.info(\"Running test: Conditional URL Rewriting with Multiple Rules\");\n", 
            "+\n", 
            "+        String addUrl = \"https://localhost/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\", null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample452.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample452.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,61", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.axis2.AxisFault;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample371 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample371.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample371() {\n", 
            "+        super(371);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testRestrictedThrottling() {\n", 
            "+        String addUrl = \"http://localhost:8280/\";\n", 
            "+        String expectedError = \"Access Denied\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Restricting requests based on policies \");\n", 
            "+        for (int i = 0; i < 4; i++) {\n", 
            "+            result = client.requestStandardQuote(addUrl, null, null, \"IBM\", null);\n", 
            "+        }\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+\n", 
            "+        result = client.requestStandardQuote(addUrl, null, null, \"IBM\", null);\n", 
            "+\n", 
            "+        assertFalse(\"Should not get a response\", result.responseReceived());\n", 
            "+        Exception resultEx = result.getException();\n", 
            "+        assertNotNull(\"Did not receive expected error\", resultEx);\n", 
            "+        log.info(\"Got an error as expected: \" + resultEx.getMessage());\n", 
            "+        assertTrue(\"Did not receive expected error\", resultEx instanceof AxisFault);\n", 
            "+        assertTrue(\"Did not receive expected error\", resultEx.getMessage().indexOf(expectedError) != -1);\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample371.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample371.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,47", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample372 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample372.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample372() {\n", 
            "+        super(372);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testConcAndRRBthrottling() {\n", 
            "+        String addUrl = \"http://localhost:8280/services/StockQuoteProxy\";\n", 
            "+\n", 
            "+        log.info(\"Running test: concurrency throttling and request rate based throttling\");\n", 
            "+        result = client.requestStandardQuote(addUrl, null, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample372.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample372.java"
    }
  ], 
  "id": "1221096"
}