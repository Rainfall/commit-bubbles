{
  "when": "2012-09-18T04:35:19-04:00", 
  "message": "Avoid code duplication.", 
  "who": "veithen", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-1,364 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.samples.framework.clients;\n", 
            "-\n", 
            "-import org.apache.axiom.om.OMAbstractFactory;\n", 
            "-import org.apache.axiom.om.OMElement;\n", 
            "-import org.apache.axiom.om.OMFactory;\n", 
            "-import org.apache.axiom.om.OMNamespace;\n", 
            "-import org.apache.axiom.om.xpath.AXIOMXPath;\n", 
            "-\n", 
            "-import java.util.Iterator;\n", 
            "-import java.util.List;\n", 
            "-import java.util.Random;\n", 
            "-\n", 
            "-/**\n", 
            "- * A class that can create messages to, and parse replies from our sample StockQuote service\n", 
            "- */\n", 
            "-public class StockQuoteHandler {\n", 
            "-\n", 
            "-    private static final Random RANDOM = new Random();\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Create a new custom quote request with a body as follows\n", 
            "-     * <m0:CheckPriceRequest xmlns:m0=\"http://services.samples\">\n", 
            "-     *   <m0:Code>symbol</m0:Code>\n", 
            "-     * </m0:CheckPriceRequest>\n", 
            "-     * @param symbol the stock symbol\n", 
            "-     * @return OMElement for SOAP body\n", 
            "-     */\n", 
            "-    public static OMElement createCustomQuoteRequest(String symbol) {\n", 
            "-        OMFactory factory   = OMAbstractFactory.getOMFactory();\n", 
            "-        OMNamespace ns      = factory.createOMNamespace(\n", 
            "-            \"http://services.samples\", \"m0\");\n", 
            "-        OMElement chkPrice  = factory.createOMElement(\"CheckPriceRequest\", ns);\n", 
            "-        OMElement code      = factory.createOMElement(\"Code\", ns);\n", 
            "-        chkPrice.addChild(code);\n", 
            "-        code.setText(symbol);\n", 
            "-        return chkPrice;\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Create a new quote request with a body as follows\n", 
            "-     *  <m:GetQuote xmlns:m=\"http://services.samples\">\n", 
            "-     *      <m:request>\n", 
            "-     *          <m:symbol>IBM</m:symbol>\n", 
            "-     *      </m:request>\n", 
            "-     *  </m:GetQuote>\n", 
            "-     * @param symbol the stock symbol\n", 
            "-     * @return OMElement for SOAP body\n", 
            "-     */\n", 
            "-    public static OMElement createStandardQuoteRequest(String symbol, int itrCount) {\n", 
            "-        OMFactory factory   = OMAbstractFactory.getOMFactory();\n", 
            "-        OMNamespace ns      = factory.createOMNamespace(\"http://services.samples\", \"m0\");\n", 
            "-        OMElement getQuote  = factory.createOMElement(\"getQuote\", ns);\n", 
            "-        for (int i =0; i<itrCount; i++) {\n", 
            "-            OMElement request   = factory.createOMElement(\"request\", ns);\n", 
            "-            OMElement symb      = factory.createOMElement(\"symbol\", ns);\n", 
            "-            request.addChild(symb);\n", 
            "-            getQuote.addChild(request);\n", 
            "-            symb.setText(symbol);\n", 
            "-        }\n", 
            "-        return getQuote;\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Create a new full quote request with a body as follows\n", 
            "-     *  <m:GetFullQuote xmlns:m=\"http://services.samples\">\n", 
            "-     *      <m:request>\n", 
            "-     *          <m:symbol>IBM</m:symbol>\n", 
            "-     *      </m:request>\n", 
            "-     *  </m:GetFullQuote>\n", 
            "-     * @param symbol the stock symbol\n", 
            "-     * @return OMElement for SOAP body\n", 
            "-     */\n", 
            "-    public static OMElement createFullQuoteRequest(String symbol) {\n", 
            "-        OMFactory factory   = OMAbstractFactory.getOMFactory();\n", 
            "-        OMNamespace ns      = factory.createOMNamespace(\"http://services.samples\", \"m0\");\n", 
            "-        OMElement getQuote  = factory.createOMElement(\"getFullQuote\", ns);\n", 
            "-        OMElement request   = factory.createOMElement(\"request\", ns);\n", 
            "-        OMElement symb      = factory.createOMElement(\"symbol\", ns);\n", 
            "-        request.addChild(symb);\n", 
            "-        getQuote.addChild(request);\n", 
            "-        symb.setText(symbol);\n", 
            "-        return getQuote;\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Create a new market activity request with a body as follows\n", 
            "-     *  <m:getMarketActivity xmlns:m=\"http://services.samples\">\n", 
            "-     *      <m:request>\n", 
            "-     *          <m:symbol>IBM</m:symbol>\n", 
            "-     *          ...\n", 
            "-     *          <m:symbol>MSFT</m:symbol>\n", 
            "-     *      </m:request>\n", 
            "-     *  </m:getMarketActivity>\n", 
            "-     * @return OMElement for SOAP body\n", 
            "-     */\n", 
            "-    public static OMElement createMarketActivityRequest() {\n", 
            "-        OMFactory factory   = OMAbstractFactory.getOMFactory();\n", 
            "-        OMNamespace ns      = factory.createOMNamespace(\"http://services.samples\", \"m0\");\n", 
            "-        OMElement getQuote  = factory.createOMElement(\"getMarketActivity\", ns);\n", 
            "-        OMElement request   = factory.createOMElement(\"request\", ns);\n", 
            "-\n", 
            "-        OMElement symb = null;\n", 
            "-        for (int i=0; i<100; i++) {\n", 
            "-            symb = factory.createOMElement(\"symbols\", ns);\n", 
            "-            symb.setText(randomString(3));\n", 
            "-            request.addChild(symb);\n", 
            "-        }\n", 
            "-\n", 
            "-        getQuote.addChild(request);\n", 
            "-        return getQuote;\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Create a new order for a quantiry of a stock at a given price\n", 
            "-     * <m:placeOrder xmlns:m=\"http://services.samples\">\n", 
            "-     *\t  <m:order>\n", 
            "-     *\t      <m:price>3.141593E0</m:price>\n", 
            "-     *\t      <m:quantity>4</m:quantity>\n", 
            "-     *\t      <m:symbol>IBM</m:symbol>\n", 
            "-     *    </m:order>\n", 
            "-     * \t</m:placeOrder>\n", 
            "-     *\n", 
            "-     * @param purchPrice the purchase price\n", 
            "-     * @param qty the quantiry\n", 
            "-     * @param symbol the stock\n", 
            "-     * @return an OMElement payload for the order\n", 
            "-     */\n", 
            "-    public static OMElement createPlaceOrderRequest(double purchPrice, int qty, String symbol) {\n", 
            "-        OMFactory factory   = OMAbstractFactory.getOMFactory();\n", 
            "-        OMNamespace ns      = factory.createOMNamespace(\"http://services.samples\", \"m0\");\n", 
            "-        OMElement placeOrder= factory.createOMElement(\"placeOrder\", ns);\n", 
            "-        OMElement order     = factory.createOMElement(\"order\", ns);\n", 
            "-        OMElement price     = factory.createOMElement(\"price\", ns);\n", 
            "-        OMElement quantity  = factory.createOMElement(\"quantity\", ns);\n", 
            "-        OMElement symb      = factory.createOMElement(\"symbol\", ns);\n", 
            "-        price.setText(Double.toString(purchPrice));\n", 
            "-        quantity.setText(Integer.toString(qty));\n", 
            "-        symb.setText(symbol);\n", 
            "-        order.addChild(price);\n", 
            "-        order.addChild(quantity);\n", 
            "-        order.addChild(symb);\n", 
            "-        placeOrder.addChild(order);        \n", 
            "-        return placeOrder;\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Digests the standard StockQuote response and extracts the last trade price\n", 
            "-     * @param result\n", 
            "-     * @return\n", 
            "-     * @throws javax.xml.stream.XMLStreamException\n", 
            "-     *\n", 
            "-     *  <ns:getQuoteResponse xmlns:ns=\"http://services.samples\">\n", 
            "-     *      <ns:return>\n", 
            "-     *          <ns:change>-2.3238706829151026</ns:change>\n", 
            "-     *          ...\n", 
            "-     *          <ns:symbol>IBM</ns:symbol>\n", 
            "-     *          <ns:volume>17949</ns:volume>\n", 
            "-     *      </ns:return>\n", 
            "-     *  </ns:getQuoteResponse>\n", 
            "-     */\n", 
            "-    public static String parseStandardQuoteResponse(OMElement result) throws Exception {\n", 
            "-\n", 
            "-        AXIOMXPath xPath = new AXIOMXPath(\"//ns:last\");\n", 
            "-        xPath.addNamespace(\"ns\",\"http://services.samples/xsd\");\n", 
            "-        OMElement last = (OMElement) xPath.selectSingleNode(result);\n", 
            "-        if (last != null) {\n", 
            "-            return last.getText();\n", 
            "-        } else {\n", 
            "-            throw new Exception(\"Unexpected response : \" + result);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * <ns:getFullQuoteResponse xmlns:ns=\"http://services.samples\">\n", 
            "-            <ns:return>\n", 
            "-               <tradeHistory xmlns=\"http://services.samples\">\n", 
            "-                  <day>0</day>\n", 
            "-                  <quote>\n", 
            "-                     <change>-2.367492989603466</change>\n", 
            "-                     <earnings>13.14956711287784</earnings>\n", 
            "-                     <high>-155.58844623078153</high>\n", 
            "-                     <last>157.47582716569198</last>\n", 
            "-                     <lastTradeTimestamp>Mon Apr 16 23:29:58 LKT 2007</lastTradeTimestamp>\n", 
            "-                     <low>-155.31924118819015</low>\n", 
            "-                     <marketCap>6373750.467022192</marketCap>\n", 
            "-                     <name>IBM Company</name>\n", 
            "-                     <open>-154.84071720443495</open>\n", 
            "-                     <peRatio>-17.353258031353164</peRatio>\n", 
            "-                     <percentageChange>-1.3910235348298898</percentageChange>\n", 
            "-                     <prevClose>170.1979104108393</prevClose>\n", 
            "-                     <symbol>IBM</symbol>\n", 
            "-                     <volume>8935</volume>\n", 
            "-                  </quote>\n", 
            "-               </tradeHistory>\n", 
            "-               <tradeHistory xmlns=\"http://services.samples\">\n", 
            "-                  <day>1</day>\n", 
            "-                  <quote>\n", 
            "-                     <change>3.794122022240518</change>\n", 
            "-                     <earnings>-8.656536789776045</earnings>\n", 
            "-                     <high>176.77136802352928</high>\n", 
            "-                     <last>170.28677783945102</last>\n", 
            "-                     <lastTradeTimestamp>Mon Apr 16 23:29:58 LKT 2007</lastTradeTimestamp>\n", 
            "-                     <low>-166.64126635049223</low>\n", 
            "-                     <marketCap>-6112014.916847887</marketCap>\n", 
            "-                     <name>IBM Company</name>\n", 
            "-                     <open>-168.30884678174925</open>\n", 
            "-                     <peRatio>-18.644628475049693</peRatio>\n", 
            "-                     <percentageChange>-2.29678289479374</percentageChange>\n", 
            "-                     <prevClose>-165.19288918603885</prevClose>\n", 
            "-                     <symbol>IBM</symbol>\n", 
            "-                     <volume>5825</volume>\n", 
            "-                  </quote>\n", 
            "-               </tradeHistory>\n", 
            "-               ...\n", 
            "-            </ns:return>\n", 
            "-         </ns:getFullQuoteResponse>\n", 
            "-     *\n", 
            "-     * @param result\n", 
            "-     * @return\n", 
            "-     * @throws Exception\n", 
            "-     */\n", 
            "-    public static String parseFullQuoteResponse(OMElement result) throws Exception {\n", 
            "-\n", 
            "-        AXIOMXPath xPath = new AXIOMXPath(\"//ns:last\");\n", 
            "-        xPath.addNamespace(\"ns\",\"http://services.samples/xsd\");\n", 
            "-        List lastNodes = xPath.selectNodes(result);\n", 
            "-\n", 
            "-        if (lastNodes == null) {\n", 
            "-            throw new Exception(\"Unexpected response : \" + result);\n", 
            "-        }\n", 
            "-\n", 
            "-        double total = 0;\n", 
            "-        int count = 0;\n", 
            "-\n", 
            "-        Iterator iter = lastNodes.iterator();\n", 
            "-        while (iter.hasNext()) {\n", 
            "-            OMElement last = (OMElement) iter.next();\n", 
            "-            total += Double.parseDouble(last.getText());\n", 
            "-            count++;\n", 
            "-        }\n", 
            "-\n", 
            "-        return Double.toString(total/count);\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * <ns:getMarketActivityResponse xmlns:ns=\"http://services.samples\">\n", 
            "-            <ns:return>\n", 
            "-               <quotes xmlns=\"http://services.samples\">\n", 
            "-                  <change>4.183958555301184</change>\n", 
            "-                  <earnings>-8.585281368244686</earnings>\n", 
            "-                  <high>-158.70528805517333</high>\n", 
            "-                  <last>160.83784480071603</last>\n", 
            "-                  <lastTradeTimestamp>Tue Apr 17 02:21:30 LKT 2007</lastTradeTimestamp>\n", 
            "-                  <low>-157.4950051860593</low>\n", 
            "-                  <marketCap>5.9907588733164035E7</marketCap>\n", 
            "-                  <name>EHM Company</name>\n", 
            "-                  <open>-160.18368223376558</open>\n", 
            "-                  <peRatio>24.0926205053427</peRatio>\n", 
            "-                  <percentageChange>-2.6141745708181374</percentageChange>\n", 
            "-                  <prevClose>-160.04893483420904</prevClose>\n", 
            "-                  <symbol>EHM</symbol>\n", 
            "-                  <volume>6319</volume>\n", 
            "-               </quotes>\n", 
            "-               <quotes xmlns=\"http://services.samples\">\n", 
            "-                  ....\n", 
            "-                  <volume>7613</volume>\n", 
            "-               </quotes>\n", 
            "-               ...\n", 
            "-            </ns:return>\n", 
            "-        <ns:getMarketActivityResponse>\n", 
            "-     * @param result\n", 
            "-     * @return the average last price for each stock symbol\n", 
            "-     * @throws Exception\n", 
            "-     */\n", 
            "-    public static String parseMarketActivityResponse(OMElement result) throws Exception {\n", 
            "-\n", 
            "-        AXIOMXPath xPath = new AXIOMXPath(\"//ns:last\");\n", 
            "-        xPath.addNamespace(\"ns\",\"http://services.samples/xsd\");\n", 
            "-        List lastNodes = xPath.selectNodes(result);\n", 
            "-\n", 
            "-        if (lastNodes == null) {\n", 
            "-            throw new Exception(\"Unexpected response : \" + result);\n", 
            "-        }\n", 
            "-\n", 
            "-        double total = 0;\n", 
            "-        int count = 0;\n", 
            "-\n", 
            "-        Iterator iter = lastNodes.iterator();\n", 
            "-        while (iter.hasNext()) {\n", 
            "-            OMElement last = (OMElement) iter.next();\n", 
            "-            total += Double.parseDouble(last.getText());\n", 
            "-            count++;\n", 
            "-        }\n", 
            "-\n", 
            "-        return Double.toString(total/count);\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Digests the custom quote response and extracts the last trade price\n", 
            "-     * @param result\n", 
            "-     * @return\n", 
            "-     * @throws javax.xml.stream.XMLStreamException\n", 
            "-     *\n", 
            "-     *      <CheckPriceResponse xmlns=\"http://ws.invesbot.com/\" >\n", 
            "-     *          <Code>IBM</Code>\n", 
            "-     *          <Price>82.90</Price>\n", 
            "-     *      </CheckPriceResponse>\n", 
            "-     */\n", 
            "-    public static String parseCustomQuoteResponse(OMElement result) throws Exception {\n", 
            "-\n", 
            "-        AXIOMXPath xPath = new AXIOMXPath(\"//ns:Price\");\n", 
            "-        xPath.addNamespace(\"ns\",\"http://services.samples/xsd\");\n", 
            "-        OMElement price = (OMElement) xPath.selectSingleNode(result);        \n", 
            "-        if (price != null) {\n", 
            "-            return price.getText();\n", 
            "-        } else {\n", 
            "-            throw new Exception(\"Unexpected response : \" + result);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Return a random String of letters\n", 
            "-     * @param count number of letters\n", 
            "-     * @return the random string\n", 
            "-     */\n", 
            "-    public static String randomString(int count) {\n", 
            "-        int end = 'Z' + 1;\n", 
            "-        int start = 'A';\n", 
            "-\n", 
            "-        StringBuffer buffer = new StringBuffer();\n", 
            "-        int gap = end - start;\n", 
            "-\n", 
            "-        while (count-- != 0) {\n", 
            "-            char ch;\n", 
            "-            ch = (char) (RANDOM.nextInt(gap) + start);\n", 
            "-            if (Character.isLetter(ch)) {\n", 
            "-                buffer.append(ch);\n", 
            "-            } else {\n", 
            "-                count++;\n", 
            "-            }\n", 
            "-        }\n", 
            "-        return buffer.toString();\n", 
            "-    }\n", 
            "-\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteHandler.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-44,6 +44,8", 
          "lines": [
            " import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            " import org.apache.synapse.samples.framework.config.Axis2ClientConfiguration;\n", 
            " \n", 
            "+import samples.common.StockQuoteHandler;\n", 
            "+\n", 
            " import javax.xml.namespace.QName;\n", 
            " import java.net.URL;\n", 
            " import java.util.HashMap;\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteSampleClient.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteSampleClient.java"
    }
  ], 
  "id": "1387046"
}