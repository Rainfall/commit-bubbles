{
  "when": "2013-08-25T22:32:11-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-74,6 +74,8", 
          "lines": [
            " \n", 
            "     private boolean passHeaders = false;\n", 
            " \n", 
            "+    private boolean initClientOptions = true;\n", 
            "+\n", 
            "     private boolean securityOn = false;  //Should messages be sent using WS-Security?\n", 
            " \n", 
            "     private String wsSecPolicyKey = null;\n"
          ]
        }, 
        {
          "locn": "-284,6 +286,7", 
          "lines": [
            " \n", 
            "     public void init(SynapseEnvironment synEnv) {\n", 
            "         blockingMsgSender = new Axis2BlockingClient(clientRepository, axis2xml);\n", 
            "+        blockingMsgSender.setInitClientOptions(initClientOptions);\n", 
            " \n", 
            "         EndpointDefinition endpointDefinition = null;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-401,6 +404,14", 
          "lines": [
            "         this.passHeaders = passHeaders;\n", 
            "     }\n", 
            " \n", 
            "+    public boolean isInitClientOptions() {\n", 
            "+        return initClientOptions;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setInitClientOptions(boolean initClientOptions) {\n", 
            "+        this.initClientOptions = initClientOptions;\n", 
            "+    }\n", 
            "+\n", 
            "     /**\n", 
            "      * Is WS-Security turned on?\n", 
            "      *\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/CalloutMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/CalloutMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-55,6 +55,7", 
          "lines": [
            "     private static final QName ATT_AXIS2XML = new QName(\"axis2xml\");\n", 
            "     private static final QName ATT_REPOSITORY = new QName(\"repository\");\n", 
            "     private static final QName ATT_PASS_HEADERS = new QName(\"passHeaders\");\n", 
            "+    private static final QName ATT_INIT_AXI2_CLIENT_OPTIONS = new QName(\"initAxis2ClientOptions\");\n", 
            "     private static final QName Q_CONFIG\n", 
            "             = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, \"configuration\");\n", 
            "     private static final QName Q_SOURCE\n"
          ]
        }, 
        {
          "locn": "-78,6 +79,7", 
          "lines": [
            "         OMAttribute attServiceURL = elem.getAttribute(ATT_URL);\n", 
            "         OMAttribute attAction     = elem.getAttribute(ATT_ACTION);\n", 
            "         OMAttribute attPassHeaders = elem.getAttribute(ATT_PASS_HEADERS);\n", 
            "+        OMAttribute attInitClientOptions = elem.getAttribute(ATT_INIT_AXI2_CLIENT_OPTIONS);\n", 
            "         OMElement epElement = elem.getFirstChildWithName(Q_ENDPOINT);\n", 
            "         OMElement   configElt     = elem.getFirstChildWithName(Q_CONFIG);\n", 
            "         OMElement   sourceElt     = elem.getFirstChildWithName(Q_SOURCE);\n"
          ]
        }, 
        {
          "locn": "-109,6 +111,11", 
          "lines": [
            "             callout.setPassHeaders(true);\n", 
            "         }\n", 
            " \n", 
            "+        if (attInitClientOptions != null &&\n", 
            "+                JavaUtils.isFalseExplicitly(attInitClientOptions.getAttributeValue())) {\n", 
            "+            callout.setInitClientOptions(false);\n", 
            "+        }\n", 
            "+\n", 
            "         if (configElt != null) {\n", 
            " \n", 
            "             OMAttribute axis2xmlAttr = configElt.getAttribute(ATT_AXIS2XML);\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-79,6 +79,10", 
          "lines": [
            "             callout.addAttribute(fac.createOMAttribute(\"passHeaders\", nullNS, \"true\"));\n", 
            "         }\n", 
            " \n", 
            "+        if (!mediator.isInitClientOptions()) {\n", 
            "+            callout.addAttribute(fac.createOMAttribute(\"initAxis2ClientOptions\", nullNS, \"false\"));\n", 
            "+        }\n", 
            "+\n", 
            "         if (mediator.getRequestXPath() != null || mediator.getRequestKey() != null) {\n", 
            "             OMElement source = fac.createOMElement(\"source\", synNS, callout);\n", 
            "             if (mediator.getRequestXPath() != null) {\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorSerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorSerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-126,5 +126,15", 
          "lines": [
            "         assertTrue(serialization(inputXml, calloutMediatorSerializer));\n", 
            "     }\n", 
            " \n", 
            "+    public void testCalloutMediatorSerializationScenarioEight() {\n", 
            "+        String inputXml = \"<callout xmlns=\\\"http://ws.apache.org/ns/synapse\\\" initAxis2ClientOptions=\\\"false\\\">\" +\n", 
            "+                \"<endpoint>\" +\n", 
            "+                \"<address uri=\\\"http://localhost:9000/services/SimpleStockQuoteService\\\"/>\" +\n", 
            "+                \"</endpoint>\" +\n", 
            "+                \"</callout>\";\n", 
            "+        assertTrue(serialization(inputXml, calloutMediatorFactory, calloutMediatorSerializer));\n", 
            "+        assertTrue(serialization(inputXml, calloutMediatorSerializer));\n", 
            "+    }\n", 
            "+\n", 
            " }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/config/xml/CalloutMediatorSerializationTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/config/xml/CalloutMediatorSerializationTest.java"
    }
  ], 
  "id": "1517408"
}