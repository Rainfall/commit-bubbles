{
  "when": "2012-01-03T05:39:24-05:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-25,7 +25,7", 
          "lines": [
            " \n", 
            " /**\n", 
            "  * <pre>\n", 
            "- * &lt;callout serviceURL=\"string\" [action=\"string\"]&gt;\n", 
            "+ * &lt;callout serviceURL=\"string\" [action=\"string\"][passHeaders=\"true|false\"]&gt;\n", 
            "  *      &lt;configuration [axis2xml=\"string\"] [repository=\"string\"]/&gt;?\n", 
            "  *      &lt;source xpath=\"expression\" | key=\"string\"&gt;\n", 
            "  *      &lt;target xpath=\"expression\" | key=\"string\"/&gt;\n"
          ]
        }, 
        {
          "locn": "-62,6 +62,10", 
          "lines": [
            "             callout.addChild(config);\n", 
            "         }\n", 
            " \n", 
            "+        if (mediator.isPassHeaders()) {\n", 
            "+            callout.addAttribute(fac.createOMAttribute(\"passHeaders\", nullNS, \"true\"));\n", 
            "+        }\n", 
            "+\n", 
            "         OMElement source = fac.createOMElement(\"source\", synNS, callout);\n", 
            "         if (mediator.getRequestXPath() != null) {\n", 
            "             SynapseXPathSerializer.serializeXPath(mediator.getRequestXPath(), source, \"xpath\");\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorSerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorSerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-21,6 +21,7", 
          "lines": [
            " \n", 
            " import org.apache.axiom.om.OMAttribute;\n", 
            " import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axis2.util.JavaUtils;\n", 
            " import org.apache.synapse.Mediator;\n", 
            " import org.apache.synapse.mediators.builtin.CalloutMediator;\n", 
            " import org.jaxen.JaxenException;\n"
          ]
        }, 
        {
          "locn": "-33,7 +34,7", 
          "lines": [
            "  * Factory for {@link CalloutMediator} instances.\n", 
            "  * \n", 
            "  * <pre>\n", 
            "- * &lt;callout serviceURL=\"string\" [action=\"string\"]&gt;\n", 
            "+ * &lt;callout serviceURL=\"string\" [action=\"string\"][passHeaders=\"true|false\"]&gt;\n", 
            "  *      &lt;configuration [axis2xml=\"string\"] [repository=\"string\"]/&gt;?\n", 
            "  *      &lt;source xpath=\"expression\" | key=\"string\"&gt;\n", 
            "  *      &lt;target xpath=\"expression\" | key=\"string\"/&gt;\n"
          ]
        }, 
        {
          "locn": "-48,6 +49,7", 
          "lines": [
            "     private static final QName ATT_ACTION = new QName(\"action\");\n", 
            "     private static final QName ATT_AXIS2XML = new QName(\"axis2xml\");\n", 
            "     private static final QName ATT_REPOSITORY = new QName(\"repository\");\n", 
            "+    private static final QName ATT_PASS_HEADERS = new QName(\"passHeaders\");\n", 
            "     private static final QName Q_CONFIG\n", 
            "             = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, \"configuration\");\n", 
            "     private static final QName Q_SOURCE\n"
          ]
        }, 
        {
          "locn": "-61,6 +63,7", 
          "lines": [
            " \n", 
            "         OMAttribute attServiceURL = elem.getAttribute(ATT_URL);\n", 
            "         OMAttribute attAction     = elem.getAttribute(ATT_ACTION);\n", 
            "+        OMAttribute attPassHeaders = elem.getAttribute(ATT_PASS_HEADERS);\n", 
            "         OMElement   configElt     = elem.getFirstChildWithName(Q_CONFIG);\n", 
            "         OMElement   sourceElt     = elem.getFirstChildWithName(Q_SOURCE);\n", 
            "         OMElement   targetElt     = elem.getFirstChildWithName(Q_TARGET);\n"
          ]
        }, 
        {
          "locn": "-75,6 +78,11", 
          "lines": [
            "             callout.setAction(attAction.getAttributeValue());\n", 
            "         }\n", 
            " \n", 
            "+        if (attPassHeaders != null &&\n", 
            "+                JavaUtils.isTrueExplicitly(attPassHeaders.getAttributeValue())) {\n", 
            "+            callout.setPassHeaders(true);\n", 
            "+        }\n", 
            "+\n", 
            "         if (configElt != null) {\n", 
            " \n", 
            "             OMAttribute axis2xmlAttr = configElt.getAttribute(ATT_AXIS2XML);\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-21,6 +21,7", 
          "lines": [
            " \n", 
            " import org.apache.axiom.om.OMElement;\n", 
            " import org.apache.axiom.om.OMNode;\n", 
            "+import org.apache.axiom.soap.SOAPHeader;\n", 
            " import org.apache.axis2.AxisFault;\n", 
            " import org.apache.axis2.Constants;\n", 
            " import org.apache.axis2.transport.http.HTTPConstants;\n"
          ]
        }, 
        {
          "locn": "-39,10 +40,11", 
          "lines": [
            " import org.apache.synapse.util.xpath.SynapseXPath;\n", 
            " import org.jaxen.JaxenException;\n", 
            " \n", 
            "+import java.util.Iterator;\n", 
            " import java.util.List;\n", 
            " \n", 
            " /**\n", 
            "- * <callout serviceURL=\"string\" [action=\"string\"]>\n", 
            "+ * <callout serviceURL=\"string\" [action=\"string\"][passHeaders=\"true|false\"]>\n", 
            "  *      <configuration [axis2xml=\"string\"] [repository=\"string\"]/>?\n", 
            "  *      <source xpath=\"expression\" | key=\"string\"> <!-- key can be a MC property or entry key -->\n", 
            "  *      <target xpath=\"expression\" | key=\"string\"/>\n"
          ]
        }, 
        {
          "locn": "-59,6 +61,7", 
          "lines": [
            "     private String targetKey = null;\n", 
            "     private String clientRepository = null;\n", 
            "     private String axis2xml = null;\n", 
            "+    private boolean passHeaders = false;\n", 
            "     public final static String DEFAULT_CLIENT_REPO = \"./samples/axis2Client/client_repo\";\n", 
            "     public final static String DEFAULT_AXIS2_XML = \"./samples/axis2Client/client_repo/conf/axis2.xml\";\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-93,6 +96,16", 
          "lines": [
            "                 }\n", 
            "             }\n", 
            " \n", 
            "+            if (passHeaders) {\n", 
            "+                SOAPHeader header = synCtx.getEnvelope().getHeader();\n", 
            "+                if (header != null) {\n", 
            "+                    Iterator headerElements = header.cloneOMElement().getChildElements();\n", 
            "+                    while (headerElements.hasNext()) {\n", 
            "+                        sc.addHeader((OMElement) headerElements.next());\n", 
            "+                    }\n", 
            "+                }\n", 
            "+            }\n", 
            "+\n", 
            "             options.setProperty(\n", 
            "                     AddressingConstants.DISABLE_ADDRESSING_FOR_OUT_MESSAGES, Boolean.TRUE);\n", 
            "             sc.setOptions(options);\n"
          ]
        }, 
        {
          "locn": "-299,4 +312,12", 
          "lines": [
            "     public void setAxis2xml(String axis2xml) {\n", 
            "         this.axis2xml = axis2xml;\n", 
            "     }\n", 
            "+\n", 
            "+    public boolean isPassHeaders() {\n", 
            "+        return passHeaders;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setPassHeaders(boolean passHeaders) {\n", 
            "+        this.passHeaders = passHeaders;\n", 
            "+    }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/CalloutMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/CalloutMediator.java"
    }
  ], 
  "id": "1226730"
}