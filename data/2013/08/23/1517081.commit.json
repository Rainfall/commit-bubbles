{
  "when": "2013-08-23T18:41:46-04:00", 
  "message": "Using the Axis2BlockingClient in the message processor impls. Adding sample 704. Patches applied from SYNAPSE-971 and SYNAPSE-972", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-16,6 +16,7", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.message.processors.forward;\n", 
            " \n", 
            " import org.apache.axis2.description.Parameter;\n"
          ]
        }, 
        {
          "locn": "-22,13 +23,19", 
          "lines": [
            " import org.apache.axis2.engine.AxisConfiguration;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.synapse.*;\n", 
            "+import org.apache.synapse.Mediator;\n", 
            "+import org.apache.synapse.MessageContext;\n", 
            "+import org.apache.synapse.SynapseConstants;\n", 
            "+import org.apache.synapse.core.axis2.Axis2BlockingClient;\n", 
            " import org.apache.synapse.core.axis2.Axis2MessageContext;\n", 
            "-import org.apache.synapse.endpoints.AddressEndpoint;\n", 
            "+import org.apache.synapse.endpoints.AbstractEndpoint;\n", 
            " import org.apache.synapse.endpoints.Endpoint;\n", 
            " import org.apache.synapse.message.processors.MessageProcessorConsents;\n", 
            " import org.apache.synapse.message.store.MessageStore;\n", 
            "-import org.quartz.*;\n", 
            "+import org.quartz.JobDataMap;\n", 
            "+import org.quartz.JobExecutionContext;\n", 
            "+import org.quartz.JobExecutionException;\n", 
            "+import org.quartz.StatefulJob;\n", 
            " \n", 
            " import java.util.Map;\n", 
            " import java.util.Set;\n"
          ]
        }, 
        {
          "locn": "-45,17 +52,14", 
          "lines": [
            "     public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {\n", 
            "         JobDataMap jdm = jobExecutionContext.getMergedJobDataMap();\n", 
            " \n", 
            "-        /**\n", 
            "-         * Get the Global Objects from DataMap\n", 
            "-         */\n", 
            "-        MessageStore messageStore = (MessageStore) jdm.get(\n", 
            "-                MessageProcessorConsents.MESSAGE_STORE);\n", 
            "+        //Get the Global Objects from DataMap\n", 
            "+        MessageStore messageStore = (MessageStore) jdm.get(MessageProcessorConsents.MESSAGE_STORE);\n", 
            "         Map<String, Object> parameters = (Map<String, Object>) jdm.get(\n", 
            "                 MessageProcessorConsents.PARAMETERS);\n", 
            "-        BlockingMessageSender sender =\n", 
            "-                (BlockingMessageSender) jdm.get(ScheduledMessageForwardingProcessor.BLOCKING_SENDER);\n", 
            "-        ScheduledMessageForwardingProcessor processor =\n", 
            "-                (ScheduledMessageForwardingProcessor) jdm.get(ScheduledMessageForwardingProcessor.PROCESSOR_INSTANCE);\n", 
            "+        Axis2BlockingClient sender = (Axis2BlockingClient) jdm.get(\n", 
            "+                ScheduledMessageForwardingProcessor.BLOCKING_SENDER);\n", 
            "+        ScheduledMessageForwardingProcessor processor = (ScheduledMessageForwardingProcessor) jdm.get(\n", 
            "+                ScheduledMessageForwardingProcessor.PROCESSOR_INSTANCE);\n", 
            " \n", 
            "         int maxDeliverAttempts = -1;\n", 
            "         String mdaParam = null;\n"
          ]
        }, 
        {
          "locn": "-107,8 +111,8", 
          "lines": [
            "                 Set proSet = messageContext.getPropertyKeySet();\n", 
            " \n", 
            "                 if (proSet != null) {\n", 
            "-                    if (proSet.contains(ForwardingProcessorConstants.BLOCKING_SENDER_ERROR)) {\n", 
            "-                        proSet.remove(ForwardingProcessorConstants.BLOCKING_SENDER_ERROR);\n", 
            "+                    if (proSet.contains(SynapseConstants.BLOCKING_CLIENT_ERROR)) {\n", 
            "+                        proSet.remove(SynapseConstants.BLOCKING_CLIENT_ERROR);\n", 
            "                     }\n", 
            "                 }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-123,14 +127,13", 
          "lines": [
            "                         return;\n", 
            "                     }\n", 
            " \n", 
            "-                    if (ep instanceof AddressEndpoint) {\n", 
            "+                    if ((ep != null) && (((AbstractEndpoint) ep).isLeafEndpoint())) {\n", 
            " \n", 
            "                         try {\n", 
            "-                            MessageContext outCtx = sender.send(\n", 
            "-                                    ((AddressEndpoint) ep).getDefinition(), messageContext);\n", 
            "+                            MessageContext outCtx = sender.send(ep, messageContext);\n", 
            " \n", 
            "                             if (outCtx != null && \"true\".equals(outCtx.\n", 
            "-                                    getProperty(ForwardingProcessorConstants.BLOCKING_SENDER_ERROR))) {\n", 
            "+                                    getProperty(SynapseConstants.BLOCKING_CLIENT_ERROR))) {\n", 
            "                                 // This Means an Error has occurred\n", 
            " \n", 
            "                                 if (maxDeliverAttempts > 0) {\n"
          ]
        }, 
        {
          "locn": "-204,9 +207,15", 
          "lines": [
            "                             continue;\n", 
            "                         }\n", 
            "                     } else {\n", 
            "-                        // Currently only Address Endpoint delivery is supported\n", 
            "-                        log.warn(\"Address Endpoint Named \" + targetEp + \" not found.Hence removing \" +\n", 
            "-                                \"the message form store\");\n", 
            "+                        String logMsg;\n", 
            "+                        if (ep == null) {\n", 
            "+                            logMsg = \"Endpoint named \" + targetEp + \" not found.Hence removing \" +\n", 
            "+                                    \"the message form store\";\n", 
            "+                        } else {\n", 
            "+                            logMsg = \"Unsupported endpoint type. Only address/wsdl/default \" +\n", 
            "+                                    \"endpoint types supported\";\n", 
            "+                        }\n", 
            "+                        log.warn(logMsg);\n", 
            "                         messageStore.poll();\n", 
            "                     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-229,29 +238,6", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-\n", 
            "-    private BlockingMessageSender initMessageSender(Map<String, Object> params) {\n", 
            "-\n", 
            "-        BlockingMessageSender sender = null;\n", 
            "-        String axis2repo = (String) params.get(ForwardingProcessorConstants.AXIS2_REPO);\n", 
            "-        String axis2Config = (String) params.get(ForwardingProcessorConstants.AXIS2_CONFIG);\n", 
            "-\n", 
            "-        sender = new BlockingMessageSender();\n", 
            "-\n", 
            "-        if (axis2repo != null) {\n", 
            "-            sender.setClientRepository(axis2repo);\n", 
            "-        }\n", 
            "-\n", 
            "-\n", 
            "-        if (axis2Config != null) {\n", 
            "-            sender.setAxis2xml(axis2Config);\n", 
            "-        }\n", 
            "-        sender.init();\n", 
            "-\n", 
            "-        return sender;\n", 
            "-    }\n", 
            "-\n", 
            "-\n", 
            "     /**\n", 
            "      * Helper method to get a value of a parameters in the AxisConfiguration\n", 
            "      *\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/message/processors/forward/ForwardingJob.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/message/processors/forward/ForwardingJob.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,21 +16,19", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.message.processors.forward;\n", 
            " \n", 
            " import org.apache.axiom.soap.SOAPEnvelope;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.synapse.Mediator;\n", 
            " import org.apache.synapse.MessageContext;\n", 
            "-import org.apache.synapse.SynapseArtifact;\n", 
            "+import org.apache.synapse.SynapseConstants;\n", 
            " import org.apache.synapse.SynapseException;\n", 
            "+import org.apache.synapse.core.axis2.Axis2BlockingClient;\n", 
            " import org.apache.synapse.core.axis2.Axis2MessageContext;\n", 
            "-import org.apache.synapse.endpoints.AddressEndpoint;\n", 
            "+import org.apache.synapse.endpoints.AbstractEndpoint;\n", 
            " import org.apache.synapse.endpoints.Endpoint;\n", 
            "-import org.apache.synapse.message.processors.MessageProcessor;\n", 
            "-import org.apache.synapse.message.processors.ScheduledMessageProcessor;\n", 
            "-import org.apache.synapse.message.store.AbstractMessageStore;\n", 
            " import org.apache.synapse.message.store.MessageStore;\n", 
            " \n", 
            " import java.util.ArrayList;\n"
          ]
        }, 
        {
          "locn": "-39,29 +37,26", 
          "lines": [
            " \n", 
            " public class MessageForwardingProcessorView implements MessageForwardingProcessorViewMBean {\n", 
            " \n", 
            "+    private static final Log log = LogFactory.getLog(MessageForwardingProcessorView.class);\n", 
            "+\n", 
            "     private MessageStore messageStore;\n", 
            "-\n", 
            "-    private BlockingMessageSender sender;\n", 
            "-\n", 
            "+    private Axis2BlockingClient sender;\n", 
            "     private ScheduledMessageForwardingProcessor processor;\n", 
            "-    private static Log log = LogFactory.getLog(MessageForwardingProcessorView.class);\n", 
            " \n", 
            "-\n", 
            "-    public MessageForwardingProcessorView(MessageStore messageStore, BlockingMessageSender sender,\n", 
            "-                                          ScheduledMessageForwardingProcessor processor)\n", 
            "-            throws Exception {\n", 
            "+    public MessageForwardingProcessorView(MessageStore messageStore, Axis2BlockingClient sender,\n", 
            "+                                          ScheduledMessageForwardingProcessor processor) {\n", 
            "         if (messageStore != null) {\n", 
            "             this.messageStore = messageStore;\n", 
            "         } else {\n", 
            "-            throw new Exception(\"Error , Can not create Message Forwarding Processor \" +\n", 
            "-                    \"view with null \" + \"message store\");\n", 
            "+            throw new SynapseException(\"Cannot create Message Forwarding Processor \" +\n", 
            "+                    \"view with null message store\");\n", 
            "         }\n", 
            " \n", 
            "         if (sender != null) {\n", 
            "             this.sender = sender;\n", 
            "         } else {\n", 
            "-            throw new Exception(\"Error , Can not create Message Forwarding Processor \" +\n", 
            "-                    \"view with null \" + \"Message Sender\");\n", 
            "+            throw new SynapseException(\"Cannot create Message Forwarding Processor \" +\n", 
            "+                    \"view with null message sender\");\n", 
            "         }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-68,8 +63,8", 
          "lines": [
            "         if (processor != null) {\n", 
            "             this.processor = processor;\n", 
            "         } else {\n", 
            "-            throw new SynapseException(\"Error , Can not create Message Forwarding Processor \" +\n", 
            "-                    \"view with null \" + \"Message Processor\");\n", 
            "+            throw new SynapseException(\"Cannot create Message Forwarding Processor \" +\n", 
            "+                    \"view with null message processor\");\n", 
            "         }\n", 
            " \n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-186,23 +181,18", 
          "lines": [
            "         if (messageContext != null) {\n", 
            "             Set proSet = messageContext.getPropertyKeySet();\n", 
            " \n", 
            "-            if (proSet != null) {\n", 
            "-                if (proSet.contains(ForwardingProcessorConstants.BLOCKING_SENDER_ERROR)) {\n", 
            "-                    proSet.remove(ForwardingProcessorConstants.BLOCKING_SENDER_ERROR);\n", 
            "-                }\n", 
            "+            if (proSet != null && proSet.contains(SynapseConstants.BLOCKING_CLIENT_ERROR)) {\n", 
            "+                proSet.remove(SynapseConstants.BLOCKING_CLIENT_ERROR);\n", 
            "             }\n", 
            " \n", 
            "-            String targetEp =\n", 
            "-                    (String) messageContext.getProperty(ForwardingProcessorConstants.TARGET_ENDPOINT);\n", 
            "+            String targetEp = (String) messageContext.getProperty(\n", 
            "+                    ForwardingProcessorConstants.TARGET_ENDPOINT);\n", 
            " \n", 
            "             if (targetEp != null) {\n", 
            "                 Endpoint ep = messageContext.getEndpoint(targetEp);\n", 
            "-\n", 
            "-                if (ep instanceof AddressEndpoint) {\n", 
            "-\n", 
            "+                if ((ep != null) && (((AbstractEndpoint) ep).isLeafEndpoint())) {\n", 
            "                     try {\n", 
            "-                        MessageContext outCtx = sender.send(\n", 
            "-                                ((AddressEndpoint) ep).getDefinition(), messageContext);\n", 
            "+                        sender.send(ep, messageContext);\n", 
            "                         // If no Exception Occurred We remove the Message\n", 
            "                         if (delete) {\n", 
            "                             messageStore.poll();\n"
          ]
        }, 
        {
          "locn": "-212,10 +202,15", 
          "lines": [
            "                         throw new Exception(e);\n", 
            "                     }\n", 
            "                 } else {\n", 
            "-                    // Currently only Address Endpoint delivery is supported\n", 
            "-                    String logMsg = \"Address Endpoint Named \" + targetEp +\n", 
            "-                            \" not found.Hence removing \" +\n", 
            "-                            \"the message form store\";\n", 
            "+                    String logMsg;\n", 
            "+                    if (ep == null) {\n", 
            "+                        logMsg = \"Endpoint named \" + targetEp + \"not found. Hence removing \" +\n", 
            "+                                \"the message form store\";\n", 
            "+                    } else {\n", 
            "+                        logMsg = \"Unsupported endpoint type. Only address/wsdl/default endpoint \" +\n", 
            "+                                \"types supported\";\n", 
            "+                    }\n", 
            "+\n", 
            "                     log.warn(logMsg);\n", 
            "                     if (delete) {\n", 
            "                         messageStore.poll();\n"
          ]
        }, 
        {
          "locn": "-223,7 +218,6", 
          "lines": [
            "                     throw new Exception(logMsg);\n", 
            "                 }\n", 
            " \n", 
            "-\n", 
            "             } else {\n", 
            "                 //No Target Endpoint defined for the Message\n", 
            "                 //So we do not have a place to deliver.\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/message/processors/forward/MessageForwardingProcessorView.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/message/processors/forward/MessageForwardingProcessorView.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-19,12 +19,11", 
          "lines": [
            " \n", 
            " package org.apache.synapse.message.processors.forward;\n", 
            " \n", 
            "-import org.apache.synapse.SynapseException;\n", 
            " import org.apache.synapse.core.SynapseEnvironment;\n", 
            "+import org.apache.synapse.core.axis2.Axis2BlockingClient;\n", 
            " import org.apache.synapse.message.processors.ScheduledMessageProcessor;\n", 
            " import org.quartz.*;\n", 
            " \n", 
            "-import java.util.Map;\n", 
            " import java.util.concurrent.atomic.AtomicBoolean;\n", 
            " import java.util.concurrent.atomic.AtomicInteger;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-36,9 +35,8", 
          "lines": [
            " \n", 
            "     public static final String BLOCKING_SENDER = \"blocking.sender\";\n", 
            " \n", 
            "+    private Axis2BlockingClient sender = null;\n", 
            " \n", 
            "-    private BlockingMessageSender sender = null;\n", 
            "-\n", 
            "     private volatile AtomicBoolean active = new AtomicBoolean(true);\n", 
            " \n", 
            "     private volatile AtomicInteger sendAttempts = new AtomicInteger(0);\n"
          ]
        }, 
        {
          "locn": "-48,13 +46,8", 
          "lines": [
            "     @Override\n", 
            "     public void init(SynapseEnvironment se) {\n", 
            "         super.init(se);\n", 
            "-        try {\n", 
            "-            view = new MessageForwardingProcessorView(\n", 
            "-                    se.getSynapseConfiguration().getMessageStore(messageStore),sender,this);\n", 
            "-        } catch (Exception e) {\n", 
            "-            throw new SynapseException(e);\n", 
            "-        }\n", 
            "-\n", 
            "+        view = new MessageForwardingProcessorView(\n", 
            "+                se.getSynapseConfiguration().getMessageStore(messageStore), getSender(), this);\n", 
            "         org.apache.synapse.commons.jmx.MBeanRegistrar.getInstance().registerMBean(view,\n", 
            "                 \"Message Forwarding Processor view\", getName());\n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-68,40 +61,20", 
          "lines": [
            "     @Override\n", 
            "     protected JobDataMap getJobDataMap() {\n", 
            "         JobDataMap jdm = new JobDataMap();\n", 
            "-        sender = initMessageSender(parameters);\n", 
            "-        jdm.put(BLOCKING_SENDER,sender);\n", 
            "+        jdm.put(BLOCKING_SENDER, getSender());\n", 
            "         jdm.put(PROCESSOR_INSTANCE,this);\n", 
            "         return jdm;\n", 
            "     }\n", 
            " \n", 
            "-     private BlockingMessageSender initMessageSender(Map<String ,Object> params) {\n", 
            "-\n", 
            "-        String axis2repo = (String) params.get(ForwardingProcessorConstants.AXIS2_REPO);\n", 
            "-        String axis2Config = (String) params.get(ForwardingProcessorConstants.AXIS2_CONFIG);\n", 
            "-\n", 
            "-        sender = new BlockingMessageSender();\n", 
            "-\n", 
            "-        if(axis2repo != null) {\n", 
            "-            sender.setClientRepository(axis2repo);\n", 
            "+    private synchronized Axis2BlockingClient getSender() {\n", 
            "+        if (sender != null) {\n", 
            "+            return sender;\n", 
            "         }\n", 
            "-\n", 
            "-\n", 
            "-        if(axis2Config != null) {\n", 
            "-            sender.setAxis2xml(axis2Config);\n", 
            "-        }\n", 
            "-        sender.init();\n", 
            "-\n", 
            "-        return sender;\n", 
            "+        String axis2repo = (String) parameters.get(ForwardingProcessorConstants.AXIS2_REPO);\n", 
            "+        String axis2Config = (String) parameters.get(ForwardingProcessorConstants.AXIS2_CONFIG);\n", 
            "+        return new Axis2BlockingClient(axis2repo, axis2Config);\n", 
            "     }\n", 
            " \n", 
            "-    public BlockingMessageSender getSender() {\n", 
            "-        return sender;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setSender(BlockingMessageSender sender) {\n", 
            "-        this.sender = sender;\n", 
            "-    }\n", 
            "-\n", 
            "     public boolean isActive() {\n", 
            "         return active.get();\n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-140,7 +113,8", 
          "lines": [
            " \n", 
            "     /**\n", 
            "      * Return the JMS view of Message Processor\n", 
            "-     * @return\n", 
            "+     *\n", 
            "+     * @return MessageForwardingProcessorView\n", 
            "      */\n", 
            "     public MessageForwardingProcessorView getView() {\n", 
            "         return view;\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/message/processors/forward/ScheduledMessageForwardingProcessor.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/message/processors/forward/ScheduledMessageForwardingProcessor.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-262,6 +262,7", 
          "lines": [
            "                         <li><a href=\"samples/sample701.html\">Sample 701: Introduction to Message Sampling Processor</a></li>\n", 
            "                         <li><a href=\"samples/sample702.html\">Sample 702: Introduction to Message Forwarding Processor</a></li>\n", 
            "                         <li><a href=\"samples/sample703.html\">Sample 703: Introduction to Message Resequencing Processor</a></li>\n", 
            "+                        <li><a href=\"samples/sample704.html\">Sample 704: Invoke Secured Services with Scheduled Message Forwarding Processor</a></li>\n", 
            "                     </ul>\n", 
            "                 </p>\n", 
            "             </subsection>\n"
          ]
        }
      ], 
      "to": "java/modules/documentation/src/site/xdoc/userguide/samples.xml", 
      "from": "java/modules/documentation/src/site/xdoc/userguide/samples.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,115", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<document>\n", 
            "+    <properties>\n", 
            "+        <title>Apache Synapse - Sample 704</title>\n", 
            "+    </properties>\n", 
            "+    <body>\n", 
            "+        <section name=\"Sample 704: Invoke Secured Services with Scheduled Message Forwarding Processor\">\n", 
            "+            <div class=\"xmlConf\">&lt;!-- Invoke Secured Services with Scheduled Message Forwarding Processor --&gt;\n", 
            "+                &lt;definitions xmlns=\"http://ws.apache.org/ns/synapse\"&gt;\n", 
            "+                    &lt;localEntry key=\"sec_policy\" src=\"file:repository/conf/sample/resources/policy/policy_3.xml\"/&gt;\n", 
            "+                    &lt;endpoint name=\"SecuredStockQuoteServiceEp\"&gt;\n", 
            "+                        &lt;address uri=\"http://localhost:9000/services/SecureStockQuoteService\"&gt;\n", 
            "+                            &lt;suspendOnFailure&gt;\n", 
            "+                                &lt;errorCodes&gt;-1&lt;/errorCodes&gt;\n", 
            "+                                &lt;progressionFactor&gt;1.0&lt;/progressionFactor&gt;\n", 
            "+                            &lt;/suspendOnFailure&gt;\n", 
            "+                            &lt;enableSec policy=\"sec_policy\"/&gt;\n", 
            "+                        &lt;/address&gt;\n", 
            "+                    &lt;/endpoint&gt;\n", 
            "+                    &lt;sequence name=\"fault\"&gt;\n", 
            "+                        &lt;log level=\"full\"&gt;\n", 
            "+                            &lt;property name=\"MESSAGE\" value=\"Executing default 'fault' sequence\"/&gt;\n", 
            "+                            &lt;property name=\"ERROR_CODE\" expression=\"get-property('ERROR_CODE')\"/&gt;\n", 
            "+                            &lt;property name=\"ERROR_MESSAGE\" expression=\"get-property('ERROR_MESSAGE')\"/&gt;\n", 
            "+                        &lt;/log&gt;\n", 
            "+                        &lt;drop/&gt;\n", 
            "+                    &lt;/sequence&gt;\n", 
            "+                    &lt;sequence name=\"main\"&gt;\n", 
            "+                        &lt;in&gt;\n", 
            "+                            &lt;log level=\"full\"/&gt;\n", 
            "+                            &lt;property name=\"FORCE_SC_ACCEPTED\" value=\"true\" scope=\"axis2\"/&gt;\n", 
            "+                            &lt;property name=\"OUT_ONLY\" value=\"true\"/&gt;\n", 
            "+                            &lt;property name=\"target.endpoint\" value=\"SecuredStockQuoteServiceEp\"/&gt;\n", 
            "+                            &lt;store messageStore=\"MyStore\"/&gt;\n", 
            "+                        &lt;/in&gt;\n", 
            "+                        &lt;description&gt;The main sequence for the message mediation&lt;/description&gt;\n", 
            "+                    &lt;/sequence&gt;\n", 
            "+                    &lt;messageStore name=\"MyStore\"/&gt;\n", 
            "+                    &lt;messageProcessor class=\"org.apache.synapse.message.processors.forward.ScheduledMessageForwardingProcessor\" name=\"ScheduledProcessor\" messageStore=\"MyStore\"&gt;\n", 
            "+                        &lt;parameter name=\"interval\"&gt;10000&lt;/parameter&gt;\n", 
            "+                    &lt;/messageProcessor&gt;\n", 
            "+                &lt;/definitions&gt;\n", 
            "+            </div>\n", 
            "+            <subsection name=\"Objective\">\n", 
            "+                <p>\n", 
            "+                    Invoke Secured Services with Scheduled Message Forwarding Processor\n", 
            "+                </p>\n", 
            "+            </subsection>\n", 
            "+            <subsection name=\"Pre-requisites\">\n", 
            "+                <p>\n", 
            "+                    <ul>\n", 
            "+                        <li>\n", 
            "+                            Download and install the Java Cryptography Extension (JCE) unlimited\n", 
            "+                            strength policy files for your JDK\n", 
            "+                        </li>\n", 
            "+                        <li>\n", 
            "+                            Start Synapse using the configuration numbered 704 (repository/conf/sample/synapse_sample_704.xml)\n", 
            "+                            <div class=\"command\">\n", 
            "+                                Unix/Linux: sh synapse.sh -sample 704<br/>\n", 
            "+                                Windows: synapse.bat -sample 704\n", 
            "+                            </div>\n", 
            "+                        </li>\n", 
            "+                    </ul>\n", 
            "+                </p>\n", 
            "+            </subsection>\n", 
            "+            <subsection name=\"Executing the Client\">\n", 
            "+                <p>\n", 
            "+                    Execute the sample client a few times with the following command. Note that\n", 
            "+                    we still haven't started the sample Axis2 server.\n", 
            "+                </p>\n", 
            "+                <div class=\"command\">\n", 
            "+                    ant stockquote -Daddurl=http://localhost:8280/ -Dmode=placeorder\n", 
            "+                </div>\n", 
            "+\n", 
            "+                <p>\n", 
            "+                    Deploy the SecureStockQuoteService in the sample Axis2 server and start Axis2.\n", 
            "+                </p>\n", 
            "+                <p>\n", 
            "+                    When you start the service you will see messages getting delivered to the service,\n", 
            "+                    even though the service was actually down when we invoked the sample client.\n", 
            "+                </p>\n", 
            "+                <p>\n", 
            "+                    Here in the 'main' sequence, store mediator will store the placeOrder request\n", 
            "+                    message in the 'MyStore' message store.\n", 
            "+                    Message processor will send the message to the secured backend service using the defined endpoint.\n", 
            "+                    Endpoint is configured to use WS-Security.\n", 
            "+                    Message processor will remove the message from the store only if the message is delivered\n", 
            "+                    successfully.\n", 
            "+                </p>\n", 
            "+            </subsection>\n", 
            "+        </section>\n", 
            "+        <p>\n", 
            "+            <a href=\"../samples.html\">Back to Catalog</a>\n", 
            "+        </p>\n", 
            "+    </body>\n", 
            "+</document>\n"
          ]
        }
      ], 
      "to": "java/modules/documentation/src/site/xdoc/userguide/samples/sample704.xml", 
      "from": "java/modules/documentation/src/site/xdoc/userguide/samples/sample704.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,56", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+        <!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Invoke Secured Services with Scheduled Message Forwarding Processor -->\n", 
            "+\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+    <localEntry key=\"sec_policy\" src=\"file:repository/conf/sample/resources/policy/policy_3.xml\"/>\n", 
            "+    <endpoint name=\"SecuredStockQuoteServiceEp\">\n", 
            "+        <address uri=\"http://localhost:9000/services/SecureStockQuoteService\">\n", 
            "+            <suspendOnFailure>\n", 
            "+                <errorCodes>-1</errorCodes>\n", 
            "+                <progressionFactor>1.0</progressionFactor>\n", 
            "+            </suspendOnFailure>\n", 
            "+            <enableSec policy=\"sec_policy\"/>\n", 
            "+        </address>\n", 
            "+    </endpoint>\n", 
            "+    <sequence name=\"fault\">\n", 
            "+        <log level=\"full\">\n", 
            "+            <property name=\"MESSAGE\" value=\"Executing default 'fault' sequence\"/>\n", 
            "+            <property name=\"ERROR_CODE\" expression=\"get-property('ERROR_CODE')\"/>\n", 
            "+            <property name=\"ERROR_MESSAGE\" expression=\"get-property('ERROR_MESSAGE')\"/>\n", 
            "+        </log>\n", 
            "+        <drop/>\n", 
            "+    </sequence>\n", 
            "+    <sequence name=\"main\">\n", 
            "+        <in>\n", 
            "+            <log level=\"full\"/>\n", 
            "+            <property name=\"FORCE_SC_ACCEPTED\" value=\"true\" scope=\"axis2\"/>\n", 
            "+            <property name=\"OUT_ONLY\" value=\"true\"/>\n", 
            "+            <property name=\"target.endpoint\" value=\"SecuredStockQuoteServiceEp\"/>\n", 
            "+            <store messageStore=\"MyStore\"/>\n", 
            "+        </in>\n", 
            "+        <description>The main sequence for the message mediation</description>\n", 
            "+    </sequence>\n", 
            "+    <messageStore name=\"MyStore\"/>\n", 
            "+    <messageProcessor class=\"org.apache.synapse.message.processors.forward.ScheduledMessageForwardingProcessor\" name=\"ScheduledProcessor\" messageStore=\"MyStore\">\n", 
            "+        <parameter name=\"interval\">10000</parameter>\n", 
            "+    </messageProcessor>\n", 
            "+</definitions>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/repository/conf/sample/synapse_sample_704.xml", 
      "from": "java/repository/conf/sample/synapse_sample_704.xml"
    }
  ], 
  "id": "1517081"
}