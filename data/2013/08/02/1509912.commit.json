{
  "when": "2013-08-02T19:28:09-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-1,102 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.passthru.jmx;\n", 
            "-\n", 
            "-import org.apache.axis2.AxisFault;\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-\n", 
            "-import javax.management.MBeanServer;\n", 
            "-import javax.management.ObjectName;\n", 
            "-import java.lang.management.ManagementFactory;\n", 
            "-import java.util.Set;\n", 
            "-\n", 
            "-public class MBeanRegistrar {\n", 
            "-\n", 
            "-    private static final MBeanRegistrar ourInstance = new MBeanRegistrar();\n", 
            "-    private static final Log log = LogFactory.getLog(MBeanRegistrar.class);\n", 
            "-\n", 
            "-    public static MBeanRegistrar getInstance() {\n", 
            "-        return ourInstance;\n", 
            "-    }\n", 
            "-\n", 
            "-    private MBeanRegistrar() {\n", 
            "-    }\n", 
            "-\n", 
            "-    public void registerMBean(Object mBeanInstance, String category, String id) throws AxisFault {\n", 
            "-        assertNull(mBeanInstance, \"MBean instance is null\");\n", 
            "-        assertNull(category, \"MBean instance category is null\");\n", 
            "-        assertNull(id, \"MBean instance name is null\");\n", 
            "-        try {\n", 
            "-            MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n", 
            "-            ObjectName name = new ObjectName(getObjectName(category, id));\n", 
            "-            Set set = mbs.queryNames(name, null);\n", 
            "-            if (set != null && set.isEmpty()) {\n", 
            "-                mbs.registerMBean(mBeanInstance, name);\n", 
            "-            } else {\n", 
            "-                mbs.unregisterMBean(name);\n", 
            "-                mbs.registerMBean(mBeanInstance, name);\n", 
            "-            }\n", 
            "-        } catch (Exception e) {\n", 
            "-            log.warn(\"Error registering a MBean with name ' \" + id +\n", 
            "-                    \" ' and category name ' \" + category + \"' for JMX management\", e);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void unRegisterMBean(String category, String id) {\n", 
            "-        try {\n", 
            "-            MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n", 
            "-            ObjectName objName = new ObjectName(getObjectName(category, id));\n", 
            "-            if (mbs.isRegistered(objName)) {\n", 
            "-                mbs.unregisterMBean(objName);\n", 
            "-            }\n", 
            "-        } catch (Exception e) {\n", 
            "-            log.warn(\"Error un-registering a  MBean with name ' \" + id +\n", 
            "-                    \" ' and category name ' \" + category + \"' for JMX management\", e);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    private String getObjectName(String category, String id) {\n", 
            "-\n", 
            "-        String jmxAgentName = System.getProperty(\"jmx.agent.name\");\n", 
            "-        if (jmxAgentName == null || \"\".equals(jmxAgentName)) {\n", 
            "-            jmxAgentName = \"org.apache.synapse\";\n", 
            "-        }\n", 
            "-        return jmxAgentName + \":Type=\" + category + \",Name=\" + id;\n", 
            "-    }\n", 
            "-\n", 
            "-    private void assertNull(String name, String msg) throws AxisFault {\n", 
            "-        if (name == null || \"\".equals(name)) {\n", 
            "-            handleException(msg);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    private void assertNull(Object object, String msg) throws AxisFault {\n", 
            "-        if (object == null) {\n", 
            "-            handleException(msg);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    private static void handleException(String msg) throws AxisFault {\n", 
            "-        log.error(msg);\n", 
            "-        throw new AxisFault(msg);\n", 
            "-    }\n", 
            "-\n", 
            "-}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/jmx/MBeanRegistrar.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/jmx/MBeanRegistrar.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-45,8 +45,8", 
          "lines": [
            " import org.apache.http.nio.reactor.ListenerEndpoint;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            "+import org.apache.synapse.commons.jmx.MBeanRegistrar;\n", 
            " import org.apache.synapse.transport.passthru.config.SourceConfiguration;\n", 
            "-import org.apache.synapse.transport.passthru.jmx.MBeanRegistrar;\n", 
            " import org.apache.synapse.transport.passthru.jmx.PassThroughTransportMetricsCollector;\n", 
            " import org.apache.synapse.transport.passthru.jmx.TransportView;\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpListener.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpListener.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-50,6 +50,7", 
          "lines": [
            " import org.apache.http.nio.reactor.IOReactorExceptionHandler;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            "+import org.apache.synapse.commons.jmx.MBeanRegistrar;\n", 
            " import org.apache.synapse.transport.nhttp.NhttpConstants;\n", 
            " import org.apache.synapse.transport.nhttp.util.MessageFormatterDecoratorFactory;\n", 
            " import org.apache.synapse.transport.nhttp.util.NhttpUtil;\n"
          ]
        }, 
        {
          "locn": "-56,7 +57,6", 
          "lines": [
            " import org.apache.synapse.transport.passthru.config.SourceConfiguration;\n", 
            " import org.apache.synapse.transport.passthru.config.TargetConfiguration;\n", 
            " import org.apache.synapse.transport.passthru.connections.TargetConnections;\n", 
            "-import org.apache.synapse.transport.passthru.jmx.MBeanRegistrar;\n", 
            " import org.apache.synapse.transport.passthru.jmx.PassThroughTransportMetricsCollector;\n", 
            " import org.apache.synapse.transport.passthru.jmx.TransportView;\n", 
            " import org.apache.synapse.transport.passthru.util.PassThroughTransportUtils;\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-20,6 +20,7", 
          "lines": [
            " package org.apache.synapse.transport.passthru.jmx;\n", 
            " \n", 
            " import org.apache.axis2.AxisFault;\n", 
            "+import org.apache.synapse.commons.jmx.MBeanRegistrar;\n", 
            " \n", 
            " import java.util.*;\n", 
            " import java.util.concurrent.Executors;\n"
          ]
        }, 
        {
          "locn": "-104,13 +105,22", 
          "lines": [
            "         scheduler.scheduleAtFixedRate(longTermCollector, LONG_DATA_COLLECTION_PERIOD,\n", 
            "                 LONG_DATA_COLLECTION_PERIOD, TimeUnit.SECONDS);\n", 
            " \n", 
            "-        MBeanRegistrar.getInstance().registerMBean(this, PASS_THROUGH_CONNECTIONS, name);\n", 
            "+        boolean registered = false;\n", 
            "+        try {\n", 
            "+            registered = MBeanRegistrar.getInstance().registerMBean(this, PASS_THROUGH_CONNECTIONS, name);\n", 
            "+        } finally {\n", 
            "+            if (!registered) {\n", 
            "+                scheduler.shutdownNow();\n", 
            "+            }\n", 
            "+        }\n", 
            " \n", 
            "     }\n", 
            " \n", 
            "     public void destroy() {\n", 
            "         MBeanRegistrar.getInstance().unRegisterMBean(PASS_THROUGH_CONNECTIONS, name);\n", 
            "-        scheduler.shutdownNow();\n", 
            "+        if (!scheduler.isShutdown()) {\n", 
            "+            scheduler.shutdownNow();\n", 
            "+        }\n", 
            "     }\n", 
            " \n", 
            "     private void initCounters(AtomicInteger[] counters) {\n"
          ]
        }, 
        {
          "locn": "-230,8 +240,8", 
          "lines": [
            "         Integer[] array = shortTermDataQueue.toArray(new Integer[shortTermDataQueue.size()]);\n", 
            " \n", 
            "         if (n > array.length) {\n", 
            "-            for (int i = 0; i < array.length; i++) {\n", 
            "-                sum += array[i];\n", 
            "+            for (Integer anArray : array) {\n", 
            "+                sum += anArray;\n", 
            "             }\n", 
            "         } else {\n", 
            "             for (int i = 0; i < n; i++) {\n"
          ]
        }, 
        {
          "locn": "-254,8 +264,8", 
          "lines": [
            "         Integer[] array = longTermDataQueue.toArray(new Integer[longTermDataQueue.size()]);\n", 
            " \n", 
            "         if (samples > array.length) {\n", 
            "-            for (int i = 0; i < array.length; i++) {\n", 
            "-                sum += array[i];\n", 
            "+            for (Integer anArray : array) {\n", 
            "+                sum += anArray;\n", 
            "             }\n", 
            "         } else {\n", 
            "             for (int i = 0; i < samples; i++) {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/jmx/ConnectionsView.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/jmx/ConnectionsView.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-20,6 +20,7", 
          "lines": [
            " package org.apache.synapse.transport.passthru.jmx;\n", 
            " \n", 
            " import org.apache.axis2.AxisFault;\n", 
            "+import org.apache.synapse.commons.jmx.MBeanRegistrar;\n", 
            " \n", 
            " import java.util.Calendar;\n", 
            " import java.util.Date;\n"
          ]
        }, 
        {
          "locn": "-101,13 +102,21", 
          "lines": [
            "         scheduler.scheduleAtFixedRate(new LongTermDataCollector(), LARGE_DATA_COLLECTION_PERIOD,\n", 
            "                 LARGE_DATA_COLLECTION_PERIOD, TimeUnit.SECONDS);\n", 
            " \n", 
            "-        MBeanRegistrar.getInstance().registerMBean(this, NHTTP_LATENCY_VIEW, name);\n", 
            "-\n", 
            "+        boolean registered = false;\n", 
            "+        try {\n", 
            "+            registered = MBeanRegistrar.getInstance().registerMBean(this, NHTTP_LATENCY_VIEW, name);\n", 
            "+        } finally {\n", 
            "+            if (!registered) {\n", 
            "+                scheduler.shutdownNow();\n", 
            "+            }\n", 
            "+        }\n", 
            "     }\n", 
            " \n", 
            "     public void destroy() {\n", 
            "         MBeanRegistrar.getInstance().unRegisterMBean(NHTTP_LATENCY_VIEW, name);\n", 
            "-        scheduler.shutdownNow();\n", 
            "+        if (!scheduler.isShutdown()) {\n", 
            "+            scheduler.shutdownNow();\n", 
            "+        }\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/jmx/LatencyView.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/jmx/LatencyView.java"
    }
  ], 
  "id": "1509912"
}