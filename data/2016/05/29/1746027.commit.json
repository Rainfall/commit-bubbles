{
  "when": "2016-05-29T11:54:01-04:00", 
  "message": "SYNAPSE-1027: Fix a performance regression caused by pass through related code. Patch provided by Auke Schrijnen. Also update the Axis2 version to 1.7.3-SNAPSHOT since the unit test depends on a fix in the Axis2 transport testkit.\n", 
  "who": "veithen", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-0,0 +1,102", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.transport.passthru.util;\n", 
            "+\n", 
            "+import static org.junit.Assert.*;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+import java.io.InputStream;\n", 
            "+import java.io.StringReader;\n", 
            "+import java.nio.charset.Charset;\n", 
            "+\n", 
            "+import javax.xml.namespace.QName;\n", 
            "+import javax.xml.stream.XMLStreamException;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axiom.om.OMXMLBuilderFactory;\n", 
            "+import org.apache.axiom.soap.SOAPEnvelope;\n", 
            "+import org.apache.axis2.context.ConfigurationContext;\n", 
            "+import org.apache.axis2.context.MessageContext;\n", 
            "+import org.apache.axis2.engine.AxisConfiguration;\n", 
            "+import org.apache.commons.io.input.ReaderInputStream;\n", 
            "+import org.junit.Before;\n", 
            "+import org.junit.Test;\n", 
            "+\n", 
            "+public class RelayUtilsTest {\n", 
            "+\n", 
            "+    private static final Charset UTF8 = Charset.forName(\"UTF-8\");\n", 
            "+\n", 
            "+    private final String xml =\n", 
            "+            \"<s:Envelope xmlns:s='http://schemas.xmlsoap.org/soap/envelope/'>\"\n", 
            "+            + \"<s:Body><payload><data>value</data></payload></s:Body>\"\n", 
            "+            + \"</s:Envelope>\";\n", 
            "+\n", 
            "+    private final QName payloadQName = new QName(\"payload\");\n", 
            "+\n", 
            "+    MessageContext msgCtx;\n", 
            "+\n", 
            "+    @Before\n", 
            "+    public void setUp() throws Exception {\n", 
            "+        msgCtx = new MessageContext();\n", 
            "+\n", 
            "+        AxisConfiguration configuration = new AxisConfiguration();\n", 
            "+        ConfigurationContext context = new ConfigurationContext(configuration);\n", 
            "+        msgCtx.setConfigurationContext(context);\n", 
            "+    }\n", 
            "+\n", 
            "+    @Test\n", 
            "+    public void testSOAPBodyIsntFullyReadWhenNotUsingBinaryRelayBuilder()\n", 
            "+            throws IOException, XMLStreamException {\n", 
            "+\n", 
            "+        SOAPEnvelope envelope = OMXMLBuilderFactory\n", 
            "+                .createSOAPModelBuilder(new StringReader(xml)).getSOAPEnvelope();\n", 
            "+\n", 
            "+        msgCtx.setEnvelope(envelope);\n", 
            "+\n", 
            "+        // Build message when using pass through pipe or binary relay builder\n", 
            "+        RelayUtils.buildMessage(msgCtx);\n", 
            "+\n", 
            "+        // Ensure that the payload element is accessible\n", 
            "+        assertEquals(payloadQName, msgCtx.getEnvelope().getBody().getFirstElement().getQName());\n", 
            "+\n", 
            "+        // Ensure that the body isn't fully build to support the use of deferred building\n", 
            "+        assertFalse(msgCtx.getEnvelope().getBody().isComplete());\n", 
            "+    }\n", 
            "+\n", 
            "+    @Test\n", 
            "+    public void testBinaryRelayPayloadExpandsToOriginalPayload()\n", 
            "+            throws IOException, XMLStreamException {\n", 
            "+\n", 
            "+        // Transform request soap message into a binary payload\n", 
            "+        BinaryRelayBuilder builder = new BinaryRelayBuilder();\n", 
            "+        InputStream stream = new ReaderInputStream(new StringReader(xml), UTF8);\n", 
            "+        OMElement element = builder.processDocument(stream, \"text/xml\", msgCtx);\n", 
            "+        msgCtx.setEnvelope((SOAPEnvelope)element);\n", 
            "+\n", 
            "+        // Build message when using pass through pipe or binary relay builder\n", 
            "+        RelayUtils.buildMessage(msgCtx);\n", 
            "+\n", 
            "+        // Ensure that the binary payload is transformed to the appropriate element\n", 
            "+        assertEquals(payloadQName, msgCtx.getEnvelope().getBody().getFirstElement().getQName());\n", 
            "+\n", 
            "+        // Ensure that the body isn't fully build to support the use of deferred building\n", 
            "+        assertFalse(msgCtx.getEnvelope().getBody().isComplete());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/test/java/org/apache/synapse/transport/passthru/util/RelayUtilsTest.java", 
      "from": "java/modules/transports/core/nhttp/src/test/java/org/apache/synapse/transport/passthru/util/RelayUtilsTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-42,6 +42,7", 
          "lines": [
            " \n", 
            " import javax.activation.DataHandler;\n", 
            " import javax.activation.DataSource;\n", 
            "+import javax.xml.namespace.QName;\n", 
            " import javax.xml.stream.XMLStreamException;\n", 
            " \n", 
            " import java.io.BufferedInputStream;\n"
          ]
        }, 
        {
          "locn": "-88,10 +89,20", 
          "lines": [
            "         }\n", 
            " \n", 
            "         SOAPEnvelope envelope = messageContext.getEnvelope();\n", 
            "-        OMElement contentEle = envelope.getBody().getFirstChildWithName(\n", 
            "-                RelayConstants.BINARY_CONTENT_QNAME);\n", 
            " \n", 
            "-        if (contentEle != null) {\n", 
            "+        QName firstElementQName;\n", 
            "+        if (envelope.getSOAPBodyFirstElementNS() != null) {\n", 
            "+            firstElementQName = new QName(\n", 
            "+                    envelope.getSOAPBodyFirstElementNS().getNamespaceURI(),\n", 
            "+                    envelope.getSOAPBodyFirstElementLocalName());\n", 
            "+        } else if (envelope.getSOAPBodyFirstElementLocalName() != null){\n", 
            "+            firstElementQName = new QName(envelope.getSOAPBodyFirstElementLocalName());\n", 
            "+        } else {\n", 
            "+            firstElementQName = null;\n", 
            "+        }\n", 
            "+\n", 
            "+        if (RelayConstants.BINARY_CONTENT_QNAME.equals(firstElementQName)) {\n", 
            "+            OMElement contentEle = envelope.getBody().getFirstElement();\n", 
            "             OMNode node = contentEle.getFirstOMChild();\n", 
            "             if (node != null && (node instanceof OMText)) {\n", 
            "                 OMText binaryDataNode = (OMText) node;\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/RelayUtils.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/RelayUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1035,7 +1035,7", 
          "lines": [
            "         <commons.codec.version>1.6</commons.codec.version>\n", 
            " \n", 
            "         <!-- Axis2 and its dependencies -->\n", 
            "-        <axis2.version>1.7.2</axis2.version>\n", 
            "+        <axis2.version>1.7.3-SNAPSHOT</axis2.version>\n", 
            "         <axiom.version>1.2.19</axiom.version>\n", 
            "         <wsdl4j.version>1.6.2</wsdl4j.version>\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/pom.xml", 
      "from": "java/pom.xml"
    }
  ], 
  "id": "1746027"
}