{
  "when": "2013-09-07T15:43:04-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-144,14 +144,13", 
          "lines": [
            "                 }\n", 
            "                 // load the UserDefined SchemaURIResolver implementations\n", 
            "                 try {\n", 
            "-                \tSynapseConfiguration synCfg = synCtx.getConfiguration();\n", 
            "-                \tif(synCfg.getProperty(SynapseConstants.SYNAPSE_SCHEMA_RESOLVER) !=null){\n", 
            "-                \t\tsetUserDefinedSchemaResourceResolver(synCtx);\n", 
            "-                \t}\n", 
            "-                \telse{\n", 
            "-                \t\tfactory.setResourceResolver(\n", 
            "-                \t\t                            new SchemaResourceResolver(synCtx.getConfiguration(), resourceMap));\n", 
            "-                \t}\n", 
            "+                    SynapseConfiguration synCfg = synCtx.getConfiguration();\n", 
            "+                    if (synCfg.getProperty(SynapseConstants.SYNAPSE_SCHEMA_RESOLVER) != null) {\n", 
            "+                        setUserDefinedSchemaResourceResolver(synCtx);\n", 
            "+                    } else {\n", 
            "+                        factory.setResourceResolver(\n", 
            "+                                new SchemaResourceResolver(synCtx.getConfiguration(), resourceMap));\n", 
            "+                    }\n", 
            "                     cachedSchema = factory.newSchema(sources);\n", 
            "                 } catch (SAXException e) {\n", 
            "                     handleException(\"Error creating a new schema objects for \" +\n"
          ]
        }, 
        {
          "locn": "-183,9 +182,9", 
          "lines": [
            " \n", 
            "                 if (synLog.isTraceOrDebugEnabled()) {\n", 
            "                     String msg = \"Validation of element returned by XPath : \" + source +\n", 
            "-                        \" failed against the given schema(s) \" + schemaKeys +\n", 
            "-                        \"with error : \" + errorHandler.getSaxParseException().getMessage() +\n", 
            "-                        \" Executing 'on-fail' sequence\";\n", 
            "+                            \" failed against the given schema(s) \" + schemaKeys +\n", 
            "+                            \"with error : \" + errorHandler.getSaxParseException().getMessage() +\n", 
            "+                            \" Executing 'on-fail' sequence\";\n", 
            "                     synLog.traceOrDebug(msg);\n", 
            " \n", 
            "                     // write a warning to the service log\n"
          ]
        }, 
        {
          "locn": "-198,11 +197,11", 
          "lines": [
            " \n", 
            "                 // set error message and detail (stack trace) into the message context\n", 
            "                 synCtx.setProperty(SynapseConstants.ERROR_MESSAGE,\n", 
            "-                    errorHandler.getSaxParseException().getMessage());\n", 
            "+                        errorHandler.getSaxParseException().getMessage());\n", 
            "                 synCtx.setProperty(SynapseConstants.ERROR_EXCEPTION,\n", 
            "-                    errorHandler.getSaxParseException());\n", 
            "+                        errorHandler.getSaxParseException());\n", 
            "                 synCtx.setProperty(SynapseConstants.ERROR_DETAIL,\n", 
            "-                    FaultHandler.getStackTrace(errorHandler.getSaxParseException()));\n", 
            "+                        FaultHandler.getStackTrace(errorHandler.getSaxParseException()));\n", 
            " \n", 
            "                 // super.mediate() invokes the \"on-fail\" sequence of mediators\n", 
            "                 return super.mediate(synCtx);\n"
          ]
        }, 
        {
          "locn": "-215,7 +214,7", 
          "lines": [
            " \n", 
            "         if (synLog.isTraceOrDebugEnabled()) {\n", 
            "             synLog.traceOrDebug(\"Validation of element returned by the XPath expression : \"\n", 
            "-                + source + \" succeeded against the given schemas and the current message\");\n", 
            "+                    + source + \" succeeded against the given schemas and the current message\");\n", 
            "             synLog.traceOrDebug(\"End : Validate mediator\");\n", 
            "         }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-224,7 +223,7", 
          "lines": [
            " \n", 
            "     /**\n", 
            "      * UserDefined schema resource resolver\n", 
            "-\n", 
            "+     *\n", 
            "      * @param synCtx message context\n", 
            "      */\n", 
            "     private void setUserDefinedSchemaResourceResolver(MessageContext synCtx) {\n"
          ]
        }, 
        {
          "locn": "-254,12 +253,12", 
          "lines": [
            "             handleException(msg, e, synCtx);\n", 
            "         }\n", 
            "     }\n", 
            "-    \n", 
            "+\n", 
            "     /**\n", 
            "      * Get the validation Source for the message context\n", 
            "      *\n", 
            "      * @param synCtx the current message to validate\n", 
            "-     * @param synLog  SynapseLog instance\n", 
            "+     * @param synLog SynapseLog instance\n", 
            "      * @return the validation Source for the current message\n", 
            "      */\n", 
            "     private Source getValidationSource(MessageContext synCtx, SynapseLog synLog) {\n"
          ]
        }, 
        {
          "locn": "-309,7 +308,8", 
          "lines": [
            " \n", 
            "         /**\n", 
            "          * To set explicitly validation error condition\n", 
            "-         * @param validationError  is occur validation error?\n", 
            "+         *\n", 
            "+         * @param validationError is occur validation error?\n", 
            "          */\n", 
            "         public void setValidationError(boolean validationError) {\n", 
            "             this.validationError = validationError;\n"
          ]
        }, 
        {
          "locn": "-337,12 +337,12", 
          "lines": [
            "     /**\n", 
            "      * add a feature which need to set for the Schema Factory\n", 
            "      *\n", 
            "-     * @param  featureName The name of the feature\n", 
            "+     * @param featureName     The name of the feature\n", 
            "      * @param isFeatureEnable should this feature enable?(true|false)\n", 
            "+     * @throws SAXException on an unknown feature\n", 
            "      * @see #getFeature(String)\n", 
            "-     * @throws SAXException on an unknown feature\n", 
            "      */\n", 
            "-   public void addFeature(String featureName, boolean isFeatureEnable) throws SAXException {\n", 
            "+    public void addFeature(String featureName, boolean isFeatureEnable) throws SAXException {\n", 
            "         MediatorProperty mp = new MediatorProperty();\n", 
            "         mp.setName(featureName);\n", 
            "         if (isFeatureEnable) {\n"
          ]
        }, 
        {
          "locn": "-366,15 +366,17", 
          "lines": [
            " \n", 
            "     /**\n", 
            "      * Set the given XPath as the source XPath\n", 
            "+     *\n", 
            "      * @param source an XPath to be set as the source\n", 
            "      */\n", 
            "     public void setSource(SynapseXPath source) {\n", 
            "-       this.source.setXPath(source);\n", 
            "+        this.source.setXPath(source);\n", 
            "     }\n", 
            " \n", 
            "     /**\n", 
            "      * Set the External Schema ResourceMap that will required for schema validation\n", 
            "-     * @param resourceMap  the ResourceMap which contains external schema resources\n", 
            "+     *\n", 
            "+     * @param resourceMap the ResourceMap which contains external schema resources\n", 
            "      */\n", 
            "     public void setResourceMap(ResourceMap resourceMap) {\n", 
            "         this.resourceMap = resourceMap;\n"
          ]
        }, 
        {
          "locn": "-382,6 +384,7", 
          "lines": [
            " \n", 
            "     /**\n", 
            "      * Get the source XPath which yields the source element for validation\n", 
            "+     *\n", 
            "      * @return the XPath which yields the source element for validation\n", 
            "      */\n", 
            "     public SynapseXPath getSource() {\n"
          ]
        }, 
        {
          "locn": "-390,6 +393,7", 
          "lines": [
            " \n", 
            "     /**\n", 
            "      * The keys for the schema resources used for validation\n", 
            "+     *\n", 
            "      * @return schema registry keys\n", 
            "      */\n", 
            "     public List<Value> getSchemaKeys() {\n"
          ]
        }, 
        {
          "locn": "-398,7 +402,8", 
          "lines": [
            " \n", 
            "     /**\n", 
            "      * Features for the actual Xerces validator\n", 
            "-     * @return explicityFeatures to be passed to the Xerces validator\n", 
            "+     *\n", 
            "+     * @return explicit Features to be passed to the Xerces validator\n", 
            "      */\n", 
            "     public List<MediatorProperty> getFeatures() {\n", 
            "         return explicityFeatures;\n"
          ]
        }, 
        {
          "locn": "-405,7 +410,8", 
          "lines": [
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     *ResourceMap for the external schema resources to be used for the validation\n", 
            "+     * ResourceMap for the external schema resources to be used for the validation\n", 
            "+     *\n", 
            "      * @return the ResourceMap with external schema resources\n", 
            "      */\n", 
            "     public ResourceMap getResourceMap() {\n"
          ]
        }, 
        {
          "locn": "-412,4 +418,8", 
          "lines": [
            "         return resourceMap;\n", 
            "     }\n", 
            " \n", 
            "+    @Override\n", 
            "+    public boolean isContentAware() {\n", 
            "+        return true;\n", 
            "+    }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/ValidateMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/ValidateMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-30,7 +30,6", 
          "lines": [
            "         super(7);\n", 
            "     }\n", 
            " \n", 
            "-\n", 
            "     public void testLocalRegEntriesAndSchemaValidation() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280\";\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample7.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample7.java"
    }
  ], 
  "id": "1520794"
}