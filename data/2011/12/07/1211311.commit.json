{
  "when": "2011-12-07T02:08:33-05:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-19,10 +19,16", 
          "lines": [
            " \n", 
            " package org.apache.synapse.mediators.builtin;\n", 
            " \n", 
            "+import org.apache.axiom.om.OMAbstractFactory;\n", 
            "+import org.apache.axiom.soap.SOAP11Constants;\n", 
            "+import org.apache.axiom.soap.SOAP12Constants;\n", 
            "+import org.apache.axiom.soap.SOAPFactory;\n", 
            " import org.apache.axis2.AxisFault;\n", 
            " import org.apache.axis2.clustering.ClusteringFault;\n", 
            " import org.apache.axis2.clustering.state.Replicator;\n", 
            " import org.apache.axis2.context.ConfigurationContext;\n", 
            "+import org.apache.axis2.context.OperationContext;\n", 
            "+import org.apache.axis2.i18n.Messages;\n", 
            " import org.apache.synapse.ManagedLifecycle;\n", 
            " import org.apache.synapse.MessageContext;\n", 
            " import org.apache.synapse.SynapseException;\n"
          ]
        }, 
        {
          "locn": "-35,10 +41,7", 
          "lines": [
            " import org.apache.synapse.util.FixedByteArrayOutputStream;\n", 
            " import org.apache.synapse.util.MessageHelper;\n", 
            " import org.apache.axiom.soap.SOAPEnvelope;\n", 
            "-import org.wso2.caching.CacheManager;\n", 
            "-import org.wso2.caching.CachedObject;\n", 
            "-import org.wso2.caching.CachingConstants;\n", 
            "-import org.wso2.caching.CachingException;\n", 
            "+import org.wso2.caching.*;\n", 
            " import org.wso2.caching.util.SOAPMessageHelper;\n", 
            " import org.wso2.caching.digest.DigestGenerator;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-148,10 +151,10", 
          "lines": [
            "         try {\n", 
            " \n", 
            "             if (synCtx.isResponse()) {\n", 
            "-                processResponseMessage(synCtx, cfgCtx, synLog, cacheManager);\n", 
            "+                processResponseMessage(synCtx, synLog);\n", 
            " \n", 
            "             } else {\n", 
            "-                result = processRequestMessage(synCtx, cfgCtx, synLog, cacheManager);\n", 
            "+                result = processRequestMessage(synCtx, synLog, cacheManager);\n", 
            "             }\n", 
            " \n", 
            "         } catch (ClusteringFault clusteringFault) {\n"
          ]
        }, 
        {
          "locn": "-169,66 +172,70", 
          "lines": [
            "      *\n", 
            "      * @param synLog         the Synapse log to use\n", 
            "      * @param synCtx         the current message (response)\n", 
            "-     * @param cfgCtx         the abstract context in which the cache will be kept\n", 
            "-     * @param cacheManager   the cache manager\n", 
            "      * @throws ClusteringFault is there is an error in replicating the cfgCtx\n", 
            "      */\n", 
            "-    private void processResponseMessage(MessageContext synCtx, ConfigurationContext cfgCtx,\n", 
            "-        SynapseLog synLog, CacheManager cacheManager) throws ClusteringFault {\n", 
            "+    private void processResponseMessage(MessageContext synCtx,\n", 
            "+                                        SynapseLog synLog) throws ClusteringFault {\n", 
            " \n", 
            "         if (!collector) {\n", 
            "             handleException(\"Response messages cannot be handled in a non collector cache\", synCtx);\n", 
            "         }\n", 
            " \n", 
            "-        String requestHash = (String) synCtx.getProperty(CachingConstants.REQUEST_HASH);\n", 
            "+        org.apache.axis2.context.MessageContext msgCtx =\n", 
            "+                ((Axis2MessageContext)synCtx).getAxis2MessageContext();\n", 
            "+        OperationContext operationContext = msgCtx.getOperationContext();\n", 
            " \n", 
            "-        if (requestHash != null) {\n", 
            "+        CachableResponse response =\n", 
            "+                (CachableResponse) operationContext.getPropertyNonReplicable(CachingConstants.CACHED_OBJECT);\n", 
            "+        if (response != null) {\n", 
            "             if (synLog.isTraceOrDebugEnabled()) {\n", 
            "                 synLog.traceOrDebug(\"Storing the response message into the cache at scope : \" +\n", 
            "-                    scope + \" with ID : \" + cacheKey + \" for request hash : \" + requestHash);\n", 
            "+                        scope + \" with ID : \" + cacheKey + \" for request hash : \" + response.getRequestHash());\n", 
            "             }\n", 
            "+            if (synLog.isTraceOrDebugEnabled()) {\n", 
            "+                synLog.traceOrDebug(\"Storing the response for the message with ID : \" +\n", 
            "+                        synCtx.getMessageID() + \" with request hash ID : \" +\n", 
            "+                        response.getRequestHash() + \" in the cache : \" + cacheKey);\n", 
            "+            }\n", 
            " \n", 
            "-            CachedObject cachedObj = cacheManager.getResponseForKey(cacheKey, requestHash, cfgCtx);\n", 
            "-            if (cachedObj != null) {\n", 
            "+            ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n", 
            "+            try {\n", 
            "+                synCtx.getEnvelope().serialize(outStream);\n", 
            "+                response.setResponseEnvelope(outStream.toByteArray());\n", 
            "+            } catch (XMLStreamException e) {\n", 
            "+                handleException(\"Unable to set the response to the Cache\", e, synCtx);\n", 
            "+            }\n", 
            " \n", 
            "-                if (synLog.isTraceOrDebugEnabled()) {\n", 
            "-                    synLog.traceOrDebug(\"Storing the response for the message with ID : \" +\n", 
            "-                        synCtx.getMessageID() + \" with request hash ID : \" +\n", 
            "-                        cachedObj.getRequestHash() + \" in the cache : \" + cacheKey);\n", 
            "-                }\n", 
            "+            // this is not required yet, can commented this for perf improvements\n", 
            "+            // in the future there can be a situation where user sends the request\n", 
            "+            // with the response hash (if client side caching is on) in which case\n", 
            "+            // we can compare that response hash with the given response hash and\n", 
            "+            // respond with not-modified http header */\n", 
            "+            // cachedObj.setResponseHash(cache.getGenerator().getDigest(\n", 
            "+            //     ((Axis2MessageContext) synCtx).getAxis2MessageContext()));\n", 
            " \n", 
            "-                ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n", 
            "+            if (response.getTimeout() > 0) {\n", 
            "+                response.setExpireTimeMillis(System.currentTimeMillis() + response.getTimeout());\n", 
            "+            }\n", 
            "+\n", 
            "+            // Finally, we may need to replicate the changes in the cache\n", 
            "+            CacheReplicationCommand cacheReplicationCommand\n", 
            "+                    = (CacheReplicationCommand) msgCtx.getPropertyNonReplicable(\n", 
            "+                    CachingConstants.STATE_REPLICATION_OBJECT);\n", 
            "+            if (cacheReplicationCommand != null) {\n", 
            "                 try {\n", 
            "-                    MessageHelper.cloneSOAPEnvelope(synCtx.getEnvelope()).serialize(outStream);\n", 
            "-                    cachedObj.setResponseEnvelope(outStream.toByteArray());\n", 
            "-                } catch (XMLStreamException e) {\n", 
            "-                    handleException(\"Unable to set the response to the Cache\", e, synCtx);\n", 
            "+                    Replicator.replicateState(cacheReplicationCommand,\n", 
            "+                            msgCtx.getRootContext().getAxisConfiguration());\n", 
            "+                } catch (ClusteringFault clusteringFault) {\n", 
            "+                    log.error(\"Cannot replicate cache changes\");\n", 
            "                 }\n", 
            "-\n", 
            "-                /* this is not required yet, can commented this for perf improvements\n", 
            "-                   in the future there can be a situation where user sends the request\n", 
            "-                   with the response hash (if client side caching is on) in which case\n", 
            "-                   we can compare that response hash with the given response hash and\n", 
            "-                   respond with not-modified http header */\n", 
            "-                // cachedObj.setResponseHash(cache.getGenerator().getDigest(\n", 
            "-                //     ((Axis2MessageContext) synCtx).getAxis2MessageContext()));\n", 
            "-\n", 
            "-                if (cachedObj.getTimeout() > 0) {\n", 
            "-                    cachedObj.setExpireTimeMillis(System.currentTimeMillis() + cachedObj.getTimeout());\n", 
            "-                }\n", 
            "-\n", 
            "-                cfgCtx.setProperty(CachingConstants.CACHE_MANAGER, cacheManager);\n", 
            "-//                Replicator.replicate(cfgCtx, new String[]{cacheManagerKey});\n", 
            "-                Replicator.replicate(cfgCtx);\n", 
            "-            } else {\n", 
            "-                synLog.auditWarn(\"A response message without a valid mapping to the \" +\n", 
            "-                    \"request hash found. Unable to store the response in cache\");\n", 
            "             }\n", 
            "-\n", 
            "         } else {\n", 
            "-            synLog.auditWarn(\"A response message without a mapping to the \" +\n", 
            "-                \"request hash found. Unable to store the response in cache\");\n", 
            "+            synLog.auditWarn(\"A response message without a valid mapping to the \" +\n", 
            "+                    \"request hash found. Unable to store the response in cache\");\n", 
            "         }\n", 
            "+\n", 
            "+\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-237,18 +244,19", 
          "lines": [
            "      * this message as a response and sends back directly to client.\n", 
            "      *\n", 
            "      * @param synCtx         incoming request message\n", 
            "-     * @param cfgCtx         the AbstractContext in which the cache will be kept\n", 
            "      * @param synLog         the Synapse log to use\n", 
            "      * @param cacheManager   the cache manager\n", 
            "      * @return should this mediator terminate further processing?\n", 
            "      * @throws ClusteringFault if there is an error in replicating the cfgCtx\n", 
            "      */\n", 
            "-    private boolean processRequestMessage(MessageContext synCtx, ConfigurationContext cfgCtx,\n", 
            "+    private boolean processRequestMessage(MessageContext synCtx,\n", 
            "         SynapseLog synLog, CacheManager cacheManager) throws ClusteringFault {\n", 
            " \n", 
            "         if (collector) {\n", 
            "             handleException(\"Request messages cannot be handled in a collector cache\", synCtx);\n", 
            "         }\n", 
            "+        OperationContext opCtx = ((Axis2MessageContext)synCtx).getAxis2MessageContext().\n", 
            "+                getOperationContext();\n", 
            " \n", 
            "         String requestHash = null;\n", 
            "         try {\n"
          ]
        }, 
        {
          "locn": "-263,37 +271,49", 
          "lines": [
            "             synLog.traceOrDebug(\"Generated request hash : \" + requestHash);\n", 
            "         }\n", 
            " \n", 
            "-        if (cacheManager.containsKey(cacheKey, requestHash) &&\n", 
            "-            cacheManager.getResponseForKey(cacheKey, requestHash, cfgCtx) != null) {\n", 
            "+        ServiceName service;\n", 
            "+        if (id != null) {\n", 
            "+            service = new ServiceName(id);\n", 
            "+        } else {\n", 
            "+            service = new ServiceName(cacheKey);\n", 
            "+        }\n", 
            " \n", 
            "+        RequestHash hash = new RequestHash(requestHash);\n", 
            "+        CachableResponse cachedResponse =\n", 
            "+                cacheManager.getCachedResponse(service, hash);\n", 
            "+\n", 
            "+        org.apache.axis2.context.MessageContext msgCtx = ((Axis2MessageContext)synCtx).getAxis2MessageContext();\n", 
            "+        opCtx.setNonReplicableProperty(CachingConstants.REQUEST_HASH, requestHash);\n", 
            "+        CacheReplicationCommand cacheReplicationCommand = new CacheReplicationCommand();\n", 
            "+\n", 
            "+        if (cachedResponse != null) {\n", 
            "             // get the response from the cache and attach to the context and change the\n", 
            "             // direction of the message\n", 
            "-            CachedObject cachedObj = cacheManager.getResponseForKey(cacheKey, requestHash, cfgCtx);\n", 
            "-\n", 
            "-            if (!cachedObj.isExpired() && cachedObj.getResponseEnvelope() != null) {\n", 
            "-\n", 
            "+            if (!cachedResponse.isExpired()) {\n", 
            "                 if (synLog.isTraceOrDebugEnabled()) {\n", 
            "                     synLog.traceOrDebug(\"Cache-hit for message ID : \" + synCtx.getMessageID());\n", 
            "                 }\n", 
            "-\n", 
            "+                cachedResponse.setInUse(true);\n", 
            "                 // mark as a response and replace envelope from cache\n", 
            "                 synCtx.setResponse(true);\n", 
            "+                opCtx.setNonReplicableProperty(CachingConstants.CACHED_OBJECT, cachedResponse);\n", 
            "+\n", 
            "+                SOAPEnvelope omSOAPEnv;\n", 
            "                 try {\n", 
            "-                    SOAPEnvelope omSOAPEnv = SOAPMessageHelper.buildSOAPEnvelopeFromBytes(\n", 
            "-                            cachedObj.getResponseEnvelope());\n", 
            "-\n", 
            "-                    // todo: if there is a WSA messageID in the response, is that need to be unique on each and every resp\n", 
            "-\n", 
            "-                    synCtx.setEnvelope(omSOAPEnv);\n", 
            "+                    omSOAPEnv = SOAPMessageHelper.buildSOAPEnvelopeFromBytes(\n", 
            "+                            cachedResponse.getResponseEnvelope());\n", 
            "+                    if (omSOAPEnv != null) {\n", 
            "+                        synCtx.setEnvelope(omSOAPEnv);\n", 
            "+                    }\n", 
            "                 } catch (AxisFault axisFault) {\n", 
            "                     handleException(\"Error setting response envelope from cache : \"\n", 
            "-                        + cacheKey, synCtx);\n", 
            "+                            + cacheKey, synCtx);\n", 
            "                 } catch (IOException ioe) {\n", 
            "                     handleException(\"Error setting response envelope from cache : \"\n", 
            "-                        + cacheKey, ioe, synCtx);\n", 
            "+                            + cacheKey, ioe, synCtx);\n", 
            "                 } catch (SOAPException soape) {\n", 
            "                     handleException(\"Error setting response envelope from cache : \"\n", 
            "-                        + cacheKey, soape, synCtx);\n", 
            "+                            + cacheKey, soape, synCtx);\n", 
            "                 }\n", 
            " \n", 
            "                 // take specified action on cache hit\n"
          ]
        }, 
        {
          "locn": "-307,7 +327,7", 
          "lines": [
            " \n", 
            "                     if (synLog.isTraceOrDebugEnabled()) {\n", 
            "                         synLog.traceOrDebug(\"Delegating message to the onCachingHit \" +\n", 
            "-                            \"sequence : \" + onCacheHitRef);\n", 
            "+                                \"sequence : \" + onCacheHitRef);\n", 
            "                     }\n", 
            "                     synCtx.getSequence(onCacheHitRef).mediate(synCtx);\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-315,7 +335,7", 
          "lines": [
            " \n", 
            "                     if (synLog.isTraceOrDebugEnabled()) {\n", 
            "                         synLog.traceOrDebug(\"Request message \" + synCtx.getMessageID() +\n", 
            "-                            \" was served from the cache : \" + cacheKey);\n", 
            "+                                \" was served from the cache : \" + cacheKey);\n", 
            "                     }\n", 
            "                     // send the response back if there is not onCacheHit is specified\n", 
            "                     synCtx.setTo(null);\n"
          ]
        }, 
        {
          "locn": "-325,54 +345,52", 
          "lines": [
            "                 return false;\n", 
            " \n", 
            "             } else {\n", 
            "-                // cache exists, but has expired...\n", 
            "-                cachedObj.expire();\n", 
            "-                cachedObj.setTimeout(timeout);\n", 
            "-                synLog.traceOrDebug(\"Existing cached response has expired. Reset cache element\");\n", 
            "+                cachedResponse.reincarnate(timeout);\n", 
            "+                if (synLog.isTraceOrDebugEnabled()) {\n", 
            "+                    synLog.traceOrDebug(\"Existing cached response has expired. Reset cache element\");\n", 
            "+                }\n", 
            "+                cacheManager.cacheResponse(service, hash, cachedResponse, cacheReplicationCommand);\n", 
            "+                opCtx.setNonReplicableProperty(CachingConstants.CACHED_OBJECT, cachedResponse);\n", 
            "+                opCtx.setNonReplicableProperty(CachingConstants.STATE_REPLICATION_OBJECT,\n", 
            "+                        cacheReplicationCommand);\n", 
            " \n", 
            "-                cfgCtx.setProperty(CachingConstants.CACHE_MANAGER, cacheManager);\n", 
            "-//                Replicator.replicate(cfgCtx, new String[]{cacheManagerKey});\n", 
            "-                Replicator.replicate(cfgCtx);\n", 
            "+                Replicator.replicate(opCtx);\n", 
            "             }\n", 
            "-\n", 
            "         } else {\n", 
            "-\n", 
            "             // if not found in cache, check if we can cache this request\n", 
            "-            if (cacheManager.getCacheKeys(cacheKey).size() == inMemoryCacheSize) {\n", 
            "-                cacheManager.removeExpiredResponses(cacheKey, cfgCtx);\n", 
            "-                if (cacheManager.getCacheKeys(cacheKey).size() == inMemoryCacheSize) {\n", 
            "-                    synLog.traceOrDebug(\"In-memory cache is full. Unable to cache\");\n", 
            "-                } else {\n", 
            "-                    storeRequestToCache(cfgCtx, requestHash, cacheManager);\n", 
            "+            if (cacheManager.getCacheSize(service) >= inMemoryCacheSize) { // If cache is full\n", 
            "+                cacheManager.removeExpiredResponses(service, cacheReplicationCommand); // try to remove expired responses\n", 
            "+                if (cacheManager.getCacheSize(service) >= inMemoryCacheSize) { // recheck if there is space\n", 
            "+                    if (log.isDebugEnabled()) {\n", 
            "+                        log.debug(\"In-memory cache is full. Unable to cache\");\n", 
            "+                    }\n", 
            "+                } else { // if we managed to free up some space in the cache. Need state replication\n", 
            "+                    cacheNewResponse(msgCtx, service, hash, cacheManager,\n", 
            "+                                     cacheReplicationCommand);\n", 
            "                 }\n", 
            "-            } else {\n", 
            "-                storeRequestToCache(cfgCtx, requestHash, cacheManager);\n", 
            "+            } else { // if there is more space in the cache. Need state replication\n", 
            "+                cacheNewResponse(msgCtx, service, hash, cacheManager,\n", 
            "+                                 cacheReplicationCommand);\n", 
            "             }\n", 
            "         }\n", 
            "+\n", 
            "         return true;\n", 
            "     }\n", 
            " \n", 
            "-    /**\n", 
            "-     * Store request message to the cache\n", 
            "-     *\n", 
            "-     * @param cfgCtx        - the Abstract context in which the cache will be kept\n", 
            "-     * @param requestHash   - the request hash that has already been computed\n", 
            "-     * @param cacheManager  - the cache\n", 
            "-     * @throws ClusteringFault if there is an error in replicating the cfgCtx\n", 
            "-     */\n", 
            "-    private void storeRequestToCache(ConfigurationContext cfgCtx,\n", 
            "-        String requestHash, CacheManager cacheManager) throws ClusteringFault {\n", 
            "+    private void cacheNewResponse(org.apache.axis2.context.MessageContext msgContext,\n", 
            "+                                  ServiceName serviceName, RequestHash requestHash,\n", 
            "+                                  CacheManager cacheManager,\n", 
            "+                                  CacheReplicationCommand cacheReplicationCommand) throws ClusteringFault {\n", 
            "+        OperationContext opCtx = msgContext.getOperationContext();\n", 
            "+        CachableResponse response = new CachableResponse();\n", 
            "+        response.setRequestHash(requestHash.getRequestHash());\n", 
            "+        response.setTimeout(timeout);\n", 
            "+        cacheManager.cacheResponse(serviceName, requestHash, response, cacheReplicationCommand);\n", 
            "+        opCtx.setNonReplicableProperty(CachingConstants.CACHED_OBJECT, response);\n", 
            "+        opCtx.setNonReplicableProperty(CachingConstants.STATE_REPLICATION_OBJECT,\n", 
            "+                                       cacheReplicationCommand);\n", 
            " \n", 
            "-        CachedObject cachedObj = new CachedObject();\n", 
            "-        cachedObj.setRequestHash(requestHash);\n", 
            "-        // this does not set the expiretime but just sets the timeout and the espiretime will\n", 
            "-        // be set when the response is availabel\n", 
            "-        cachedObj.setTimeout(timeout);\n", 
            "-        cacheManager.addResponseWithKey(cacheKey, requestHash, cachedObj, cfgCtx);\n", 
            "-\n", 
            "-        cfgCtx.setProperty(CachingConstants.CACHE_MANAGER, cacheManager);\n", 
            "-//        Replicator.replicate(cfgCtx, new String[]{cacheManagerKey});\n", 
            "-        Replicator.replicate(cfgCtx);\n", 
            "+        Replicator.replicate(opCtx);\n", 
            "     }\n", 
            " \n", 
            "     public String getId() {\n"
          ]
        }, 
        {
          "locn": "-458,4 +476,15", 
          "lines": [
            "     public void setMaxMessageSize(int maxMessageSize) {\n", 
            "         this.maxMessageSize = maxMessageSize;\n", 
            "     }\n", 
            "+\n", 
            "+    public SOAPFactory getSOAPFactory(org.apache.axis2.context.MessageContext msgContext) throws AxisFault {\n", 
            "+        String nsURI = msgContext.getEnvelope().getNamespace().getNamespaceURI();\n", 
            "+        if (SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(nsURI)) {\n", 
            "+            return OMAbstractFactory.getSOAP12Factory();\n", 
            "+        } else if (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(nsURI)) {\n", 
            "+            return OMAbstractFactory.getSOAP11Factory();\n", 
            "+        } else {\n", 
            "+            throw new AxisFault(Messages.getMessage(\"invalidSOAPversion\"));\n", 
            "+        }\n", 
            "+    }\n", 
            " }\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/CacheMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/CacheMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-591,7 +591,7", 
          "lines": [
            "      * Returns the map of defined entries in the configuration excluding the\n", 
            "      * fetched entries from remote registry.\n", 
            "      *\n", 
            "-     * @return Map of Entries defined in the local configuraion\n", 
            "+     * @return Map of Entries defined in the local configuration\n", 
            "      */\n", 
            "     public Map<String, Entry> getDefinedEntries() {\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/SynapseConfiguration.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/SynapseConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-72,6 +72,8", 
          "lines": [
            "     private Throttle throttle;\n", 
            "     /* Lock used to ensure thread-safe creation of the throttle */\n", 
            "     private final Object throttleLock = new Object();\n", 
            "+    /* Last version of dynamic policy resource*/\n", 
            "+    private long version;\n", 
            " \n", 
            "     public ThrottleMediator() {\n", 
            "         this.accessControler = new AccessRateController();\n"
          ]
        }, 
        {
          "locn": "-181,8 +183,10", 
          "lines": [
            "                         boolean reCreate = false;\n", 
            "                         // if the key refers to a dynamic resource\n", 
            "                         if (entry.isDynamic()) {\n", 
            "-                            if (!entry.isCached() || entry.isExpired()) {\n", 
            "+                            if ((!entry.isCached() || entry.isExpired()) &&\n", 
            "+                                    version != entry.getVersion()) {\n", 
            "                                 reCreate = true;\n", 
            "+                                version = entry.getVersion();\n", 
            "                             }\n", 
            "                         }\n", 
            "                         if (reCreate || throttle == null) {\n"
          ]
        }
      ], 
      "to": "java/modules/extensions/src/main/java/org/apache/synapse/mediators/throttle/ThrottleMediator.java", 
      "from": "java/modules/extensions/src/main/java/org/apache/synapse/mediators/throttle/ThrottleMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-20,6 +20,8", 
          "lines": [
            " package org.apache.synapse.mediators.bsf;\n", 
            " \n", 
            " import com.sun.phobos.script.javascript.RhinoScriptEngineFactory;\n", 
            "+import com.sun.script.groovy.GroovyScriptEngineFactory;\n", 
            "+import com.sun.script.jruby.JRubyScriptEngineFactory;\n", 
            " import org.apache.axiom.om.OMElement;\n", 
            " import org.apache.axiom.om.OMText;\n", 
            " import org.apache.bsf.xml.XMLHelper;\n"
          ]
        }, 
        {
          "locn": "-400,6 +402,8", 
          "lines": [
            " \n", 
            "         ScriptEngineManager manager = new ScriptEngineManager();\n", 
            "         manager.registerEngineExtension(\"js\", new RhinoScriptEngineFactory());\n", 
            "+        manager.registerEngineExtension(\"groovy\", new GroovyScriptEngineFactory());\n", 
            "+        manager.registerEngineExtension(\"rb\", new JRubyScriptEngineFactory());\n", 
            " \n", 
            "         this.scriptEngine = manager.getEngineByExtension(language);\n", 
            "         if (scriptEngine == null) {\n"
          ]
        }
      ], 
      "to": "java/modules/extensions/src/main/java/org/apache/synapse/mediators/bsf/ScriptMediator.java", 
      "from": "java/modules/extensions/src/main/java/org/apache/synapse/mediators/bsf/ScriptMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-865,7 +865,7", 
          "lines": [
            " \n", 
            "         <!-- dependencies of Synapse extensions module -->\n", 
            "         <wso2commons.version>1.2</wso2commons.version>\n", 
            "-        <wso2caching.version>3.4.0</wso2caching.version>\n", 
            "+        <wso2caching.version>3.5.0</wso2caching.version>\n", 
            "         <wso2throttle.version>SNAPSHOT</wso2throttle.version>\n", 
            "         <wso2eventing-api.version>SNAPSHOT</wso2eventing-api.version>\n", 
            "         <xbean.version>2.2.0</xbean.version>\n"
          ]
        }
      ], 
      "to": "java/pom.xml", 
      "from": "java/pom.xml"
    }
  ], 
  "id": "1211311"
}