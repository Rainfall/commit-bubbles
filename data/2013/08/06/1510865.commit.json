{
  "when": "2013-08-06T02:31:48-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-0,0 +1,88", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.config.xml.endpoints;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.synapse.config.xml.AbstractTestCase;\n", 
            "+import org.apache.synapse.endpoints.Endpoint;\n", 
            "+\n", 
            "+public class RecipientListEndpointSerializationTest extends AbstractTestCase {\n", 
            "+\n", 
            "+    public void testRecipientListEndpointScenarioOne()throws Exception {\n", 
            "+        String inputXml = \"<endpoint xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\" +\n", 
            "+                \"<recipientlist>\" +\n", 
            "+                \"<endpoint>\" +\n", 
            "+                \"<address uri=\\\"http://localhost:9001/soap/LBService1\\\">\" +\n", 
            "+                \"<enableAddressing/>\" +\n", 
            "+                \"</address>\" +\n", 
            "+                \"</endpoint>\" +\n", 
            "+                \"<endpoint>\" +\n", 
            "+                \"<address uri=\\\"http://localhost:9002/soap/LBService1\\\">\" +\n", 
            "+                \"<enableAddressing/>\" +\n", 
            "+                \"</address>\" +\n", 
            "+                \"</endpoint>\" +\n", 
            "+                \"<endpoint>\" +\n", 
            "+                \"<address uri=\\\"http://localhost:9003/soap/LBService1\\\">\" +\n", 
            "+                \"<enableAddressing/>\" +\n", 
            "+                \"</address>\" +\n", 
            "+                \"</endpoint>\" +\n", 
            "+                \"</recipientlist>\" +\n", 
            "+                \"</endpoint>\";\n", 
            "+\n", 
            "+        OMElement inputElement = createOMElement(inputXml);\n", 
            "+        Endpoint endpoint = RecipientListEndpointFactory.getEndpointFromElement(\n", 
            "+                inputElement,true,null);\n", 
            "+        OMElement serializedOut = RecipientListEndpointSerializer.getElementFromEndpoint(endpoint);\n", 
            "+\n", 
            "+        assertTrue(compare(serializedOut, inputElement));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testRecipientListEndpointScenarioTwo()throws Exception {\n", 
            "+        String inputXml = \"<endpoint xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\" +\n", 
            "+                \"<recipientlist>\" +\n", 
            "+                \"<member hostName=\\\"localhost\\\" httpPort=\\\"9000\\\" httpsPort=\\\"9005\\\"/>\" +\n", 
            "+                \"<member hostName=\\\"localhost\\\" httpPort=\\\"9001\\\" httpsPort=\\\"9006\\\"/>\" +\n", 
            "+                \"<member hostName=\\\"localhost\\\" httpPort=\\\"9002\\\" httpsPort=\\\"9007\\\"/>\" +\n", 
            "+                \"</recipientlist>\" +\n", 
            "+                \"</endpoint>\";\n", 
            "+\n", 
            "+        OMElement inputElement = createOMElement(inputXml);\n", 
            "+        Endpoint endpoint = RecipientListEndpointFactory.getEndpointFromElement(\n", 
            "+                inputElement,true,null);\n", 
            "+        OMElement serializedOut = RecipientListEndpointSerializer.getElementFromEndpoint(endpoint);\n", 
            "+\n", 
            "+        assertTrue(compare(serializedOut, inputElement));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testRecipientListEndpointScenarioThree()throws Exception {\n", 
            "+        String inputXml = \"<endpoint xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\" +\n", 
            "+                \"<recipientlist>\" +\n", 
            "+                \"<endpoints value=\\\"foo\\\" max-cache=\\\"10\\\"/>\" +\n", 
            "+                \"</recipientlist>\" +\n", 
            "+                \"</endpoint>\";\n", 
            "+\n", 
            "+        OMElement inputElement = createOMElement(inputXml);\n", 
            "+        Endpoint endpoint = RecipientListEndpointFactory.getEndpointFromElement(\n", 
            "+                inputElement,true,null);\n", 
            "+        OMElement serializedOut = RecipientListEndpointSerializer.getElementFromEndpoint(endpoint);\n", 
            "+\n", 
            "+        assertTrue(compare(serializedOut, inputElement));\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/config/xml/endpoints/RecipientListEndpointSerializationTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/config/xml/endpoints/RecipientListEndpointSerializationTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-78,18 +78,18", 
          "lines": [
            "         }\n", 
            " \n", 
            "         /** Extract the number of messages interested to come */\n", 
            "-        if (parameters != null && parameters.get(ResequencingProcessor.REQ_INIT_MSGS) != null) {\n", 
            "+        if (parameters.get(ResequencingProcessor.REQ_INIT_MSGS) != null) {\n", 
            "             processor.setRequiredInitMsgs(new AtomicInteger(Integer.parseInt((String) parameters.get(\n", 
            "                     ResequencingProcessor.REQ_INIT_MSGS))));\n", 
            "         }\n", 
            "         /** Extract the delay wait until the interested messages come */\n", 
            "-        if (parameters != null && parameters.get(ResequencingProcessor.REQ_INIT_MSGS_DELAY) != null) {\n", 
            "+        if (parameters.get(ResequencingProcessor.REQ_INIT_MSGS_DELAY) != null) {\n", 
            "             processor.setRequiredInitMsgsDelay(new AtomicInteger(Integer.parseInt((String) parameters.get(\n", 
            "                     ResequencingProcessor.REQ_INIT_MSGS_DELAY))));\n", 
            "         }\n", 
            " \n", 
            "         /** Extract whether to delete duplicate messages */\n", 
            "-        if (parameters != null && parameters.get(ResequencingProcessor.DELETE_DUPLICATES) != null) {\n", 
            "+        if (parameters.get(ResequencingProcessor.DELETE_DUPLICATES) != null) {\n", 
            "             String result=(String) parameters.get(ResequencingProcessor.DELETE_DUPLICATES);\n", 
            "             if(result.equalsIgnoreCase(\"TRUE\")){\n", 
            "                 processor.setDeleteDuplicates(new AtomicBoolean(true));\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/message/processors/resequence/ResequencingJob.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/message/processors/resequence/ResequencingJob.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-33,7 +33,7", 
          "lines": [
            " \n", 
            " /**\n", 
            "  * This class will be used as the processor of the resequencer and set up\n", 
            "- * the necessary environment for the ReequencingJob.\n", 
            "+ * the necessary environment for the ResequencingJob.\n", 
            "  * This should be run periodically after given time interval and\n", 
            "  * for that this should be inherited from ScheduledMessageProcessor class\n", 
            "  */\n"
          ]
        }, 
        {
          "locn": "-126,8 +126,6", 
          "lines": [
            "      * This method use to find the minimum sequence number in the message store at the startup\n", 
            "      */\n", 
            "     private void findFirstSeqNum() {\n", 
            "-\n", 
            "-\n", 
            "         MessageStore store = configuration.getMessageStore(messageStore);\n", 
            "         SynapseXPath seqNoxPath = null;\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/message/processors/resequence/ResequencingProcessor.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/message/processors/resequence/ResequencingProcessor.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-37,7 +37,7", 
          "lines": [
            " import java.util.Map;\r\n", 
            " import java.util.Set;\r\n", 
            " \r\n", 
            "-/*\r\n", 
            "+/**\r\n", 
            "  * This class is instantiated by SimpleQuartzFactory (or by hand)\r\n", 
            "  * When it is initialized it creates a Quartz Scheduler with a job and a trigger\r\n", 
            "  * The class it starts is always an instance of SimpleQuartzJob\r\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/startup/quartz/SimpleQuartz.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/startup/quartz/SimpleQuartz.java"
    }
  ], 
  "id": "1510865"
}