{
  "when": "2016-06-05T01:06:14-04:00", 
  "message": "Fix for SYNAPSE-1028 by Hiranya", 
  "who": "ravi", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-19,8 +19,9", 
          "lines": [
            " \n", 
            " package org.apache.synapse.transport.passthru;\n", 
            " \n", 
            "+import org.apache.axiom.blob.Blobs;\n", 
            "+import org.apache.axiom.blob.OverflowableBlob;\n", 
            " import org.apache.axiom.om.OMOutputFormat;\n", 
            "-import org.apache.axiom.util.blob.OverflowBlob;\n", 
            " import org.apache.axis2.AxisFault;\n", 
            " import org.apache.axis2.Constants;\n", 
            " import org.apache.axis2.addressing.AddressingConstants;\n"
          ]
        }, 
        {
          "locn": "-38,6 +39,7", 
          "lines": [
            " import org.apache.axis2.transport.base.threads.NativeThreadFactory;\n", 
            " import org.apache.axis2.transport.base.threads.WorkerPool;\n", 
            " import org.apache.axis2.util.MessageProcessorSelector;\n", 
            "+import org.apache.commons.io.FileUtils;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.http.HttpException;\n"
          ]
        }, 
        {
          "locn": "-397,21 +399,27", 
          "lines": [
            "                         PassThroughConstants.FORCE_HTTP_1_0);\n", 
            " \t\t\t\tPipe pipe = (Pipe) msgContext.getProperty(PassThroughConstants.PASS_THROUGH_PIPE);\n", 
            " \t\t\t\t\n", 
            "-\t\t\t\tif(\"true\".equals(disableChunking) || \"true\".equals(forceHttp10) ){\n", 
            "-\t\t\t\t\tByteArrayOutputStream _out = new ByteArrayOutputStream();\n", 
            "+\t\t\t\tif (\"true\".equals(disableChunking) || \"true\".equals(forceHttp10) ){\n", 
            " \t\t\t\t\tMessageFormatter formatter =  MessageProcessorSelector.getMessageFormatter(\n", 
            "                             msgContext);\n", 
            " \t\t\t\t\tOMOutputFormat format = PassThroughTransportUtils.getOMOutputFormat(msgContext);\n", 
            "-\t\t\t\t\tformatter.writeTo(msgContext, format, _out, false);\n", 
            "+                    OverflowableBlob serialized = null;\n", 
            "                     try {\n", 
            "-                        long messageSize = setStreamAsTempData(formatter, msgContext, format);\n", 
            "-                        msgContext.setProperty(\n", 
            "-                                PassThroughConstants.PASS_THROUGH_MESSAGE_LENGTH, messageSize);\n", 
            "-                        formatter.writeTo(msgContext, format, out, false);\n", 
            "+                        serialized = setStreamAsTempData(formatter, msgContext, format);\n", 
            "+                        msgContext.setProperty(PassThroughConstants.PASS_THROUGH_MESSAGE_LENGTH,\n", 
            "+                                serialized.getSize());\n", 
            "+                        serialized.writeTo(out);\n", 
            "                     } catch (IOException e) {\n", 
            "                     \t handleException(\"I/O error while serializing message\", e);\n", 
            "+                    } finally {\n", 
            "+                        if (serialized != null) {\n", 
            "+                            try {\n", 
            "+                                serialized.release();\n", 
            "+                            } catch (IOException ignored) {\n", 
            "+                            }\n", 
            "+                        }\n", 
            "                     }\n", 
            "-                \tpipe.setSerializationComplete(true);\n", 
            "+                    pipe.setSerializationComplete(true);\n", 
            " \t\t\t\t} else {\n", 
            " \t\t\t\t\tif ((disableChunking == null || !\"true\".equals(disableChunking)) ||\n", 
            " \t\t\t\t\t    (forceHttp10 == null || !\"true\".equals(forceHttp10))) {\n"
          ]
        }, 
        {
          "locn": "-423,7 +431,7", 
          "lines": [
            " \t\t\t\t\t}\n", 
            " \t\t\t\t\t\n", 
            " \t\t\t\t\tif (isCompleteWithoutData(msgContext)) {\n", 
            "-\t\t\t\t\t\t\tpipe.setSerializationCompleteWithoutData(true);\n", 
            "+                        pipe.setSerializationCompleteWithoutData(true);\n", 
            " \t\t\t\t\t} else {\n", 
            " \t\t\t\t\t\tpipe.setSerializationComplete(true);\n", 
            " \t\t\t\t\t}\n"
          ]
        }, 
        {
          "locn": "-603,7 +611,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     * Write the stream to a temporary storage and calculate the content length\n", 
            "+     * Write the stream to a temporary storage and return a handle to the temporary storage\n", 
            "      *\n", 
            "      * @param messageFormatter Formatter used to serialize the message\n", 
            "      * @param msgContext Message to be serialized\n"
          ]
        }, 
        {
          "locn": "-611,11 +619,12", 
          "lines": [
            "      *\n", 
            "      * @throws IOException if an exception occurred while writing data\n", 
            "      */\n", 
            "-    private long setStreamAsTempData(MessageFormatter messageFormatter,\n", 
            "+    private OverflowableBlob setStreamAsTempData(MessageFormatter messageFormatter,\n", 
            "                                      MessageContext msgContext,\n", 
            "                                      OMOutputFormat format) throws IOException {\n", 
            " \n", 
            "-        OverflowBlob serialized = new OverflowBlob(256, 4096, \"http-nio_\", \".dat\");\n", 
            "+        OverflowableBlob serialized = Blobs.createOverflowableBlob(4096, \"http-nio_\",\n", 
            "+                \".dat\", FileUtils.getTempDirectory());\n", 
            "         OutputStream out = serialized.getOutputStream();\n", 
            "         try {\n", 
            "             messageFormatter.writeTo(msgContext, format, out, true);\n"
          ]
        }, 
        {
          "locn": "-622,7 +631,7", 
          "lines": [
            "         } finally {\n", 
            "             out.close();\n", 
            "         }\n", 
            "-        return serialized.getLength();\n", 
            "+        return serialized;\n", 
            "     }\n", 
            " \n", 
            "     private boolean isBypass(String hostName) {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java"
    }
  ], 
  "id": "1746862"
}