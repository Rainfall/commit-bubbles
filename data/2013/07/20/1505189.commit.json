{
  "when": "2013-07-20T14:49:20-04:00", 
  "message": "Applying the patch for SYNAPSE-938. HTTP proxy support for pass thru HTTP sender.", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-19,12 +19,6", 
          "lines": [
            " \n", 
            " package org.apache.synapse.transport.passthru;\n", 
            " \n", 
            "-import java.io.ByteArrayOutputStream;\n", 
            "-import java.io.IOException;\n", 
            "-import java.io.OutputStream;\n", 
            "-\n", 
            "-import javax.net.ssl.SSLContext;\n", 
            "-\n", 
            " import org.apache.axiom.om.OMOutputFormat;\n", 
            " import org.apache.axiom.util.blob.OverflowBlob;\n", 
            " import org.apache.axis2.AxisFault;\n"
          ]
        }, 
        {
          "locn": "-34,6 +28,7", 
          "lines": [
            " import org.apache.axis2.addressing.EndpointReference;\n", 
            " import org.apache.axis2.context.ConfigurationContext;\n", 
            " import org.apache.axis2.context.MessageContext;\n", 
            "+import org.apache.axis2.description.Parameter;\n", 
            " import org.apache.axis2.description.TransportOutDescription;\n", 
            " import org.apache.axis2.handlers.AbstractHandler;\n", 
            " import org.apache.axis2.transport.MessageFormatter;\n"
          ]
        }, 
        {
          "locn": "-67,6 +62,16", 
          "lines": [
            " import org.apache.synapse.transport.passthru.util.PassThroughTransportUtils;\n", 
            " import org.apache.synapse.transport.passthru.util.SourceResponseFactory;\n", 
            " \n", 
            "+import javax.net.ssl.SSLContext;\n", 
            "+import java.io.ByteArrayOutputStream;\n", 
            "+import java.io.IOException;\n", 
            "+import java.io.OutputStream;\n", 
            "+import java.net.MalformedURLException;\n", 
            "+import java.net.URL;\n", 
            "+import java.util.ArrayList;\n", 
            "+import java.util.Arrays;\n", 
            "+import java.util.List;\n", 
            "+\n", 
            " /**\n", 
            "  * PassThroughHttpSender for Synapse based on HttpCore and NIO extensions\n", 
            "  */\n"
          ]
        }, 
        {
          "locn": "-88,6 +93,21", 
          "lines": [
            " \n", 
            "     private String namePrefix;\n", 
            " \n", 
            "+    /** The proxy host */\n", 
            "+    private String proxyHost = null;\n", 
            "+\n", 
            "+    /** The proxy port */\n", 
            "+    private int proxyPort = 80;\n", 
            "+\n", 
            "+    /** The list of hosts for which the proxy should be bypassed */\n", 
            "+    private String[] proxyBypassList = new String[0];\n", 
            "+\n", 
            "+    /** The list of known hosts to bypass proxy */\n", 
            "+    private List<String> knownDirectHosts = new ArrayList<String>();\n", 
            "+\n", 
            "+    /** The list of known hosts to go via proxy */\n", 
            "+    private List<String> knownProxyHosts = new ArrayList<String>();\n", 
            "+\n", 
            "     public PassThroughHttpSender() {\n", 
            "         log = LogFactory.getLog(this.getClass().getName());\n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-99,6 +119,36", 
          "lines": [
            "         // is this an SSL Sender?\n", 
            "         SSLContext sslContext = getSSLContext(transportOutDescription);\n", 
            "         SSLSetupHandler sslSetupHandler = getSSLSetupHandler(transportOutDescription);\n", 
            "+\n", 
            "+        // configure proxy settings\n", 
            "+        if (sslContext == null) {\n", 
            "+            Parameter proxyHostParam = transportOutDescription.getParameter(\"http.proxyHost\");\n", 
            "+            if (proxyHostParam != null || System.getProperty(\"http.proxyHost\") != null) {\n", 
            "+                if (proxyHostParam != null) {\n", 
            "+                    proxyHost = (String) proxyHostParam.getValue();\n", 
            "+                } else {\n", 
            "+                    proxyHost = System.getProperty(\"http.proxyHost\");\n", 
            "+                }\n", 
            "+\n", 
            "+                Parameter proxyPortParam = transportOutDescription.getParameter(\"http.proxyPort\");\n", 
            "+                if (proxyPortParam != null) {\n", 
            "+                    proxyPort = Integer.parseInt((String) proxyPortParam.getValue());\n", 
            "+                } else if (System.getProperty(\"http.proxyPort\") != null) {\n", 
            "+                    proxyPort = Integer.parseInt(System.getProperty(\"http.proxyPort\"));\n", 
            "+                }\n", 
            "+\n", 
            "+                Parameter bypassList = transportOutDescription.getParameter(\"http.nonProxyHosts\");\n", 
            "+                if (bypassList != null) {\n", 
            "+                    proxyBypassList = ((String) bypassList.getValue()).split(\"\\\\|\");\n", 
            "+                } else if (System.getProperty(\"http.nonProxyHosts\") != null) {\n", 
            "+                    proxyBypassList = (System.getProperty(\"http.nonProxyHosts\")).split(\"\\\\|\");\n", 
            "+                }\n", 
            "+\n", 
            "+                log.info(\"HTTP Sender using Proxy : \"\n", 
            "+                    + proxyHost + \":\" + proxyPort + \" bypassing : \" + Arrays.toString(proxyBypassList));\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "         namePrefix = (sslContext == null) ? \"HTTP\" : \"HTTPS\";\n", 
            " \n", 
            "         WorkerPool workerPool = null;\n"
          ]
        }, 
        {
          "locn": "-218,8 +268,40", 
          "lines": [
            "                     msgContext.setProperty(PassThroughConstants.PASS_THROUGH_PIPE, pipe);\n", 
            "                     msgContext.setProperty(PassThroughConstants.MESSAGE_BUILDER_INVOKED, Boolean.TRUE);\n", 
            "                 }\n", 
            "-                deliveryAgent.submit(msgContext, epr);\n", 
            "-                sendRequestContent(msgContext);\n", 
            "+                try {\n", 
            "+                    URL url = new URL(epr.getAddress());\n", 
            "+                    String host = url.getHost();\n", 
            "+                    int port = url.getPort();\n", 
            "+                    if (port == -1) {\n", 
            "+                        // use default\n", 
            "+                        if (\"http\".equals(url.getProtocol())) {\n", 
            "+                            port = 80;\n", 
            "+                        } else if (\"https\".equals(url.getProtocol())) {\n", 
            "+                            port = 443;\n", 
            "+                        }\n", 
            "+                    }\n", 
            "+\n", 
            "+                    if (proxyHost != null) {\n", 
            "+                        if (knownProxyHosts.contains(host)) {\n", 
            "+                            // this has already been found to be a proxy host\n", 
            "+                            host = proxyHost;\n", 
            "+                            port = proxyPort;\n", 
            "+                        } else if (knownDirectHosts.contains(host)) {\n", 
            "+                            // do nothing, let this request go directly bypassing proxy\n", 
            "+                        } else {\n", 
            "+                            // we are encountering this host:port pair for the first time\n", 
            "+                            if (!isBypass(host)) {\n", 
            "+                                host = proxyHost;\n", 
            "+                                port = proxyPort;\n", 
            "+                            }\n", 
            "+                        }\n", 
            "+                    }\n", 
            "+\n", 
            "+                    deliveryAgent.submit(msgContext, host, port);\n", 
            "+                    sendRequestContent(msgContext);\n", 
            "+                } catch (MalformedURLException e) {\n", 
            "+                    handleException(\"Malformed URL in the target EPR\", e);\n", 
            "+                }\n", 
            "             } else {\n", 
            "                 handleException(\"Cannot send message to \" + AddressingConstants.Final.WSA_NONE_URI);\n", 
            "             }\n"
          ]
        }, 
        {
          "locn": "-516,6 +598,17", 
          "lines": [
            "         return serialized.getLength();\n", 
            "     }\n", 
            " \n", 
            "+    private boolean isBypass(String hostName) {\n", 
            "+        for (String entry : proxyBypassList) {\n", 
            "+            if (hostName.matches(entry)) {\n", 
            "+                knownDirectHosts.add(hostName);\n", 
            "+                return true;\n", 
            "+            }\n", 
            "+        }\n", 
            "+        knownProxyHosts.add(hostName);\n", 
            "+        return false;\n", 
            "+    }\n", 
            "+\n", 
            "     private void handleException(String s, Exception e) throws AxisFault {\n", 
            "         log.error(s, e);\n", 
            "         throw new AxisFault(s, e);\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-20,7 +20,6", 
          "lines": [
            " \n", 
            " import org.apache.axis2.AxisFault;\n", 
            " import org.apache.axis2.context.MessageContext;\n", 
            "-import org.apache.axis2.addressing.EndpointReference;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.http.nio.NHttpClientConnection;\n"
          ]
        }, 
        {
          "locn": "-29,12 +28,10", 
          "lines": [
            " import org.apache.synapse.transport.passthru.util.TargetRequestFactory;\n", 
            " \n", 
            " import java.io.OutputStream;\n", 
            "+import java.util.Map;\n", 
            " import java.util.Queue;\n", 
            "-import java.util.Map;\n", 
            " import java.util.concurrent.ConcurrentHashMap;\n", 
            " import java.util.concurrent.ConcurrentLinkedQueue;\n", 
            "-import java.net.URL;\n", 
            "-import java.net.MalformedURLException;\n", 
            " import java.util.concurrent.locks.Lock;\n", 
            " import java.util.concurrent.locks.ReentrantLock;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-89,23 +86,12", 
          "lines": [
            "      * system about the need for a connection.\n", 
            "      *\n", 
            "      * @param msgContext the message context to be sent\n", 
            "-     * @param epr the endpoint to which the message should be sent\n", 
            "+     * @param host host name of epr\n", 
            "+     * @param port port of the of epr\n", 
            "      * @throws AxisFault if an error occurs\n", 
            "      */\n", 
            "-    public void submit(MessageContext msgContext, EndpointReference epr)\n", 
            "+    public void submit(MessageContext msgContext, String host, int port)\n", 
            "             throws AxisFault {\n", 
            "-        try {\n", 
            "-            URL url = new URL(epr.getAddress());\n", 
            "-            String host = url.getHost();\n", 
            "-            int port = url.getPort();\n", 
            "-            if (port == -1) {\n", 
            "-                // use default\n", 
            "-                if (\"http\".equals(url.getProtocol())) {\n", 
            "-                    port = 80;\n", 
            "-                } else if (\"https\".equals(url.getProtocol())) {\n", 
            "-                    port = 443;\n", 
            "-                }\n", 
            "-            }\n", 
            " \n", 
            "             String key = host + \":\" + port;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-142,10 +128,6", 
          "lines": [
            "                     tryNextMessage(messageContext, conn);\n", 
            "                 }\n", 
            "             }\n", 
            "-\n", 
            "-        } catch (MalformedURLException e) {\n", 
            "-            handleException(\"Malformed URL in the target EPR\", e);\n", 
            "-        }\n", 
            "     }\n", 
            " \n", 
            "     public void errorConnecting(String host, int port, int errorCode, String message) {\n"
          ]
        }, 
        {
          "locn": "-237,14 +219,4", 
          "lines": [
            "         conn.requestOutput();\n", 
            "     }    \n", 
            " \n", 
            "-    /**\n", 
            "-     * Throws an AxisFault if an error occurs at this level\n", 
            "-     * @param s a message describing the error\n", 
            "-     * @param e original exception leads to the error condition\n", 
            "-     * @throws AxisFault wrapping the original exception\n", 
            "-     */\n", 
            "-    private void handleException(String s, Exception e) throws AxisFault {\n", 
            "-        log.error(s, e);\n", 
            "-        throw new AxisFault(s, e);\n", 
            "-    }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/DeliveryAgent.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/DeliveryAgent.java"
    }
  ], 
  "id": "1505189"
}