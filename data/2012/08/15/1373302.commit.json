{
  "when": "2012-08-15T06:03:18-04:00", 
  "who": "uswick", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-96,6 +96,25", 
          "lines": [
            "                             </descriptors>\n", 
            "                         </configuration>\n", 
            "                     </execution>\n", 
            "+                     <execution>\n", 
            "+                        <id>eip-library-assembly</id>\n", 
            "+                        <phase>generate-test-resources</phase>\n", 
            "+                        <goals>\n", 
            "+                            <goal>attached</goal>\n", 
            "+                        </goals>\n", 
            "+                        <configuration>\n", 
            "+                            <finalName>synapse-eip-lib</finalName>\n", 
            "+                            <filters>\n", 
            "+                                <filter>\n", 
            "+                                    ${basedir}/src/test/resources/synapse-libraries/assembly/filter.properties\n", 
            "+                                </filter>\n", 
            "+                            </filters>\n", 
            "+                            <descriptors>\n", 
            "+                                <descriptor>src/test/resources/synapse-libraries/assembly/assemble-eip-lib.xml\n", 
            "+                                </descriptor>\n", 
            "+                            </descriptors>\n", 
            "+                        </configuration>\n", 
            "+                    </execution>\n", 
            "                 </executions>\n", 
            "             </plugin>\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-115,6 +134,7", 
          "lines": [
            "                                 <mkdir dir=\"target/test_repos/client/modules\"/>\n", 
            "                                 <mkdir dir=\"target/test_repos/synapse/synapse-libraries\"/>\n", 
            "                                 <copy file=\"target/synapse-test-lib.zip\" todir=\"target/test_repos/synapse/synapse-libraries\"/>\n", 
            "+                                <copy file=\"target/synapse-eip-lib.zip\" todir=\"target/test_repos/synapse/synapse-libraries\"/>\n", 
            "                             </tasks>\n", 
            "                         </configuration>\n", 
            "                         <goals>\n"
          ]
        }, 
        {
          "locn": "-127,6 +147,7", 
          "lines": [
            "                         <configuration>\n", 
            "                             <tasks>\n", 
            "                                 <delete file=\"target/synapse-test-lib.zip\"/>\n", 
            "+                                <delete file=\"target/synapse-eip-lib.zip\"/>\n", 
            "                             </tasks>\n", 
            "                         </configuration>\n", 
            "                         <goals>\n"
          ]
        }
      ], 
      "to": "java/modules/core/pom.xml", 
      "from": "java/modules/core/pom.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,23", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+<assembly>\n", 
            "+    <formats>\n", 
            "+        <format>zip</format>\n", 
            "+    </formats>\n", 
            "+    <includeBaseDirectory>false</includeBaseDirectory>\n", 
            "+    <fileSets>\n", 
            "+        <fileSet>\n", 
            "+            <directory>src/test/resources/synapse-libraries/synapse-eip-lib</directory>\n", 
            "+            <outputDirectory></outputDirectory>\n", 
            "+        </fileSet>\n", 
            "+        <fileSet>\n", 
            "+            <directory>target/classes</directory>\n", 
            "+            <outputDirectory></outputDirectory>\n", 
            "+            <excludes>\n", 
            "+                <exclude>**/metrics_module.xml</exclude>\n", 
            "+                <exclude>**/META-INF/*</exclude>\n", 
            "+            </excludes>\n", 
            "+        </fileSet>\n", 
            "+    </fileSets>\n", 
            "+    \n", 
            "+    \n", 
            "+</assembly>\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/assembly/assemble-eip-lib.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/assembly/assemble-eip-lib.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,11", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+<artifact name=\"systemManagement\" type=\"synapse/template\">\n", 
            "+\n", 
            "+    <subArtifacts>\n", 
            "+        <artifact name=\"splitter\">\n", 
            "+            <file>template_splitter.xml</file>\n", 
            "+            <description>Splitter library function</description>\n", 
            "+        </artifact>\n", 
            "+    </subArtifacts>\n", 
            "+\n", 
            "+</artifact>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eip-lib/eip_systemManagement/artifact.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eip-lib/eip_systemManagement/artifact.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,20", 
          "lines": [
            "+<template xmlns=\"http://ws.apache.org/ns/synapse\" name=\"splitter\">\n", 
            "+    <parameter name=\"iterate_exp\"/>\n", 
            "+    <parameter name=\"endpoint_uri\"/>\n", 
            "+    <parameter name=\"attach_path\" default=\"{{//original}}\" optional=\"true\"/>\n", 
            "+    <parameter name=\"sequence_ref\"/>\n", 
            "+    <sequence>\n", 
            "+        <property name=\"ItrExp\" expression=\"$func:iterate_exp\" />\n", 
            "+        <property name=\"EndPUri\" expression=\"$func:endpoint_uri\" />\n", 
            "+        <property name=\"AttachPath\" expression=\"$func:attach_path\" />\n", 
            "+        <property name=\"SRef\" expression=\"$func:sequence_ref\" />\n", 
            "+        <property name=\"Endpoint_1\" expression=\"get-property('To')\" />\n", 
            "+        <header name=\"To\" expression=\"$func:endpoint_uri\"/>\n", 
            "+        <iterate xmlns:ns=\"http://org.apache.synapse/xsd\" continueParent=\"true\" preservePayload=\"true\" attachPath=\"$func:attach_path\" expression=\"$func:iterate_exp\">\n", 
            "+            <target>\n", 
            "+              <sequence key=\"{$func:sequence_ref}\"/>\n", 
            "+            </target>\n", 
            "+        </iterate>\n", 
            "+        <property name=\"Endpoint_2\" expression=\"get-property('To')\" />\n", 
            "+    </sequence>\n", 
            "+</template>\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eip-lib/eip_systemManagement/template_splitter.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eip-lib/eip_systemManagement/template_splitter.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,7", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+<artifacts>\n", 
            "+    <artifact name=\"EipLibrary\" package=\"synapse.lang.eip\" >\n", 
            "+        <dependency artifact=\"systemManagement\" />\n", 
            "+        <description>eip synapse library</description>\n", 
            "+    </artifact>\n", 
            "+</artifacts>\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eip-lib/artifacts.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eip-lib/artifacts.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,26", 
          "lines": [
            "+package org.apache.synapse.libraries.eip;\n", 
            "+\n", 
            "+import junit.framework.TestCase;\n", 
            "+import org.apache.synapse.libraries.imports.SynapseImport;\n", 
            "+import org.apache.synapse.libraries.model.Library;\n", 
            "+import org.apache.synapse.libraries.util.LibDeployerUtils;\n", 
            "+import org.apache.synapse.mediators.eip.AbstractSplitMediatorTestCase;\n", 
            "+\n", 
            "+import java.io.File;\n", 
            "+import java.net.URISyntaxException;\n", 
            "+\n", 
            "+public abstract class AbstractEipLibTestCase extends TestCase {\n", 
            "+    public String path = null;\n", 
            "+\n", 
            "+    protected String getResourcePath() {\n", 
            "+        try {\n", 
            "+            if (path == null) {\n", 
            "+                path = new File(\"./target/test_repos/synapse/synapse-libraries/synapse-eip-lib.zip\").getAbsolutePath();\n", 
            "+            }\n", 
            "+        } catch (Exception e) {\n", 
            "+            return null;\n", 
            "+        }\n", 
            "+        return path;\n", 
            "+\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/libraries/eip/AbstractEipLibTestCase.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/libraries/eip/AbstractEipLibTestCase.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,87", 
          "lines": [
            "+package org.apache.synapse.libraries.eip;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMAbstractFactory;\n", 
            "+import org.apache.axiom.soap.SOAPEnvelope;\n", 
            "+import org.apache.axis2.context.ConfigurationContext;\n", 
            "+import org.apache.axis2.engine.AxisConfiguration;\n", 
            "+import org.apache.synapse.MessageContext;\n", 
            "+import org.apache.synapse.config.SynapseConfigUtils;\n", 
            "+import org.apache.synapse.config.SynapseConfiguration;\n", 
            "+import org.apache.synapse.config.xml.InvokeMediatorFactory;\n", 
            "+import org.apache.synapse.config.xml.MediatorFactory;\n", 
            "+import org.apache.synapse.core.axis2.Axis2MessageContext;\n", 
            "+import org.apache.synapse.core.axis2.Axis2SynapseEnvironment;\n", 
            "+import org.apache.synapse.libraries.imports.SynapseImport;\n", 
            "+import org.apache.synapse.libraries.model.Library;\n", 
            "+import org.apache.synapse.libraries.util.LibDeployerUtils;\n", 
            "+import org.apache.synapse.mediators.base.SequenceMediator;\n", 
            "+import org.apache.synapse.mediators.template.InvokeMediator;\n", 
            "+\n", 
            "+import java.util.Properties;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Tests for synapse template invoke\n", 
            "+ */\n", 
            "+public class EipLibTest extends AbstractEipLibTestCase {\n", 
            "+    private MessageContext synCtx;\n", 
            "+\n", 
            "+\n", 
            "+    protected void setUp() throws Exception {\n", 
            "+        super.setUp();\n", 
            "+        Library library = LibDeployerUtils.createSynapseLibrary(getResourcePath());\n", 
            "+        SynapseImport validSynImport = new SynapseImport();\n", 
            "+        validSynImport.setLibName(\"EipLibrary\");\n", 
            "+        validSynImport.setLibPackage(\"synapse.lang.eip\");\n", 
            "+        if (validSynImport != null) {\n", 
            "+            LibDeployerUtils.loadLibArtifacts(validSynImport, library);\n", 
            "+        }\n", 
            "+        assertEquals(\"EipLibrary\", library.getQName().getLocalPart());\n", 
            "+        assertEquals(\"synapse.lang.eip\", library.getPackage());\n", 
            "+        assertEquals(\"eip synapse library\", library.getDescription());\n", 
            "+        assertNotNull(library.getArtifact(\"synapse.lang.eip.splitter\"));\n", 
            "+        //setting up synapse context & configuration\n", 
            "+        SynapseConfiguration synConf = new SynapseConfiguration();\n", 
            "+        synConf.addSynapseLibrary(library.toString(), library);\n", 
            "+        synConf.addSequence(\"main\", new SequenceMediator());\n", 
            "+        synConf.addSequence(\"fault\", new SequenceMediator());\n", 
            "+        AxisConfiguration config = new AxisConfiguration();\n", 
            "+        synCtx = new Axis2MessageContext(new org.apache.axis2.context.MessageContext(),\n", 
            "+                synConf, new Axis2SynapseEnvironment(new ConfigurationContext(config), synConf));\n", 
            "+        //((Axis2MessageContext)synCtx).getAxis2MessageContext().setConfigurationContext(new ConfigurationContext(config));\n", 
            "+        SOAPEnvelope envelope = OMAbstractFactory.getSOAP11Factory().getDefaultEnvelope();\n", 
            "+        envelope.getBody().addChild(SynapseConfigUtils.stringToOM(\"<original><itr><a>IBM</a></itr><itr><a>DELL</a></itr></original>\"));\n", 
            "+        synCtx.setEnvelope(envelope);\n", 
            "+        SequenceMediator seqMed = new SequenceMediator();\n", 
            "+        synCtx.getConfiguration().addSequence(\"seqRef\", seqMed);\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testValidEipLibInvoke() throws Exception {\n", 
            "+\n", 
            "+        //Invoke Template\n", 
            "+        MediatorFactory fac = new InvokeMediatorFactory();\n", 
            "+\n", 
            "+        InvokeMediator iterate = (InvokeMediator) fac.createMediator(SynapseConfigUtils.stringToOM(\"<call-template xmlns=\\\"http://ws.apache.org/ns/synapse\\\" \" +\n", 
            "+                \"target=\\\"synapse.lang.eip.splitter\\\">\" +\n", 
            "+                \"<with-param xmlns=\\\"http://ws.apache.org/ns/synapse\\\" name=\\\"iterate_exp\\\" value=\\\"{{//original/itr}}\\\"/>\" +\n", 
            "+                \"<with-param xmlns=\\\"http://ws.apache.org/ns/synapse\\\" name=\\\"endpoint_uri\\\" value=\\\"http://localhost:9000/services/IterateTestService\\\"/>\" +\n", 
            "+                \"<with-param xmlns=\\\"http://ws.apache.org/ns/synapse\\\" name=\\\"sequence_ref\\\" value=\\\"seqRef\\\"/>\" +\n", 
            "+                \"</call-template>\"), new Properties());\n", 
            "+\n", 
            "+        boolean returnValue = iterate.mediate(synCtx);\n", 
            "+\n", 
            "+        //Test Template Parameters\n", 
            "+        assertEquals(\"<itr><a>IBM</a></itr><itr><a>DELL</a></itr>\", synCtx.getProperty(\"ItrExp\"));\n", 
            "+        assertEquals(\"http://localhost:9000/services/IterateTestService\", synCtx.getProperty(\"EndPUri\"));\n", 
            "+        assertEquals(\"<original><itr><a>IBM</a></itr><itr><a>DELL</a></itr></original>\", synCtx.getProperty(\"AttachPath\"));\n", 
            "+        assertEquals(\"seqRef\", synCtx.getProperty(\"SRef\"));\n", 
            "+\n", 
            "+        //Test Template invoke & mediation\n", 
            "+        assertTrue(returnValue);\n", 
            "+        assertEquals(\"\", synCtx.getProperty(\"Endpoint_1\"));\n", 
            "+        assertEquals(\"http://localhost:9000/services/IterateTestService\", synCtx.getProperty(\"Endpoint_2\"));\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/libraries/eip/EipLibTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/libraries/eip/EipLibTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-56,6 +56,8", 
          "lines": [
            " \n", 
            " \n", 
            "     public static Library createSynapseLibrary(String libPath) {\n", 
            "+        createDir(APP_UNZIP_DIR);\n", 
            "+\n", 
            "         String libFilePath = LibDeployerUtils.formatPath(libPath);\n", 
            "         //extract\n", 
            "         String extractPath = LibDeployerUtils.extractSynapseLib(libFilePath);\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/libraries/util/LibDeployerUtils.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/libraries/util/LibDeployerUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,71", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.mediators;\n", 
            "+\n", 
            "+import javax.xml.namespace.QName;\n", 
            "+\n", 
            "+import org.apache.synapse.config.xml.XMLConfigConstants;\n", 
            "+\n", 
            "+/**\n", 
            "+ * A template parameter is a variable which is used when creating templates and contains following configuration\n", 
            "+ * parameter name=\"p1\" [default=\"value|expression\"] [optional=(true|false)]\n", 
            "+ *\n", 
            "+ */\n", 
            "+public class TemplateParameter {\n", 
            "+    public static final QName PARAMETER_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, \"parameter\");\n", 
            "+    public static final QName ATT_NAME_Q = new QName(XMLConfigConstants.NULL_NAMESPACE, \"name\");\n", 
            "+    public static final QName ATT_DEFAULT_Q = new QName(XMLConfigConstants.NULL_NAMESPACE, \"default\");\n", 
            "+    public static final QName ATT_OPTIONAL_Q = new QName(XMLConfigConstants.NULL_NAMESPACE, \"optional\");\n", 
            "+\n", 
            "+\n", 
            "+    private String name;\n", 
            "+    private Value defaultValue;\n", 
            "+    private boolean isOptional;\n", 
            "+\n", 
            "+    public TemplateParameter() {\n", 
            "+        this.name = null;\n", 
            "+        this.defaultValue = null;\n", 
            "+        this.isOptional = false;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getName() {\n", 
            "+        return name;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setName(String name) {\n", 
            "+        this.name = name;\n", 
            "+    }\n", 
            "+\n", 
            "+    public Value getDefaultValue() {\n", 
            "+        return defaultValue;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setDefaultValue(Value defaultValue) {\n", 
            "+        this.defaultValue = defaultValue;\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean isOptional() {\n", 
            "+        return isOptional;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setOptional(boolean optional) {\n", 
            "+        isOptional = optional;\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/TemplateParameter.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/TemplateParameter.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,32", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+        \n", 
            "+<!-- Introduction to Synapse Recipient List eip function template -->\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+<import xmlns=\"http://ws.apache.org/ns/synapse\" name=\"EipLibrary\" package=\"synapse.lang.eip\" />\n", 
            "+   <sequence name=\"main\">\n", 
            "+    <property name=\"OUT_ONLY\" value=\"true\"/>\n", 
            "+                <property name=\"FORCE_SC_ACCEPTED\" value=\"true\" scope=\"axis2\"/>\n", 
            "+    <call-template target=\"synapse.lang.eip.recipient_list\">\n", 
            "+        <with-param name=\"recipient_list\" value=\"http://localhost:9000/services/SimpleStockQuoteService,http://localhost:9001/services/SimpleStockQuoteService\"/>\n", 
            "+    </call-template>\n", 
            "+    <drop/>\n", 
            "+</sequence>\n", 
            "+</definitions>\n"
          ]
        }
      ], 
      "to": "java/repository/conf/sample/synapse_sample_857.xml", 
      "from": "java/repository/conf/sample/synapse_sample_857.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-18,7 +18,10", 
          "lines": [
            "  */\n", 
            " package org.apache.synapse.mediators.template;\n", 
            " \n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.synapse.MessageContext;\n", 
            "+import org.apache.synapse.mediators.TemplateParameter;\n", 
            " import org.apache.synapse.mediators.Value;\n", 
            " import org.apache.synapse.mediators.eip.EIPUtils;\n", 
            " import org.jaxen.JaxenException;\n"
          ]
        }, 
        {
          "locn": "-30,6 +33,7", 
          "lines": [
            "  * a context will be populated with function parameters.\n", 
            "  */\n", 
            " public class TemplateContext {\n", 
            "+    private static final Log log = LogFactory.getLog(TemplateContext.class);\n", 
            "     /**\n", 
            "      * refers to the function-template name this context is binded to\n", 
            "      */\n"
          ]
        }, 
        {
          "locn": "-37,13 +41,13", 
          "lines": [
            "     /**\n", 
            "      * refers to the parameter names of the function\n", 
            "      */\n", 
            "-    private Collection<String> parameters;\n", 
            "+    private Collection<TemplateParameter> parameters;\n", 
            "     /**\n", 
            "      * contains a map for parameterNames to evaluated values\n", 
            "      */\n", 
            "     private Map mappedValues;\n", 
            " \n", 
            "-    TemplateContext(String name, Collection<String> parameters) {\n", 
            "+    TemplateContext(String name, Collection<TemplateParameter> parameters) {\n", 
            "         this.fName = name;\n", 
            "         this.parameters = parameters;\n", 
            "         mappedValues = new HashMap();\n"
          ]
        }, 
        {
          "locn": "-50,18 +54,27", 
          "lines": [
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     * evaluate raw parameters passed from an invoke medaiator and store them in this context\n", 
            "+     * evaluate raw parameters passed from an invoke mediator and store them in this context\n", 
            "      * @param synCtxt Synapse MessageContext\n", 
            "      */\n", 
            "     public void setupParams(MessageContext synCtxt) {\n", 
            "-        Iterator<String> paramNames = parameters.iterator();\n", 
            "+        Iterator<TemplateParameter> paramNames = parameters.iterator();\n", 
            "         while (paramNames.hasNext()) {\n", 
            "-            String parameter = paramNames.next();\n", 
            "-            String mapping = EIPUtils.getTemplatePropertyMapping(fName, parameter);\n", 
            "+            TemplateParameter parameter = paramNames.next();\n", 
            "+            String mapping = EIPUtils.getTemplatePropertyMapping(fName, parameter.getName());\n", 
            "             Object propertyValue = synCtxt.getProperty(mapping);\n", 
            "-            Object paramValue = getEvaluatedParamValue(synCtxt, parameter, (Value) propertyValue);\n", 
            "+            //If property value is not provided assign default value\n", 
            "+            if (propertyValue == null && parameter.getDefaultValue() != null) {\n", 
            "+                propertyValue = parameter.getDefaultValue();\n", 
            "+            }\n", 
            "+            //If this parameter is a required one give an error\n", 
            "+            if (!parameter.isOptional() && propertyValue == null) {\n", 
            "+                String msg = parameter.getName() + \" is a required parameter for \" + fName + \" template\";\n", 
            "+                log.error(msg);\n", 
            "+            }\n", 
            "+            Object paramValue = getEvaluatedParamValue(synCtxt, parameter.getName(), (Value) propertyValue);\n", 
            "             if (paramValue != null) {\n", 
            "-                mappedValues.put(parameter, paramValue);\n", 
            "+                mappedValues.put(parameter.getName(), paramValue);\n", 
            "                 //remove temp property from the context\n", 
            "                 removeProperty(synCtxt, mapping);\n", 
            "             }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/template/TemplateContext.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/template/TemplateContext.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-23,6 +23,7", 
          "lines": [
            " import org.apache.synapse.SynapseLog;\n", 
            " import org.apache.synapse.core.SynapseEnvironment;\n", 
            " import org.apache.synapse.mediators.AbstractListMediator;\n", 
            "+import org.apache.synapse.mediators.TemplateParameter;\n", 
            " \n", 
            " import javax.sound.midi.Sequence;\n", 
            " import java.util.Collection;\n"
          ]
        }, 
        {
          "locn": "-37,7 +38,7", 
          "lines": [
            "  */\n", 
            " public class TemplateMediator extends AbstractListMediator {\n", 
            " \n", 
            "-    private Collection<String> paramNames;\n", 
            "+    private Collection<TemplateParameter> parameters;\n", 
            " \n", 
            "     private String eipPatternName;\n", 
            "     private String fileName;\n"
          ]
        }, 
        {
          "locn": "-44,12 +45,12", 
          "lines": [
            "     /** flag to ensure that each and every sequence is initialized and destroyed atmost once */\n", 
            "     private boolean initialized = false;\n", 
            " \n", 
            "-    public void setParameters(Collection<String> paramNames) {\n", 
            "-        this.paramNames = paramNames;\n", 
            "+    public void setParameters(Collection<TemplateParameter> paramNames) {\n", 
            "+        this.parameters = paramNames;\n", 
            "     }\n", 
            " \n", 
            "-    public Collection<String> getParameters() {\n", 
            "-        return paramNames;\n", 
            "+    public Collection<TemplateParameter> getParameters() {\n", 
            "+        return parameters;\n", 
            "     }\n", 
            " \n", 
            "     public void setName(String name) {\n"
          ]
        }, 
        {
          "locn": "-64,7 +65,7", 
          "lines": [
            "         SynapseLog synLog = getLog(synCtx);\n", 
            " \n", 
            "         if (synLog.isTraceOrDebugEnabled()) {\n", 
            "-            synLog.traceOrDebug(\"Start : EIP Sequence \" + \"paramNames : \" + paramNames);\n", 
            "+            synLog.traceOrDebug(\"Start : EIP Sequence \" + \"paramNames : \" + parameters);\n", 
            " \n", 
            "             if (synLog.isTraceTraceEnabled()) {\n", 
            "                 synLog.traceTrace(\"Message : \" + synCtx.getEnvelope());\n"
          ]
        }, 
        {
          "locn": "-86,7 +87,7", 
          "lines": [
            "      * @param synCtx  Synapse Message context\n", 
            "      */\n", 
            "     private void pushFuncContextTo(MessageContext synCtx) {\n", 
            "-        TemplateContext funcContext = new TemplateContext(eipPatternName, paramNames);\n", 
            "+        TemplateContext funcContext = new TemplateContext(eipPatternName, parameters);\n", 
            "         //process the raw parameters parsed in\n", 
            "         funcContext.setupParams(synCtx);\n", 
            "         //if a function stack has not already been created for this message flow create new one\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/template/TemplateMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/template/TemplateMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-128,7 +128,7", 
          "lines": [
            "                 attachPathValue, e);\n", 
            "         }\n", 
            " \n", 
            "-        boolean asynchronous = true;\n", 
            "+        boolean asynchronous = false;\n", 
            "         OMAttribute asynchronousAttr = elem.getAttribute(ATT_SEQUENCIAL);\n", 
            "         if (asynchronousAttr != null && asynchronousAttr.getAttributeValue().equals(\"true\")) {\n", 
            "             asynchronous = false;\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/IterateMediatorFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/IterateMediatorFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-20,17 +20,17", 
          "lines": [
            " \n", 
            " import org.apache.axiom.om.OMElement;\n", 
            " import org.apache.synapse.Mediator;\n", 
            "+import org.apache.synapse.mediators.TemplateParameter;\n", 
            " import org.apache.synapse.mediators.template.TemplateMediator;\n", 
            " \n", 
            " import java.util.Collection;\n", 
            "-import java.util.Iterator;\n", 
            " import java.util.List;\n", 
            " \n", 
            " /**\n", 
            "  *  Serializer class for Template to serialize into a  configuration as follows\n", 
            "  * <template name=\"simple_func\">\n", 
            "-\t    <parameter name=\"p1\"/>\n", 
            "-        <parameter name=\"p2\"/>*\n", 
            "+\t    <parameter name=\"p1\" [default=\"value|expression\"] [optional=(true|false)]/>\n", 
            "+        <parameter name=\"p2\" [default=\"value|expression\"] [optional=(true|false)]/>*\n", 
            "         <mediator/>+\n", 
            "     </template>\n", 
            "  */\n"
          ]
        }, 
        {
          "locn": "-47,6 +47,7", 
          "lines": [
            "         if (mediator.getName() != null) {\n", 
            "             templateElem.addAttribute(fac.createOMAttribute(\n", 
            "                     \"name\", nullNS, mediator.getName()));\n", 
            "+            //serialize parameters\n", 
            "             serializeParams(templateElem,mediator);\n", 
            "             serializeBody(templateElem, mediator.getList());\n", 
            "             saveTracingState(templateElem, mediator);\n"
          ]
        }, 
        {
          "locn": "-55,14 +56,16", 
          "lines": [
            "         return templateElem;\n", 
            "     }\n", 
            " \n", 
            "+     /**\n", 
            "+     * Serialize parameters for the template mediator specified\n", 
            "+     *\n", 
            "+     * @param templateElem the OMElement that specifies the template configuration\n", 
            "+     * @param mediator the TemplateMediator\n", 
            "+     */\n", 
            "     private void serializeParams(OMElement templateElem, TemplateMediator mediator) {\n", 
            "-        Collection<String> params = mediator.getParameters();\n", 
            "-        for (String param : params) {\n", 
            "-            if (param != null && !\"\".equals(param)) {\n", 
            "-                OMElement paramEl = fac.createOMElement(\"parameter\", synNS);\n", 
            "-                paramEl.addAttribute(fac.createOMAttribute(\"name\", nullNS, param));\n", 
            "-                templateElem.addChild(paramEl);\n", 
            "-            }\n", 
            "+        Collection<TemplateParameter> params = mediator.getParameters();\n", 
            "+        if (params != null && params.size() > 0) {\n", 
            "+               TemplateParameterSerializer.serializeTemplateParameters(templateElem,mediator.getParameters());\n", 
            "         }\n", 
            "     }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/TemplateMediatorSerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/TemplateMediatorSerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-85,8 +85,8", 
          "lines": [
            "             handleException(\"Missing expression of the IterateMediator which is required.\");\n", 
            "         }\n", 
            " \n", 
            "-        if (itrMed.getTarget() != null && !itrMed.getTarget().isAsynchronous()) {\n", 
            "-            itrElem.addAttribute(\"sequential\", \"true\", nullNS);\n", 
            "+        if (itrMed.getTarget() != null && itrMed.getTarget().isAsynchronous()) {\n", 
            "+            itrElem.addAttribute(\"sequential\", \"false\", nullNS);\n", 
            "         }\n", 
            " \n", 
            "         itrElem.addChild(TargetSerializer.serializeTarget(itrMed.getTarget()));\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/IterateMediatorSerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/IterateMediatorSerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-22,6 +22,7", 
          "lines": [
            " import org.apache.axiom.om.OMElement;\n", 
            " import org.apache.synapse.Mediator;\n", 
            " import org.apache.synapse.SynapseException;\n", 
            "+import org.apache.synapse.mediators.TemplateParameter;\n", 
            " import org.apache.synapse.mediators.template.TemplateMediator;\n", 
            " \n", 
            " import javax.xml.namespace.QName;\n"
          ]
        }, 
        {
          "locn": "-32,8 +33,8", 
          "lines": [
            " /**\n", 
            "  * Factory class for Template configuration as follows\n", 
            "  * <template name=\"simple_func\">\n", 
            "-\t    <parameter name=\"p1\"/>\n", 
            "-        <parameter name=\"p2\"/>*\n", 
            "+\t    <parameter name=\"p1\" [default=\"value|expression\"] [optional=(true|false)]/>\n", 
            "+        <parameter name=\"p2\" [default=\"value|expression\"] [optional=(true|false)]/>*\n", 
            "         <mediator/>+\n", 
            "     </template>\n", 
            "  */\n"
          ]
        }, 
        {
          "locn": "-43,13 +44,6", 
          "lines": [
            "     private static final QName TEMPLATE_BODY_Q\n", 
            "             = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, \"sequence\");\n", 
            " \n", 
            "-    /**\n", 
            "-     * Element  QName Definitions\n", 
            "-     */\n", 
            "-    public static final QName PARAMETER_Q = new QName(\n", 
            "-            XMLConfigConstants.SYNAPSE_NAMESPACE, \"parameter\");\n", 
            "-\n", 
            "-\n", 
            "     protected Mediator createSpecificMediator(OMElement elem, Properties properties) {\n", 
            "         TemplateMediator templateTemplateMediator = new TemplateMediator();\n", 
            "         OMAttribute nameAttr = elem.getAttribute(ATT_NAME);\n"
          ]
        }, 
        {
          "locn": "-56,7 +50,8", 
          "lines": [
            "         if (nameAttr != null) {\n", 
            "             templateTemplateMediator.setName(nameAttr.getAttributeValue());\n", 
            "             processAuditStatus(templateTemplateMediator, elem);\n", 
            "-            initParameters(elem, templateTemplateMediator);\n", 
            "+            //set template parameters\n", 
            "+            templateTemplateMediator.setParameters(TemplateParameterFactory.getTemplateParameters(elem));\n", 
            "             OMElement templateBodyElem = elem.getFirstChildWithName(TEMPLATE_BODY_Q);\n", 
            "             addChildren(templateBodyElem, templateTemplateMediator, properties);\n", 
            "         } else {\n"
          ]
        }, 
        {
          "locn": "-67,22 +62,6", 
          "lines": [
            "         return templateTemplateMediator;\n", 
            "     }\n", 
            " \n", 
            "-    private void initParameters(OMElement templateElem, TemplateMediator templateMediator) {\n", 
            "-        Iterator subElements = templateElem.getChildElements();\n", 
            "-        Collection<String> paramNames = new ArrayList<String>();\n", 
            "-        while (subElements.hasNext()) {\n", 
            "-            OMElement child = (OMElement) subElements.next();\n", 
            "-            if (child.getQName().equals(PARAMETER_Q)) {\n", 
            "-                OMAttribute paramNameAttr = child.getAttribute(ATT_NAME);\n", 
            "-                if (paramNameAttr != null) {\n", 
            "-                    paramNames.add(paramNameAttr.getAttributeValue());\n", 
            "-                }\n", 
            "-//                child.detach();\n", 
            "-            }\n", 
            "-        }\n", 
            "-        templateMediator.setParameters(paramNames);\n", 
            "-    }\n", 
            "-\n", 
            "     public QName getTagQName() {\n", 
            "         return TEMPLATE_Q;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/TemplateMediatorFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/TemplateMediatorFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,98", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.config.xml;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMAttribute;\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.SynapseException;\n", 
            "+import org.apache.synapse.mediators.TemplateParameter;\n", 
            "+import org.apache.synapse.mediators.Value;\n", 
            "+\n", 
            "+import java.util.ArrayList;\n", 
            "+import java.util.Iterator;\n", 
            "+import java.util.List;\n", 
            "+\n", 
            "+/**\n", 
            "+ * A utility class capable of creating instances of TemplateParameter objects by reading\n", 
            "+ * through a given XML configuration\n", 
            "+ *\n", 
            "+ * <pre>\n", 
            "+ * &lt;element&gt;\n", 
            "+ *    &lt;parameter name=\"p1\" [default=\"value|expression\"] [optional=(true|false)]/&gt;*\n", 
            "+ * &lt;/element&gt;\n", 
            "+ * </pre>\n", 
            "+ */\n", 
            "+public class TemplateParameterFactory {\n", 
            "+    private static final Log log = LogFactory.getLog(TemplateParameterFactory.class);\n", 
            "+\n", 
            "+     /**\n", 
            "+     * Creates a list of parameters in a given template\n", 
            "+     *\n", 
            "+     * @param elem the OMElement that specifies the template configuration\n", 
            "+     * @return the list of TemplateParameter instances created\n", 
            "+     */\n", 
            "+    public static List<TemplateParameter> getTemplateParameters(OMElement elem) {\n", 
            "+\n", 
            "+        List<TemplateParameter> parameterList = new ArrayList<TemplateParameter>();\n", 
            "+\n", 
            "+        Iterator iter = elem.getChildrenWithName(TemplateParameter.PARAMETER_Q);\n", 
            "+\n", 
            "+        while (iter.hasNext()) {\n", 
            "+\n", 
            "+            OMElement paramEle = (OMElement) iter.next();\n", 
            "+            OMAttribute attName = paramEle.getAttribute(TemplateParameter.ATT_NAME_Q);\n", 
            "+            OMAttribute attDefault = paramEle.getAttribute(TemplateParameter.ATT_DEFAULT_Q);\n", 
            "+            OMAttribute attOptional = paramEle.getAttribute(TemplateParameter.ATT_OPTIONAL_Q);\n", 
            "+\n", 
            "+            TemplateParameter param = new TemplateParameter();\n", 
            "+\n", 
            "+            if (attName == null || attName.getAttributeValue() == null ||\n", 
            "+                    attName.getAttributeValue().trim().length() == 0) {\n", 
            "+                String msg = \"Parameter name is a required attribute for a Template Parameter\";\n", 
            "+                log.error(msg);\n", 
            "+                throw new SynapseException(msg);\n", 
            "+            } else {\n", 
            "+                param.setName(attName.getAttributeValue());\n", 
            "+            }\n", 
            "+\n", 
            "+\n", 
            "+            if (attDefault == null || attDefault.getAttributeValue() == null ||\n", 
            "+                    attDefault.getAttributeValue().trim().length() == 0) {\n", 
            "+                String msg = \"Default value is not specified for \" + param.getName() + \" Parameter\";\n", 
            "+                log.warn(msg);\n", 
            "+            } else {\n", 
            "+                Value paramValue = new ValueFactory().createValue(\"default\", paramEle);\n", 
            "+                param.setDefaultValue(paramValue);\n", 
            "+            }\n", 
            "+\n", 
            "+            if (attOptional == null || attOptional.getAttributeValue() == null ||\n", 
            "+                    attOptional.getAttributeValue().trim().length() == 0) {\n", 
            "+            } else {\n", 
            "+                param.setOptional(Boolean.valueOf(attOptional.getAttributeValue()));\n", 
            "+            }\n", 
            "+\n", 
            "+            parameterList.add(param);\n", 
            "+        }\n", 
            "+\n", 
            "+        return parameterList;\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/TemplateParameterFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/TemplateParameterFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-73,7 +73,7", 
          "lines": [
            "      */\n", 
            "     public Mediator createSpecificMediator(OMElement elem, Properties properties) {\n", 
            "     \t\n", 
            "-    \tboolean asynchronousExe = true;\n", 
            "+    \tboolean asynchronousExe = false;\n", 
            "         \n", 
            "     \tCloneMediator mediator = new CloneMediator();\n", 
            "         processAuditStatus(mediator, elem);\n"
          ]
        }, 
        {
          "locn": "-94,8 +94,6", 
          "lines": [
            "         if (synchronousExeAttr != null && synchronousExeAttr.getAttributeValue().equals(\"true\")) {\n", 
            "         \tasynchronousExe = false;\n", 
            "         }\n", 
            "-\n", 
            "-        mediator.setSequential(!asynchronousExe);\n", 
            "         \n", 
            "         Iterator targetElements = elem.getChildrenWithName(TARGET_Q);\n", 
            "         while (targetElements.hasNext()) {\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CloneMediatorFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CloneMediatorFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,111", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.config.xml;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMAbstractFactory;\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axiom.om.OMFactory;\n", 
            "+import org.apache.axiom.om.OMNamespace;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.SynapseConstants;\n", 
            "+import org.apache.synapse.SynapseException;\n", 
            "+import org.apache.synapse.mediators.TemplateParameter;\n", 
            "+\n", 
            "+import javax.xml.namespace.QName;\n", 
            "+import java.util.Collection;\n", 
            "+\n", 
            "+/**\n", 
            "+ * A utility class for serializing instances of TemplateParameter objects by reading\n", 
            "+ * through a given XML configuration\n", 
            "+ *\n", 
            "+ * <pre>\n", 
            "+ * &lt;element&gt;\n", 
            "+ *    &lt;parameter name=\"p1\" [default=\"value|expression\"] [optional=(true|false)]/&gt;*\n", 
            "+ * &lt;/element&gt;\n", 
            "+ * </pre>\n", 
            "+ */\n", 
            "+public class TemplateParameterSerializer {\n", 
            "+    private static final Log log = LogFactory.getLog(TemplateParameterSerializer.class);\n", 
            "+\n", 
            "+    protected static final OMFactory fac = OMAbstractFactory.getOMFactory();\n", 
            "+    protected static final OMNamespace synNS = SynapseConstants.SYNAPSE_OMNAMESPACE;\n", 
            "+    protected static final OMNamespace nullNS\n", 
            "+            = fac.createOMNamespace(XMLConfigConstants.NULL_NAMESPACE, \"\");\n", 
            "+\n", 
            "+    protected static final QName PARAMETER_Q\n", 
            "+        = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, \"parameter\");\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Serialize all the parameters to the given parent element. For each and every\n", 
            "+     * parameter there will be a separate parameter element created inside the parent element.\n", 
            "+     *\n", 
            "+     * @param parent element to which parameter elements should be added\n", 
            "+     * @param params the list of  TemplateParameter objects\n", 
            "+     */\n", 
            "+    public static void serializeTemplateParameters(OMElement parent,\n", 
            "+                                               Collection<TemplateParameter> params) {\n", 
            "+            serializeTemplateParameters(parent, params, PARAMETER_Q);\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Serialize all the parameters to the given parent element. For each and every\n", 
            "+     * parameter there will be a separate parameter element created inside the parent element.\n", 
            "+     *\n", 
            "+     * @param parent element to which parameter elements should be added\n", 
            "+     * @param params the list of  TemplateParameter objects\n", 
            "+     * @param childElementName of the parameter element to be created\n", 
            "+     */\n", 
            "+    public static void serializeTemplateParameters(OMElement parent,\n", 
            "+                                               Collection<TemplateParameter> params,\n", 
            "+                                               QName childElementName) {\n", 
            "+        for (TemplateParameter tp : params) {\n", 
            "+            serializeTemplateParameter(parent,tp, childElementName);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Serialize the parameter to the given parent element. There will be a element created with\n", 
            "+     * given configuration inside the parent element.\n", 
            "+     *\n", 
            "+     * @param parent element to which parameter elements should be added\n", 
            "+     * @param tp a property to be serialized\n", 
            "+     * @param childElementName of the parameter element to be created\n", 
            "+     */\n", 
            "+    public static void serializeTemplateParameter(OMElement parent,\n", 
            "+                                             TemplateParameter tp,\n", 
            "+                                             QName childElementName) {\n", 
            "+        OMElement param = fac.createOMElement(childElementName, parent);\n", 
            "+        if (tp.getName() != null) {\n", 
            "+            param.addAttribute(fac.createOMAttribute(\"name\", nullNS, tp.getName()));\n", 
            "+        } else {\n", 
            "+            String msg = \"Template parameter name missing\";\n", 
            "+            log.error(msg);\n", 
            "+            throw new SynapseException(msg);\n", 
            "+        }\n", 
            "+\n", 
            "+        if (tp.getDefaultValue() != null) {\n", 
            "+            new ValueSerializer().serializeValue(tp.getDefaultValue(), \"default\", param);\n", 
            "+\n", 
            "+        if (tp.isOptional()) {\n", 
            "+            param.addAttribute(fac.createOMAttribute(\"optional\", nullNS, \"true\"));\n", 
            "+        }\n", 
            "+    }\n", 
            "+}\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/TemplateParameterSerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/TemplateParameterSerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,36", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+        \n", 
            "+<!-- Introduction to Synapse Callout Block function template -->\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+<import xmlns=\"http://ws.apache.org/ns/synapse\" name=\"EipLibrary\" package=\"synapse.lang.eip\" />\n", 
            "+   <sequence name=\"main\">\n", 
            "+    <call-template target=\"synapse.lang.eip.callout_block\">\n", 
            "+        <with-param name=\"action\" value=\"urn:getQuote\"/>\n", 
            "+        <with-param name=\"service_URL\" value=\"http://localhost:9000/services/SimpleStockQuoteService\"/>\n", 
            "+        <with-param xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\" name=\"source_xpath\" value=\"{{s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]}}\"/>\n", 
            "+        <with-param xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\" name=\"target_xpath\" value=\"{{s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]}}\"/>\n", 
            "+    </call-template>\n", 
            "+     <property name=\"RESPONSE\" value=\"true\"/>\n", 
            "+        <header name=\"To\" action=\"remove\"/>\n", 
            "+        <send/>\n", 
            "+        <drop/>\n", 
            "+</sequence>\n", 
            "+</definitions>\n"
          ]
        }
      ], 
      "to": "java/repository/conf/sample/synapse_sample_850.xml", 
      "from": "java/repository/conf/sample/synapse_sample_850.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,57", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+        \n", 
            "+<!-- Introduction to Synapse Splitter & Aggregator eip function template -->\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+<import xmlns=\"http://ws.apache.org/ns/synapse\" name=\"EipLibrary\" package=\"synapse.lang.eip\" />\n", 
            "+ <proxy name=\"StockQuoteProxy\" transports=\"https http\" startOnLoad=\"true\" trace=\"disable\">\n", 
            "+        <target>\n", 
            "+        <inSequence>\n", 
            "+            <log level=\"custom\">\n", 
            "+                <property name=\"text\" value=\"splitterAggrigator\"/>\n", 
            "+            </log>\n", 
            "+            <call-template target=\"synapse.lang.eip.splitter\">\n", 
            "+                <with-param xmlns:m0=\"http://services.samples\" name=\"iterate_exp\" value=\"{{//m0:getQuote/m0:request}}\"/>\n", 
            "+                <with-param xmlns:m0=\"http://services.samples\" name=\"attach_path\" value=\"{{//m0:getQuote}}\"/>\n", 
            "+                <with-param name=\"attach_path_enabled\" value=\"true\"/>\n", 
            "+                <with-param name=\"endpoint_uri\" value=\"http://localhost:9000/services/SimpleStockQuoteService\"/>\n", 
            "+            </call-template>\n", 
            "+        </inSequence>\n", 
            "+        <outSequence>\n", 
            "+            <call-template target=\"synapse.lang.eip.aggregator\">\n", 
            "+                <with-param name=\"sequence_ref\" value=\"enr\"/>\n", 
            "+                <with-param xmlns:m0=\"http://services.samples\" name=\"aggregator_exp\" value=\"{{//m0:return}}\"/>\n", 
            "+                <with-param name=\"oncomplete_seq_enabled\" value=\"true\"/>\n", 
            "+            </call-template>\n", 
            "+        </outSequence>\n", 
            "+    </target>\n", 
            "+    </proxy>\n", 
            "+<sequence xmlns=\"http://ws.apache.org/ns/synapse\" name=\"enr\">\n", 
            "+    <log level=\"custom\">\n", 
            "+        <property name=\"text\" value=\"seqhit\"/>\n", 
            "+    </log>\n", 
            "+    <enrich>\n", 
            "+        <source xmlns:m1=\"http://services.samples/xsd\" xmlns:m0=\"http://services.samples\" clone=\"true\"\n", 
            "+                xpath=\"//m0:return[not(preceding-sibling::m0:return/m1:last &lt;= m1:last) and not(following-sibling::m0:return/m1:last &lt; m1:last)]\"/>\n", 
            "+        <target type=\"body\"/>\n", 
            "+    </enrich>\n", 
            "+    <send/>\n", 
            "+</sequence>\n", 
            "+</definitions>\n"
          ]
        }
      ], 
      "to": "java/repository/conf/sample/synapse_sample_851.xml", 
      "from": "java/repository/conf/sample/synapse_sample_851.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,46", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+        \n", 
            "+<!-- Introduction to Synapse Splitter-Agrregator eip function templates -->\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+<import xmlns=\"http://ws.apache.org/ns/synapse\" name=\"EipLibrary\" package=\"synapse.lang.eip\" />\n", 
            "+   <sequence name=\"main\">\n", 
            "+      <call-template target=\"synapse.lang.eip.splitter_aggregator\">\n", 
            "+        <with-param name=\"attach_path_enabled\" value=\"true\"/>\n", 
            "+        <with-param name=\"endpoint_uri\" value=\"http://localhost:9000/services/SimpleStockQuoteService\"/>\n", 
            "+        <with-param xmlns:m0=\"http://services.samples\" name=\"iterate_exp\" value=\"{{//m0:getQuote/m0:request}}\"/>\n", 
            "+        <with-param xmlns:m0=\"http://services.samples\" name=\"attach_path\" value=\"{{//m0:getQuote}}\"/>\n", 
            "+        <with-param name=\"sequence_ref\" value=\"enr\"/>\n", 
            "+        <with-param xmlns:m0=\"http://services.samples\" name=\"aggregator_exp\" value=\"{{//m0:return}}\"/>\n", 
            "+        <with-param name=\"oncomplete_seq_enabled\" value=\"true\"/>\n", 
            "+    </call-template>\n", 
            "+</sequence>\n", 
            "+<sequence xmlns=\"http://ws.apache.org/ns/synapse\" name=\"enr\">\n", 
            "+    <log level=\"custom\">\n", 
            "+        <property name=\"text\" value=\"seqhit\"/>\n", 
            "+    </log>\n", 
            "+    <enrich>\n", 
            "+        <source xmlns:m1=\"http://services.samples/xsd\" xmlns:m0=\"http://services.samples\" clone=\"true\"\n", 
            "+                xpath=\"//m0:return[not(preceding-sibling::m0:return/m1:last &lt;= m1:last) and not(following-sibling::m0:return/m1:last &lt; m1:last)]\"/>\n", 
            "+        <target type=\"body\"/>\n", 
            "+    </enrich>\n", 
            "+    <send/>\n", 
            "+</sequence>\n", 
            "+</definitions>\n"
          ]
        }
      ], 
      "to": "java/repository/conf/sample/synapse_sample_852.xml", 
      "from": "java/repository/conf/sample/synapse_sample_852.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,42", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+        \n", 
            "+<!-- Introduction to Synapse Scatter-Gather eip function template -->\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+<import xmlns=\"http://ws.apache.org/ns/synapse\" name=\"EipLibrary\" package=\"synapse.lang.eip\" />\n", 
            "+<sequence name=\"enr\">\n", 
            "+        <log level=\"custom\">\n", 
            "+            <property name=\"text\" value=\"seqhit\"/>\n", 
            "+        </log>\n", 
            "+        <enrich>\n", 
            "+            <source xmlns:m1=\"http://services.samples/xsd\" xmlns:m0=\"http://services.samples\" clone=\"true\" xpath=\"//m0:return[not(preceding-sibling::m0:return/m1:last &lt;= m1:last) and not(following-sibling::m0:return/m1:last &lt; m1:last)]\"/>\n", 
            "+            <target type=\"body\"/>\n", 
            "+        </enrich>\n", 
            "+        <send/>\n", 
            "+    </sequence>\n", 
            "+    <sequence name=\"main\">\n", 
            "+        <call-template target=\"synapse.lang.eip.scatter_gather\">\n", 
            "+            <with-param name=\"sequence_ref\" value=\"enr\"/>\n", 
            "+            <with-param xmlns:m0=\"http://services.samples\" name=\"aggregator_exp\" value=\"{{//m0:return}}\"/>\n", 
            "+            <with-param name=\"oncomplete_seq_enabled\" value=\"true\"/>\n", 
            "+            <with-param name=\"recipient_list\" value=\"http://localhost:9001/services/SimpleStockQuoteService,http://localhost:9002/services/SimpleStockQuoteService,http://localhost:9003/services/SimpleStockQuoteService\"/>\n", 
            "+        </call-template>\n", 
            "+    </sequence>\n", 
            "+</definitions>\n"
          ]
        }
      ], 
      "to": "java/repository/conf/sample/synapse_sample_853.xml", 
      "from": "java/repository/conf/sample/synapse_sample_853.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,32", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+        \n", 
            "+<!-- Introduction to Synapse Wire Tap eip function template -->\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+<import xmlns=\"http://ws.apache.org/ns/synapse\" name=\"EipLibrary\" package=\"synapse.lang.eip\" />\n", 
            "+    <sequence name=\"main\">\n", 
            "+<property name=\"OUT_ONLY\" value=\"true\"/>\n", 
            "+        <property name=\"FORCE_SC_ACCEPTED\" value=\"true\" scope=\"axis2\"/>\n", 
            "+        <call-template target=\"synapse.lang.eip.wire_tap\">\n", 
            "+<with-param name=\"wiretap_uri\" value=\"http://localhost:9000/services/SimpleStockQuoteService\"/>\n", 
            "+            <with-param name=\"destination_uri\" value=\"http://localhost:9001/services/SimpleStockQuoteService\"/>          \n", 
            "+        </call-template>\n", 
            "+    </sequence>\n", 
            "+</definitions>\n"
          ]
        }
      ], 
      "to": "java/repository/conf/sample/synapse_sample_854.xml", 
      "from": "java/repository/conf/sample/synapse_sample_854.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,66", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+        \n", 
            "+<!-- Introduction to Synapse Content Based Router eip function template -->\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+<import xmlns=\"http://ws.apache.org/ns/synapse\" name=\"EipLibrary\" package=\"synapse.lang.eip\" />\n", 
            "+<proxy name=\"StockQuoteProxy\" transports=\"https http\" startOnLoad=\"true\" trace=\"disable\">\n", 
            "+        <target>\n", 
            "+        <inSequence>\t\t\n", 
            "+               <call-template target=\"synapse.lang.eip.content_based_router\">\n", 
            "+<with-param name=\"routing_exp\" value=\"{{//m0:getQuote/m0:request/m0:symbol}}\" xmlns:m0=\"http://services.samples\"/>\n", 
            "+<with-param name=\"match_content\" value=\"IBM:cnd1_seq,MSFT:cnd2_seq;cnd3_seq\"/>\n", 
            "+    </call-template>\n", 
            "+</inSequence>\n", 
            "+<outSequence>\n", 
            "+<send/>\n", 
            "+   </outSequence>\n", 
            "+    </target>\n", 
            "+    </proxy>\n", 
            "+<sequence name=\"send_seq\">\n", 
            "+        <log level=\"custom\">\n", 
            "+            <property name=\"DEBUG\" value=\"Condition Satisfied\"/>\n", 
            "+        </log>\n", 
            "+        <send>\n", 
            "+            <endpoint name=\"simple\">\n", 
            "+                <address uri=\"http://localhost:9000/services/SimpleStockQuoteService\"/>\n", 
            "+            </endpoint>\n", 
            "+        </send>\n", 
            "+    </sequence>\n", 
            "+\n", 
            "+    <sequence name=\"cnd1_seq\">\n", 
            "+        <log level=\"custom\">\n", 
            "+            <property name=\"MSG_FLOW\" value=\"Condition (I) Satisfied\"/>\n", 
            "+        </log>\n", 
            "+        <sequence key=\"send_seq\"/>\n", 
            "+    </sequence>\n", 
            "+    <sequence name=\"cnd2_seq\">\n", 
            "+        <log level=\"custom\">\n", 
            "+            <property name=\"MSG_FLOW\" value=\"Condition (II) Satisfied\"/>\n", 
            "+        </log>\n", 
            "+        <sequence key=\"send_seq\"/>\n", 
            "+    </sequence>\n", 
            "+    <sequence name=\"cnd3_seq\">\n", 
            "+        <log level=\"custom\">\n", 
            "+            <property name=\"MSG_FLOW\" value=\"Condition (III) Satisfied\"/>\n", 
            "+        </log>\n", 
            "+        <sequence key=\"send_seq\"/>\n", 
            "+    </sequence>\n", 
            "+</definitions>\n"
          ]
        }
      ], 
      "to": "java/repository/conf/sample/synapse_sample_855.xml", 
      "from": "java/repository/conf/sample/synapse_sample_855.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,65", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+        \n", 
            "+<!-- Introduction to Synapse Dynamic Router eip function template -->\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+<import xmlns=\"http://ws.apache.org/ns/synapse\" name=\"EipLibrary\" package=\"synapse.lang.eip\" />\n", 
            "+ <proxy name=\"StockQuoteProxy\" transports=\"https http\" startOnLoad=\"true\" trace=\"disable\">\n", 
            "+        <target>\n", 
            "+            <inSequence>\n", 
            "+               <call-template target=\"synapse.lang.eip.dynamic_router\">\n", 
            "+<with-param name=\"conditions\" value=\"header=foo:bar.*#url=/services/StockQuoteProxy.*;seq=cnd1_seq,header=custom_header1:bar.*@header=custom_header1:foo.*;seq=cnd2_seq,header=custom_header2:foo.*;seq=cnd3_seq\"/>\n", 
            "+    </call-template>\n", 
            "+     </inSequence>\n", 
            "+            <outSequence>\n", 
            "+                <send/>\n", 
            "+            </outSequence>\n", 
            "+        </target>\n", 
            "+    </proxy>\n", 
            "+<sequence name=\"send_seq\">\n", 
            "+        <log level=\"custom\">\n", 
            "+            <property name=\"DEBUG\" value=\"Condition Satisfied\"/>\n", 
            "+        </log>\n", 
            "+        <send>\n", 
            "+            <endpoint name=\"simple\">\n", 
            "+                <address uri=\"http://localhost:9000/services/SimpleStockQuoteService\"/>\n", 
            "+            </endpoint>\n", 
            "+        </send>\n", 
            "+    </sequence>\n", 
            "+\n", 
            "+    <sequence name=\"cnd1_seq\">\n", 
            "+        <log level=\"custom\">\n", 
            "+            <property name=\"MSG_FLOW\" value=\"Condition (I) Satisfied\"/>\n", 
            "+        </log>\n", 
            "+        <sequence key=\"send_seq\"/>\n", 
            "+    </sequence>\n", 
            "+    <sequence name=\"cnd2_seq\">\n", 
            "+        <log level=\"custom\">\n", 
            "+            <property name=\"MSG_FLOW\" value=\"Condition (II) Satisfied\"/>\n", 
            "+        </log>\n", 
            "+        <sequence key=\"send_seq\"/>\n", 
            "+    </sequence>\n", 
            "+    <sequence name=\"cnd3_seq\">\n", 
            "+        <log level=\"custom\">\n", 
            "+            <property name=\"MSG_FLOW\" value=\"Condition (III) Satisfied\"/>\n", 
            "+        </log>\n", 
            "+        <sequence key=\"send_seq\"/>\n", 
            "+    </sequence>\n", 
            "+</definitions>\n"
          ]
        }
      ], 
      "to": "java/repository/conf/sample/synapse_sample_856.xml", 
      "from": "java/repository/conf/sample/synapse_sample_856.xml"
    }
  ], 
  "id": "1373302"
}