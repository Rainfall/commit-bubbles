{
  "when": "2013-07-27T18:31:04-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-326,7 +326,7", 
          "lines": [
            "                 log.debug(\"Deleting a Job with [ Name :\" + name + \" ]\" +\r\n", 
            "                         \" [ Group :\" + group + \" ]\");\r\n", 
            "             }\r\n", 
            "-            scheduler.deleteJob(name, group);\r\n", 
            "+            scheduler.deleteJob(new JobKey(name, group));\r\n", 
            "         } catch (SchedulerException e) {\r\n", 
            "             throw new SynapseTaskException(\"Error deleting a job with  [ Name :\" + name + \" ]\" +\r\n", 
            "                     \" [ Group :\" + group + \" ]\");\r\n"
          ]
        }
      ], 
      "to": "java/modules/tasks/src/main/java/org/apache/synapse/task/TaskScheduler.java", 
      "from": "java/modules/tasks/src/main/java/org/apache/synapse/task/TaskScheduler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-21,6 +21,7", 
          "lines": [
            " import org.apache.commons.logging.Log;\r\n", 
            " import org.apache.commons.logging.LogFactory;\r\n", 
            " import org.quartz.Job;\r\n", 
            "+import org.quartz.JobBuilder;\r\n", 
            " import org.quartz.JobDataMap;\r\n", 
            " import org.quartz.JobDetail;\r\n", 
            " \r\n"
          ]
        }, 
        {
          "locn": "-53,23 +54,6", 
          "lines": [
            "             resources = new HashMap<String, Object>();\r\n", 
            "         }\r\n", 
            " \r\n", 
            "-        JobDetail jobDetail = new JobDetail();\r\n", 
            "-        jobDetail.setJobClass(jobClass);\r\n", 
            "-\r\n", 
            "-        String name = taskDescription.getName();\r\n", 
            "-        if (name == null || \"\".equals(name)) {\r\n", 
            "-            throw new SynapseTaskException(\"Name cannot be found.\", log);\r\n", 
            "-        }\r\n", 
            "-        jobDetail.setName(name);\r\n", 
            "-\r\n", 
            "-\r\n", 
            "-        String group = taskDescription.getGroup();\r\n", 
            "-        if (group != null && !\"\".equals(group)) {\r\n", 
            "-            jobDetail.setGroup(group);\r\n", 
            "-        } else {\r\n", 
            "-            jobDetail.setGroup(TaskDescription.DEFAULT_GROUP);\r\n", 
            "-        }\r\n", 
            "-\r\n", 
            "         JobDataMap jobDataMap = new JobDataMap(resources);\r\n", 
            " \r\n", 
            "         String className = taskDescription.getTaskClass();\r\n"
          ]
        }, 
        {
          "locn": "-81,8 +65,18", 
          "lines": [
            "         if (xmlProperties != null) {\r\n", 
            "             jobDataMap.put(TaskDescription.PROPERTIES, xmlProperties);\r\n", 
            "         }\r\n", 
            "-        jobDetail.setJobDataMap(jobDataMap);\r\n", 
            " \r\n", 
            "-        return jobDetail;\r\n", 
            "+        String name = taskDescription.getName();\r\n", 
            "+        if (name == null || \"\".equals(name)) {\r\n", 
            "+            throw new SynapseTaskException(\"Name cannot be found.\", log);\r\n", 
            "+        }\r\n", 
            "+\r\n", 
            "+        String group = taskDescription.getGroup();\r\n", 
            "+        if (group == null || \"\".equals(group)) {\r\n", 
            "+            group = TaskDescription.DEFAULT_GROUP;\r\n", 
            "+        }\r\n", 
            "+\r\n", 
            "+        return JobBuilder.newJob(jobClass).withIdentity(name, group).\r\n", 
            "+                usingJobData(jobDataMap).build();\r\n", 
            "     }\r\n", 
            " }\r\n"
          ]
        }
      ], 
      "to": "java/modules/tasks/src/main/java/org/apache/synapse/task/DefaultTaskJobDetailFactory.java", 
      "from": "java/modules/tasks/src/main/java/org/apache/synapse/task/DefaultTaskJobDetailFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,16 +16,13", 
          "lines": [
            "  *  specific language governing permissions and limitations\r\n", 
            "  *  under the License.\r\n", 
            "  */\r\n", 
            "+\r\n", 
            " package org.apache.synapse.task;\r\n", 
            " \r\n", 
            " import org.apache.commons.logging.Log;\r\n", 
            " import org.apache.commons.logging.LogFactory;\r\n", 
            "-import org.quartz.CronTrigger;\r\n", 
            "-import org.quartz.SimpleTrigger;\r\n", 
            "-import org.quartz.Trigger;\r\n", 
            "-import org.quartz.TriggerUtils;\r\n", 
            "+import org.quartz.*;\r\n", 
            " \r\n", 
            "-import java.text.ParseException;\r\n", 
            " import java.util.Date;\r\n", 
            " import java.util.Random;\r\n", 
            " \r\n"
          ]
        }, 
        {
          "locn": "-53,47 +50,42", 
          "lines": [
            "         long repeatInterval = taskDescription.getInterval();\r\n", 
            "         Date startTime = taskDescription.getStartTime();\r\n", 
            "         Date endTime = taskDescription.getEndTime();\r\n", 
            "+        String group = taskDescription.getGroup();\r\n", 
            " \r\n", 
            "+        if (group == null || \"\".equals(group)) {\r\n", 
            "+            group = TaskDescription.DEFAULT_GROUP;\r\n", 
            "+        }\r\n", 
            "+\r\n", 
            "         Trigger trigger;\r\n", 
            "-        if (cron == null || \"\".equals(cron)) {\r\n", 
            "-            if (repeatCount >= 0) {\r\n", 
            "-                trigger = TriggerUtils.makeImmediateTrigger(repeatCount - 1, repeatInterval);\r\n", 
            "-            } else {\r\n", 
            "-                trigger = TriggerUtils.makeImmediateTrigger(SimpleTrigger.REPEAT_INDEFINITELY,\r\n", 
            "-                        repeatInterval);\r\n", 
            "-            }\r\n", 
            "+        TriggerBuilder<Trigger> triggerBuilder = TriggerBuilder.newTrigger()\r\n", 
            "+                .withIdentity(name + \"-trigger-\" + String.valueOf(RANDOM.nextLong()), group);\r\n", 
            " \r\n", 
            "+        if (startTime != null) {\r\n", 
            "+            triggerBuilder.startAt(startTime);\r\n", 
            "         } else {\r\n", 
            "-            CronTrigger cronTrigger = new CronTrigger();\r\n", 
            "-            try {\r\n", 
            "-                cronTrigger.setCronExpression(cron);\r\n", 
            "-                trigger = cronTrigger;\r\n", 
            "-            } catch (ParseException e) {\r\n", 
            "-                throw new SynapseTaskException(\"Error setting cron expression : \" +\r\n", 
            "-                        e.getMessage() + cron, log);\r\n", 
            "-            }\r\n", 
            "+            triggerBuilder.startNow();\r\n", 
            "         }\r\n", 
            " \r\n", 
            "-        if (trigger == null) {\r\n", 
            "-            throw new SynapseTaskException(\"Trigger is null for the Task description : \" +\r\n", 
            "-                    taskDescription, log);\r\n", 
            "+        if (endTime != null) {\r\n", 
            "+            triggerBuilder.endAt(endTime);\r\n", 
            "         }\r\n", 
            " \r\n", 
            "-        if (startTime != null) {\r\n", 
            "-            trigger.setStartTime(startTime);\r\n", 
            "-        }\r\n", 
            "-        if (endTime != null) {\r\n", 
            "-            trigger.setEndTime(endTime);\r\n", 
            "-        }\r\n", 
            "-        // give the trigger a random name\r\n", 
            "-        trigger.setName(name + \"-trigger-\" + String.valueOf(RANDOM.nextLong()));\r\n", 
            "-        String group = taskDescription.getGroup();\r\n", 
            "-        if (group != null && !\"\".equals(group)) {\r\n", 
            "-            trigger.setGroup(group);\r\n", 
            "+        if (cron == null || \"\".equals(cron)) {\r\n", 
            "+            if (repeatCount >= 0) {\r\n", 
            "+                trigger = triggerBuilder.withSchedule(SimpleScheduleBuilder.simpleSchedule()\r\n", 
            "+                        .withIntervalInMilliseconds(repeatInterval)\r\n", 
            "+                        .withRepeatCount(repeatCount - 1))\r\n", 
            "+                        .build();\r\n", 
            "+            } else {\r\n", 
            "+                trigger = triggerBuilder.withSchedule(SimpleScheduleBuilder.simpleSchedule()\r\n", 
            "+                        .withIntervalInMilliseconds(repeatInterval)\r\n", 
            "+                        .repeatForever())\r\n", 
            "+                        .build();\r\n", 
            "+            }\r\n", 
            "         } else {\r\n", 
            "-            trigger.setGroup(TaskDescription.DEFAULT_GROUP);\r\n", 
            "+            trigger = triggerBuilder.withSchedule(CronScheduleBuilder.cronSchedule(cron)).build();\r\n", 
            "         }\r\n", 
            "-        trigger.setVolatility(taskDescription.isVolatility());\r\n", 
            "+\r\n", 
            "         return trigger;\r\n", 
            "     }\r\n", 
            " }\r\n"
          ]
        }
      ], 
      "to": "java/modules/tasks/src/main/java/org/apache/synapse/task/DefaultTaskTriggerFactory.java", 
      "from": "java/modules/tasks/src/main/java/org/apache/synapse/task/DefaultTaskTriggerFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-76,7 +76,7", 
          "lines": [
            "             <artifactId>synapse-commons</artifactId>\r\n", 
            "         </dependency>\r\n", 
            "         <dependency>\r\n", 
            "-            <groupId>org.opensymphony</groupId>\r\n", 
            "+            <groupId>org.quartz-scheduler</groupId>\r\n", 
            "             <artifactId>quartz</artifactId>\r\n", 
            "         </dependency>\r\n", 
            "         <dependency>\r\n"
          ]
        }
      ], 
      "to": "java/modules/tasks/pom.xml", 
      "from": "java/modules/tasks/pom.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-44,7 +44,7", 
          "lines": [
            " \r\n", 
            "     public void execute(JobExecutionContext ctx) throws JobExecutionException {\r\n", 
            " \r\n", 
            "-        String jobName = ctx.getJobDetail().getFullName();\r\n", 
            "+        String jobName = ctx.getJobDetail().getKey().getName();\r\n", 
            "         if (log.isDebugEnabled()) {\r\n", 
            "             log.debug(\"Executing task : \" + jobName);\r\n", 
            "         }\r\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/startup/quartz/SimpleQuartzJob.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/startup/quartz/SimpleQuartzJob.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,23 +16,21", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.message.processors.sampler;\n", 
            " \n", 
            "-\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.synapse.core.SynapseEnvironment;\n", 
            "-import org.apache.synapse.message.processors.AbstractMessageProcessor;\n", 
            " import org.apache.synapse.message.processors.ScheduledMessageProcessor;\n", 
            "-import org.quartz.JobDataMap;\n", 
            "-import org.quartz.JobDetail;\n", 
            "-import org.quartz.SchedulerException;\n", 
            "+import org.quartz.*;\n", 
            " \n", 
            " import java.util.concurrent.atomic.AtomicBoolean;\n", 
            " \n", 
            "-public class SamplingProcessor extends ScheduledMessageProcessor{\n", 
            "-    private Log log = LogFactory.getLog(SamplingProcessor.class);\n", 
            "+public class SamplingProcessor extends ScheduledMessageProcessor {\n", 
            " \n", 
            "+    private static final Log log = LogFactory.getLog(SamplingProcessor.class);\n", 
            "+\n", 
            "     public static final String CONCURRENCY = \"concurrency\";\n", 
            "     public static final String SEQUENCE = \"sequence\";\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-51,11 +49,9", 
          "lines": [
            "     }\n", 
            " \n", 
            "     @Override\n", 
            "-    protected JobDetail getJobDetail() {\n", 
            "-        JobDetail jobDetail = new JobDetail();\n", 
            "-        jobDetail.setName(name + \"-sampling-job\");\n", 
            "-        jobDetail.setJobClass(SamplingJob.class);\n", 
            "-        return jobDetail;\n", 
            "+    protected JobBuilder getJobBuilder() {\n", 
            "+        return JobBuilder.newJob(SamplingJob.class).withIdentity(\n", 
            "+                name + \"-sampling-job\", SCHEDULED_MESSAGE_PROCESSOR_GROUP);\n", 
            "     }\n", 
            " \n", 
            "     @Override\n"
          ]
        }, 
        {
          "locn": "-69,8 +65,8", 
          "lines": [
            "     @Override\n", 
            "     public void destroy() {\n", 
            "          try {\n", 
            "-            scheduler.deleteJob(name + \"-sampling-job\",\n", 
            "-                    ScheduledMessageProcessor.SCHEDULED_MESSAGE_PROCESSOR_GROUP);\n", 
            "+             scheduler.deleteJob(new JobKey(name + \"-sampling-job\",\n", 
            "+                     ScheduledMessageProcessor.SCHEDULED_MESSAGE_PROCESSOR_GROUP));\n", 
            "         } catch (SchedulerException e) {\n", 
            "             log.error(\"Error while destroying the task \" + e);\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/message/processors/sampler/SamplingProcessor.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/message/processors/sampler/SamplingProcessor.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,14 +16,13", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.message.processors.forward;\n", 
            " \n", 
            " import org.apache.synapse.SynapseException;\n", 
            " import org.apache.synapse.core.SynapseEnvironment;\n", 
            " import org.apache.synapse.message.processors.ScheduledMessageProcessor;\n", 
            "-import org.quartz.JobDataMap;\n", 
            "-import org.quartz.JobDetail;\n", 
            "-import org.quartz.SchedulerException;\n", 
            "+import org.quartz.*;\n", 
            " \n", 
            " import java.util.Map;\n", 
            " import java.util.concurrent.atomic.AtomicBoolean;\n"
          ]
        }, 
        {
          "locn": "-61,11 +60,9", 
          "lines": [
            "     }\n", 
            " \n", 
            "     @Override\n", 
            "-    protected JobDetail getJobDetail() {\n", 
            "-        JobDetail jobDetail = new JobDetail();\n", 
            "-        jobDetail.setName(name + \"-forward job\");\n", 
            "-        jobDetail.setJobClass(ForwardingJob.class);\n", 
            "-        return jobDetail;\n", 
            "+    protected JobBuilder getJobBuilder() {\n", 
            "+        return JobBuilder.newJob(ForwardingJob.class).withIdentity(\n", 
            "+                name + \"-forward job\", SCHEDULED_MESSAGE_PROCESSOR_GROUP);\n", 
            "     }\n", 
            " \n", 
            "     @Override\n"
          ]
        }, 
        {
          "locn": "-131,8 +128,8", 
          "lines": [
            "     @Override\n", 
            "     public void destroy() {\n", 
            "          try {\n", 
            "-             scheduler.deleteJob(name + \"-forward job\",\n", 
            "-                    ScheduledMessageProcessor.SCHEDULED_MESSAGE_PROCESSOR_GROUP);\n", 
            "+             scheduler.deleteJob(new JobKey(name + \"-forward job\",\n", 
            "+                     ScheduledMessageProcessor.SCHEDULED_MESSAGE_PROCESSOR_GROUP));\n", 
            "              scheduler.shutdown(true);\n", 
            "         } catch (SchedulerException e) {\n", 
            "             log.error(\"Error while destroying the task \" + e);\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/message/processors/forward/ScheduledMessageForwardingProcessor.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/message/processors/forward/ScheduledMessageForwardingProcessor.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,22 +16,18", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.message.processors;\n", 
            " \n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.synapse.SynapseException;\n", 
            "-import org.apache.synapse.config.SynapseConfiguration;\n", 
            " import org.apache.synapse.core.SynapseEnvironment;\n", 
            " import org.quartz.*;\n", 
            " import org.quartz.impl.StdSchedulerFactory;\n", 
            " \n", 
            "-import java.text.ParseException;\n", 
            " import java.util.Map;\n", 
            " \n", 
            " public abstract class ScheduledMessageProcessor extends AbstractMessageProcessor {\n", 
            " \n", 
            "-\n", 
            "     public static final String SCHEDULED_MESSAGE_PROCESSOR_GROUP =\n", 
            "             \"synapse.message.processor.quartz\";\n", 
            "     public static final String PROCESSOR_INSTANCE = \"processor.instance\";\n"
          ]
        }, 
        {
          "locn": "-72,28 +68,26", 
          "lines": [
            " \n", 
            "     public void start() {\n", 
            "         Trigger trigger;\n", 
            "+        TriggerBuilder<Trigger> triggerBuilder = TriggerBuilder.newTrigger().\n", 
            "+                withIdentity(name + \"-trigger-\");\n", 
            "         if (cronExpression == null || \"\".equals(cronExpression)) {\n", 
            "-            trigger = TriggerUtils.makeImmediateTrigger(SimpleTrigger.REPEAT_INDEFINITELY, interval);\n", 
            "+            trigger = triggerBuilder.withSchedule(SimpleScheduleBuilder.simpleSchedule()\n", 
            "+                    .withIntervalInMilliseconds(interval)\n", 
            "+                    .repeatForever())\n", 
            "+                    .build();\n", 
            "         } else {\n", 
            "-            CronTrigger cronTrigger = new CronTrigger();\n", 
            "-            try {\n", 
            "-                cronTrigger.setCronExpression(cronExpression);\n", 
            "-                trigger = cronTrigger;\n", 
            "-            } catch (ParseException e) {\n", 
            "-                throw new SynapseException(\"Error setting cron expression : \" +\n", 
            "-                        e.getMessage() + cronExpression, e);\n", 
            "-            }\n", 
            "+            trigger = triggerBuilder.withSchedule(CronScheduleBuilder.cronSchedule(cronExpression))\n", 
            "+                    .build();\n", 
            "         }\n", 
            "-        trigger.setName(name + \"-trigger\");\n", 
            " \n", 
            "-        JobDetail jobDetail = getJobDetail();\n", 
            "+        JobBuilder jobBuilder = getJobBuilder();\n", 
            "         JobDataMap jobDataMap = getJobDataMap();\n", 
            "         jobDataMap.put(MessageProcessorConsents.MESSAGE_STORE,\n", 
            "                 configuration.getMessageStore(messageStore));\n", 
            "         jobDataMap.put(MessageProcessorConsents.PARAMETERS, parameters);\n", 
            "-        jobDetail.setJobDataMap(jobDataMap);\n", 
            "-        jobDetail.setGroup(SCHEDULED_MESSAGE_PROCESSOR_GROUP);\n", 
            " \n", 
            "+        JobDetail jobDetail = jobBuilder.usingJobData(jobDataMap).build();\n", 
            "+\n", 
            "         try {\n", 
            "             scheduler.scheduleJob(jobDetail, trigger);\n", 
            "         } catch (SchedulerException e) {\n"
          ]
        }, 
        {
          "locn": "-177,7 +171,7", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    protected abstract JobDetail getJobDetail();\n", 
            "+    protected abstract JobBuilder getJobBuilder();\n", 
            " \n", 
            "     protected JobDataMap getJobDataMap() {\n", 
            "         return new JobDataMap();\n"
          ]
        }, 
        {
          "locn": "-185,7 +179,7", 
          "lines": [
            " \n", 
            "     public void destroy() {\n", 
            "         try {\n", 
            "-            scheduler.deleteJob(name + \"-trigger\",SCHEDULED_MESSAGE_PROCESSOR_GROUP);\n", 
            "+            scheduler.deleteJob( new JobKey(name + \"-trigger\",SCHEDULED_MESSAGE_PROCESSOR_GROUP));\n", 
            "             scheduler.shutdown(true);\n", 
            "         } catch (SchedulerException e) {\n", 
            "             log.error(\"Error while destroying the task \" + e);\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/message/processors/ScheduledMessageProcessor.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/message/processors/ScheduledMessageProcessor.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,9 +26,7", 
          "lines": [
            " import org.apache.synapse.message.processors.ScheduledMessageProcessor;\n", 
            " import org.apache.synapse.message.store.MessageStore;\n", 
            " import org.apache.synapse.util.xpath.SynapseXPath;\n", 
            "-import org.quartz.JobDataMap;\n", 
            "-import org.quartz.JobDetail;\n", 
            "-import org.quartz.SchedulerException;\n", 
            "+import org.quartz.*;\n", 
            " \n", 
            " import java.util.concurrent.atomic.AtomicBoolean;\n", 
            " import java.util.concurrent.atomic.AtomicInteger;\n"
          ]
        }, 
        {
          "locn": "-175,11 +173,9", 
          "lines": [
            "      * @return jobDetail - created JobDetail object with Name and JobClass\n", 
            "      */\n", 
            "     @Override\n", 
            "-    protected JobDetail getJobDetail() {\n", 
            "-        JobDetail jobDetail = new JobDetail();\n", 
            "-        jobDetail.setName(name + \"-resequensing-job\");\n", 
            "-        jobDetail.setJobClass(ResequencingJob.class);\n", 
            "-        return jobDetail;\n", 
            "+    protected JobBuilder getJobBuilder() {\n", 
            "+        return JobBuilder.newJob(ResequencingJob.class).withIdentity(\n", 
            "+                name + \"-resequencing-job\", SCHEDULED_MESSAGE_PROCESSOR_GROUP);\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-200,8 +196,9", 
          "lines": [
            "     @Override\n", 
            "     public void destroy() {\n", 
            "         try {\n", 
            "-            scheduler.deleteJob(name + \"-resequensing-job\",\n", 
            "-                    ScheduledMessageProcessor.SCHEDULED_MESSAGE_PROCESSOR_GROUP);\n", 
            "+            scheduler.deleteJob(new JobKey(name + \"-resequencing-job\",\n", 
            "+                    ScheduledMessageProcessor.SCHEDULED_MESSAGE_PROCESSOR_GROUP));\n", 
            "+            scheduler.shutdown();\n", 
            "         } catch (SchedulerException e) {\n", 
            "         }\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/message/processors/resequence/ResequencingProcessor.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/message/processors/resequence/ResequencingProcessor.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-245,6 +245,7", 
          "lines": [
            "                             javax.xml.soap; version=0.0.0,\n", 
            "                             !org.apache.commons.io,\n", 
            "                             org.apache.commons.io; version=0.0.0,\n", 
            "+                            org.quartz.*; version=0.0.0,\n", 
            "                             *;resolution:=optional,\n", 
            "                         </Import-Package>\n", 
            "                         <DynamicImport-Package>*</DynamicImport-Package>\n"
          ]
        }
      ], 
      "to": "java/modules/core/pom.xml", 
      "from": "java/modules/core/pom.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-895,7 +895,7", 
          "lines": [
            " \n", 
            "             <!-- Quartz (Scheduled Tasks) -->\n", 
            "             <dependency>\n", 
            "-                <groupId>org.opensymphony</groupId>\n", 
            "+                <groupId>org.quartz-scheduler</groupId>\n", 
            "                 <artifactId>quartz</artifactId>\n", 
            "                 <version>${quartz.version}</version>\n", 
            "             </dependency>\n"
          ]
        }, 
        {
          "locn": "-1084,7 +1084,7", 
          "lines": [
            "         <bcprov.jdk15.version>140</bcprov.jdk15.version>\n", 
            " \n", 
            "         <!-- startup, quartz -->\n", 
            "-        <quartz.version>1.6.0</quartz.version>\n", 
            "+        <quartz.version>2.2.0</quartz.version>\n", 
            "         <geronimo-spec.version>1.1</geronimo-spec.version>\n", 
            " \n", 
            "         <!-- misc -->\n"
          ]
        }
      ], 
      "to": "java/pom.xml", 
      "from": "java/pom.xml"
    }
  ], 
  "id": "1507734"
}