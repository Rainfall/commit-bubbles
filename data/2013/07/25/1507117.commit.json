{
  "when": "2013-07-25T16:42:05-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-20,42 +20,70", 
          "lines": [
            " package org.apache.synapse.transport.passthru;\n", 
            " \n", 
            " import org.apache.http.HttpResponseFactory;\n", 
            "+import org.apache.http.impl.DefaultHttpResponseFactory;\n", 
            " import org.apache.http.impl.nio.DefaultHttpClientIODispatch;\n", 
            " import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.impl.nio.SSLNHttpClientConnectionFactory;\n", 
            " import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "+import org.apache.http.nio.NHttpConnectionFactory;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLMode;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            " import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "+import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            "+import org.apache.http.params.HttpConnectionParams;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " import org.apache.synapse.transport.passthru.logging.LoggingUtils;\n", 
            " \n", 
            " import javax.net.ssl.SSLContext;\n", 
            "+import java.net.InetSocketAddress;\n", 
            " import java.util.Map;\n", 
            " \n", 
            " public class SSLTargetIOEventDispatch extends DefaultHttpClientIODispatch {\n", 
            " \n", 
            "-    private Map<String, SSLContext> contextMap;\n", 
            "-\n", 
            "     public SSLTargetIOEventDispatch(NHttpClientEventHandler handler,\n", 
            "                                     SSLContext sslcontext,\n", 
            "+                                    Map<String,SSLContext> customContexts,\n", 
            "                                     SSLSetupHandler sslHandler,\n", 
            "                                     HttpParams params) {\n", 
            "-        super(handler, new SSLTargetConnectionFactory(sslcontext, sslHandler, params));\n", 
            "+        super(handler,\n", 
            "+                new SSLTargetConnectionFactory(sslcontext, customContexts, sslHandler, params));\n", 
            "     }\n", 
            " \n", 
            "-    public void setContextMap(Map<String,SSLContext> contextMap) {\n", 
            "-        this.contextMap = contextMap;\n", 
            "-    }\n", 
            "+    /**\n", 
            "+     * Custom NHttpClientConnectionFactory implementation. Most of this code has been borrowed\n", 
            "+     * from the SSLNHttpClientConnectionFactory class of HttpCore-NIO. This custom implementation\n", 
            "+     * allows using different SSLContext instances for different target endpoints (custom SSL\n", 
            "+     * profiles feature). Hopefully a future HttpCore-NIO API will provide an easier way to\n", 
            "+     * customize the way SSLIOSession instances are created and we will be able to get rid of this.\n", 
            "+     */\n", 
            "+    private static class SSLTargetConnectionFactory\n", 
            "+            implements NHttpConnectionFactory<DefaultNHttpClientConnection> {\n", 
            " \n", 
            "-    private static class SSLTargetConnectionFactory extends SSLNHttpClientConnectionFactory {\n", 
            "+        private final HttpResponseFactory responseFactory;\n", 
            "+        private final ByteBufferAllocator allocator;\n", 
            "+        private final SSLContext sslcontext;\n", 
            "+        private final SSLSetupHandler sslHandler;\n", 
            "+        private final HttpParams params;\n", 
            "+        private final Map<String,SSLContext> contextMap;\n", 
            " \n", 
            "-        public SSLTargetConnectionFactory(SSLContext sslcontext,\n", 
            "-                                          SSLSetupHandler sslHandler, HttpParams params) {\n", 
            "-            super(sslcontext, sslHandler, params);\n", 
            "+        public SSLTargetConnectionFactory(\n", 
            "+                final SSLContext sslcontext,\n", 
            "+                final Map<String,SSLContext> contextMap,\n", 
            "+                final SSLSetupHandler sslHandler,\n", 
            "+                final HttpParams params) {\n", 
            "+\n", 
            "+            if (params == null) {\n", 
            "+                throw new IllegalArgumentException(\"HTTP parameters may not be null\");\n", 
            "+            }\n", 
            "+            this.sslcontext = sslcontext;\n", 
            "+            this.contextMap = contextMap;\n", 
            "+            this.sslHandler = sslHandler;\n", 
            "+            this.responseFactory = new DefaultHttpResponseFactory();\n", 
            "+            this.allocator = new HeapByteBufferAllocator();\n", 
            "+            this.params = params;\n", 
            "         }\n", 
            " \n", 
            "-        @Override\n", 
            "         protected DefaultNHttpClientConnection createConnection(IOSession session,\n", 
            "                                                                 HttpResponseFactory responseFactory,\n", 
            "                                                                 ByteBufferAllocator allocator,\n"
          ]
        }, 
        {
          "locn": "-67,24 +95,43", 
          "lines": [
            "                     allocator,\n", 
            "                     params);\n", 
            "         }\n", 
            "-    }\n", 
            " \n", 
            "-    /*protected SSLIOSession createSSLIOSession(IOSession session,\n", 
            "-                                              SSLContext sslcontext,\n", 
            "-                                              SSLSetupHandler sslHandler) {\n", 
            "+        private SSLContext getDefaultSSLContext() {\n", 
            "+            SSLContext sslcontext;\n", 
            "+            try {\n", 
            "+                sslcontext = SSLContext.getInstance(\"TLS\");\n", 
            "+                sslcontext.init(null, null, null);\n", 
            "+            } catch (Exception ex) {\n", 
            "+                throw new IllegalStateException(\"Failure initializing default SSL context\", ex);\n", 
            "+            }\n", 
            "+            return sslcontext;\n", 
            "+        }\n", 
            " \n", 
            "-        InetSocketAddress address = (InetSocketAddress) session.getRemoteAddress();\n", 
            "-        String host = address.getHostName() + \":\" + address.getPort();\n", 
            "-        SSLContext customContext = null;\n", 
            "-        if (contextMap != null) {\n", 
            "-            // See if there's a custom SSL profile configured for this server\n", 
            "-            customContext = contextMap.get(host);\n", 
            "+        private SSLContext getSSLContext(IOSession session) {\n", 
            "+            InetSocketAddress address = (InetSocketAddress) session.getRemoteAddress();\n", 
            "+            String host = address.getHostName() + \":\" + address.getPort();\n", 
            "+            SSLContext customContext = null;\n", 
            "+            if (contextMap != null) {\n", 
            "+                // See if there's a custom SSL profile configured for this server\n", 
            "+                customContext = contextMap.get(host);\n", 
            "+            }\n", 
            "+\n", 
            "+            if (customContext == null) {\n", 
            "+                customContext = this.sslcontext != null ? this.sslcontext : getDefaultSSLContext();\n", 
            "+            }\n", 
            "+            return customContext;\n", 
            "         }\n", 
            " \n", 
            "-        if (customContext == null) {\n", 
            "-            customContext = sslcontext;\n", 
            "+        public DefaultNHttpClientConnection createConnection(final IOSession session) {\n", 
            "+            SSLContext sslcontext = getSSLContext(session);\n", 
            "+            SSLIOSession ssliosession = new SSLIOSession(session, SSLMode.CLIENT,\n", 
            "+                    sslcontext, this.sslHandler);\n", 
            "+            session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);\n", 
            "+            DefaultNHttpClientConnection conn = createConnection(\n", 
            "+                    ssliosession, this.responseFactory, this.allocator, this.params);\n", 
            "+            int timeout = HttpConnectionParams.getSoTimeout(this.params);\n", 
            "+            conn.setSocketTimeout(timeout);\n", 
            "+            return conn;\n", 
            "         }\n", 
            "-\n", 
            "-        return super.createSSLIOSession(session, customContext, sslHandler);\n", 
            "-    }*/\n", 
            "+    }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SSLTargetIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SSLTargetIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-56,7 +56,8", 
          "lines": [
            "                                                HttpParams params,\n", 
            "                                                TransportOutDescription transportOut) throws AxisFault {\n", 
            " \n", 
            "-        return new SSLTargetIOEventDispatch(handler, sslContext, sslIOSessionHandler, params);\n", 
            "+        return new SSLTargetIOEventDispatch(handler, sslContext, getCustomSSLContexts(transportOut),\n", 
            "+                sslIOSessionHandler, params);\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-105,9 +106,9", 
          "lines": [
            " \n", 
            "         final Parameter hostnameVerifier = transportOut.getParameter(\"HostnameVerifier\");\n", 
            "         if (hostnameVerifier != null) {\n", 
            "-            return createSSLIOSessionHandler(hostnameVerifier.getValue().toString());\n", 
            "+            return createSSLSetupHandler(hostnameVerifier.getValue().toString());\n", 
            "         } else {\n", 
            "-            return createSSLIOSessionHandler(null);\n", 
            "+            return createSSLSetupHandler(null);\n", 
            "         }\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-279,7 +280,7", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    private SSLSetupHandler createSSLIOSessionHandler(final String hostnameVerifier)\n", 
            "+    private SSLSetupHandler createSSLSetupHandler(final String hostnameVerifier)\n", 
            "             throws AxisFault {\n", 
            " \n", 
            "         return new SSLSetupHandler() {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-52,10 +52,8", 
          "lines": [
            "         SSLSetupHandler sslIOSessionHandler, HttpParams params,\n", 
            "         TransportOutDescription transportOut) throws AxisFault {\n", 
            " \n", 
            "-        SSLClientIOEventDispatch dispatch = new SSLClientIOEventDispatch(handler, sslContext,\n", 
            "-                sslIOSessionHandler, params);\n", 
            "-        dispatch.setContextMap(getCustomSSLContexts(transportOut));\n", 
            "-        return dispatch;\n", 
            "+        return new SSLClientIOEventDispatch(handler, sslContext,\n", 
            "+                getCustomSSLContexts(transportOut), sslIOSessionHandler, params);\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-97,14 +95,14", 
          "lines": [
            "      * @return the SSLIOSessionHandler to be used\n", 
            "      * @throws AxisFault if a configuration error occurs\n", 
            "      */\n", 
            "-    protected SSLSetupHandler getSSLIOSessionHandler(TransportOutDescription transportOut)\n", 
            "+    protected SSLSetupHandler getSSLSetupHandler(TransportOutDescription transportOut)\n", 
            "             throws AxisFault {\n", 
            " \n", 
            "         final Parameter hostnameVerifier = transportOut.getParameter(\"HostnameVerifier\");\n", 
            "         if (hostnameVerifier != null) {\n", 
            "-            return createSSLIOSessionHandler(hostnameVerifier.getValue().toString());\n", 
            "+            return createSSLSetupHandler(hostnameVerifier.getValue().toString());\n", 
            "         } else {\n", 
            "-            return createSSLIOSessionHandler(null);\n", 
            "+            return createSSLSetupHandler(null);\n", 
            "         }        \n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-276,7 +274,7", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    private SSLSetupHandler createSSLIOSessionHandler(final String hostnameVerifier)\n", 
            "+    private SSLSetupHandler createSSLSetupHandler(final String hostnameVerifier)\n", 
            "             throws AxisFault {\n", 
            " \n", 
            "         return new SSLSetupHandler() {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-110,7 +110,7", 
          "lines": [
            "     /** Weather Server header coming from server should be preserved */\n", 
            "     private boolean preserveServerHeader = true;\n", 
            "     /**\n", 
            "-     * Initialize the transport sender, and execute reactor in new seperate thread\n", 
            "+     * Initialize the transport sender, and execute reactor in new separate thread\n", 
            "      * @param cfgCtx the Axis2 configuration context\n", 
            "      * @param transportOut the description of the http/s transport from Axis2 configuration\n", 
            "      * @throws AxisFault thrown on an error\n"
          ]
        }, 
        {
          "locn": "-118,7 +118,7", 
          "lines": [
            "     public void init(ConfigurationContext cfgCtx, TransportOutDescription transportOut) throws AxisFault {\n", 
            "         // is this an SSL Sender?\n", 
            "         sslContext = getSSLContext(transportOut);\n", 
            "-        SSLSetupHandler sslSetupHandler = getSSLIOSessionHandler(transportOut);\n", 
            "+        SSLSetupHandler sslSetupHandler = getSSLSetupHandler(transportOut);\n", 
            " \n", 
            "         // configure proxy settings - only supports HTTP right now (See SYNAPSE-418)\n", 
            "         if (sslContext == null) {\n"
          ]
        }, 
        {
          "locn": "-244,7 +244,7", 
          "lines": [
            "      * @return always null\n", 
            "      * @throws AxisFault on error\n", 
            "      */\n", 
            "-    protected SSLSetupHandler getSSLIOSessionHandler(TransportOutDescription transportOut)\n", 
            "+    protected SSLSetupHandler getSSLSetupHandler(TransportOutDescription transportOut)\n", 
            "         throws AxisFault {\n", 
            "         return null;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-22,15 +22,21", 
          "lines": [
            " import javax.net.ssl.SSLContext;\n", 
            " \n", 
            " import org.apache.http.HttpResponseFactory;\n", 
            "+import org.apache.http.impl.DefaultHttpResponseFactory;\n", 
            " import org.apache.http.impl.nio.DefaultHttpClientIODispatch;\n", 
            " import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.impl.nio.SSLNHttpClientConnectionFactory;\n", 
            " import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "+import org.apache.http.nio.NHttpConnectionFactory;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLMode;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            " import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "+import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            "+import org.apache.http.params.HttpConnectionParams;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " \n", 
            "+import java.net.InetSocketAddress;\n", 
            " import java.util.Map;\n", 
            " \n", 
            " /**\n"
          ]
        }, 
        {
          "locn": "-38,53 +44,57", 
          "lines": [
            "  * SSLContext when connecting to different servers. If a SSLContext cannot be found for a\n", 
            "  * particular server from the specified map it uses the default SSLContext.\n", 
            "  */\n", 
            "-public class SSLClientIOEventDispatch \n", 
            "-    extends DefaultHttpClientIODispatch {\n", 
            "+public class SSLClientIOEventDispatch extends DefaultHttpClientIODispatch {\n", 
            " \n", 
            "-    private Map<String, SSLContext> contextMap;\n", 
            "-\n", 
            "     public SSLClientIOEventDispatch(\n", 
            "             final NHttpClientEventHandler handler,\n", 
            "             final SSLContext sslcontext,\n", 
            "+            final Map<String, SSLContext> contextMap,\n", 
            "             final SSLSetupHandler sslHandler,\n", 
            "             final HttpParams params) {\n", 
            "-        super(LoggingUtils.decorate(handler), new SSLTargetConnectionFactory(sslcontext, sslHandler, params));\n", 
            "+        super(LoggingUtils.decorate(handler),\n", 
            "+                new SSLClientConnectionFactory(sslcontext, contextMap, sslHandler, params));\n", 
            "     }\n", 
            " \n", 
            "-    public void setContextMap(Map<String,SSLContext> contextMap) {\n", 
            "-        this.contextMap = contextMap;\n", 
            "-    }\n", 
            "+    /**\n", 
            "+     * Custom NHttpClientConnectionFactory implementation. Most of this code has been borrowed\n", 
            "+     * from the SSLNHttpClientConnectionFactory class of HttpCore-NIO. This custom implementation\n", 
            "+     * allows using different SSLContext instances for different target endpoints (custom SSL\n", 
            "+     * profiles feature). Hopefully a future HttpCore-NIO API will provide an easier way to\n", 
            "+     * customize the way SSLIOSession instances are created and we will be able to get rid of this.\n", 
            "+     */\n", 
            "+    private static class SSLClientConnectionFactory\n", 
            "+            implements NHttpConnectionFactory<DefaultNHttpClientConnection> {\n", 
            " \n", 
            "-//    protected SSLIOSession createSSLIOSession(IOSession ioSession, SSLContext sslContext,\n", 
            "-//                                              SSLIOSessionHandler sslioSessionHandler) {\n", 
            "-//\n", 
            "-//        InetSocketAddress address = (InetSocketAddress) ioSession.getRemoteAddress();\n", 
            "-//        String host = address.getHostName() + \":\" + address.getPort();\n", 
            "-//        SSLContext customContext = null;\n", 
            "-//        if (contextMap != null) {\n", 
            "-//            // See if there's a custom SSL profile configured for this server\n", 
            "-//            customContext = contextMap.get(host);\n", 
            "-//        }\n", 
            "-//\n", 
            "-//        if (customContext == null) {\n", 
            "-//            customContext = sslContext;\n", 
            "-//        }\n", 
            "-//\n", 
            "-//        return super.createSSLIOSession(ioSession, customContext, sslioSessionHandler);\n", 
            "-//    }\n", 
            "+        private final HttpResponseFactory responseFactory;\n", 
            "+        private final ByteBufferAllocator allocator;\n", 
            "+        private final SSLContext sslcontext;\n", 
            "+        private final SSLSetupHandler sslHandler;\n", 
            "+        private final HttpParams params;\n", 
            "+        private final Map<String,SSLContext> contextMap;\n", 
            " \n", 
            "-    private static class SSLTargetConnectionFactory extends SSLNHttpClientConnectionFactory {\n", 
            "+        public SSLClientConnectionFactory(\n", 
            "+                final SSLContext sslcontext,\n", 
            "+                final Map<String,SSLContext> contextMap,\n", 
            "+                final SSLSetupHandler sslHandler,\n", 
            "+                final HttpParams params) {\n", 
            " \n", 
            "-        public SSLTargetConnectionFactory(SSLContext sslcontext,\n", 
            "-                                          SSLSetupHandler sslHandler, HttpParams params) {\n", 
            "-            super(sslcontext, sslHandler, params);\n", 
            "+            if (params == null) {\n", 
            "+                throw new IllegalArgumentException(\"HTTP parameters may not be null\");\n", 
            "+            }\n", 
            "+            this.sslcontext = sslcontext;\n", 
            "+            this.contextMap = contextMap;\n", 
            "+            this.sslHandler = sslHandler;\n", 
            "+            this.responseFactory = new DefaultHttpResponseFactory();\n", 
            "+            this.allocator = new HeapByteBufferAllocator();\n", 
            "+            this.params = params;\n", 
            "         }\n", 
            " \n", 
            "-        @Override\n", 
            "         protected DefaultNHttpClientConnection createConnection(IOSession session,\n", 
            "                                                                 HttpResponseFactory responseFactory,\n", 
            "                                                                 ByteBufferAllocator allocator,\n", 
            "                                                                 HttpParams params) {\n", 
            "+            session = org.apache.synapse.transport.passthru.logging.LoggingUtils.decorate(session, \"sslclient\");\n", 
            "             return LoggingUtils.createClientConnection(\n", 
            "                     session,\n", 
            "                     responseFactory,\n"
          ]
        }, 
        {
          "locn": "-91,6 +101,44", 
          "lines": [
            "                     allocator,\n", 
            "                     params);\n", 
            "         }\n", 
            "+\n", 
            "+        private SSLContext getDefaultSSLContext() {\n", 
            "+            SSLContext sslcontext;\n", 
            "+            try {\n", 
            "+                sslcontext = SSLContext.getInstance(\"TLS\");\n", 
            "+                sslcontext.init(null, null, null);\n", 
            "+            } catch (Exception ex) {\n", 
            "+                throw new IllegalStateException(\"Failure initializing default SSL context\", ex);\n", 
            "+            }\n", 
            "+            return sslcontext;\n", 
            "+        }\n", 
            "+\n", 
            "+        private SSLContext getSSLContext(IOSession session) {\n", 
            "+            InetSocketAddress address = (InetSocketAddress) session.getRemoteAddress();\n", 
            "+            String host = address.getHostName() + \":\" + address.getPort();\n", 
            "+            SSLContext customContext = null;\n", 
            "+            if (contextMap != null) {\n", 
            "+                // See if there's a custom SSL profile configured for this server\n", 
            "+                customContext = contextMap.get(host);\n", 
            "+            }\n", 
            "+\n", 
            "+            if (customContext == null) {\n", 
            "+                customContext = this.sslcontext != null ? this.sslcontext : getDefaultSSLContext();\n", 
            "+            }\n", 
            "+            return customContext;\n", 
            "+        }\n", 
            "+\n", 
            "+        public DefaultNHttpClientConnection createConnection(final IOSession session) {\n", 
            "+            SSLContext sslcontext = getSSLContext(session);\n", 
            "+            SSLIOSession ssliosession = new SSLIOSession(session, SSLMode.CLIENT,\n", 
            "+                    sslcontext, this.sslHandler);\n", 
            "+            session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);\n", 
            "+            DefaultNHttpClientConnection conn = createConnection(\n", 
            "+                    ssliosession, this.responseFactory, this.allocator, this.params);\n", 
            "+            int timeout = HttpConnectionParams.getSoTimeout(this.params);\n", 
            "+            conn.setSocketTimeout(timeout);\n", 
            "+            return conn;\n", 
            "+        }\n", 
            "     }\n", 
            " \n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/SSLClientIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/SSLClientIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1269,18 +1269,18", 
          "lines": [
            "             <email>hiranya AT apache.org</email>\n", 
            "             <organization>WSO2</organization>\n", 
            "         </developer>\n", 
            "-\t<developer>\n", 
            "+\t    <developer>\n", 
            "             <name>Charith Wickramarachchi</name>\n", 
            "             <id>charith</id>\n", 
            "             <email>charith AT apache.org</email>\n", 
            "             <organization>WSO2</organization>\n", 
            "         </developer>\n", 
            "-\t<developer>\n", 
            "+\t    <developer>\n", 
            "             <name>Heshan Suriyaarachchi</name>\n", 
            "             <id>heshan</id>\n", 
            "             <email>heshan AT apache.org</email>\n", 
            "             <organization>WSO2</organization>\n", 
            "-\t    <url>http://heshans.blogspot.com/</url>\n", 
            "+\t        <url>http://heshans.blogspot.com/</url>\n", 
            "         </developer>\n", 
            "         <developer>\n", 
            "             <name>Rajika Kumarasiri</name>\n"
          ]
        }, 
        {
          "locn": "-1293,7 +1293,7", 
          "lines": [
            "             <email>kasun AT apache.org</email>\n", 
            " \t    <organization>WSO2</organization>\n", 
            "         </developer> \n", 
            "-\t<developer>\n", 
            "+\t    <developer>\n", 
            "             <name>Udayanga Wickramasinghe</name>\n", 
            "             <id>uswick</id>\n", 
            "             <email>uswick AT apache.org</email>\n"
          ]
        }
      ], 
      "to": "java/pom.xml", 
      "from": "java/pom.xml"
    }
  ], 
  "id": "1507117"
}