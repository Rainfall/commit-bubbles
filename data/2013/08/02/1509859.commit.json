{
  "when": "2013-08-02T17:06:16-04:00", 
  "message": "Replacing a deprecated api call in the old nhttp transport", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-16,6 +16,7", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.nhttp;\n", 
            " \n", 
            " import java.io.IOException;\n"
          ]
        }, 
        {
          "locn": "-30,7 +31,7", 
          "lines": [
            " import org.apache.http.HttpResponse;\n", 
            " import org.apache.http.HttpResponseFactory;\n", 
            " import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.nio.NHttpClientHandler;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            " import org.apache.http.nio.NHttpMessageParser;\n", 
            " import org.apache.http.nio.NHttpMessageWriter;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n"
          ]
        }, 
        {
          "locn": "-92,7 +93,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     @Override\n", 
            "-    public void consumeInput(final NHttpClientHandler handler) {\n", 
            "+    public void consumeInput(final NHttpClientEventHandler handler) {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(this.id + \": Consume input\");\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-100,7 +101,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     @Override\n", 
            "-    public void produceOutput(final NHttpClientHandler handler) {\n", 
            "+    public void produceOutput(final NHttpClientEventHandler handler) {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(this.id + \": Produce output\");\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-146,8 +147,8", 
          "lines": [
            "             if (message != null && headerlog.isDebugEnabled()) {\n", 
            "                 headerlog.debug(id + \" >> \" + message.getRequestLine().toString());\n", 
            "                 Header[] headers = message.getAllHeaders();\n", 
            "-                for (int i = 0; i < headers.length; i++) {\n", 
            "-                    headerlog.debug(id + \" >> \" + headers[i].toString());\n", 
            "+                for (Header header : headers) {\n", 
            "+                    headerlog.debug(id + \" >> \" + header.toString());\n", 
            "                 }\n", 
            "             }\n", 
            "             if (message != null && accesslog.isInfoEnabled()) {\n"
          ]
        }, 
        {
          "locn": "-180,8 +181,8", 
          "lines": [
            "             if (message != null && headerlog.isDebugEnabled()) {\n", 
            "                 headerlog.debug(id + \" << \" + message.getStatusLine().toString());\n", 
            "                 Header[] headers = message.getAllHeaders();\n", 
            "-                for (int i = 0; i < headers.length; i++) {\n", 
            "-                    headerlog.debug(id + \" << \" + headers[i].toString());\n", 
            "+                for (Header header : headers) {\n", 
            "+                    headerlog.debug(id + \" << \" + header.toString());\n", 
            "                 }\n", 
            "             }\n", 
            "             if (message != null && accesslog.isInfoEnabled()) {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpClientConnection.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpClientConnection.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,6 +16,7", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.nhttp;\n", 
            " \n", 
            " import java.io.IOException;\n"
          ]
        }, 
        {
          "locn": "-32,7 +33,7", 
          "lines": [
            " import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            " import org.apache.http.nio.NHttpMessageParser;\n", 
            " import org.apache.http.nio.NHttpMessageWriter;\n", 
            "-import org.apache.http.nio.NHttpServiceHandler;\n", 
            "+import org.apache.http.nio.NHttpServerEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            " import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            " import org.apache.http.nio.reactor.SessionOutputBuffer;\n"
          ]
        }, 
        {
          "locn": "-92,7 +93,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     @Override\n", 
            "-    public void consumeInput(final NHttpServiceHandler handler) {\n", 
            "+    public void consumeInput(final NHttpServerEventHandler handler) {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(this.id + \": Consume input\");\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-100,7 +101,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     @Override\n", 
            "-    public void produceOutput(final NHttpServiceHandler handler) {\n", 
            "+    public void produceOutput(final NHttpServerEventHandler handler) {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(this.id + \": Produce output\");\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-146,8 +147,8", 
          "lines": [
            "             if (message != null && headerlog.isDebugEnabled()) {\n", 
            "                 headerlog.debug(id + \" << \" + message.getStatusLine().toString());\n", 
            "                 Header[] headers = message.getAllHeaders();\n", 
            "-                for (int i = 0; i < headers.length; i++) {\n", 
            "-                    headerlog.debug(id + \" << \" + headers[i].toString());\n", 
            "+                for (Header header : headers) {\n", 
            "+                    headerlog.debug(id + \" << \" + header.toString());\n", 
            "                 }\n", 
            "             }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-182,8 +183,8", 
          "lines": [
            "             if (message != null && headerlog.isDebugEnabled()) {\n", 
            "                 headerlog.debug(id + \" >> \" + message.getRequestLine().toString());\n", 
            "                 Header[] headers = message.getAllHeaders();\n", 
            "-                for (int i = 0; i < headers.length; i++) {\n", 
            "-                    headerlog.debug(id + \" >> \" + headers[i].toString());\n", 
            "+                for (Header header : headers) {\n", 
            "+                    headerlog.debug(id + \" >> \" + header.toString());\n", 
            "                 }\n", 
            "             }\n", 
            "             if (message != null && accesslog.isInfoEnabled()) {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpServerConnection.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpServerConnection.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,10 +16,10", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.nhttp;\n", 
            " \n", 
            " import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            " \n", 
            " import java.io.BufferedWriter;\n", 
            " import java.io.File;\n"
          ]
        }, 
        {
          "locn": "-35,13 +35,12", 
          "lines": [
            "  */\n", 
            " public class AccessLogger {\n", 
            " \n", 
            "-    public final static String ACCESS_LOG_ID = \"org.apache.synapse.transport.nhttp.access\";\n", 
            "-    private static Log log = LogFactory.getLog(ACCESS_LOG_ID);\n", 
            "+    private Log log;\n", 
            " \n", 
            "     public AccessLogger(final Log log) {\n", 
            "         super();\n", 
            "         this.initOpen();\n", 
            "-        AccessLogger.log = log;\n", 
            "+        this.log = log;\n", 
            "         buffered = true;\n", 
            "         checkExists = false;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/AccessLogger.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/AccessLogger.java"
    }
  ], 
  "id": "1509859"
}