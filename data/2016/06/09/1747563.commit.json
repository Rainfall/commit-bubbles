{
  "when": "2016-06-09T12:59:08-04:00", 
  "who": "isudana", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-61,6 +61,9", 
          "lines": [
            "         return time;\r\n", 
            "     }\r\n", 
            " \r\n", 
            "+    public void setTime(long time) {\r\n", 
            "+        this.time = time;\r\n", 
            "+    }\r\n", 
            "     public boolean isResponse() {\r\n", 
            "         return isResponse;\r\n", 
            "     }\r\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/aspects/statistics/StatisticsLog.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/aspects/statistics/StatisticsLog.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-47,7 +47,7", 
          "lines": [
            "      */\n", 
            "     private Map mappedValues;\n", 
            " \n", 
            "-    TemplateContext(String name, Collection<TemplateParameter> parameters) {\n", 
            "+    public TemplateContext(String name, Collection<TemplateParameter> parameters) {\n", 
            "         this.fName = name;\n", 
            "         this.parameters = parameters;\n", 
            "         mappedValues = new HashMap();\n"
          ]
        }, 
        {
          "locn": "-116,6 +116,14", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "+    public Map getMappedValues() {\n", 
            "+        return mappedValues;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setMappedValues(Map map) {\n", 
            "+        this.mappedValues = map;\n", 
            "+    }\n", 
            "+\n", 
            "     public Object getParameterValue(String paramName) {\n", 
            "         return mappedValues.get(paramName);\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/template/TemplateContext.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/template/TemplateContext.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-2,6 +2,7", 
          "lines": [
            " \n", 
            " import org.apache.axiom.attachments.Attachments;\n", 
            " import org.apache.axiom.om.*;\n", 
            "+import org.apache.axiom.om.util.ElementHelper;\n", 
            " import org.apache.axiom.soap.*;\n", 
            " import org.apache.axiom.util.UIDGenerator;\n", 
            " import org.apache.axis2.AxisFault;\n"
          ]
        }, 
        {
          "locn": "-17,10 +18,13", 
          "lines": [
            " import org.apache.synapse.MessageContext;\n", 
            " import org.apache.synapse.SynapseConstants;\n", 
            " import org.apache.synapse.SynapseException;\n", 
            "+import org.apache.synapse.aspects.statistics.ErrorLog;\n", 
            "+import org.apache.synapse.aspects.statistics.StatisticsLog;\n", 
            " import org.apache.synapse.aspects.statistics.StatisticsRecord;\n", 
            " import org.apache.synapse.aspects.statistics.StatisticsRecordFactory;\n", 
            " import org.apache.synapse.core.axis2.Axis2MessageContext;\n", 
            " import org.apache.synapse.mediators.eip.EIPConstants;\n", 
            "+import org.apache.synapse.mediators.template.TemplateContext;\n", 
            " import org.apache.synapse.transport.passthru.PassThroughConstants;\n", 
            " import org.apache.synapse.transport.passthru.Pipe;\n", 
            " import org.apache.synapse.transport.passthru.ServerWorker;\n"
          ]
        }, 
        {
          "locn": "-77,10 +81,26", 
          "lines": [
            " \n", 
            "         // copy all the synapse level properties to the newCtx\n", 
            "         for (Object o : synCtx.getPropertyKeySet()) {\n", 
            "-            // If there are non String keyed properties neglect them rather than trow exception\n", 
            "-            if (o instanceof String) {\n", 
            "-                newCtx.setProperty((String) o, synCtx.getProperty((String) o));\n", 
            "+            String key = (String) o;                    // MessageContext API enforce key to be a String\n", 
            "+            Object obj = synCtx.getProperty(key);\n", 
            "+            if (obj instanceof String || obj instanceof Integer) {  // For immutable\n", 
            "+                // Do nothing\n", 
            "+            } else if (obj instanceof ArrayList) {\n", 
            "+                obj = cloneArrayList((ArrayList) obj);\n", 
            "+            } else if (obj instanceof Stack\n", 
            "+                    && key.equals(SynapseConstants.SYNAPSE__FUNCTION__STACK)) {\n", 
            "+                obj = getClonedTemplateStack((Stack<TemplateContext>) obj);\n", 
            "+            } else if (obj instanceof StatisticsRecord) {\n", 
            "+                obj = getClonedStatisticRecord((StatisticsRecord) obj);\n", 
            "+            } else if (obj instanceof OMElement) {\n", 
            "+                obj = ((OMElement) obj).cloneOMElement();\n", 
            "+            } else {\n", 
            "+                if (log.isDebugEnabled()) {\n", 
            "+                    log.debug(\"Deep clone not happened for property : \" + key + \". Class type : \"\n", 
            "+                             + obj.getClass().getName());\n", 
            "+                }\n", 
            "             }\n", 
            "+            newCtx.setProperty(key, obj);\n", 
            "         }\n", 
            "         \n", 
            "         // Make deep copy of fault stack so that parent will not be lost it's fault stack\n"
          ]
        }, 
        {
          "locn": "-410,4 +430,106", 
          "lines": [
            "         throw new SynapseException(msg);\n", 
            "     }\n", 
            " \n", 
            "+    /*\n", 
            "+     * This method will deep clone array list by creating a new ArrayList and cloning and adding each element in it\n", 
            "+     */\n", 
            "+    private static ArrayList<Object> cloneArrayList(ArrayList<Object> originalArrayList) {\n", 
            "+        ArrayList<Object> clonedArrayList = null;\n", 
            "+        if (originalArrayList != null) {\n", 
            "+            clonedArrayList = new ArrayList<Object>();\n", 
            "+            for (Object obj : originalArrayList) {\n", 
            "+                if (obj instanceof SOAPHeaderBlock) {\n", 
            "+                    SOAPFactory fac = (SOAPFactory) ((SOAPHeaderBlock) obj).getOMFactory();\n", 
            "+                    obj = ((SOAPHeaderBlock) obj).cloneOMElement();\n", 
            "+                    try {\n", 
            "+                        obj = ElementHelper.toSOAPHeaderBlock((OMElement) obj, fac);\n", 
            "+                    } catch (Exception e) {\n", 
            "+                        handleException(e.getLocalizedMessage());\n", 
            "+                    }\n", 
            "+                } else if (obj instanceof SOAPEnvelope) {\n", 
            "+                    SOAPEnvelope env = (SOAPEnvelope) obj;\n", 
            "+                    obj = MessageHelper.cloneSOAPEnvelope(env);\n", 
            "+                } else if (obj instanceof OMElement) {\n", 
            "+                    obj = ((OMElement) obj).cloneOMElement();\n", 
            "+                } else {\n", 
            "+                    if (log.isDebugEnabled()) {\n", 
            "+                        log.debug(\"Array List deep clone not implemented for Class type : \" + obj.getClass().getName());\n", 
            "+                    }\n", 
            "+                }\n", 
            "+                clonedArrayList.add(obj);\n", 
            "+            }\n", 
            "+        }\n", 
            "+        return clonedArrayList;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Get a clone of a Template Function stack\n", 
            "+     *\n", 
            "+     * @param oriTemplateStack original template function stack to be cloned\n", 
            "+     * @return clone of a Template Function stack\n", 
            "+     */\n", 
            "+    private static Stack<TemplateContext> getClonedTemplateStack(Stack<TemplateContext> oriTemplateStack) {\n", 
            "+\n", 
            "+        Stack<TemplateContext> clonedTemplateStack = new Stack<TemplateContext>();\n", 
            "+\n", 
            "+        for (TemplateContext oriTemplateCtx : oriTemplateStack) {\n", 
            "+            TemplateContext clonedTemplateCtx =\n", 
            "+                    new TemplateContext(oriTemplateCtx.getName(), oriTemplateCtx.getParameters());\n", 
            "+\n", 
            "+            Map oriValueMap = oriTemplateCtx.getMappedValues();\n", 
            "+            Map clonedValueMap = new HashMap();\n", 
            "+            for (Object key : oriValueMap.keySet()) {\n", 
            "+                Object value = oriValueMap.get(key);\n", 
            "+                if (value instanceof ArrayList) {\n", 
            "+                    value = cloneArrayList((ArrayList<Object>) value);\n", 
            "+                }\n", 
            "+                clonedValueMap.put(key, value);\n", 
            "+            }\n", 
            "+            clonedTemplateCtx.setMappedValues(clonedValueMap);\n", 
            "+            clonedTemplateStack.push(clonedTemplateCtx);\n", 
            "+        }\n", 
            "+        return clonedTemplateStack;\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Get clone of Statistic Record\n", 
            "+     *\n", 
            "+     * @param oriRecord original statistic record\n", 
            "+     * @return clone of Statistic Record\n", 
            "+     */\n", 
            "+    private static StatisticsRecord getClonedStatisticRecord (StatisticsRecord oriRecord) {\n", 
            "+\n", 
            "+        StatisticsRecord clonedRecord =\n", 
            "+                new StatisticsRecord(oriRecord.getId(), oriRecord.getClientIP(), oriRecord.getClientHost());\n", 
            "+\n", 
            "+        clonedRecord.setOwner(oriRecord.getOwner());\n", 
            "+        clonedRecord.setEndReported(oriRecord.isEndReported());\n", 
            "+\n", 
            "+        // Clone stats logs\n", 
            "+        List<StatisticsLog> oriStatisticsLogs = oriRecord.getAllStatisticsLogs();\n", 
            "+        for (StatisticsLog oriLog : oriStatisticsLogs) {\n", 
            "+\n", 
            "+            StatisticsLog clonedLog = new StatisticsLog(oriLog.getId(), oriLog.getComponentType());\n", 
            "+            clonedLog.setTime(oriLog.getTime());\n", 
            "+            clonedLog.setResponse(oriLog.isResponse());\n", 
            "+            clonedLog.setFault(oriLog.isFault());\n", 
            "+            clonedLog.setEndAnyLog(oriLog.isEndAnyLog());\n", 
            "+\n", 
            "+            // Error Log\n", 
            "+            ErrorLog oriErrorLog = oriLog.getErrorLog();\n", 
            "+            if (oriErrorLog != null) {\n", 
            "+                ErrorLog clonedErrorLog = new ErrorLog(oriErrorLog.getErrorCode());\n", 
            "+                if (oriErrorLog.getException() != null) {\n", 
            "+                    clonedErrorLog.setException(oriErrorLog.getException());\n", 
            "+                }\n", 
            "+                clonedErrorLog.setErrorMessage(oriErrorLog.getErrorMessage());\n", 
            "+                clonedErrorLog.setErrorDetail(oriErrorLog.getErrorDetail());\n", 
            "+                clonedLog.setErrorLog(clonedErrorLog);\n", 
            "+            }\n", 
            "+            clonedRecord.collect(clonedLog);\n", 
            "+        }\n", 
            "+        return clonedRecord;\n", 
            "+    }\n", 
            "+\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/util/MessageHelper.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/util/MessageHelper.java"
    }
  ], 
  "id": "1747563"
}