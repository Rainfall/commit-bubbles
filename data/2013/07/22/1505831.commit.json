{
  "when": "2013-07-22T18:05:35-04:00", 
  "message": "Refactored sample157 to use the BasicHttpClient", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-26,6 +26,7", 
          "lines": [
            " import org.apache.http.impl.client.DefaultHttpClient;\n", 
            " \n", 
            " import java.io.ByteArrayInputStream;\n", 
            "+import java.util.Map;\n", 
            " \n", 
            " /**\n", 
            "  * A simple HTTP client that enables making HTTP requests. Useful for testing\n"
          ]
        }, 
        {
          "locn": "-60,9 +61,29", 
          "lines": [
            "      * @throws Exception If an error occurs while making the HTTP call\n", 
            "      */\n", 
            "     public HttpResponse doPost(String url, byte[] payload, String contentType) throws Exception {\n", 
            "+        return doPost(url, payload, contentType, null);\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Make a HTTP POST request on the specified URL.\n", 
            "+     *\n", 
            "+     * @param url A valid HTTP URL\n", 
            "+     * @param payload An array of bytes to be posted to the URL (message body)\n", 
            "+     * @param contentType Content type of the message body\n", 
            "+     * @param headers A map of HTTP headers to be set on the outgoing request\n", 
            "+     * @return A HttpResponse object\n", 
            "+     * @throws Exception If an error occurs while making the HTTP call\n", 
            "+     */\n", 
            "+    public HttpResponse doPost(String url, byte[] payload,\n", 
            "+                               String contentType, Map<String,String> headers) throws Exception {\n", 
            "         HttpClient client = new DefaultHttpClient();\n", 
            "         try {\n", 
            "             HttpPost post = new HttpPost(url);\n", 
            "+            if (headers != null) {\n", 
            "+                for (Map.Entry<String,String> entry : headers.entrySet()) {\n", 
            "+                    post.setHeader(entry.getKey(), entry.getValue());\n", 
            "+                }\n", 
            "+            }\n", 
            "             BasicHttpEntity entity = new BasicHttpEntity();\n", 
            "             entity.setContentType(contentType);\n", 
            "             entity.setContent(new ByteArrayInputStream(payload));\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/BasicHttpClient.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/BasicHttpClient.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,29 +16,24", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.samples.framework.tests.proxy;\n", 
            " \n", 
            "-import org.apache.http.HttpEntity;\n", 
            "-import org.apache.http.HttpHeaders;\n", 
            "-import org.apache.http.HttpResponse;\n", 
            "-import org.apache.http.client.HttpClient;\n", 
            "-import org.apache.http.client.methods.HttpPost;\n", 
            "-import org.apache.http.entity.StringEntity;\n", 
            "-import org.apache.http.impl.client.DefaultHttpClient;\n", 
            "-import org.apache.http.protocol.HTTP;\n", 
            " import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.BasicHttpClient;\n", 
            "+import org.apache.synapse.samples.framework.clients.HttpResponse;\n", 
            " \n", 
            "-import java.io.BufferedReader;\n", 
            "-import java.io.InputStreamReader;\n", 
            "+import java.util.HashMap;\n", 
            "+import java.util.Map;\n", 
            " \n", 
            " public class Sample157 extends SynapseTestCase {\n", 
            " \n", 
            "     private String requestXml;\n", 
            "-    private HttpClient httpclient;\n", 
            "+    private BasicHttpClient httpClient;\n", 
            " \n", 
            "     public Sample157() {\n", 
            "         super(157);\n", 
            "-        httpclient = new DefaultHttpClient();\n", 
            "+        httpClient = new BasicHttpClient();\n", 
            " \n", 
            "         requestXml = \"<soap:Envelope xmlns:soap=\\\"http://www.w3.org/2003/05/soap-envelope\\\" xmlns:ser=\\\"http://services.samples\\\" xmlns:xsd=\\\"http://services.samples/xsd\\\">\\n\" +\n", 
            "                 \"       <soap:Header/>\\n\" +\n"
          ]
        }, 
        {
          "locn": "-53,95 +48,41", 
          "lines": [
            "     }\n", 
            " \n", 
            " \n", 
            "-    public void testRoutingOnHttpHeader() {\n", 
            "+    public void testRoutingOnHttpHeader() throws Exception {\n", 
            "         String url = \"http://localhost:8280/services/StockQuoteProxy\";\n", 
            " \n", 
            "-        log.info(\"Running test: Routing Messages based on HTTP URL, HTTP Headers and Query \" +\n", 
            "-                \"Parameters\");\n", 
            "+        log.info(\"Running test: Routing Messages based on HTTP URL, HTTP Headers and \" +\n", 
            "+                \"Query Parameters\");\n", 
            " \n", 
            "-        // Create a new HttpClient and Post Header\n", 
            "-        HttpPost httpPost = new HttpPost(url);//new HttpPost(availabilityUrl + VERSION_TEXT);\n", 
            "+        HttpResponse response = httpClient.doPost(url, requestXml.getBytes(),\n", 
            "+                \"application/soap+xml;charset=UTF-8\");\n", 
            "+        assertEquals(202, response.getStatus());\n", 
            " \n", 
            "-        httpPost.setHeader(HttpHeaders.CONTENT_TYPE, \"application/soap+xml;charset=UTF-8\");\n", 
            "-        httpPost.setHeader(\"foo\", \"bar\");\n", 
            "-        HttpResponse response;\n", 
            "-        HttpEntity entity;\n", 
            "-        try {\n", 
            "-            entity = new StringEntity(requestXml, \"application/xml\", HTTP.UTF_8);\n", 
            "-            httpPost.setEntity(entity);\n", 
            "-            response = httpclient.execute(httpPost);\n", 
            "-            assertNotNull(\"Did not get a response \", response);\n", 
            "-            HttpEntity resEntity = response.getEntity();\n", 
            "-            assertNotNull(\"Response is empty\", resEntity);\n", 
            "-            BufferedReader rd = new BufferedReader(new InputStreamReader(resEntity.getContent()));\n", 
            "-            String result = \"\";\n", 
            "-            String line;\n", 
            "-            while ((line = rd.readLine()) != null) {\n", 
            "-                result += line;\n", 
            "-            }\n", 
            "-            System.out.println(result);\n", 
            "-            assertTrue(\"Response is empty\", !\"\".equals(result));\n", 
            "-        } catch (Exception e) {\n", 
            "-            fail(\"Errors occurred while sending POST request: \" + e.getMessage());\n", 
            "-        }\n", 
            " \n", 
            "-        url = \"http://localhost:8280/services/StockQuoteProxy\";\n", 
            "+        Map<String,String> headers = new HashMap<String, String>();\n", 
            "+        headers.put(\"foo\", \"bar\");\n", 
            "+        response = httpClient.doPost(url, requestXml.getBytes(),\n", 
            "+                \"application/soap+xml;charset=UTF-8\", headers);\n", 
            "+        assertEquals(200, response.getStatus());\n", 
            "+        assertTrue(\"Response is empty\", !\"\".equals(new String(response.getBody())));\n", 
            " \n", 
            "-        log.info(\"Running test: Routing Messages based on HTTP URL, HTTP Headers and Query Parameters\");\n", 
            " \n", 
            "-        // Create a new HttpClient and Post Header\n", 
            "-        httpPost = new HttpPost(url);//new HttpPost(availabilityUrl + VERSION_TEXT);\n", 
            "+        headers = new HashMap<String, String>();\n", 
            "+        headers.put(\"my_custom_header1\", \"foo1\");\n", 
            "+        response = httpClient.doPost(url, requestXml.getBytes(),\n", 
            "+                \"application/soap+xml;charset=UTF-8\", headers);\n", 
            "+        assertEquals(200, response.getStatus());\n", 
            "+        assertTrue(\"Response is empty\", !\"\".equals(new String(response.getBody())));\n", 
            " \n", 
            "-        httpPost.setHeader(HttpHeaders.CONTENT_TYPE, \"application/soap+xml;charset=UTF-8\");\n", 
            "-        httpPost.setHeader(\"my_custom_header1\", \"foo1\");\n", 
            " \n", 
            "-        try {\n", 
            "-            entity = new StringEntity(requestXml, \"application/xml\", HTTP.UTF_8);\n", 
            "-            httpPost.setEntity(entity);\n", 
            "-            response = httpclient.execute(httpPost);\n", 
            "-            assertNotNull(\"Did not get a response \", response);\n", 
            "-            HttpEntity resEntity = response.getEntity();\n", 
            "-            assertNotNull(\"Response is empty\", resEntity);\n", 
            "-            BufferedReader rd = new BufferedReader(new InputStreamReader(resEntity.getContent()));\n", 
            "-            String result = \"\";\n", 
            "-            String line;\n", 
            "-            while ((line = rd.readLine()) != null) {\n", 
            "-                result += line;\n", 
            "-            }\n", 
            "-            System.out.println(result);\n", 
            "-            assertTrue(\"Response is empty\", !\"\".equals(result));\n", 
            "-        } catch (Exception e) {\n", 
            "-            fail(\"Errors occurred while sending POST request: \" + e.getMessage());\n", 
            "-        }\n", 
            "-\n", 
            "         url = \"http://localhost:8280/services/StockQuoteProxy?qparam1=qpv_foo&qparam2=qpv_foo2\";\n", 
            "-        log.info(\"Running test: Routing Messages based on HTTP URL, HTTP Headers and Query Parameters\");\n", 
            "-\n", 
            "-        // Create a new HttpClient and Post Header\n", 
            "-        httpPost = new HttpPost(url);//new HttpPost(availabilityUrl + VERSION_TEXT);\n", 
            "-\n", 
            "-        httpPost.setHeader(HttpHeaders.CONTENT_TYPE, \"application/soap+xml;charset=UTF-8\");\n", 
            "-        httpPost.setHeader(\"my_custom_header2\", \"bar\");\n", 
            "-        httpPost.setHeader(\"my_custom_header3\", \"foo\");\n", 
            "-\n", 
            "-        try {\n", 
            "-            entity = new StringEntity(requestXml, \"application/xml\", HTTP.UTF_8);\n", 
            "-            httpPost.setEntity(entity);\n", 
            "-            response = httpclient.execute(httpPost);\n", 
            "-            assertNotNull(\"Did not get a response \", response);\n", 
            "-            HttpEntity resEntity = response.getEntity();\n", 
            "-            assertNotNull(\"Response is empty\", resEntity);\n", 
            "-            BufferedReader rd = new BufferedReader(new InputStreamReader(resEntity.getContent()));\n", 
            "-            String result = \"\";\n", 
            "-            String line;\n", 
            "-            while ((line = rd.readLine()) != null) {\n", 
            "-                result += line;\n", 
            "-            }\n", 
            "-            System.out.println(result);\n", 
            "-            assertTrue(\"Response is empty\", !\"\".equals(result));\n", 
            "-        } catch (Exception e) {\n", 
            "-            fail(\"Errors occurred while sending POST request: \" + e.getMessage());\n", 
            "-        }\n", 
            "+        headers = new HashMap<String, String>();\n", 
            "+        headers.put(\"my_custom_header2\", \"bar\");\n", 
            "+        headers.put(\"my_custom_header3\", \"foo\");\n", 
            "+        response = httpClient.doPost(url, requestXml.getBytes(),\n", 
            "+                \"application/soap+xml;charset=UTF-8\", headers);\n", 
            "+        assertEquals(200, response.getStatus());\n", 
            "+        assertTrue(\"Response is empty\", !\"\".equals(new String(response.getBody())));\n", 
            "     }\n", 
            " \n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample157.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample157.java"
    }
  ], 
  "id": "1505831"
}