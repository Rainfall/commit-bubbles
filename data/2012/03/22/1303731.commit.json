{
  "when": "2012-03-22T07:07:30-04:00", 
  "message": "committing API resource versioning support..Currently only URL based versoning is included..", 
  "who": "uswick", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-22,10 +22,13", 
          "lines": [
            " import org.apache.http.protocol.HTTP;\n", 
            " import org.apache.synapse.MessageContext;\n", 
            " import org.apache.synapse.config.SynapseConfiguration;\n", 
            "+import org.apache.synapse.rest.version.DefaultStrategy;\n", 
            "+import org.apache.synapse.rest.version.URLBasedVersionStrategy;\n", 
            " \n", 
            " public class APIDispatcherTest extends RESTMediationTestCase {\n", 
            " \n", 
            "     private static final String TEST_API = \"TestAPI\";\n", 
            "+    private static final String TEST_API_VERSION = \"1.0.0\";\n", 
            " \n", 
            "     public void testGeneralAPIDispatch() throws Exception {\n", 
            "         API api = new API(TEST_API, \"/\");\n"
          ]
        }, 
        {
          "locn": "-175,4 +178,105", 
          "lines": [
            "         assertNull(synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "     }\n", 
            " \n", 
            "+    public void testAPIDefaultVersionBasedDispatch() throws Exception {\n", 
            "+        API api = new API(TEST_API, \"/test\");\n", 
            "+        api.setVersionStrategy(new DefaultStrategy(api));\n", 
            "+        SynapseConfiguration synapseConfig = new SynapseConfiguration();\n", 
            "+        synapseConfig.addAPI(api.getName(), api);\n", 
            "+\n", 
            "+        RESTRequestHandler handler = new RESTRequestHandler();\n", 
            "+\n", 
            "+        // Messages with '/test' context should ne dispatched\n", 
            "+        MessageContext synCtx = getMessageContext(synapseConfig, false, \"/test\", \"GET\");\n", 
            "+        handler.process(synCtx);\n", 
            "+        assertEquals(TEST_API, synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertEquals(\"\",synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION));\n", 
            "+        synCtx = getMessageContext(synapseConfig, false, \"/test/\", \"GET\");\n", 
            "+        handler.process(synCtx);\n", 
            "+        assertEquals(TEST_API, synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertEquals(\"\",synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION));\n", 
            "+        synCtx = getMessageContext(synapseConfig, false, \"/test/foo/bar?a=5\", \"GET\");\n", 
            "+        handler.process(synCtx);\n", 
            "+        assertEquals(TEST_API, synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertEquals(\"\",synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION));\n", 
            "+        synCtx = getMessageContext(synapseConfig, false, \"/test?a=5\", \"GET\");\n", 
            "+        handler.process(synCtx);\n", 
            "+        assertEquals(TEST_API, synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertEquals(\"\",synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION));\n", 
            "+\n", 
            "+        // Messages WITHOUT the '/test' context should NOT be dispatched\n", 
            "+        synCtx = getMessageContext(synapseConfig, false, \"/foo/test/bar?a=5\", \"GET\");\n", 
            "+        handler.process(synCtx);\n", 
            "+        assertNull(synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertNull(synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION));\n", 
            "+\n", 
            "+        synCtx = getMessageContext(synapseConfig, false, \"/test1/bar?a=5\", \"GET\");\n", 
            "+        handler.process(synCtx);\n", 
            "+        assertNull(synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertNull(synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testAPIURLVersionBasedDispatch() throws Exception {\n", 
            "+        API api = new API(TEST_API, \"/test\");\n", 
            "+        api.setVersionStrategy(new URLBasedVersionStrategy(api,TEST_API_VERSION,null));\n", 
            "+        SynapseConfiguration synapseConfig = new SynapseConfiguration();\n", 
            "+        synapseConfig.addAPI(api.getName(), api);\n", 
            "+\n", 
            "+        RESTRequestHandler handler = new RESTRequestHandler();\n", 
            "+\n", 
            "+        // Messages with '/test' context should NOT be dispatched\n", 
            "+        MessageContext synCtx = getMessageContext(synapseConfig, false, \"/test/\", \"GET\");\n", 
            "+        handler.process(synCtx);\n", 
            "+        assertNull(synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertNull(synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION));\n", 
            "+\n", 
            "+        synCtx = getMessageContext(synapseConfig, false, \"/test/1.0.0\", \"GET\");\n", 
            "+        handler.process(synCtx);\n", 
            "+//        System.out.println(api.getName() + \" : \" + synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertEquals(api.getName(), synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertEquals(TEST_API_VERSION,synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION));\n", 
            "+\n", 
            "+        synCtx = getMessageContext(synapseConfig, false, \"/test/1.0.0/\", \"GET\");\n", 
            "+        handler.process(synCtx);\n", 
            "+//        System.out.println(api.getName() + \" : \" + synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertEquals(api.getName(), synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertEquals(TEST_API_VERSION,synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION));\n", 
            "+\n", 
            "+        synCtx = getMessageContext(synapseConfig, false, \"/test/1.0.0/foo/bar?a=5\", \"GET\");\n", 
            "+        handler.process(synCtx);\n", 
            "+        assertEquals(api.getName(), synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertEquals(TEST_API_VERSION,synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION));\n", 
            "+//        System.out.println(synCtx.getProperty(RESTConstants.REST_SUB_REQUEST_PATH));\n", 
            "+\n", 
            "+        synCtx = getMessageContext(synapseConfig, false, \"/test/1.0.0?a=5\", \"GET\");\n", 
            "+        handler.process(synCtx);\n", 
            "+//        System.out.println(synCtx.getProperty(RESTConstants.REST_SUB_REQUEST_PATH));\n", 
            "+        assertEquals(api.getName(), synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertEquals(TEST_API_VERSION,synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION));\n", 
            "+\n", 
            "+        // Messages WITHOUT the '/test' context should NOT be dispatched\n", 
            "+        synCtx = getMessageContext(synapseConfig, false, \"/foo/test/bar?a=5\", \"GET\");\n", 
            "+        handler.process(synCtx);\n", 
            "+        assertNull(synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertNull(synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION));\n", 
            "+\n", 
            "+        // Messages WITHOUT the '/test' context and proper version should NOT be dispatched\n", 
            "+        synCtx = getMessageContext(synapseConfig, false, \"/test/1.0.1/foo/bar?a=5\", \"GET\");\n", 
            "+        handler.process(synCtx);\n", 
            "+        assertNull(synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertNull(synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION));\n", 
            "+\n", 
            "+        synCtx = getMessageContext(synapseConfig, false, \"/test/2.0/foo/bar?a=5\", \"GET\");\n", 
            "+        handler.process(synCtx);\n", 
            "+        assertNull(synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertNull(synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION));\n", 
            "+\n", 
            "+        synCtx = getMessageContext(synapseConfig, false, \"/test/2.0.0.0/foo/bar?a=5\", \"GET\");\n", 
            "+        handler.process(synCtx);\n", 
            "+        assertNull(synCtx.getProperty(RESTConstants.SYNAPSE_REST_API));\n", 
            "+        assertNull(synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION));\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+\n", 
            " }\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/rest/APIDispatcherTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/rest/APIDispatcherTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-27,6 +27,9", 
          "lines": [
            " import org.apache.synapse.core.axis2.Axis2MessageContext;\n", 
            " import org.apache.synapse.rest.dispatch.DispatcherHelper;\n", 
            " import org.apache.synapse.rest.dispatch.RESTDispatcher;\n", 
            "+import org.apache.synapse.rest.version.DefaultStrategy;\n", 
            "+import org.apache.synapse.rest.version.VersionStrategy;\n", 
            "+import org.apache.synapse.config.xml.rest.VersionStrategyFactory;\n", 
            " import org.apache.synapse.transport.nhttp.NhttpConstants;\n", 
            " \n", 
            " import java.util.*;\n"
          ]
        }, 
        {
          "locn": "-39,6 +42,8", 
          "lines": [
            "     private Map<String,Resource> resources = new LinkedHashMap<String,Resource>();\n", 
            "     private List<Handler> handlers = new ArrayList<Handler>();\n", 
            " \n", 
            "+    private VersionStrategy versionStrategy = new DefaultStrategy(this);\n", 
            "+\n", 
            "     private String fileName;\n", 
            " \n", 
            "     public API(String name, String context) {\n"
          ]
        }, 
        {
          "locn": "-49,7 +54,15", 
          "lines": [
            "         this.context = RESTUtils.trimTrailingSlashes(context);\n", 
            "     }\n", 
            " \n", 
            "+    /**\n", 
            "+     * get Fully Qualified name of this API\n", 
            "+     * @return returns the key combiantion for API NAME + VERSION\n", 
            "+     */\n", 
            "     public String getName() {\n", 
            "+        //check if a versioning strategy exists\n", 
            "+        if (versionStrategy.getVersion() != null && !\"\".equals(versionStrategy.getVersion()) ) {\n", 
            "+            return name + \":v\" +versionStrategy.getVersion();\n", 
            "+        }\n", 
            "         return name;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-131,7 +144,8", 
          "lines": [
            "     boolean canProcess(MessageContext synCtx) {\n", 
            "         if (synCtx.isResponse()) {\n", 
            "             String apiName = (String) synCtx.getProperty(RESTConstants.SYNAPSE_REST_API);\n", 
            "-            if (!name.equals(apiName)) {\n", 
            "+            String version = (String) synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION);\n", 
            "+            if (!name.equals(apiName) && !versionStrategy.getVersion().equals(version)) {\n", 
            "                 return false;\n", 
            "             }\n", 
            "         } else {\n"
          ]
        }, 
        {
          "locn": "-144,6 +158,10", 
          "lines": [
            "                 return false;\n", 
            "             }\n", 
            " \n", 
            "+            if(!versionStrategy.isMatchingVersion(synCtx)){\n", 
            "+                return false;\n", 
            "+            }\n", 
            "+\n", 
            "             if (host != null || port != -1) {\n", 
            "                 org.apache.axis2.context.MessageContext msgCtx =\n", 
            "                         ((Axis2MessageContext) synCtx).getAxis2MessageContext();\n"
          ]
        }, 
        {
          "locn": "-183,6 +201,10", 
          "lines": [
            "                     \"API: \" + name);\n", 
            "         }\n", 
            " \n", 
            "+        synCtx.setProperty(RESTConstants.SYNAPSE_REST_API, getName());\n", 
            "+        synCtx.setProperty(RESTConstants.SYNAPSE_REST_API_VERSION, versionStrategy.getVersion());\n", 
            "+        synCtx.setProperty(RESTConstants.REST_API_CONTEXT, context);\n", 
            "+\n", 
            "         for (Handler handler : handlers) {\n", 
            "             if (log.isDebugEnabled()) {\n", 
            "                 log.debug(\"Processing message with ID: \" + synCtx.getMessageID() + \" through \" +\n"
          ]
        }, 
        {
          "locn": "-215,10 +237,15", 
          "lines": [
            "         }\n", 
            " \n", 
            " \n", 
            "-        synCtx.setProperty(RESTConstants.SYNAPSE_REST_API, name);\n", 
            "-        synCtx.setProperty(RESTConstants.REST_API_CONTEXT, context);\n", 
            "         String path = RESTUtils.getFullRequestPath(synCtx);\n", 
            "-        String subPath = path.substring(context.length());\n", 
            "+        String subPath = null;\n", 
            "+        if (versionStrategy.getVersionType().equals(VersionStrategyFactory.TYPE_URL)) {\n", 
            "+            //for URL based\n", 
            "+            //request --> http://{host:port}/context/version/path/to/resource\n", 
            "+            subPath = path.substring(context.length() + versionStrategy.getVersion().length() + 1);\n", 
            "+        } else {\n", 
            "+            subPath = path.substring(context.length());\n", 
            "+        }\n", 
            "         if (\"\".equals(subPath)) {\n", 
            "             subPath = \"/\";\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-308,4 +335,12", 
          "lines": [
            "             resource.destroy();\n", 
            "         }\n", 
            "     }\n", 
            "+\n", 
            "+    public VersionStrategy getVersionStrategy() {\n", 
            "+        return versionStrategy;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setVersionStrategy(VersionStrategy versionStrategy) {\n", 
            "+        this.versionStrategy = versionStrategy;\n", 
            "+    }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/rest/API.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/rest/API.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-39,6 +39,7", 
          "lines": [
            " \n", 
            "     public static final String SYNAPSE_RESOURCE = \"SYNAPSE_RESOURCE\";\n", 
            "     public static final String SYNAPSE_REST_API = \"SYNAPSE_REST_API\";\n", 
            "+    public static final String SYNAPSE_REST_API_VERSION = \"SYNAPSE_REST_API_VERSION\";\n", 
            " \n", 
            "     public static final String REST_API_CONTEXT = \"REST_API_CONTEXT\";\n", 
            "     public static final String REST_URL_PREFIX = \"REST_URL_PREFIX\";\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/rest/RESTConstants.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/rest/RESTConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,39", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.rest.version;\n", 
            "+\n", 
            "+import org.apache.synapse.config.xml.rest.VersionStrategyFactory;\n", 
            "+import org.apache.synapse.rest.API;\n", 
            "+\n", 
            "+public class DefaultStrategy extends  AbstractVersionStrategy{\n", 
            "+\n", 
            "+    public DefaultStrategy(API api) {\n", 
            "+        super(api, \"\", VersionStrategyFactory.TYPE_NULL);\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean isMatchingVersion(Object versionInfoObj) {\n", 
            "+        return true;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getVersionParam() {\n", 
            "+        return \"\";\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/rest/version/DefaultStrategy.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/rest/version/DefaultStrategy.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,53", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.rest.version;\n", 
            "+\n", 
            "+/**\n", 
            "+ * This class is responsible for version delegation for API resources\n", 
            "+ */\n", 
            "+public interface VersionStrategy {\n", 
            "+\n", 
            "+    /**\n", 
            "+     * check if version matches from the version ifo object.\n", 
            "+     * @param versionInfoObj object that can be used to extract data about the version\n", 
            "+     * @return\n", 
            "+     */\n", 
            "+    public boolean isMatchingVersion(Object versionInfoObj);\n", 
            "+\n", 
            "+    /**\n", 
            "+     * get the assigned version for the delegated object\n", 
            "+     * @return string representation for the version\n", 
            "+     */\n", 
            "+    public String getVersion();\n", 
            "+\n", 
            "+    /**\n", 
            "+     * returns version type information. ie:- version can be embedded in request URL , HTTP header\n", 
            "+     * , etc\n", 
            "+     * @return version type String\n", 
            "+     */\n", 
            "+    public String getVersionType();\n", 
            "+\n", 
            "+    /**\n", 
            "+     * returns type information ie:- location regex/string that can be used t extract version..\n", 
            "+     * @return version param\n", 
            "+     */\n", 
            "+    public String getVersionParam();\n", 
            "+\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/rest/version/VersionStrategy.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/rest/version/VersionStrategy.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,95", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.rest.version;\n", 
            "+\n", 
            "+import org.apache.synapse.MessageContext;\n", 
            "+import org.apache.synapse.config.xml.rest.VersionStrategyFactory;\n", 
            "+import org.apache.synapse.rest.API;\n", 
            "+import org.apache.synapse.rest.RESTUtils;\n", 
            "+\n", 
            "+public class URLBasedVersionStrategy extends AbstractVersionStrategy {\n", 
            "+    String versionParam;\n", 
            "+\n", 
            "+    public URLBasedVersionStrategy(API api, String version, String versionParam) {\n", 
            "+        super(api, version, VersionStrategyFactory.TYPE_URL);\n", 
            "+        this.versionParam = versionParam;\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean isMatchingVersion(Object versionInfoObj) {\n", 
            "+        MessageContext msgContext = (MessageContext) versionInfoObj;\n", 
            "+        String path = RESTUtils.getFullRequestPath(msgContext);\n", 
            "+\n", 
            "+        String context = getAPI().getContext();\n", 
            "+        String pathStringAfterContext = path.substring(context.length());\n", 
            "+\n", 
            "+        //check if context can be invalid for path url and avoid matching a false version string\n", 
            "+        if (pathStringAfterContext != null && !pathStringAfterContext.startsWith(\"/\")) {\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+\n", 
            "+        //path after context will be starting from a \"/\" and compute index for next immediate \"/\"\n", 
            "+        int indexOfNextSlash = pathStringAfterContext.substring(1).indexOf(\"/\");\n", 
            "+\n", 
            "+        String incomingVersionStr = null;\n", 
            "+        if (indexOfNextSlash != -1) {\n", 
            "+            incomingVersionStr = pathStringAfterContext.substring(1, indexOfNextSlash + 1);\n", 
            "+        } else {\n", 
            "+            String versionStr = pathStringAfterContext.substring(1);\n", 
            "+            //assume no slash at the end ie:-GET /context/1.0.0\n", 
            "+            incomingVersionStr = versionStr;\n", 
            "+            //check special case\n", 
            "+            if (versionStr.contains(\"?\")) {\n", 
            "+                incomingVersionStr = versionStr.substring(0,versionStr.indexOf(\"?\"));\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        return version.equals(incomingVersionStr);\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getVersionParam() {\n", 
            "+        return versionParam;\n", 
            "+    }\n", 
            "+\n", 
            "+/*\n", 
            "+    public static void main(String[] args) {\n", 
            "+        String version = \"1.0.0\";\n", 
            "+//        String version = \"1.0.1\";\n", 
            "+\n", 
            "+//        String path = \"/test/1.0.1/foo/abc/\";\n", 
            "+//        String path = \"/test/1.0/foo/abc/\";\n", 
            "+//        String path = \"/test/1.0/foo/abc/abc='asasa'\";\n", 
            "+        String path = \"/test11.0.0/1.0/foo/abc/abc='asasa'\";\n", 
            "+\n", 
            "+//        String context = \"/test\";\n", 
            "+//        String context = \"/test123\";\n", 
            "+        String context = \"/test\";\n", 
            "+        String pathStringAfterContext = path.substring(context.length());\n", 
            "+\n", 
            "+        System.out.println(\"pathStringAfterContext : \" + pathStringAfterContext);\n", 
            "+\n", 
            "+        int indexOfNextSlash = pathStringAfterContext.substring(1).indexOf(\"/\");\n", 
            "+        System.out.println(indexOfNextSlash);\n", 
            "+        String incomingVersionStr = pathStringAfterContext.substring(1, indexOfNextSlash + 1);\n", 
            "+        System.out.println(\"incomingVersionStr : \" + incomingVersionStr);\n", 
            "+\n", 
            "+        System.out.println(version.equals(incomingVersionStr));\n", 
            "+    }\n", 
            "+*/\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/rest/version/URLBasedVersionStrategy.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/rest/version/URLBasedVersionStrategy.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,47", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.rest.version;\n", 
            "+\n", 
            "+import org.apache.synapse.rest.API;\n", 
            "+\n", 
            "+public abstract class AbstractVersionStrategy implements VersionStrategy {\n", 
            "+    protected API api;\n", 
            "+    protected String version;\n", 
            "+    protected String versionType ;\n", 
            "+\n", 
            "+    public AbstractVersionStrategy(API api, String version, String versionType) {\n", 
            "+        this.api = api;\n", 
            "+        this.version = version;\n", 
            "+        this.versionType = versionType;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getVersion() {\n", 
            "+        return version;\n", 
            "+    }\n", 
            "+\n", 
            "+    public API getAPI(){\n", 
            "+        return api;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getVersionType(){\n", 
            "+        return versionType;\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/rest/version/AbstractVersionStrategy.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/rest/version/AbstractVersionStrategy.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,83", 
          "lines": [
            "+/*\n", 
            "+*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n", 
            "+*\n", 
            "+*  WSO2 Inc. licenses this file to you under the Apache License,\n", 
            "+*  Version 2.0 (the \"License\"); you may not use this file except\n", 
            "+*  in compliance with the License.\n", 
            "+*  You may obtain a copy of the License at\n", 
            "+*\n", 
            "+*    http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+*\n", 
            "+* Unless required by applicable law or agreed to in writing,\n", 
            "+* software distributed under the License is distributed on an\n", 
            "+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+* KIND, either express or implied.  See the License for the\n", 
            "+* specific language governing permissions and limitations\n", 
            "+* under the License.\n", 
            "+*/\n", 
            "+package org.apache.synapse.config.xml.rest;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMAttribute;\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.SynapseException;\n", 
            "+import org.apache.synapse.rest.API;\n", 
            "+import org.apache.synapse.rest.version.DefaultStrategy;\n", 
            "+import org.apache.synapse.rest.version.URLBasedVersionStrategy;\n", 
            "+import org.apache.synapse.rest.version.VersionStrategy;\n", 
            "+\n", 
            "+import javax.xml.namespace.QName;\n", 
            "+\n", 
            "+public class VersionStrategyFactory {\n", 
            "+    private static final Log log = LogFactory.getLog(VersionStrategyFactory.class);\n", 
            "+    public static final String TYPE_URL = \"url\";\n", 
            "+    public static final String TYPE_NULL = \"\";\n", 
            "+\n", 
            "+    public static VersionStrategy createVersioningStrategy(API api, OMElement apiElt) {\n", 
            "+        OMAttribute versionAtt = apiElt.getAttribute(new QName(\"version\"));\n", 
            "+        if (versionAtt == null || \"\".equals(versionAtt.getAttributeValue())) {\n", 
            "+//            handleException(\"Attribute 'version' is required for an API definition\");\n", 
            "+        }\n", 
            "+\n", 
            "+        OMAttribute versionTypeAtt = apiElt.getAttribute(new QName(\"version-type\"));\n", 
            "+        if (versionAtt != null && (versionTypeAtt == null || \"\".equals(versionTypeAtt.getAttributeValue()))) {\n", 
            "+            handleException(\"Attribute 'version-type' is required for an API definition\");\n", 
            "+        }\n", 
            "+\n", 
            "+        OMAttribute versionParamAtt = apiElt.getAttribute(new QName(\"version-param\"));\n", 
            "+\n", 
            "+        String version = \"\";\n", 
            "+        if (versionAtt != null) {\n", 
            "+            version = versionAtt.getAttributeValue();\n", 
            "+        }\n", 
            "+        String versionType = \"\";\n", 
            "+        if (versionTypeAtt != null) {\n", 
            "+            versionType = versionTypeAtt.getAttributeValue();\n", 
            "+        }\n", 
            "+        String versionParam = \"\";\n", 
            "+        if (versionParamAtt != null) {\n", 
            "+            versionParam = versionParamAtt.getAttributeValue();\n", 
            "+        }\n", 
            "+\n", 
            "+        return selectVersionStrategy(api, version, versionType, versionParam);\n", 
            "+    }\n", 
            "+\n", 
            "+    private static VersionStrategy selectVersionStrategy(API api, String version, String versionType,\n", 
            "+                                                         String versionParam) {\n", 
            "+        if (versionType != null && TYPE_URL.equals(versionType.trim())) {\n", 
            "+            return new URLBasedVersionStrategy(api, version, versionParam);\n", 
            "+        }\n", 
            "+        if (versionType == null || TYPE_NULL.equals(versionType.trim())) {\n", 
            "+            //no versioning supported here\n", 
            "+            //intended for backward compatability with API's\n", 
            "+            return new DefaultStrategy(api);\n", 
            "+        }\n", 
            "+        return null;\n", 
            "+    }\n", 
            "+\n", 
            "+    private static void handleException(String msg) {\n", 
            "+        log.error(msg);\n", 
            "+        throw new SynapseException(msg);\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/rest/VersionStrategyFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/rest/VersionStrategyFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-27,6 +27,7", 
          "lines": [
            " import org.apache.synapse.config.xml.XMLConfigConstants;\n", 
            " import org.apache.synapse.rest.API;\n", 
            " import org.apache.synapse.rest.Handler;\n", 
            "+import org.apache.synapse.rest.version.VersionStrategy;\n", 
            " \n", 
            " import javax.xml.namespace.QName;\n", 
            " import java.util.Iterator;\n"
          ]
        }, 
        {
          "locn": "-53,6 +54,10", 
          "lines": [
            "             api.setHost(hostAtt.getAttributeValue());\n", 
            "         }\n", 
            " \n", 
            "+        VersionStrategy vStrategy = VersionStrategyFactory.createVersioningStrategy(api, apiElt);\n", 
            "+\n", 
            "+        api.setVersionStrategy(vStrategy);\n", 
            "+\n", 
            "         OMAttribute portAtt = apiElt.getAttribute(new QName(\"port\"));\n", 
            "         if (portAtt != null && !\"\".equals(portAtt.getAttributeValue())) {\n", 
            "             api.setPort(Integer.parseInt(portAtt.getAttributeValue()));\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/rest/APIFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/rest/APIFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,52", 
          "lines": [
            "+/*\n", 
            "+*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n", 
            "+*\n", 
            "+*  WSO2 Inc. licenses this file to you under the Apache License,\n", 
            "+*  Version 2.0 (the \"License\"); you may not use this file except\n", 
            "+*  in compliance with the License.\n", 
            "+*  You may obtain a copy of the License at\n", 
            "+*\n", 
            "+*    http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+*\n", 
            "+* Unless required by applicable law or agreed to in writing,\n", 
            "+* software distributed under the License is distributed on an\n", 
            "+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+* KIND, either express or implied.  See the License for the\n", 
            "+* specific language governing permissions and limitations\n", 
            "+* under the License.\n", 
            "+*/\n", 
            "+package org.apache.synapse.config.xml.rest;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMAbstractFactory;\n", 
            "+import org.apache.axiom.om.OMAttribute;\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axiom.om.OMFactory;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.SynapseException;\n", 
            "+import org.apache.synapse.rest.API;\n", 
            "+import org.apache.synapse.rest.version.DefaultStrategy;\n", 
            "+import org.apache.synapse.rest.version.URLBasedVersionStrategy;\n", 
            "+import org.apache.synapse.rest.version.VersionStrategy;\n", 
            "+\n", 
            "+import javax.xml.namespace.QName;\n", 
            "+\n", 
            "+public class VersionStrategySerializer {\n", 
            "+    private static final Log log = LogFactory.getLog(VersionStrategySerializer.class);\n", 
            "+\n", 
            "+    public static OMElement serializeVersioningStrategy(VersionStrategy strategy, OMElement apiElement) {\n", 
            "+        assert strategy != null;\n", 
            "+\n", 
            "+        if (strategy.getVersion() != null && !\"\".equals(strategy.getVersion())) {\n", 
            "+            apiElement.addAttribute(\"version\", strategy.getVersion(), null);\n", 
            "+        }\n", 
            "+        if (strategy.getVersionType() != null && !\"\".equals(strategy.getVersionType())) {\n", 
            "+            apiElement.addAttribute(\"version-type\", strategy.getVersionType(), null);\n", 
            "+        }\n", 
            "+        if (strategy.getVersionParam() != null && !\"\".equals(strategy.getVersionParam())) {\n", 
            "+            apiElement.addAttribute(\"version-param\", strategy.getVersionParam(), null);\n", 
            "+        }\n", 
            "+        return apiElement;\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/rest/VersionStrategySerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/rest/VersionStrategySerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-35,6 +35,8", 
          "lines": [
            "         OMElement apiElt = fac.createOMElement(\"api\", SynapseConstants.SYNAPSE_OMNAMESPACE);\n", 
            "         apiElt.addAttribute(\"name\", api.getName(), null);\n", 
            "         apiElt.addAttribute(\"context\", api.getContext(), null);\n", 
            "+\n", 
            "+        VersionStrategySerializer.serializeVersioningStrategy(api.getVersionStrategy(), apiElt) ;\n", 
            "         if (api.getHost() != null) {\n", 
            "             apiElt.addAttribute(\"hostname\", api.getHost(), null);\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/rest/APISerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/rest/APISerializer.java"
    }
  ], 
  "id": "1303731"
}