{
  "when": "2013-08-05T22:50:16-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-0,0 +1,164", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.endpoints.algorithms;\n", 
            "+\n", 
            "+import junit.framework.TestCase;\n", 
            "+import org.apache.axis2.context.ConfigurationContext;\n", 
            "+import org.apache.axis2.engine.AxisConfiguration;\n", 
            "+import org.apache.synapse.MessageContext;\n", 
            "+import org.apache.synapse.config.SynapseConfiguration;\n", 
            "+import org.apache.synapse.core.SynapseEnvironment;\n", 
            "+import org.apache.synapse.core.axis2.Axis2SynapseEnvironment;\n", 
            "+import org.apache.synapse.endpoints.AddressEndpoint;\n", 
            "+import org.apache.synapse.endpoints.Endpoint;\n", 
            "+import org.apache.synapse.mediators.TestUtils;\n", 
            "+\n", 
            "+import java.util.ArrayList;\n", 
            "+import java.util.HashSet;\n", 
            "+import java.util.List;\n", 
            "+import java.util.Set;\n", 
            "+import java.util.concurrent.ExecutorService;\n", 
            "+import java.util.concurrent.Executors;\n", 
            "+import java.util.concurrent.Future;\n", 
            "+\n", 
            "+public class RoundRobinAlgorithmTest extends TestCase {\n", 
            "+\n", 
            "+    private List<Endpoint> endpoints;\n", 
            "+\n", 
            "+    @Override\n", 
            "+    protected void setUp() throws Exception {\n", 
            "+        super.setUp();\n", 
            "+        endpoints = new ArrayList<Endpoint>();\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    protected void tearDown() throws Exception {\n", 
            "+        for (Endpoint endpoint : endpoints) {\n", 
            "+            endpoint.destroy();\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testRoundRobin() throws Exception {\n", 
            "+        AxisConfiguration axisConfig = new AxisConfiguration();\n", 
            "+        ConfigurationContext configContext = new ConfigurationContext(axisConfig);\n", 
            "+        SynapseConfiguration synapseConfig = new SynapseConfiguration();\n", 
            "+        SynapseEnvironment env = new Axis2SynapseEnvironment(configContext, synapseConfig);\n", 
            "+\n", 
            "+        endpoints.add(getEndpoint(\"ep1\", env));\n", 
            "+        endpoints.add(getEndpoint(\"ep2\", env));\n", 
            "+        endpoints.add(getEndpoint(\"ep3\", env));\n", 
            "+        RoundRobin roundRobin = new RoundRobin(endpoints);\n", 
            "+\n", 
            "+        AlgorithmContext context = new AlgorithmContext(true, configContext, \"ep\");\n", 
            "+\n", 
            "+        MessageContext messageContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        Endpoint endpoint = roundRobin.getNextEndpoint(messageContext, context);\n", 
            "+        assertEquals(\"ep1\", endpoint.getName());\n", 
            "+\n", 
            "+        messageContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        endpoint = roundRobin.getNextEndpoint(messageContext, context);\n", 
            "+        assertEquals(\"ep2\", endpoint.getName());\n", 
            "+\n", 
            "+        messageContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        endpoint = roundRobin.getNextEndpoint(messageContext, context);\n", 
            "+        assertEquals(\"ep3\", endpoint.getName());\n", 
            "+\n", 
            "+        messageContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        endpoint = roundRobin.getNextEndpoint(messageContext, context);\n", 
            "+        assertEquals(\"ep1\", endpoint.getName());\n", 
            "+\n", 
            "+        messageContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        endpoint = roundRobin.getNextEndpoint(messageContext, context);\n", 
            "+        assertEquals(\"ep2\", endpoint.getName());\n", 
            "+\n", 
            "+        messageContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        endpoint = roundRobin.getNextEndpoint(messageContext, context);\n", 
            "+        assertEquals(\"ep3\", endpoint.getName());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testRoundRobinConcurrency() throws Exception {\n", 
            "+        // This test case sets up the load balancer with 10 endpoints and sends request using\n", 
            "+        // 10 concurrent threads. Each thread should get a separate endpoint.\n", 
            "+        int concurrency = 10;\n", 
            "+\n", 
            "+        AxisConfiguration axisConfig = new AxisConfiguration();\n", 
            "+        ConfigurationContext configContext = new ConfigurationContext(axisConfig);\n", 
            "+        SynapseConfiguration synapseConfig = new SynapseConfiguration();\n", 
            "+        SynapseEnvironment env = new Axis2SynapseEnvironment(configContext, synapseConfig);\n", 
            "+\n", 
            "+        for (int i = 0; i < concurrency; i++) {\n", 
            "+            endpoints.add(getEndpoint(\"ep\" + i, env));\n", 
            "+        }\n", 
            "+        RoundRobin roundRobin = new RoundRobin(endpoints);\n", 
            "+        AlgorithmContext context = new AlgorithmContext(true, configContext, \"ep\");\n", 
            "+\n", 
            "+        ExecutorService exec = Executors.newFixedThreadPool(concurrency);\n", 
            "+        try {\n", 
            "+            TestWorker[] workers = new TestWorker[concurrency];\n", 
            "+            Future[]  futures = new Future[10];\n", 
            "+            for (int i = 0; i < concurrency; i++) {\n", 
            "+                workers[i] = new TestWorker(context, roundRobin);\n", 
            "+                futures[i] = exec.submit(workers[i]);\n", 
            "+            }\n", 
            "+            Set<Integer> results = new HashSet<Integer>();\n", 
            "+            for (int i = 0; i < concurrency; i++) {\n", 
            "+                futures[i].get();\n", 
            "+                if (workers[i].endpointIndex < 0) {\n", 
            "+                    fail(\"At least one test worker finished abnormally\");\n", 
            "+                }\n", 
            "+                results.add(workers[i].endpointIndex);\n", 
            "+            }\n", 
            "+\n", 
            "+            assertEquals(concurrency, results.size());\n", 
            "+        } finally {\n", 
            "+            exec.shutdownNow();\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    private Endpoint getEndpoint(String name, SynapseEnvironment env) {\n", 
            "+        AddressEndpoint endpoint = new AddressEndpoint();\n", 
            "+        endpoint.setEnableMBeanStats(false);\n", 
            "+        endpoint.setName(name);\n", 
            "+        endpoint.init(env);\n", 
            "+        return endpoint;\n", 
            "+    }\n", 
            "+\n", 
            "+    private static class TestWorker implements Runnable {\n", 
            "+\n", 
            "+        AlgorithmContext context;\n", 
            "+        RoundRobin roundRobin;\n", 
            "+        int endpointIndex = -1;\n", 
            "+\n", 
            "+        private TestWorker(AlgorithmContext context, RoundRobin roundRobin) {\n", 
            "+            this.context = context;\n", 
            "+            this.roundRobin = roundRobin;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void run() {\n", 
            "+            try {\n", 
            "+                MessageContext messageContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+                Endpoint ep = roundRobin.getNextEndpoint(messageContext, context);\n", 
            "+                String epName = ep.getName();\n", 
            "+                endpointIndex = Integer.parseInt(epName.substring(2));\n", 
            "+            } catch (Exception ignored) {\n", 
            "+            }\n", 
            "+        }\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/endpoints/algorithms/RoundRobinAlgorithmTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/endpoints/algorithms/RoundRobinAlgorithmTest.java"
    }
  ], 
  "id": "1510848"
}