{
  "when": "2013-08-04T19:32:20-04:00", 
  "message": "Improved message injector task to support injecting messages directly into named sequences and proxy services. Patches applied from SYNAPSE-957 SYNAPSE-958 and SYNAPSE-959", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-128,6 +128,8", 
          "lines": [
            "                 <p>\n", 
            "                     <ul>\n", 
            "                         <li><a href=\"samples/sample300.html\">Sample 300: Introduction to tasks with simple trigger</a></li>\n", 
            "+                        <li><a href=\"samples/sample301.html\">Sample 301: Message Injector Task to invoke a named sequence</a></li>\n", 
            "+                        <li><a href=\"samples/sample302.html\">Sample 302: Message Injector Task to invoke a Proxy service</a></li>\n", 
            "                     </ul>\n", 
            "                 </p>\n", 
            "             </subsection>\n"
          ]
        }
      ], 
      "to": "java/modules/documentation/src/site/xdoc/userguide/samples.xml", 
      "from": "java/modules/documentation/src/site/xdoc/userguide/samples.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,103", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<document>\n", 
            "+    <properties>\n", 
            "+        <title>Apache Synapse - Sample 301</title>\n", 
            "+    </properties>\n", 
            "+    <body>\n", 
            "+        <section name=\"Sample 301: Message Injector Task to invoke a named sequence\">\n", 
            "+            <div class=\"xmlConf\"><![CDATA[<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+                <task class=\"org.apache.synapse.startup.tasks.MessageInjector\" name=\"InjectToSequenceTask\">\n", 
            "+                    <property name=\"soapAction\" value=\"urn:getQuote\"/>\n", 
            "+                    <property name=\"format\" value=\"soap11\"/>\n", 
            "+                    <property name=\"injectTo\" value=\"sequence\"/>\n", 
            "+                    <property name=\"sequenceName\" value=\"SampleSequence\"/>\n", 
            "+                    <property name=\"message\">\n", 
            "+                        <m0:getQuote xmlns:m0=\"http://services.samples\">\n", 
            "+                            <m0:request>\n", 
            "+                                <m0:symbol>IBM</m0:symbol>\n", 
            "+                            </m0:request>\n", 
            "+                        </m0:getQuote>\n", 
            "+                    </property>\n", 
            "+                    <trigger interval=\"5\"/>\n", 
            "+                </task>\n", 
            "+                <sequence name=\"SampleSequence\">\n", 
            "+                    <log level=\"custom\">\n", 
            "+                        <property name=\"MSG\" value=\"SampleSequence invoked\"/>\n", 
            "+                    </log>\n", 
            "+                    <send receive=\"receivingSequence\">\n", 
            "+                        <endpoint>\n", 
            "+                            <address uri=\"http://localhost:9000/services/SimpleStockQuoteService\"/>\n", 
            "+                        </endpoint>\n", 
            "+                    </send>\n", 
            "+                </sequence>\n", 
            "+                <sequence name=\"receivingSequence\">\n", 
            "+                    <log level=\"custom\">\n", 
            "+                        <property xmlns:ns=\"http://services.samples\" name=\"Stock_Quote_on\"\n", 
            "+                                  expression=\"//ns:return/ns:lastTradeTimestamp/child::text()\"/>\n", 
            "+                        <property xmlns:ns=\"http://services.samples\" name=\"For_the_organization\"\n", 
            "+                                  expression=\"//ns:return/ns:name/child::text()\"/>\n", 
            "+                        <property xmlns:ns=\"http://services.samples\" name=\"Last_Value\"\n", 
            "+                                  expression=\"//ns:return/ns:last/child::text()\"/>\n", 
            "+                    </log>\n", 
            "+                </sequence>\n", 
            "+            </definitions>]]></div>\n", 
            "+            <subsection name=\"Objective\">\n", 
            "+                <p>\n", 
            "+                    Demonstrate how to schedule tasks to invoke a named sequence periodically using\n", 
            "+                    the MessageInjector task implementation\n", 
            "+                </p>\n", 
            "+            </subsection>\n", 
            "+            <subsection name=\"Pre-requisites\">\n", 
            "+                <p>\n", 
            "+                    <ul>\n", 
            "+                        <li>\n", 
            "+                            Deploy the SimpleStockQuoteService in the sample Axis2 server and start Axis2\n", 
            "+                        </li>\n", 
            "+                        <li>\n", 
            "+                            Start Synapse using the configuration numbered 301 (repository/conf/sample/synapse_sample_301.xml)\n", 
            "+                            <div class=\"command\">\n", 
            "+                                Unix/Linux: sh synapse.sh -sample 301<br/>\n", 
            "+                                Windows: synapse.bat -sample 301\n", 
            "+                            </div>\n", 
            "+                        </li>\n", 
            "+                    </ul>\n", 
            "+                </p>\n", 
            "+            </subsection>\n", 
            "+            <subsection name=\"Executing the Client\">\n", 
            "+                <p>\n", 
            "+                    The above configuration adds a scheduled task and sequences to the Synapse runtime.\n", 
            "+                    The task is configured to run every 5 seconds (note the 'interval' attribute on\n", 
            "+                    the 'trigger' element).\n", 
            "+                </p>\n", 
            "+                <p>\n", 
            "+                    In this sample, the sequence \"SampleSequence\" will be invoked by the task and\n", 
            "+                    then from the sequence, the injected messages will be sent to the sample Axis2\n", 
            "+                    server, which will send back a response to Synapse. So every 5 seconds you will\n", 
            "+                    notice that Axis2 is generating a quote and Synapse is receiving the stock quote\n", 
            "+                    response. You will also see \"SampleSequence invoked\" message getting logged on\n", 
            "+                    the console.\n", 
            "+                </p>\n", 
            "+            </subsection>\n", 
            "+        </section>\n", 
            "+        <p><a href=\"../samples.html\">Back to Catalog</a></p>        \n", 
            "+    </body>\n", 
            "+</document>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/documentation/src/site/xdoc/userguide/samples/sample301.xml", 
      "from": "java/modules/documentation/src/site/xdoc/userguide/samples/sample301.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,108", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<document>\n", 
            "+    <properties>\n", 
            "+        <title>Apache Synapse - Sample 302</title>\n", 
            "+    </properties>\n", 
            "+    <body>\n", 
            "+        <section name=\"Sample 302: Message Injector Task to invoke a Proxy service\">\n", 
            "+            <div class=\"xmlConf\"><![CDATA[<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+                <task class=\"org.apache.synapse.startup.tasks.MessageInjector\" name=\"InjectToProxyTask\">\n", 
            "+                    <property name=\"soapAction\" value=\"urn:getQuote\"/>\n", 
            "+                    <property name=\"format\" value=\"soap11\"/>\n", 
            "+                    <property name=\"injectTo\" value=\"proxy\"/>\n", 
            "+                    <property name=\"proxyName\" value=\"SampleProxy\"/>\n", 
            "+                    <property name=\"message\">\n", 
            "+                        <m0:getQuote xmlns:m0=\"http://services.samples\">\n", 
            "+                            <m0:request>\n", 
            "+                                <m0:symbol>IBM</m0:symbol>\n", 
            "+                            </m0:request>\n", 
            "+                        </m0:getQuote>\n", 
            "+                    </property>\n", 
            "+                    <trigger interval=\"5\"/>\n", 
            "+                </task>\n", 
            "+                <proxy name=\"SampleProxy\" transports=\"http\">\n", 
            "+                    <target>\n", 
            "+                        <inSequence>\n", 
            "+                            <log level=\"custom\">\n", 
            "+                                <property name=\"MSG\" value=\"SampleProxy invoked\"/>\n", 
            "+                            </log>\n", 
            "+                            <send>\n", 
            "+                                <endpoint>\n", 
            "+                                    <address uri=\"http://localhost:9000/services/SimpleStockQuoteService\"/>\n", 
            "+                                </endpoint>\n", 
            "+                            </send>\n", 
            "+                        </inSequence>\n", 
            "+                        <outSequence>\n", 
            "+                            <log level=\"custom\">\n", 
            "+                                <property xmlns:ns=\"http://services.samples\" name=\"Stock_Quote_on\"\n", 
            "+                                          expression=\"//ns:return/ns:lastTradeTimestamp/child::text()\"/>\n", 
            "+                                <property xmlns:ns=\"http://services.samples\" name=\"For_the_organization\"\n", 
            "+                                          expression=\"//ns:return/ns:name/child::text()\"/>\n", 
            "+                                <property xmlns:ns=\"http://services.samples\" name=\"Last_Value\"\n", 
            "+                                          expression=\"//ns:return/ns:last/child::text()\"/>\n", 
            "+                            </log>\n", 
            "+                            <drop/>\n", 
            "+                        </outSequence>\n", 
            "+                    </target>\n", 
            "+                </proxy>\n", 
            "+            </definitions>]]></div>\n", 
            "+            <subsection name=\"Objective\">\n", 
            "+                <p>\n", 
            "+                    Demonstrate how to schedule tasks to invoke a Proxy service periodically using\n", 
            "+                    the MessageInjector task implementation\n", 
            "+                </p>\n", 
            "+            </subsection>\n", 
            "+            <subsection name=\"Pre-requisites\">\n", 
            "+                <p>\n", 
            "+                    <ul>\n", 
            "+                        <li>\n", 
            "+                            Deploy the SimpleStockQuoteService in the sample Axis2 server and start Axis2\n", 
            "+                        </li>\n", 
            "+                        <li>\n", 
            "+                            Start Synapse using the configuration numbered 302 (repository/conf/sample/synapse_sample_302.xml)\n", 
            "+                            <div class=\"command\">\n", 
            "+                                Unix/Linux: sh synapse.sh -sample 302<br/>\n", 
            "+                                Windows: synapse.bat -sample 302\n", 
            "+                            </div>\n", 
            "+                        </li>\n", 
            "+                    </ul>\n", 
            "+                </p>\n", 
            "+            </subsection>\n", 
            "+            <subsection name=\"Executing the Client\">\n", 
            "+                <p>\n", 
            "+                    The above configuration adds a scheduled task, and a proxy service to the Synapse\n", 
            "+                    runtime. The task is configured to run every 5 seconds (note the 'interval'\n", 
            "+                    attribute on the 'trigger' element).\n", 
            "+                </p>\n", 
            "+                <p>\n", 
            "+                    In this sample, the proxy service \"SampleProxy\" will be invoked by the task and\n", 
            "+                    then from the proxy service, the injected messages will be sent to the sample\n", 
            "+                    Axis2 server, which will send back a response to Synapse. So every 5 seconds you\n", 
            "+                    will notice that Axis2 is generating a quote and Synapse is receiving the stock\n", 
            "+                    quote response. You will also see the \"SampleProxy invoked\" message getting\n", 
            "+                    loggedlog on the console.\n", 
            "+                </p>\n", 
            "+            </subsection>\n", 
            "+        </section>\n", 
            "+        <p><a href=\"../samples.html\">Back to Catalog</a></p>        \n", 
            "+    </body>\n", 
            "+</document>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/documentation/src/site/xdoc/userguide/samples/sample302.xml", 
      "from": "java/modules/documentation/src/site/xdoc/userguide/samples/sample302.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,20", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>301</sampleID>\n", 
            "+    <sampleName>Task injecting to a named sequence</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <!--if we don't specify the optional values, framework will use defaults-->\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_301.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+            <counterEnabled>true</counterEnabled>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+        <clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample301.xml", 
      "from": "java/modules/integration/src/test/resources/sample301.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,20", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>302</sampleID>\n", 
            "+    <sampleName>Task injecting to a Proxy service</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <!--if we don't specify the optional values, framework will use defaults-->\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_302.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+            <counterEnabled>true</counterEnabled>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+        <clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample302.xml", 
      "from": "java/modules/integration/src/test/resources/sample302.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-22,7 +22,7", 
          "lines": [
            " import junit.framework.TestSuite;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.synapse.samples.framework.tests.tasks.Sample300;\n", 
            "+import org.apache.synapse.samples.framework.tests.tasks.*;\n", 
            " import org.apache.synapse.samples.framework.tests.transport.Sample250;\n", 
            " import org.apache.synapse.samples.framework.tests.advanced.*;\n", 
            " import org.apache.synapse.samples.framework.tests.endpoint.*;\n"
          ]
        }, 
        {
          "locn": "-212,6 +212,8", 
          "lines": [
            " \n", 
            "         //Tasks\n", 
            "         sampleClassRepo.put(\"300\", Sample300.class);\n", 
            "+        sampleClassRepo.put(\"301\", Sample301.class);\n", 
            "+        sampleClassRepo.put(\"302\", Sample302.class);\n", 
            " \n", 
            "         //Advanced\n", 
            "         sampleClassRepo.put(\"350\", Sample350.class);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,37", 
          "lines": [
            "+/*\n", 
            "+ * Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ * or more contributor license agreements.  See the NOTICE file\n", 
            "+ * distributed with this work for additional information\n", 
            "+ * regarding copyright ownership.  The ASF licenses this file\n", 
            "+ * to you under the Apache License, Version 2.0 (the\n", 
            "+ * \"License\"); you may not use this file except in compliance\n", 
            "+ * with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ * http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ * Unless required by applicable law or agreed to in writing,\n", 
            "+ * software distributed under the License is distributed on an\n", 
            "+ *  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ * KIND, either express or implied.  See the License for the\n", 
            "+ * specific language governing permissions and limitations\n", 
            "+ * under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework.tests.tasks;\n", 
            "+\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+\n", 
            "+public class Sample301 extends SynapseTestCase {\n", 
            "+\n", 
            "+    public Sample301() {\n", 
            "+        super(301);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testScheduledTaskInjectToSequence() throws Exception {\n", 
            "+        log.info(\"Waiting 10 seconds for the task to run...\");\n", 
            "+        Thread.sleep(10000);\n", 
            "+        int messageCount = getAxis2Server().getMessageCount(\"SimpleStockQuoteService\", \"getQuote\");\n", 
            "+        log.info(\"Task sent \" + messageCount + \" messages.\");\n", 
            "+        assertTrue(messageCount >= 2);\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/tasks/Sample301.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/tasks/Sample301.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,37", 
          "lines": [
            "+/*\n", 
            "+ * Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ * or more contributor license agreements.  See the NOTICE file\n", 
            "+ * distributed with this work for additional information\n", 
            "+ * regarding copyright ownership.  The ASF licenses this file\n", 
            "+ * to you under the Apache License, Version 2.0 (the\n", 
            "+ * \"License\"); you may not use this file except in compliance\n", 
            "+ * with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ * http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ * Unless required by applicable law or agreed to in writing,\n", 
            "+ * software distributed under the License is distributed on an\n", 
            "+ *  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ * KIND, either express or implied.  See the License for the\n", 
            "+ * specific language governing permissions and limitations\n", 
            "+ * under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework.tests.tasks;\n", 
            "+\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+\n", 
            "+public class Sample302 extends SynapseTestCase {\n", 
            "+\n", 
            "+    public Sample302() {\n", 
            "+        super(302);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testScheduledTaskInjectToProxy() throws Exception {\n", 
            "+        log.info(\"Waiting 10 seconds for the task to run...\");\n", 
            "+        Thread.sleep(10000);\n", 
            "+        int messageCount = getAxis2Server().getMessageCount(\"SimpleStockQuoteService\", \"getQuote\");\n", 
            "+        log.info(\"Task sent \" + messageCount + \" messages.\");\n", 
            "+        assertTrue(messageCount >= 2);\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/tasks/Sample302.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/tasks/Sample302.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-21,8 +21,13", 
          "lines": [
            " \r\n", 
            " import org.apache.axiom.om.OMAbstractFactory;\r\n", 
            " import org.apache.axiom.om.OMElement;\r\n", 
            "+import org.apache.axiom.soap.SOAPEnvelope;\r\n", 
            " import org.apache.axis2.AxisFault;\r\n", 
            "+import org.apache.axis2.Constants;\r\n", 
            " import org.apache.axis2.addressing.EndpointReference;\r\n", 
            "+import org.apache.axis2.context.ConfigurationContext;\r\n", 
            "+import org.apache.axis2.description.AxisService;\r\n", 
            "+import org.apache.axis2.engine.AxisEngine;\r\n", 
            " import org.apache.commons.logging.Log;\r\n", 
            " import org.apache.commons.logging.LogFactory;\r\n", 
            " import org.apache.synapse.ManagedLifecycle;\r\n"
          ]
        }, 
        {
          "locn": "-29,12 +34,16", 
          "lines": [
            " import org.apache.synapse.MessageContext;\r\n", 
            " import org.apache.synapse.SynapseException;\r\n", 
            " import org.apache.synapse.core.SynapseEnvironment;\r\n", 
            "+import org.apache.synapse.core.axis2.Axis2SynapseEnvironment;\r\n", 
            " import org.apache.synapse.mediators.MediatorFaultHandler;\r\n", 
            "+import org.apache.synapse.mediators.base.SequenceMediator;\r\n", 
            " import org.apache.synapse.task.Task;\r\n", 
            " import org.apache.synapse.util.PayloadHelper;\r\n", 
            " \r\n", 
            " /**\r\n", 
            "- * Injects a Message in to the Synapse environment\r\n", 
            "+ * Injects a Message into a named sequence or a proxy service configured in the Synapse\r\n", 
            "+ * mediation engine. By default this task implementation will inject messages into the\r\n", 
            "+ * main sequence.\r\n", 
            "  */\r\n", 
            " public class MessageInjector implements Task, ManagedLifecycle {\r\n", 
            " \r\n"
          ]
        }, 
        {
          "locn": "-73,7 +82,27", 
          "lines": [
            "     public final static String POX_FORMAT = \"pox\";\r\n", 
            "     public final static String GET_FORMAT = \"get\";\r\n", 
            " \r\n", 
            "+    private final static String INJECT_TO_PROXY = \"proxy\";\r\n", 
            "+    private final static String INJECT_TO_SEQUENCE = \"sequence\";\r\n", 
            "+    private final static String INJECT_TO_MAIN_SEQ = \"main\";\r\n", 
            "+\r\n", 
            "     /**\r\n", 
            "+     *  Artifact type which message should be injected\r\n", 
            "+     *  Could be one of \"proxy\" | \"sequence\" | \"main\"\r\n", 
            "+     */\r\n", 
            "+    private String injectTo = INJECT_TO_MAIN_SEQ;\r\n", 
            "+\r\n", 
            "+    /**\r\n", 
            "+     * Name of the sequence which message should be injected\r\n", 
            "+     */\r\n", 
            "+    private String sequenceName = null;\r\n", 
            "+\r\n", 
            "+    /**\r\n", 
            "+     * Name of the proxy service which message should be injected\r\n", 
            "+     */\r\n", 
            "+    private String proxyName = null;\r\n", 
            "+\r\n", 
            "+    /**\r\n", 
            "      * Initializes the Injector\r\n", 
            "      *\r\n", 
            "      * @param se\r\n"
          ]
        }, 
        {
          "locn": "-115,7 +144,7", 
          "lines": [
            " \r\n", 
            "     /**\r\n", 
            "      * Sets the SOAPAction and valid only when the format is given as soap11\r\n", 
            "-     * \r\n", 
            "+     *\r\n", 
            "      * @param soapAction SOAPAction header value to be set\r\n", 
            "      */\r\n", 
            "     public void setSoapAction(String soapAction) {\r\n"
          ]
        }, 
        {
          "locn": "-123,61 +152,185", 
          "lines": [
            "     }\r\n", 
            " \r\n", 
            "     /**\r\n", 
            "-     * This will be invoked by the schedular to inject the message\r\n", 
            "+     * Artifact type which message should be injected\r\n", 
            "+     * @param injectTo Could be one of \"proxy\" | \"sequence\" | \"main\"\r\n", 
            "+     */\r\n", 
            "+    public void setInjectTo(String injectTo) {\r\n", 
            "+        this.injectTo = injectTo;\r\n", 
            "+    }\r\n", 
            "+\r\n", 
            "+    /**\r\n", 
            "+     * Set name of the sequence which message should be injected\r\n", 
            "+     * @param sequenceName sequence name\r\n", 
            "+     */\r\n", 
            "+    public void setSequenceName(String sequenceName) {\r\n", 
            "+        this.sequenceName = sequenceName;\r\n", 
            "+    }\r\n", 
            "+\r\n", 
            "+    /**\r\n", 
            "+     * Set name of the proxy service which message should be injected\r\n", 
            "+     * @param proxyName proxy service name\r\n", 
            "+     */\r\n", 
            "+    public void setProxyName(String proxyName) {\r\n", 
            "+        this.proxyName = proxyName;\r\n", 
            "+    }\r\n", 
            "+\r\n", 
            "+    /**\r\n", 
            "+     * This will be invoked by the scheduler to inject the message\r\n", 
            "      * in to the SynapseEnvironment\r\n", 
            "      */\r\n", 
            "     public void execute() {\r\n", 
            "-\t\tlog.debug(\"execute\");\r\n", 
            "+\r\n", 
            "+        if (log.isDebugEnabled()) {\r\n", 
            "+            log.debug(\"execute\");\r\n", 
            "+        }\r\n", 
            "+\r\n", 
            " \t\tif (synapseEnvironment == null) {\r\n", 
            "-\t\t\tlog.error(\"Synapse Environment not set\");\r\n", 
            "-\t\t\treturn;\r\n", 
            "+            handleError(\"Synapse Environment not set\");\r\n", 
            "+            return;\r\n", 
            " \t\t}\r\n", 
            "+\r\n", 
            " \t\tif (message == null) {\r\n", 
            "-\t\t\tlog.error(\"message not set\");\r\n", 
            "-\t\t\treturn;\r\n", 
            "-\r\n", 
            "+            handleError(\"message not set\");\r\n", 
            "+            return;\r\n", 
            " \t\t}\r\n", 
            "-\t\tif (to == null) {\r\n", 
            "-\t\t\tlog.error(\"to address not set\");\r\n", 
            "-\t\t\treturn;\r\n", 
            " \r\n", 
            "-\t\t}\r\n", 
            "+        if (INJECT_TO_PROXY.equalsIgnoreCase(injectTo)) {\r\n", 
            " \r\n", 
            "-        MessageContext mc = synapseEnvironment.createMessageContext();\r\n", 
            "-//        AspectHelper.setGlobalAudit(mc);    TODO\r\n", 
            "-        mc.pushFaultHandler(new MediatorFaultHandler(mc.getFaultSequence()));\r\n", 
            "-        mc.setTo(new EndpointReference(to));\r\n", 
            "-        if (format == null) {\r\n", 
            "-            PayloadHelper.setXMLPayload(mc, message.cloneOMElement());\r\n", 
            "-        } else {\r\n", 
            "+            if (proxyName == null || proxyName.equals(\"\")) {\r\n", 
            "+                handleError(\"Proxy service name not specified\");\r\n", 
            "+            }\r\n", 
            "+\r\n", 
            "+            // Prepare axis2 message context\r\n", 
            "+            org.apache.axis2.context.MessageContext axis2MsgCtx =\r\n", 
            "+                    new org.apache.axis2.context.MessageContext();\r\n", 
            "+            ConfigurationContext configurationContext = ((Axis2SynapseEnvironment) synapseEnvironment).\r\n", 
            "+                    getAxis2ConfigurationContext();\r\n", 
            "+            axis2MsgCtx.setConfigurationContext(configurationContext);\r\n", 
            "+            axis2MsgCtx.setIncomingTransportName(Constants.TRANSPORT_LOCAL);\r\n", 
            "+            axis2MsgCtx.setServerSide(true);\r\n", 
            "+\r\n", 
            "             try {\r\n", 
            "-                if (SOAP11_FORMAT.equalsIgnoreCase(format)) {\r\n", 
            "-                    mc.setEnvelope(OMAbstractFactory.getSOAP11Factory().createSOAPEnvelope());\r\n", 
            "-                } else if (SOAP12_FORMAT.equalsIgnoreCase(format)) {\r\n", 
            "-                    mc.setEnvelope(OMAbstractFactory.getSOAP12Factory().createSOAPEnvelope());\r\n", 
            "-                } else if (POX_FORMAT.equalsIgnoreCase(format)) {\r\n", 
            "-                    mc.setDoingPOX(true);\r\n", 
            "-                } else if (GET_FORMAT.equalsIgnoreCase(format)) {\r\n", 
            "-                    mc.setDoingGET(true);\r\n", 
            "+                AxisService axisService = configurationContext.getAxisConfiguration().\r\n", 
            "+                        getService(proxyName);\r\n", 
            "+                if (axisService == null) {\r\n", 
            "+                    handleError(\"Proxy Service: \" + proxyName + \" not found\");\r\n", 
            "                 }\r\n", 
            "-                PayloadHelper.setXMLPayload(mc, message.cloneOMElement());\r\n", 
            "+                axis2MsgCtx.setAxisService(axisService);\r\n", 
            "             } catch (AxisFault axisFault) {\r\n", 
            "-                String msg = \"Error in setting the message payload : \" + message;\r\n", 
            "-                log.error(msg, axisFault);\r\n", 
            "-                throw new SynapseException(msg, axisFault);\r\n", 
            "+                handleError(\"Error occurred while attempting to find the Proxy Service\");\r\n", 
            "             }\r\n", 
            "+\r\n", 
            "+            if (to != null) {\r\n", 
            "+                axis2MsgCtx.setTo(new EndpointReference(to));\r\n", 
            "+            }\r\n", 
            "+\r\n", 
            "+            SOAPEnvelope envelope = null;\r\n", 
            "+            if (format == null) {\r\n", 
            "+                envelope = OMAbstractFactory.getSOAP12Factory().createSOAPEnvelope();\r\n", 
            "+            } else if (SOAP11_FORMAT.equalsIgnoreCase(format)) {\r\n", 
            "+                envelope = OMAbstractFactory.getSOAP11Factory().createSOAPEnvelope();\r\n", 
            "+            } else if (SOAP12_FORMAT.equalsIgnoreCase(format)) {\r\n", 
            "+                envelope = OMAbstractFactory.getSOAP12Factory().createSOAPEnvelope();\r\n", 
            "+            } else if (POX_FORMAT.equalsIgnoreCase(format)) {\r\n", 
            "+                envelope = OMAbstractFactory.getSOAP12Factory().createSOAPEnvelope();\r\n", 
            "+                axis2MsgCtx.setDoingREST(true);\r\n", 
            "+            } else if (GET_FORMAT.equalsIgnoreCase(format)) {\r\n", 
            "+                envelope = OMAbstractFactory.getSOAP12Factory().createSOAPEnvelope();\r\n", 
            "+                axis2MsgCtx.setDoingREST(true);\r\n", 
            "+                axis2MsgCtx.setProperty(Constants.Configuration.HTTP_METHOD,\r\n", 
            "+                        Constants.Configuration.HTTP_METHOD_GET);\r\n", 
            "+            } else {\r\n", 
            "+                handleError(\"incorrect format specified\");\r\n", 
            "+            }\r\n", 
            "+\r\n", 
            "+            try {\r\n", 
            "+                PayloadHelper.setXMLPayload(envelope, message.cloneOMElement());\r\n", 
            "+                axis2MsgCtx.setEnvelope(envelope);\r\n", 
            "+            } catch (AxisFault axisFault) {\r\n", 
            "+                handleError(\"Error in setting the message payload : \" + message);\r\n", 
            "+            }\r\n", 
            "+\r\n", 
            "+            if (soapAction != null) {\r\n", 
            "+                axis2MsgCtx.setSoapAction(soapAction);\r\n", 
            "+            }\r\n", 
            "+\r\n", 
            "+            try {\r\n", 
            "+                if (log.isDebugEnabled()) {\r\n", 
            "+                    log.debug(\"injecting message to proxy service : \" + proxyName);\r\n", 
            "+                }\r\n", 
            "+                AxisEngine.receive(axis2MsgCtx);\r\n", 
            "+            } catch (AxisFault axisFault) {\r\n", 
            "+                handleError(\"Error occurred while invoking proxy service : \" + proxyName);\r\n", 
            "+            }\r\n", 
            "+\r\n", 
            "+        } else {\r\n", 
            "+            MessageContext mc = synapseEnvironment.createMessageContext();\r\n", 
            "+            mc.pushFaultHandler(new MediatorFaultHandler(mc.getFaultSequence()));\r\n", 
            "+            if (to != null) {\r\n", 
            "+                mc.setTo(new EndpointReference(to));\r\n", 
            "+            }\r\n", 
            "+\r\n", 
            "+            if (format == null) {\r\n", 
            "+                PayloadHelper.setXMLPayload(mc, message.cloneOMElement());\r\n", 
            "+            } else {\r\n", 
            "+                try {\r\n", 
            "+                    if (SOAP11_FORMAT.equalsIgnoreCase(format)) {\r\n", 
            "+                        mc.setEnvelope(OMAbstractFactory.getSOAP11Factory().createSOAPEnvelope());\r\n", 
            "+                    } else if (SOAP12_FORMAT.equalsIgnoreCase(format)) {\r\n", 
            "+                        mc.setEnvelope(OMAbstractFactory.getSOAP12Factory().createSOAPEnvelope());\r\n", 
            "+                    } else if (POX_FORMAT.equalsIgnoreCase(format)) {\r\n", 
            "+                        mc.setDoingPOX(true);\r\n", 
            "+                    } else if (GET_FORMAT.equalsIgnoreCase(format)) {\r\n", 
            "+                        mc.setDoingGET(true);\r\n", 
            "+                    }\r\n", 
            "+                    PayloadHelper.setXMLPayload(mc, message.cloneOMElement());\r\n", 
            "+                } catch (AxisFault axisFault) {\r\n", 
            "+                    handleError(\"Error in setting the message payload : \" + message);\r\n", 
            "+                }\r\n", 
            "+            }\r\n", 
            "+\r\n", 
            "+            if (soapAction != null) {\r\n", 
            "+                mc.setSoapAction(soapAction);\r\n", 
            "+            }\r\n", 
            "+\r\n", 
            "+            if (INJECT_TO_SEQUENCE.equalsIgnoreCase(injectTo)) {\r\n", 
            "+                if (sequenceName == null || sequenceName.equals(\"\")) {\r\n", 
            "+                    handleError(\"Sequence name not specified\");\r\n", 
            "+                }\r\n", 
            "+                SequenceMediator seq = (SequenceMediator) synapseEnvironment.getSynapseConfiguration().\r\n", 
            "+                        getSequence(sequenceName);\r\n", 
            "+                if (seq != null) {\r\n", 
            "+                    if (log.isDebugEnabled()) {\r\n", 
            "+                        log.debug(\"injecting message to sequence : \" + sequenceName);\r\n", 
            "+                    }\r\n", 
            "+                    synapseEnvironment.injectAsync(mc, seq);\r\n", 
            "+                } else {\r\n", 
            "+                    handleError(\"Sequence: \" + sequenceName + \" not found\");\r\n", 
            "+                }\r\n", 
            "+            } else {\r\n", 
            "+                if (log.isDebugEnabled()) {\r\n", 
            "+                    log.debug(\"injecting message to main sequence\");\r\n", 
            "+                }\r\n", 
            "+                synapseEnvironment.injectMessage(mc);\r\n", 
            "+            }\r\n", 
            "         }\r\n", 
            "-        if (soapAction != null) {\r\n", 
            "-            mc.setSoapAction(soapAction);\r\n", 
            "-        }\r\n", 
            "-        synapseEnvironment.injectMessage(mc);\r\n", 
            " \r\n", 
            "-\t}\r\n", 
            "+    }\r\n", 
            " \r\n", 
            "     /**\r\n", 
            "      * Destroys the Injector\r\n", 
            "      */\r\n", 
            "     public void destroy() {\r\n", 
            "-\t}\r\n", 
            "+    }\r\n", 
            " \r\n", 
            "+    /**\r\n", 
            "+     * Log the error and throws a SynapseException\r\n", 
            "+     * @param msg the log message\r\n", 
            "+     */\r\n", 
            "+    private void handleError(String msg) {\r\n", 
            "+        log.error(msg);\r\n", 
            "+        throw new SynapseException(msg);\r\n", 
            "+    }\r\n", 
            "+\r\n", 
            " }\r\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/startup/tasks/MessageInjector.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/startup/tasks/MessageInjector.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,61", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Task injecting to a named sequence -->\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+\n", 
            "+    <task class=\"org.apache.synapse.startup.tasks.MessageInjector\" name=\"InjectToSequenceTask\">\n", 
            "+        <property name=\"soapAction\" value=\"urn:getQuote\"/>\n", 
            "+        <property name=\"format\" value=\"soap11\"/>\n", 
            "+        <property name=\"injectTo\" value=\"sequence\"/>\n", 
            "+        <property name=\"sequenceName\" value=\"SampleSequence\"/>\n", 
            "+        <property name=\"message\">\n", 
            "+            <m0:getQuote xmlns:m0=\"http://services.samples\">\n", 
            "+                <m0:request>\n", 
            "+                    <m0:symbol>IBM</m0:symbol>\n", 
            "+                </m0:request>\n", 
            "+            </m0:getQuote>\n", 
            "+        </property>\n", 
            "+        <trigger interval=\"5\"/>\n", 
            "+    </task>\n", 
            "+\n", 
            "+    <sequence name=\"SampleSequence\">\n", 
            "+        <log level=\"custom\">\n", 
            "+            <property name=\"MSG\" value=\"SampleSequence invoked\"/>\n", 
            "+        </log>\n", 
            "+        <send receive=\"receivingSequence\">\n", 
            "+            <endpoint>\n", 
            "+                <address uri=\"http://localhost:9000/services/SimpleStockQuoteService\"/>\n", 
            "+            </endpoint>\n", 
            "+        </send>\n", 
            "+    </sequence>\n", 
            "+\n", 
            "+    <sequence name=\"receivingSequence\">\n", 
            "+        <log level=\"custom\">\n", 
            "+            <property xmlns:ns=\"http://services.samples\" name=\"Stock_Quote_on\"\n", 
            "+                      expression=\"//ns:return/ns:lastTradeTimestamp/child::text()\"/>\n", 
            "+            <property xmlns:ns=\"http://services.samples\" name=\"For_the_organization\"\n", 
            "+                      expression=\"//ns:return/ns:name/child::text()\"/>\n", 
            "+            <property xmlns:ns=\"http://services.samples\" name=\"Last_Value\"\n", 
            "+                      expression=\"//ns:return/ns:last/child::text()\"/>\n", 
            "+        </log>\n", 
            "+    </sequence>\n", 
            "+\n", 
            "+</definitions>\n"
          ]
        }
      ], 
      "to": "java/repository/conf/sample/synapse_sample_301.xml", 
      "from": "java/repository/conf/sample/synapse_sample_301.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,65", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Task injecting to a Proxy service -->\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+\n", 
            "+    <task class=\"org.apache.synapse.startup.tasks.MessageInjector\" name=\"InjectToProxyTask\">\n", 
            "+        <property name=\"soapAction\" value=\"urn:getQuote\"/>\n", 
            "+        <property name=\"format\" value=\"soap11\"/>\n", 
            "+        <property name=\"injectTo\" value=\"proxy\"/>\n", 
            "+        <property name=\"proxyName\" value=\"SampleProxy\"/>\n", 
            "+        <property name=\"message\">\n", 
            "+            <m0:getQuote xmlns:m0=\"http://services.samples\">\n", 
            "+                <m0:request>\n", 
            "+                    <m0:symbol>IBM</m0:symbol>\n", 
            "+                </m0:request>\n", 
            "+            </m0:getQuote>\n", 
            "+        </property>\n", 
            "+        <trigger interval=\"5\"/>\n", 
            "+    </task>\n", 
            "+\n", 
            "+    <proxy name=\"SampleProxy\" transports=\"http\">\n", 
            "+        <target>\n", 
            "+            <inSequence>\n", 
            "+                <log level=\"custom\">\n", 
            "+                    <property name=\"MSG\" value=\"SampleProxy invoked\"/>\n", 
            "+                </log>\n", 
            "+                <send>\n", 
            "+                    <endpoint>\n", 
            "+                        <address uri=\"http://localhost:9000/services/SimpleStockQuoteService\"/>\n", 
            "+                    </endpoint>\n", 
            "+                </send>\n", 
            "+            </inSequence>\n", 
            "+            <outSequence>\n", 
            "+                <log level=\"custom\">\n", 
            "+                    <property xmlns:ns=\"http://services.samples\" name=\"Stock_Quote_on\"\n", 
            "+                              expression=\"//ns:return/ns:lastTradeTimestamp/child::text()\"/>\n", 
            "+                    <property xmlns:ns=\"http://services.samples\" name=\"For_the_organization\"\n", 
            "+                              expression=\"//ns:return/ns:name/child::text()\"/>\n", 
            "+                    <property xmlns:ns=\"http://services.samples\" name=\"Last_Value\"\n", 
            "+                              expression=\"//ns:return/ns:last/child::text()\"/>\n", 
            "+                </log>\n", 
            "+                <drop/>\n", 
            "+            </outSequence>\n", 
            "+        </target>\n", 
            "+    </proxy>\n", 
            "+\n", 
            "+</definitions>\n"
          ]
        }
      ], 
      "to": "java/repository/conf/sample/synapse_sample_302.xml", 
      "from": "java/repository/conf/sample/synapse_sample_302.xml"
    }
  ], 
  "id": "1510359"
}