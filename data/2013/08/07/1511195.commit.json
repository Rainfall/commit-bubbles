{
  "when": "2013-08-07T03:02:38-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-16,6 +16,7", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.config.xml;\n", 
            " \n", 
            " import org.apache.axiom.om.OMAttribute;\n"
          ]
        }, 
        {
          "locn": "-22,14 +23,11", 
          "lines": [
            " import org.apache.axiom.om.OMElement;\n", 
            " import org.apache.synapse.Mediator;\n", 
            " import org.apache.synapse.SynapseException;\n", 
            "-import org.apache.synapse.mediators.TemplateParameter;\n", 
            " import org.apache.synapse.mediators.template.TemplateMediator;\n", 
            " \n", 
            " import javax.xml.namespace.QName;\n", 
            "-import java.util.ArrayList;\n", 
            "-import java.util.Collection;\n", 
            "-import java.util.Iterator;\n", 
            " import java.util.Properties;\n", 
            "+\n", 
            " /**\n", 
            "  * Factory class for Template configuration as follows\n", 
            "  * <template name=\"simple_func\">\n"
          ]
        }, 
        {
          "locn": "-39,6 +37,7", 
          "lines": [
            "     </template>\n", 
            "  */\n", 
            " public class TemplateMediatorFactory extends AbstractListMediatorFactory {\n", 
            "+\n", 
            "     private static final QName TEMPLATE_Q\n", 
            "             = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, \"template\");\n", 
            "     private static final QName TEMPLATE_BODY_Q\n"
          ]
        }, 
        {
          "locn": "-55,7 +54,7", 
          "lines": [
            "             OMElement templateBodyElem = elem.getFirstChildWithName(TEMPLATE_BODY_Q);\n", 
            "             addChildren(templateBodyElem, templateTemplateMediator, properties);\n", 
            "         } else {\n", 
            "-            String msg = \"A EIP template should be a named mediator .\";\n", 
            "+            String msg = \"An EIP template must be a named mediator .\";\n", 
            "             log.error(msg);\n", 
            "             throw new SynapseException(msg);\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/TemplateMediatorFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/TemplateMediatorFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-61,7 +61,7", 
          "lines": [
            "      */\n", 
            "     public static void serializeTemplateParameters(OMElement parent,\n", 
            "                                                Collection<TemplateParameter> params) {\n", 
            "-            serializeTemplateParameters(parent, params, PARAMETER_Q);\n", 
            "+        serializeTemplateParameters(parent, params, PARAMETER_Q);\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/TemplateParameterSerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/TemplateParameterSerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-45,9 +45,8", 
          "lines": [
            " \n", 
            "         List<String> parameters = template.getParameters();\n", 
            "         for (String entry : parameters) {\n", 
            "-            OMElement paramElement = fac.createOMElement(\n", 
            "-                    new QName(SynapseConstants.SYNAPSE_NAMESPACE, \"parameter\"));\n", 
            "-\n", 
            "+            OMElement paramElement = fac.createOMElement(\"parameter\",\n", 
            "+                    SynapseConstants.SYNAPSE_OMNAMESPACE);\n", 
            "             paramElement.addAttribute(fac.createOMAttribute(\"name\", nullNS, entry));\n", 
            "             templateElement.addChild(paramElement);\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/endpoints/TemplateSerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/endpoints/TemplateSerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-33,6 +33,7", 
          "lines": [
            " import java.util.Properties;\n", 
            " \n", 
            " public class TemplateFactory {\n", 
            "+\n", 
            "     public static final Log log = LogFactory.getLog(TemplateFactory.class);\n", 
            " \n", 
            "     public Template createEndpointTemplate(OMElement element, Properties properties) {\n"
          ]
        }, 
        {
          "locn": "-53,15 +54,11", 
          "lines": [
            "                 new QName(SynapseConstants.SYNAPSE_NAMESPACE, \"parameter\"));\n", 
            "         while (paramItr.hasNext()) {\n", 
            "             OMElement paramElement = (OMElement) paramItr.next();\n", 
            "-\n", 
            "             OMAttribute paramName = paramElement.getAttribute(new QName(\"name\"));\n", 
            "-\n", 
            "             if (paramName == null) {\n", 
            "                 handleException(\"parameter name should be present\");\n", 
            "             }\n", 
            "-\n", 
            "             assert paramName != null;\n", 
            "-\n", 
            "             template.addParameter(paramName.getAttributeValue().trim());\n", 
            "         }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/endpoints/TemplateFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/endpoints/TemplateFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-39,6 +39,7", 
          "lines": [
            "     protected OMElement serializeSpecificMediator(Mediator m) {\n", 
            "         if (!(m instanceof TemplateMediator)) {\n", 
            "             handleException(\"Unsupported mediator passed in for serialization : \" + m.getType());\n", 
            "+            return null;\n", 
            "         }\n", 
            " \n", 
            "         TemplateMediator mediator = (TemplateMediator) m;\n"
          ]
        }, 
        {
          "locn": "-45,8 +46,7", 
          "lines": [
            "         OMElement templateElem = fac.createOMElement(\"template\", synNS);\n", 
            " \n", 
            "         if (mediator.getName() != null) {\n", 
            "-            templateElem.addAttribute(fac.createOMAttribute(\n", 
            "-                    \"name\", nullNS, mediator.getName()));\n", 
            "+            templateElem.addAttribute(fac.createOMAttribute(\"name\", nullNS, mediator.getName()));\n", 
            "             //serialize parameters\n", 
            "             serializeParams(templateElem,mediator);\n", 
            "             serializeBody(templateElem, mediator.getList());\n"
          ]
        }, 
        {
          "locn": "-65,7 +65,7", 
          "lines": [
            "     private void serializeParams(OMElement templateElem, TemplateMediator mediator) {\n", 
            "         Collection<TemplateParameter> params = mediator.getParameters();\n", 
            "         if (params != null && params.size() > 0) {\n", 
            "-               TemplateParameterSerializer.serializeTemplateParameters(templateElem,mediator.getParameters());\n", 
            "+            TemplateParameterSerializer.serializeTemplateParameters(templateElem,mediator.getParameters());\n", 
            "         }\n", 
            "     }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/TemplateMediatorSerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/TemplateMediatorSerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-42,7 +42,7", 
          "lines": [
            " \n", 
            "     private String eipPatternName;\n", 
            "     private String fileName;\n", 
            "-    /** flag to ensure that each and every sequence is initialized and destroyed atmost once */\n", 
            "+    /** flag to ensure that each and every sequence is initialized and destroyed at most once */\n", 
            "     private boolean initialized = false;\n", 
            " \n", 
            "     public void setParameters(Collection<TemplateParameter> paramNames) {\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/template/TemplateMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/template/TemplateMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,98", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.config.xml.templates;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.synapse.config.xml.AbstractTestCase;\n", 
            "+import org.apache.synapse.config.xml.TemplateMediatorSerializer;\n", 
            "+import org.apache.synapse.config.xml.XMLToTemplateMapper;\n", 
            "+import org.apache.synapse.config.xml.endpoints.TemplateSerializer;\n", 
            "+import org.apache.synapse.endpoints.Template;\n", 
            "+import org.apache.synapse.mediators.template.TemplateMediator;\n", 
            "+\n", 
            "+public class TemplateSerializationTest extends AbstractTestCase {\n", 
            "+\n", 
            "+    public void testEndpointTemplateScenarioOne() throws Exception {\n", 
            "+        String inputXML = \"<template name=\\\"t1\\\" xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\" +\n", 
            "+                \"<parameter name=\\\"name\\\"/><parameter name=\\\"uri\\\"/><endpoint/>\" +\n", 
            "+                \"</template>\" ;\n", 
            "+\n", 
            "+        OMElement inputElement = createOMElement(inputXML);\n", 
            "+        XMLToTemplateMapper mapper = new XMLToTemplateMapper();\n", 
            "+        Template template = (Template) mapper.getObjectFromOMNode(inputElement, null);\n", 
            "+\n", 
            "+        OMElement serializedOut = new TemplateSerializer().serializeEndpointTemplate(template, null);\n", 
            "+        assertTrue(compare(serializedOut, inputElement));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testEndpointTemplateScenarioTwo() throws Exception {\n", 
            "+        String inputXML = \"<template name=\\\"t1\\\" xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\" +\n", 
            "+                \"<parameter name=\\\"name\\\"/><parameter name=\\\"uri\\\"/>\" +\n", 
            "+                \"<endpoint><timeout><duration>10000</duration></timeout></endpoint>\" +\n", 
            "+                \"</template>\" ;\n", 
            "+\n", 
            "+        OMElement inputElement = createOMElement(inputXML);\n", 
            "+        XMLToTemplateMapper mapper = new XMLToTemplateMapper();\n", 
            "+        Template template = (Template) mapper.getObjectFromOMNode(inputElement, null);\n", 
            "+\n", 
            "+        OMElement serializedOut = new TemplateSerializer().serializeEndpointTemplate(template, null);\n", 
            "+        assertTrue(compare(serializedOut,inputElement));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testSequenceTemplateScenarioOne() throws Exception {\n", 
            "+        String inputXML = \"<template name=\\\"t2\\\" xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\" +\n", 
            "+                \"<sequence/>\" +\n", 
            "+                \"</template>\" ;\n", 
            "+\n", 
            "+        OMElement inputElement = createOMElement(inputXML);\n", 
            "+        XMLToTemplateMapper mapper = new XMLToTemplateMapper();\n", 
            "+        TemplateMediator template = (TemplateMediator) mapper.getObjectFromOMNode(inputElement, null);\n", 
            "+\n", 
            "+        OMElement serializedOut = new TemplateMediatorSerializer().serializeMediator(null, template);\n", 
            "+        assertTrue(compare(serializedOut,inputElement));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testSequenceTemplateScenarioTwo() throws Exception {\n", 
            "+        String inputXML = \"<template name=\\\"t2\\\" xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\" +\n", 
            "+                \"<sequence><log/><drop/></sequence>\" +\n", 
            "+                \"</template>\" ;\n", 
            "+\n", 
            "+        OMElement inputElement = createOMElement(inputXML);\n", 
            "+        XMLToTemplateMapper mapper = new XMLToTemplateMapper();\n", 
            "+        TemplateMediator template = (TemplateMediator) mapper.getObjectFromOMNode(inputElement, null);\n", 
            "+\n", 
            "+        OMElement serializedOut = new TemplateMediatorSerializer().serializeMediator(null, template);\n", 
            "+        assertTrue(compare(serializedOut,inputElement));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testSequenceTemplateScenarioThree() throws Exception {\n", 
            "+        String inputXML = \"<template name=\\\"t2\\\" xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\" +\n", 
            "+                \"<parameter name=\\\"foo\\\"/><parameter name=\\\"bar\\\"/>\" +\n", 
            "+                \"<sequence><log/><drop/></sequence>\" +\n", 
            "+                \"</template>\" ;\n", 
            "+\n", 
            "+        OMElement inputElement = createOMElement(inputXML);\n", 
            "+        XMLToTemplateMapper mapper = new XMLToTemplateMapper();\n", 
            "+        TemplateMediator template = (TemplateMediator) mapper.getObjectFromOMNode(inputElement, null);\n", 
            "+\n", 
            "+        OMElement serializedOut = new TemplateMediatorSerializer().serializeMediator(null, template);\n", 
            "+        assertTrue(compare(serializedOut,inputElement));\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/config/xml/templates/TemplateSerializationTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/config/xml/templates/TemplateSerializationTest.java"
    }
  ], 
  "id": "1511195"
}