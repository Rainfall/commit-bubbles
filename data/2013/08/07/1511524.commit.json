{
  "when": "2013-08-07T18:36:06-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-0,0 +1,189", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.endpoints;\n", 
            "+\n", 
            "+import junit.framework.TestCase;\n", 
            "+import org.apache.axis2.context.ConfigurationContext;\n", 
            "+import org.apache.axis2.engine.AxisConfiguration;\n", 
            "+import org.apache.synapse.FaultHandler;\n", 
            "+import org.apache.synapse.MessageContext;\n", 
            "+import org.apache.synapse.SynapseConstants;\n", 
            "+import org.apache.synapse.config.SynapseConfiguration;\n", 
            "+import org.apache.synapse.core.SynapseEnvironment;\n", 
            "+import org.apache.synapse.core.axis2.Axis2SynapseEnvironment;\n", 
            "+import org.apache.synapse.mediators.TestUtils;\n", 
            "+\n", 
            "+public class BasicEndpointTest extends TestCase {\n", 
            "+\n", 
            "+    private static final int CUSTOM_ERROR = 911911;\n", 
            "+\n", 
            "+    public void testDefaultTimeoutErrorHandling() throws Exception {\n", 
            "+        AddressEndpoint endpoint = new AddressEndpoint();\n", 
            "+        EndpointDefinition def = new EndpointDefinition();\n", 
            "+        endpoint.setDefinition(def);\n", 
            "+\n", 
            "+        MessageContext messageContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        messageContext.setProperty(SynapseConstants.ERROR_CODE,\n", 
            "+                SynapseConstants.NHTTP_CONNECTION_TIMEOUT);\n", 
            "+        assertTrue(endpoint.isTimeout(messageContext));\n", 
            "+\n", 
            "+        messageContext.setProperty(SynapseConstants.ERROR_CODE,\n", 
            "+                SynapseConstants.NHTTP_CONNECTION_CLOSED);\n", 
            "+        assertTrue(endpoint.isTimeout(messageContext));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testCustomTimeoutErrorHandling() throws Exception {\n", 
            "+        AddressEndpoint endpoint = new AddressEndpoint();\n", 
            "+        EndpointDefinition def = new EndpointDefinition();\n", 
            "+        def.addTimeoutErrorCode(SynapseConstants.NHTTP_CONNECTION_TIMEOUT);\n", 
            "+        def.addTimeoutErrorCode(CUSTOM_ERROR);\n", 
            "+        endpoint.setDefinition(def);\n", 
            "+\n", 
            "+        MessageContext messageContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        messageContext.setProperty(SynapseConstants.ERROR_CODE,\n", 
            "+                SynapseConstants.NHTTP_CONNECTION_TIMEOUT);\n", 
            "+        assertTrue(endpoint.isTimeout(messageContext));\n", 
            "+\n", 
            "+        messageContext.setProperty(SynapseConstants.ERROR_CODE, CUSTOM_ERROR);\n", 
            "+        assertTrue(endpoint.isTimeout(messageContext));\n", 
            "+\n", 
            "+        messageContext.setProperty(SynapseConstants.ERROR_CODE,\n", 
            "+                SynapseConstants.NHTTP_CONNECTION_CLOSED);\n", 
            "+        assertFalse(endpoint.isTimeout(messageContext));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testDefaultSuspendErrorHandling() throws Exception {\n", 
            "+        AddressEndpoint endpoint = new AddressEndpoint();\n", 
            "+        EndpointDefinition def = new EndpointDefinition();\n", 
            "+        endpoint.setDefinition(def);\n", 
            "+\n", 
            "+        MessageContext messageContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        messageContext.setProperty(SynapseConstants.ERROR_CODE,\n", 
            "+                SynapseConstants.NHTTP_CONNECTION_TIMEOUT);\n", 
            "+        assertTrue(endpoint.isSuspendFault(messageContext));\n", 
            "+\n", 
            "+        messageContext.setProperty(SynapseConstants.ERROR_CODE, CUSTOM_ERROR);\n", 
            "+        assertTrue(endpoint.isSuspendFault(messageContext));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testCustomSuspendErrorHandling() throws Exception {\n", 
            "+        AddressEndpoint endpoint = new AddressEndpoint();\n", 
            "+        EndpointDefinition def = new EndpointDefinition();\n", 
            "+        def.addSuspendErrorCode(CUSTOM_ERROR);\n", 
            "+        endpoint.setDefinition(def);\n", 
            "+\n", 
            "+        MessageContext messageContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        messageContext.setProperty(SynapseConstants.ERROR_CODE,\n", 
            "+                SynapseConstants.NHTTP_CONNECTION_TIMEOUT);\n", 
            "+        assertFalse(endpoint.isSuspendFault(messageContext));\n", 
            "+\n", 
            "+        messageContext.setProperty(SynapseConstants.ERROR_CODE, CUSTOM_ERROR);\n", 
            "+        assertTrue(endpoint.isSuspendFault(messageContext));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testDefaultRetryErrorHandling() throws Exception {\n", 
            "+        AddressEndpoint endpoint = new AddressEndpoint();\n", 
            "+        EndpointDefinition def = new EndpointDefinition();\n", 
            "+        endpoint.setDefinition(def);\n", 
            "+\n", 
            "+        MessageContext messageContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        messageContext.setProperty(SynapseConstants.ERROR_CODE,\n", 
            "+                SynapseConstants.NHTTP_CONNECTION_TIMEOUT);\n", 
            "+        assertFalse(endpoint.isRetryDisabled(messageContext));\n", 
            "+\n", 
            "+        messageContext.setProperty(SynapseConstants.ERROR_CODE, CUSTOM_ERROR);\n", 
            "+        assertFalse(endpoint.isRetryDisabled(messageContext));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testCustomRetryErrorHandling() throws Exception {\n", 
            "+        AddressEndpoint endpoint = new AddressEndpoint();\n", 
            "+        EndpointDefinition def = new EndpointDefinition();\n", 
            "+        def.addRetryDisabledErrorCode(CUSTOM_ERROR);\n", 
            "+        endpoint.setDefinition(def);\n", 
            "+\n", 
            "+        MessageContext messageContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        messageContext.setProperty(SynapseConstants.ERROR_CODE,\n", 
            "+                SynapseConstants.NHTTP_CONNECTION_TIMEOUT);\n", 
            "+        assertFalse(endpoint.isRetryDisabled(messageContext));\n", 
            "+\n", 
            "+        messageContext.setProperty(SynapseConstants.ERROR_CODE, CUSTOM_ERROR);\n", 
            "+        assertTrue(endpoint.isRetryDisabled(messageContext));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testFaultHandlerInvocation() throws Exception {\n", 
            "+        AddressEndpoint endpoint = new AddressEndpoint();\n", 
            "+        EndpointDefinition def = new EndpointDefinition();\n", 
            "+        endpoint.setDefinition(def);\n", 
            "+\n", 
            "+        MessageContext messageContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        TestFaultHandler faultHandler = new TestFaultHandler();\n", 
            "+        messageContext.pushFaultHandler(faultHandler);\n", 
            "+\n", 
            "+        endpoint.onFault(messageContext);\n", 
            "+        assertTrue(faultHandler.invoked);\n", 
            "+\n", 
            "+        faultHandler.invoked = false;\n", 
            "+        messageContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        messageContext.pushFaultHandler(faultHandler);\n", 
            "+        endpoint.informFailure(messageContext, CUSTOM_ERROR, \"Custom Error\");\n", 
            "+        assertTrue(faultHandler.invoked);\n", 
            "+        assertEquals(String.valueOf(CUSTOM_ERROR),\n", 
            "+                messageContext.getProperty(SynapseConstants.ERROR_CODE));\n", 
            "+        assertEquals(\"Custom Error\",\n", 
            "+                messageContext.getProperty(SynapseConstants.ERROR_MESSAGE));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testSend() throws Exception {\n", 
            "+        SynapseConfiguration synapseConfig = new SynapseConfiguration();\n", 
            "+        AxisConfiguration axisConfig = new AxisConfiguration();\n", 
            "+        ConfigurationContext configContext = new ConfigurationContext(axisConfig);\n", 
            "+        SynapseEnvironment env = new Axis2SynapseEnvironment(configContext, synapseConfig) {\n", 
            "+            @Override\n", 
            "+            public void send(EndpointDefinition endpoint, MessageContext synCtx) {\n", 
            "+                synCtx.setProperty(\"__test__\", \"__success__\");\n", 
            "+            }\n", 
            "+        };\n", 
            "+\n", 
            "+        AddressEndpoint endpoint = new AddressEndpoint();\n", 
            "+        EndpointDefinition def = new EndpointDefinition();\n", 
            "+        def.setAddress(\"http://foo.com\");\n", 
            "+        endpoint.setDefinition(def);\n", 
            "+        endpoint.init(env);\n", 
            "+\n", 
            "+        MessageContext messageContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        messageContext.setEnvironment(env);\n", 
            "+        endpoint.send(messageContext);\n", 
            "+\n", 
            "+        assertEquals(\"__success__\", messageContext.getProperty(\"__test__\"));\n", 
            "+        assertTrue(messageContext.getFaultStack().peek() == endpoint);\n", 
            "+        assertTrue(messageContext.getProperty(SynapseConstants.LAST_ENDPOINT) == endpoint);\n", 
            "+        endpoint.destroy();\n", 
            "+    }\n", 
            "+\n", 
            "+    private static class TestFaultHandler extends FaultHandler {\n", 
            "+\n", 
            "+        boolean invoked = false;\n", 
            "+\n", 
            "+        @Override\n", 
            "+        public void onFault(MessageContext synCtx) {\n", 
            "+            invoked = true;\n", 
            "+        }\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/endpoints/BasicEndpointTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/endpoints/BasicEndpointTest.java"
    }
  ], 
  "id": "1511524"
}