{
  "when": "2012-10-08T00:24:21-04:00", 
  "message": "committing patch https://issues.apache.org/jira/browse/SYNAPSE-745 for libarary based EIP patterns", 
  "who": "uswick", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-1,23 +0,0", 
          "lines": [
            "-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "-<assembly>\n", 
            "-    <formats>\n", 
            "-        <format>zip</format>\n", 
            "-    </formats>\n", 
            "-    <includeBaseDirectory>false</includeBaseDirectory>\n", 
            "-    <fileSets>\n", 
            "-        <fileSet>\n", 
            "-            <directory>src/test/resources/synapse-libraries/synapse-eip-lib</directory>\n", 
            "-            <outputDirectory></outputDirectory>\n", 
            "-        </fileSet>\n", 
            "-        <fileSet>\n", 
            "-            <directory>target/classes</directory>\n", 
            "-            <outputDirectory></outputDirectory>\n", 
            "-            <excludes>\n", 
            "-                <exclude>**/metrics_module.xml</exclude>\n", 
            "-                <exclude>**/META-INF/*</exclude>\n", 
            "-            </excludes>\n", 
            "-        </fileSet>\n", 
            "-    </fileSets>\n", 
            "-    \n", 
            "-    \n", 
            "-</assembly>\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/assembly/assemble-eip-lib.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/assembly/assemble-eip-lib.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,21", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+<assembly>\n", 
            "+    <formats>\n", 
            "+        <format>zip</format>\n", 
            "+    </formats>\n", 
            "+    <includeBaseDirectory>false</includeBaseDirectory>\n", 
            "+    <fileSets>\n", 
            "+        <fileSet>\n", 
            "+            <directory>src/test/resources/synapse-libraries/synapse-eipcore-lib</directory>\n", 
            "+            <outputDirectory></outputDirectory>\n", 
            "+        </fileSet>\n", 
            "+        <fileSet>\n", 
            "+            <directory>target/classes/org/apache/synapse/libraries/eip</directory>\n", 
            "+            <outputDirectory>org/apache/synapse/libraries/eip</outputDirectory>\n", 
            "+            <excludes>\n", 
            "+                <exclude>**/metrics_module.xml</exclude>\n", 
            "+                <exclude>**/META-INF/*</exclude>\n", 
            "+            </excludes>\n", 
            "+        </fileSet>\n", 
            "+    </fileSets>\n", 
            "+</assembly>\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/assembly/assemble-eipcore-lib.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/assembly/assemble-eipcore-lib.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,23", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+<assembly>\n", 
            "+    <formats>\n", 
            "+        <format>zip</format>\n", 
            "+    </formats>\n", 
            "+    <includeBaseDirectory>false</includeBaseDirectory>\n", 
            "+    <fileSets>\n", 
            "+        <fileSet>\n", 
            "+            <directory>src/test/resources/synapse-libraries/synapse-eiptest-lib</directory>\n", 
            "+            <outputDirectory></outputDirectory>\n", 
            "+        </fileSet>\n", 
            "+        <fileSet>\n", 
            "+            <directory>target/classes</directory>\n", 
            "+            <outputDirectory></outputDirectory>\n", 
            "+            <excludes>\n", 
            "+                <exclude>**/metrics_module.xml</exclude>\n", 
            "+                <exclude>**/META-INF/*</exclude>\n", 
            "+            </excludes>\n", 
            "+        </fileSet>\n", 
            "+    </fileSets>\n", 
            "+    \n", 
            "+    \n", 
            "+</assembly>\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/assembly/assemble-eiptest-lib.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/assembly/assemble-eiptest-lib.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,11 +0,0", 
          "lines": [
            "-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "-<artifact name=\"systemManagement\" type=\"synapse/template\">\n", 
            "-\n", 
            "-    <subArtifacts>\n", 
            "-        <artifact name=\"splitter\">\n", 
            "-            <file>template_splitter.xml</file>\n", 
            "-            <description>Splitter library function</description>\n", 
            "-        </artifact>\n", 
            "-    </subArtifacts>\n", 
            "-\n", 
            "-</artifact>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eip-lib/eip_systemManagement/artifact.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eip-lib/eip_systemManagement/artifact.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,20 +0,0", 
          "lines": [
            "-<template xmlns=\"http://ws.apache.org/ns/synapse\" name=\"splitter\">\n", 
            "-    <parameter name=\"iterate_exp\"/>\n", 
            "-    <parameter name=\"endpoint_uri\"/>\n", 
            "-    <parameter name=\"attach_path\" default=\"{{//original}}\" optional=\"true\"/>\n", 
            "-    <parameter name=\"sequence_ref\"/>\n", 
            "-    <sequence>\n", 
            "-        <property name=\"ItrExp\" expression=\"$func:iterate_exp\" />\n", 
            "-        <property name=\"EndPUri\" expression=\"$func:endpoint_uri\" />\n", 
            "-        <property name=\"AttachPath\" expression=\"$func:attach_path\" />\n", 
            "-        <property name=\"SRef\" expression=\"$func:sequence_ref\" />\n", 
            "-        <property name=\"Endpoint_1\" expression=\"get-property('To')\" />\n", 
            "-        <header name=\"To\" expression=\"$func:endpoint_uri\"/>\n", 
            "-        <iterate xmlns:ns=\"http://org.apache.synapse/xsd\" continueParent=\"true\" preservePayload=\"true\" attachPath=\"$func:attach_path\" expression=\"$func:iterate_exp\">\n", 
            "-            <target>\n", 
            "-              <sequence key=\"{$func:sequence_ref}\"/>\n", 
            "-            </target>\n", 
            "-        </iterate>\n", 
            "-        <property name=\"Endpoint_2\" expression=\"get-property('To')\" />\n", 
            "-    </sequence>\n", 
            "-</template>\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eip-lib/eip_systemManagement/template_splitter.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eip-lib/eip_systemManagement/template_splitter.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,7 +0,0", 
          "lines": [
            "-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "-<artifacts>\n", 
            "-    <artifact name=\"EipLibrary\" package=\"synapse.lang.eip\" >\n", 
            "-        <dependency artifact=\"systemManagement\" />\n", 
            "-        <description>eip synapse library</description>\n", 
            "-    </artifact>\n", 
            "-</artifacts>\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eip-lib/artifacts.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eip-lib/artifacts.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,11", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+<artifact name=\"systemManagement\" type=\"synapse/template\">\n", 
            "+\n", 
            "+    <subArtifacts>\n", 
            "+        <artifact name=\"splitter\">\n", 
            "+            <file>template_splitter.xml</file>\n", 
            "+            <description>Splitter library function</description>\n", 
            "+        </artifact>\n", 
            "+    </subArtifacts>\n", 
            "+\n", 
            "+</artifact>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eiptest-lib/eip_systemManagement/artifact.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eiptest-lib/eip_systemManagement/artifact.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,20", 
          "lines": [
            "+<template xmlns=\"http://ws.apache.org/ns/synapse\" name=\"splitter\">\n", 
            "+    <parameter name=\"iterate_exp\"/>\n", 
            "+    <parameter name=\"endpoint_uri\"/>\n", 
            "+    <parameter name=\"attach_path\" default=\"{{//original}}\" optional=\"true\"/>\n", 
            "+    <parameter name=\"sequence_ref\"/>\n", 
            "+    <sequence>\n", 
            "+        <property name=\"ItrExp\" expression=\"$func:iterate_exp\" />\n", 
            "+        <property name=\"EndPUri\" expression=\"$func:endpoint_uri\" />\n", 
            "+        <property name=\"AttachPath\" expression=\"$func:attach_path\" />\n", 
            "+        <property name=\"SRef\" expression=\"$func:sequence_ref\" />\n", 
            "+        <property name=\"Endpoint_1\" expression=\"get-property('To')\" />\n", 
            "+        <header name=\"To\" expression=\"$func:endpoint_uri\"/>\n", 
            "+        <iterate xmlns:ns=\"http://org.apache.synapse/xsd\" continueParent=\"true\" preservePayload=\"true\" attachPath=\"$func:attach_path\" expression=\"$func:iterate_exp\">\n", 
            "+            <target>\n", 
            "+              <sequence key=\"{$func:sequence_ref}\"/>\n", 
            "+            </target>\n", 
            "+        </iterate>\n", 
            "+        <property name=\"Endpoint_2\" expression=\"get-property('To')\" />\n", 
            "+    </sequence>\n", 
            "+</template>\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eiptest-lib/eip_systemManagement/template_splitter.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eiptest-lib/eip_systemManagement/template_splitter.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,7", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+<artifacts>\n", 
            "+    <artifact name=\"EipLibrary\" package=\"synapse.lang.eip\" >\n", 
            "+        <dependency artifact=\"systemManagement\" />\n", 
            "+        <description>eip synapse library</description>\n", 
            "+    </artifact>\n", 
            "+</artifacts>\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eiptest-lib/artifacts.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eiptest-lib/artifacts.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,41", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+        <!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Wire Tap eip library function template shipped with the Apache Synapse -->\n", 
            "+<template xmlns=\"http://ws.apache.org/ns/synapse\" name=\"wire_tap\">\n", 
            "+        <parameter name=\"destination_uri\"/>\n", 
            "+        <parameter name=\"wiretap_uri\"/>\n", 
            "+        <sequence>\n", 
            "+            <clone>\n", 
            "+                <target>\n", 
            "+                    <sequence>\n", 
            "+                        <header name=\"To\" expression=\"$func:wiretap_uri\"/>\n", 
            "+                        <send/>\n", 
            "+                    </sequence>\n", 
            "+                </target>\n", 
            "+                <target>\n", 
            "+                    <sequence>\n", 
            "+                        <header name=\"To\" expression=\"$func:destination_uri\"/>\n", 
            "+                        <send/>\n", 
            "+                    </sequence>\n", 
            "+                </target>\n", 
            "+            </clone>\n", 
            "+        </sequence>\n", 
            "+</template>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_systemManagement/template_wire_tap.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_systemManagement/template_wire_tap.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,31", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+        <!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- System management sub artifact of EIP library shipped with the Apache Synapse -->\n", 
            "+<artifact name=\"systemManagement\" type=\"synapse/template\">\n", 
            "+\n", 
            "+    <subArtifacts>\n", 
            "+        <artifact name=\"wire_tap\">\n", 
            "+            <file>template_wire_tap.xml</file>\n", 
            "+            <description>Wire Tap eip library function</description>\n", 
            "+        </artifact>\n", 
            "+    </subArtifacts>\n", 
            "+\n", 
            "+</artifact>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_systemManagement/artifact.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_systemManagement/artifact.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-103,7 +103,7", 
          "lines": [
            "                             <goal>attached</goal>\n", 
            "                         </goals>\n", 
            "                         <configuration>\n", 
            "-                            <finalName>synapse-eip-lib</finalName>\n", 
            "+                            <finalName>synapse-eiptest-lib</finalName>\n", 
            "                             <filters>\n", 
            "                                 <filter>\n", 
            "                                     ${basedir}/src/test/resources/synapse-libraries/assembly/filter.properties\n"
          ]
        }, 
        {
          "locn": "-110,11 +110,30", 
          "lines": [
            "                                 </filter>\n", 
            "                             </filters>\n", 
            "                             <descriptors>\n", 
            "-                                <descriptor>src/test/resources/synapse-libraries/assembly/assemble-eip-lib.xml\n", 
            "+                                <descriptor>src/test/resources/synapse-libraries/assembly/assemble-eiptest-lib.xml\n", 
            "                                 </descriptor>\n", 
            "                             </descriptors>\n", 
            "                         </configuration>\n", 
            "                     </execution>\n", 
            "+                     <execution>\n", 
            "+                        <id>eipcore-library-assembly</id>\n", 
            "+                        <phase>generate-test-resources</phase>\n", 
            "+                        <goals>\n", 
            "+                            <goal>attached</goal>\n", 
            "+                        </goals>\n", 
            "+                        <configuration>\n", 
            "+                            <finalName>synapse-eipcore-lib</finalName>\n", 
            "+                            <filters>\n", 
            "+                                <filter>\n", 
            "+                                    ${basedir}/src/test/resources/synapse-libraries/assembly/filter.properties\n", 
            "+                                </filter>\n", 
            "+                            </filters>\n", 
            "+                            <descriptors>\n", 
            "+                                <descriptor>src/test/resources/synapse-libraries/assembly/assemble-eipcore-lib.xml\n", 
            "+                                </descriptor>\n", 
            "+                            </descriptors>\n", 
            "+                        </configuration>\n", 
            "+                    </execution>\n", 
            "                 </executions>\n", 
            "             </plugin>\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-133,8 +152,10", 
          "lines": [
            "                                 <mkdir dir=\"target/test_repos/synapse/services\"/>\n", 
            "                                 <mkdir dir=\"target/test_repos/client/modules\"/>\n", 
            "                                 <mkdir dir=\"target/test_repos/synapse/synapse-libraries\"/>\n", 
            "+                                <mkdir dir=\"target/library_repos\"/>\n", 
            "                                 <copy file=\"target/synapse-test-lib.zip\" todir=\"target/test_repos/synapse/synapse-libraries\"/>\n", 
            "-                                <copy file=\"target/synapse-eip-lib.zip\" todir=\"target/test_repos/synapse/synapse-libraries\"/>\n", 
            "+                                <copy file=\"target/synapse-eiptest-lib.zip\" todir=\"target/test_repos/synapse/synapse-libraries\"/>\n", 
            "+                                <copy file=\"target/synapse-eipcore-lib.zip\" todir=\"target/library_repos\"/>\n", 
            "                             </tasks>\n", 
            "                         </configuration>\n", 
            "                         <goals>\n"
          ]
        }, 
        {
          "locn": "-147,7 +168,8", 
          "lines": [
            "                         <configuration>\n", 
            "                             <tasks>\n", 
            "                                 <delete file=\"target/synapse-test-lib.zip\"/>\n", 
            "-                                <delete file=\"target/synapse-eip-lib.zip\"/>\n", 
            "+                                <delete file=\"target/synapse-eiptest-lib.zip\"/>\n", 
            "+                                <delete file=\"target/synapse-eipcore-lib.zip\"/>\n", 
            "                             </tasks>\n", 
            "                         </configuration>\n", 
            "                         <goals>\n"
          ]
        }
      ], 
      "to": "java/modules/core/pom.xml", 
      "from": "java/modules/core/pom.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,28", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+                <!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Root artifact of EIP library shipped with the Apache Synapse -->\n", 
            "+<artifacts>\n", 
            "+    <artifact name=\"EipLibrary\" package=\"synapse.lang.eip\" >\n", 
            "+        <dependency artifact=\"systemManagement\" />\n", 
            "+        <dependency artifact=\"messageRouting\" />\n", 
            "+        <description>eip synapse library</description>\n", 
            "+    </artifact>\n", 
            "+</artifacts>\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/artifacts.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/artifacts.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,33", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+        <!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Callout Block library function template shipped with the Apache Synapse -->\n", 
            "+<template xmlns=\"http://ws.apache.org/ns/synapse\" name=\"callout_block\">\n", 
            "+    <parameter name=\"service_URL\"/>\n", 
            "+    <parameter name=\"action\" optional=\"true\"/>\n", 
            "+    <parameter name=\"source_xpath\" xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"  default=\"{{s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]}}\" optional=\"true\"/>\n", 
            "+    <parameter name=\"target_xpath\" xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"  default=\"{{s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]}}\" optional=\"true\"/>\n", 
            "+    <parameter name=\"source_key\" optional=\"true\"/>\n", 
            "+    <parameter name=\"target_key\" optional=\"true\"/>\n", 
            "+\n", 
            "+    <sequence>\n", 
            "+        <class name=\"org.apache.synapse.libraries.eip.CalloutBlockMediator\"/>\n", 
            "+    </sequence>\n", 
            "+</template>\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/template_callout_block.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/template_callout_block.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,33", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+        <!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Recipient List eip library function template shipped with the Apache Synapse -->\n", 
            "+<template xmlns=\"http://ws.apache.org/ns/synapse\" name=\"recipient_list\">\n", 
            "+    <parameter name=\"recipient_list\"/>\n", 
            "+    <sequence>\n", 
            "+        <send>\n", 
            "+            <endpoint>\n", 
            "+                <recipientlist>\n", 
            "+                    <endpoints value=\"{$func:recipient_list}\"/>\n", 
            "+                </recipientlist>\n", 
            "+            </endpoint>\n", 
            "+        </send>\n", 
            "+    </sequence>\n", 
            "+</template>\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/template_recipient_list.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/template_recipient_list.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,55", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+        <!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Scatter-Gather eip library function template shipped with the Apache Synapse -->\n", 
            "+<template xmlns=\"http://ws.apache.org/ns/synapse\" name=\"scatter_gather\">\n", 
            "+    <parameter name=\"recipient_list\"/>\n", 
            "+    <parameter name=\"aggregator_exp\"/>\n", 
            "+    <parameter name=\"oncomplete_seq_enabled\" default=\"false\" optional=\"true\"/>\n", 
            "+    <parameter name=\"sequence_ref\" optional=\"true\"/>\n", 
            "+    <sequence>\n", 
            "+        <in>\n", 
            "+        <send>\n", 
            "+            <endpoint>\n", 
            "+                <recipientlist>\n", 
            "+                    <endpoints value=\"{$func:recipient_list}\"/>\n", 
            "+                </recipientlist>\n", 
            "+            </endpoint>\n", 
            "+        </send>\n", 
            "+        </in>\n", 
            "+        <out>\n", 
            "+             <aggregate>\n", 
            "+                <completeCondition>\n", 
            "+                    <messageCount min=\"-1\" max=\"-1\"/>\n", 
            "+                </completeCondition>\n", 
            "+                <onComplete expression=\"$func:aggregator_exp\">\n", 
            "+                    <filter xpath=\"$func:oncomplete_seq_enabled='true'\">\n", 
            "+                        <then>\n", 
            "+                            <sequence key=\"{$func:sequence_ref}\"/>\n", 
            "+                        </then>\n", 
            "+                        <else>\n", 
            "+                            <send/>\n", 
            "+                        </else>\n", 
            "+                    </filter>\n", 
            "+                </onComplete>\n", 
            "+            </aggregate>\n", 
            "+        </out>\n", 
            "+    </sequence>\n", 
            "+</template>\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/template_scatter_gather.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/template_scatter_gather.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,59", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+        <!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Message routing sub artifact of EIP library shipped with the Apache Synapse -->\n", 
            "+<artifact name=\"messageRouting\" type=\"synapse/template\">\n", 
            "+\n", 
            "+    <subArtifacts>\n", 
            "+        <artifact name=\"recipient_list\">\n", 
            "+            <file>template_recipient_list.xml</file>\n", 
            "+            <description>Recipient List eip library function</description>\n", 
            "+        </artifact>\n", 
            "+        <artifact name=\"callout_block\">\n", 
            "+            <file>template_callout_block.xml</file>\n", 
            "+            <description>Callout Block eip library function</description>\n", 
            "+        </artifact>\n", 
            "+         <artifact name=\"scatter_gather\">\n", 
            "+            <file>template_scatter_gather.xml</file>\n", 
            "+            <description>Scatter-Gather eip library function</description>\n", 
            "+        </artifact>\n", 
            "+         <artifact name=\"dynamic_router\">\n", 
            "+            <file>template_dynamic_router.xml</file>\n", 
            "+            <description>Dynamic Router eip library function</description>\n", 
            "+        </artifact>\n", 
            "+         <artifact name=\"content_based_router\">\n", 
            "+            <file>template_content_based_router.xml</file>\n", 
            "+            <description>Content Based Router eip library function</description>\n", 
            "+        </artifact>\n", 
            "+        <artifact name=\"splitter\">\n", 
            "+            <file>template_splitter.xml</file>\n", 
            "+            <description>Splitter library function</description>\n", 
            "+        </artifact>\n", 
            "+        <artifact name=\"aggregator\">\n", 
            "+            <file>template_aggregator.xml</file>\n", 
            "+            <description>Aggregator library function</description>\n", 
            "+        </artifact>\n", 
            "+        <artifact name=\"splitter_aggregator\">\n", 
            "+            <file>template_splitter_aggregator.xml</file>\n", 
            "+            <description>Splitter_Aggregator library function</description>\n", 
            "+        </artifact>\n", 
            "+    </subArtifacts>\n", 
            "+\n", 
            "+</artifact>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/artifact.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/artifact.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,43", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+        <!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!--Aggregator eip library function template shipped with the Apache Synapse -->\n", 
            "+<template xmlns=\"http://ws.apache.org/ns/synapse\" name=\"aggregator\">\n", 
            "+    <parameter name=\"aggregator_exp\"/>\n", 
            "+    <parameter name=\"oncomplete_seq_enabled\" default=\"false\" optional=\"true\"/>\n", 
            "+    <parameter name=\"sequence_ref\" optional=\"true\"/>\n", 
            "+    <sequence>\n", 
            "+        <aggregate>\n", 
            "+            <completeCondition>\n", 
            "+                <messageCount min=\"-1\" max=\"-1\"/>\n", 
            "+            </completeCondition>\n", 
            "+            <onComplete expression=\"$func:aggregator_exp\">\n", 
            "+                <filter xpath=\"$func:oncomplete_seq_enabled='true'\">\n", 
            "+                    <then>\n", 
            "+                        <sequence key=\"{$func:sequence_ref}\"/>\n", 
            "+                    </then>\n", 
            "+                    <else>\n", 
            "+                        <send/>\n", 
            "+                    </else>\n", 
            "+                </filter>\n", 
            "+            </onComplete>\n", 
            "+        </aggregate>\n", 
            "+    </sequence>\n", 
            "+</template>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/template_aggregator.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/template_aggregator.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,27", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+        <!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Dynamic Router eip library function template shipped with the Apache Synapse -->\n", 
            "+<template xmlns=\"http://ws.apache.org/ns/synapse\" name=\"dynamic_router\">\n", 
            "+    <parameter name=\"conditions\"/>\n", 
            "+    <sequence>\n", 
            "+        <class name=\"org.apache.synapse.libraries.eip.DynamicRouterMediator\"/>\n", 
            "+    </sequence>\n", 
            "+</template>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/template_dynamic_router.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/template_dynamic_router.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,52", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+        <!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Splitter eip library function template shipped with the Apache Synapse -->\n", 
            "+<template xmlns=\"http://ws.apache.org/ns/synapse\" name=\"splitter\">\n", 
            "+    <parameter name=\"iterate_exp\"/>\n", 
            "+    <parameter name=\"attach_path\" optional=\"true\"/>\n", 
            "+    <parameter name=\"endpoint_uri\"/>\n", 
            "+    <parameter name=\"attach_path_enabled\" default=\"false\" optional=\"true\"/>\n", 
            "+    <sequence>\n", 
            "+        <filter xpath=\"$func:attach_path_enabled='true'\">\n", 
            "+            <then>\n", 
            "+                <iterate xmlns:ns=\"http://org.apache.synapse/xsd\" preservePayload=\"true\" attachPath=\"$func:attach_path\"\n", 
            "+                         expression=\"$func:iterate_exp\">\n", 
            "+                    <target>\n", 
            "+                        <sequence>\n", 
            "+                            <header name=\"To\" expression=\"$func:endpoint_uri\"/>\n", 
            "+                            <send/>\n", 
            "+                        </sequence>\n", 
            "+                    </target>\n", 
            "+                </iterate>\n", 
            "+            </then>\n", 
            "+            <else>\n", 
            "+                <iterate xmlns:ns=\"http://org.apache.synapse/xsd\" expression=\"$func:iterate_exp\">\n", 
            "+                    <target>\n", 
            "+                        <sequence>\n", 
            "+                            <header name=\"To\" expression=\"$func:endpoint_uri\"/>\n", 
            "+                            <send/>\n", 
            "+                        </sequence>\n", 
            "+                    </target>\n", 
            "+                </iterate>\n", 
            "+            </else>\n", 
            "+        </filter>\n", 
            "+    </sequence>\n", 
            "+</template>\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/template_splitter.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/template_splitter.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,28", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+        <!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Content Base Router eip library function template shipped with the Apache Synapse -->\n", 
            "+<template xmlns=\"http://ws.apache.org/ns/synapse\" name=\"content_based_router\">\n", 
            "+    <parameter name=\"routing_exp\"/>\n", 
            "+    <parameter name=\"match_content\"/>\n", 
            "+    <sequence>\n", 
            "+        <class name=\"org.apache.synapse.libraries.eip.ContentBasedRouterMediator\"/>\n", 
            "+    </sequence>\n", 
            "+</template>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/template_content_based_router.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/template_content_based_router.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,74", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+        <!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Splitter-Aggregator eip library function template shipped with the Apache Synapse -->\n", 
            "+<template xmlns=\"http://ws.apache.org/ns/synapse\" name=\"splitter_aggregator\">\n", 
            "+    <parameter name=\"iterate_exp\"/>\n", 
            "+    <parameter name=\"attach_path\" optional=\"true\"/>\n", 
            "+    <parameter name=\"aggregator_exp\"/>\n", 
            "+    <parameter name=\"endpoint_uri\"/>\n", 
            "+    <parameter name=\"sequence_ref\" optional=\"true\"/>\n", 
            "+    <parameter name=\"attach_path_enabled\" default=\"false\" optional=\"true\"/>\n", 
            "+    <parameter name=\"oncomplete_seq_enabled\" default=\"false\" optional=\"true\"/>\n", 
            "+    <sequence>\n", 
            "+        <in>\n", 
            "+            <filter xpath=\"$func:attach_path_enabled='true'\">\n", 
            "+                <then>\n", 
            "+                    <iterate xmlns:ns=\"http://org.apache.synapse/xsd\" preservePayload=\"true\"\n", 
            "+                             attachPath=\"$func:attach_path\" expression=\"$func:iterate_exp\">\n", 
            "+                        <target>\n", 
            "+                            <sequence>\n", 
            "+                                <header name=\"To\" expression=\"$func:endpoint_uri\"/>\n", 
            "+                                <send/>\n", 
            "+                            </sequence>\n", 
            "+                        </target>\n", 
            "+                    </iterate>\n", 
            "+                </then>\n", 
            "+                <else>\n", 
            "+                    <iterate xmlns:ns=\"http://org.apache.synapse/xsd\" expression=\"$func:iterate_exp\">\n", 
            "+                        <target>\n", 
            "+                            <sequence>\n", 
            "+                                <header name=\"To\" expression=\"$func:endpoint_uri\"/>\n", 
            "+                                <send/>\n", 
            "+                            </sequence>\n", 
            "+                        </target>\n", 
            "+                    </iterate>\n", 
            "+                </else>\n", 
            "+            </filter>\n", 
            "+        </in>\n", 
            "+        <out>\n", 
            "+            <aggregate>\n", 
            "+                <completeCondition>\n", 
            "+                    <messageCount min=\"-1\" max=\"-1\"/>\n", 
            "+                </completeCondition>\n", 
            "+                <onComplete expression=\"$func:aggregator_exp\">\n", 
            "+                    <filter xpath=\"$func:oncomplete_seq_enabled='true'\">\n", 
            "+                        <then>\n", 
            "+                            <sequence key=\"{$func:sequence_ref}\"/>\n", 
            "+                        </then>\n", 
            "+                        <else>\n", 
            "+                            <send/>\n", 
            "+                        </else>\n", 
            "+                    </filter>\n", 
            "+                </onComplete>\n", 
            "+            </aggregate>\n", 
            "+        </out>\n", 
            "+    </sequence>\n", 
            "+</template>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/template_splitter_aggregator.xml", 
      "from": "java/modules/core/src/test/resources/synapse-libraries/synapse-eipcore-lib/eip_messageRouting/template_splitter_aggregator.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-15,7 +15,7", 
          "lines": [
            "     protected String getResourcePath() {\n", 
            "         try {\n", 
            "             if (path == null) {\n", 
            "-                path = new File(\"./target/test_repos/synapse/synapse-libraries/synapse-eip-lib.zip\").getAbsolutePath();\n", 
            "+                path = new File(\"./target/test_repos/synapse/synapse-libraries/synapse-eiptest-lib.zip\").getAbsolutePath();\n", 
            "             }\n", 
            "         } catch (Exception e) {\n", 
            "             return null;\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/libraries/eip/AbstractEipLibTestCase.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/libraries/eip/AbstractEipLibTestCase.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,379", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.libraries.eip;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axiom.om.OMNode;\n", 
            "+import org.apache.axiom.soap.SOAPHeader;\n", 
            "+import org.apache.axis2.AxisFault;\n", 
            "+import org.apache.axis2.Constants;\n", 
            "+import org.apache.axis2.addressing.AddressingConstants;\n", 
            "+import org.apache.axis2.addressing.EndpointReference;\n", 
            "+import org.apache.axis2.client.Options;\n", 
            "+import org.apache.axis2.client.ServiceClient;\n", 
            "+import org.apache.axis2.context.ConfigurationContext;\n", 
            "+import org.apache.axis2.context.ConfigurationContextFactory;\n", 
            "+import org.apache.axis2.description.Parameter;\n", 
            "+import org.apache.axis2.transport.http.HTTPConstants;\n", 
            "+import org.apache.synapse.*;\n", 
            "+import org.apache.synapse.core.SynapseEnvironment;\n", 
            "+import org.apache.synapse.core.axis2.Axis2MessageContext;\n", 
            "+import org.apache.synapse.mediators.AbstractMediator;\n", 
            "+import org.apache.synapse.util.MessageHelper;\n", 
            "+import org.apache.synapse.util.xpath.SynapseXPath;\n", 
            "+import org.jaxen.JaxenException;\n", 
            "+\n", 
            "+import java.util.Iterator;\n", 
            "+import java.util.List;\n", 
            "+\n", 
            "+/*\n", 
            "+ *This pattern blocks external service invocation during mediation.The list of endpoints through\n", 
            "+ *which the message should pass will be given at the design time via callout blocks.\n", 
            "+ *Each time the message returns from an endpoint, it will proceed to next callout block defined.\n", 
            "+ */\n", 
            "+\n", 
            "+public class CalloutBlockMediator extends AbstractMediator implements ManagedLifecycle {\n", 
            "+\n", 
            "+    private ThreadLocal<String> serviceURL = new ThreadLocal<String>();\n", 
            "+    private ThreadLocal<String> action = new ThreadLocal<String>();\n", 
            "+    private ThreadLocal<String> requestKey = new ThreadLocal<String>();\n", 
            "+    private ThreadLocal<SynapseXPath> requestXPath = new ThreadLocal<SynapseXPath>();\n", 
            "+    private ThreadLocal<SynapseXPath> targetXPath = new ThreadLocal<SynapseXPath>();\n", 
            "+    private ThreadLocal<String> targetKey = new ThreadLocal<String>();\n", 
            "+\n", 
            "+    private ConfigurationContext configCtx = null;\n", 
            "+    private String clientRepository = null;\n", 
            "+    private String axis2xml = null;\n", 
            "+    private boolean passHeaders = false;\n", 
            "+    public final static String DEFAULT_CLIENT_REPO = \"./samples/axis2Client/client_repo\";\n", 
            "+    public final static String DEFAULT_AXIS2_XML = \"./samples/axis2Client/client_repo/conf/axis2.xml\";\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Blocks external service invocation\n", 
            "+     *\n", 
            "+     * @param synCtx the current message for mediation\n", 
            "+     * @return true\n", 
            "+     */\n", 
            "+    public boolean mediate(MessageContext synCtx) {\n", 
            "+\n", 
            "+        SynapseLog synLog = getLog(synCtx);\n", 
            "+\n", 
            "+        if (synLog.isTraceOrDebugEnabled()) {\n", 
            "+            synLog.traceOrDebug(\"Start : Callout mediator\");\n", 
            "+\n", 
            "+            if (synLog.isTraceTraceEnabled()) {\n", 
            "+                synLog.traceTrace(\"Message : \" + synCtx.getEnvelope());\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        initParams(synCtx);\n", 
            "+\n", 
            "+\n", 
            "+        try {\n", 
            "+            ServiceClient sc = new ServiceClient(configCtx, null);\n", 
            "+            Options options = new Options();\n", 
            "+            options.setTo(new EndpointReference(getServiceURL()));\n", 
            "+\n", 
            "+            if (getAction() != null) {\n", 
            "+                options.setAction(getAction());\n", 
            "+            } else {\n", 
            "+                if (synCtx.isSOAP11()) {\n", 
            "+                    options.setProperty(Constants.Configuration.DISABLE_SOAP_ACTION, true);\n", 
            "+                } else {\n", 
            "+                    Axis2MessageContext axis2smc = (Axis2MessageContext) synCtx;\n", 
            "+                    org.apache.axis2.context.MessageContext axis2MessageCtx =\n", 
            "+                            axis2smc.getAxis2MessageContext();\n", 
            "+                    axis2MessageCtx.getTransportOut().addParameter(\n", 
            "+                            new Parameter(HTTPConstants.OMIT_SOAP_12_ACTION, true));\n", 
            "+                }\n", 
            "+            }\n", 
            "+\n", 
            "+            if (passHeaders) {\n", 
            "+                SOAPHeader header = synCtx.getEnvelope().getHeader();\n", 
            "+                if (header != null) {\n", 
            "+                    Iterator headerElements = header.cloneOMElement().getChildElements();\n", 
            "+                    while (headerElements.hasNext()) {\n", 
            "+                        sc.addHeader((OMElement) headerElements.next());\n", 
            "+                    }\n", 
            "+                }\n", 
            "+            }\n", 
            "+\n", 
            "+            options.setProperty(\n", 
            "+                    AddressingConstants.DISABLE_ADDRESSING_FOR_OUT_MESSAGES, Boolean.TRUE);\n", 
            "+            sc.setOptions(options);\n", 
            "+\n", 
            "+            OMElement request = getRequestPayload(synCtx);\n", 
            "+            if (synLog.isTraceOrDebugEnabled()) {\n", 
            "+                synLog.traceOrDebug(\"About to invoke service : \" + getServiceURL() + (getAction() != null ?\n", 
            "+                        \" with action : \" + getAction() : \"\"));\n", 
            "+                if (synLog.isTraceTraceEnabled()) {\n", 
            "+                    synLog.traceTrace(\"Request message payload : \" + request);\n", 
            "+                }\n", 
            "+            }\n", 
            "+\n", 
            "+            OMElement result = null;\n", 
            "+            try {\n", 
            "+                options.setCallTransportCleanup(true);\n", 
            "+                result = sc.sendReceive(request);\n", 
            "+            } catch (AxisFault axisFault) {\n", 
            "+                handleFault(synCtx, axisFault);\n", 
            "+            }\n", 
            "+\n", 
            "+            if (synLog.isTraceTraceEnabled()) {\n", 
            "+                synLog.traceTrace(\"Response payload received : \" + result);\n", 
            "+            }\n", 
            "+\n", 
            "+            if (result != null) {\n", 
            "+                if (getTargetXPath() != null) {\n", 
            "+                    Object o = getTargetXPath().evaluate(synCtx);\n", 
            "+\n", 
            "+                    if (o != null && o instanceof OMElement) {\n", 
            "+                        OMNode tgtNode = (OMElement) o;\n", 
            "+                        tgtNode.insertSiblingAfter(result);\n", 
            "+                        tgtNode.detach();\n", 
            "+                    } else if (o != null && o instanceof List && !((List) o).isEmpty()) {\n", 
            "+                        // Always fetches *only* the first\n", 
            "+                        OMNode tgtNode = (OMElement) ((List) o).get(0);\n", 
            "+                        tgtNode.insertSiblingAfter(result);\n", 
            "+                        tgtNode.detach();\n", 
            "+                    } else {\n", 
            "+                        handleException(\"Evaluation of target XPath expression : \" +\n", 
            "+                                getTargetXPath().toString() + \" did not yeild an OMNode\", synCtx);\n", 
            "+                    }\n", 
            "+                }\n", 
            "+                if (getTargetKey() != null) {\n", 
            "+                    synCtx.setProperty(getTargetKey(), result);\n", 
            "+                }\n", 
            "+            } else {\n", 
            "+                synLog.traceOrDebug(\"Service returned a null response\");\n", 
            "+            }\n", 
            "+\n", 
            "+        } catch (AxisFault e) {\n", 
            "+            handleException(\"Error invoking service : \" + getServiceURL() +\n", 
            "+                    (getAction() != null ? \" with action : \" + getAction() : \"\"), e, synCtx);\n", 
            "+        } catch (JaxenException e) {\n", 
            "+            handleException(\"Error while evaluating the XPath expression: \" + getTargetXPath(),\n", 
            "+                    e, synCtx);\n", 
            "+        }\n", 
            "+\n", 
            "+        synLog.traceOrDebug(\"End : Callout mediator\");\n", 
            "+        return true;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Initialize parameters via the values fetched from templates\n", 
            "+     * @param synCtx MessageContext\n", 
            "+     */\n", 
            "+    private void initParams(MessageContext synCtx) {\n", 
            "+\n", 
            "+        String serURL = (String) EIPUtils.lookupFunctionParam(synCtx, \"service_URL\");\n", 
            "+\n", 
            "+        if (serURL != null && !serURL.trim().equals(\"\")) {\n", 
            "+            setServiceURL(serURL);\n", 
            "+        } else {\n", 
            "+            handleException(\"The 'serviceURL' attribute is required for the Callout mediator\", synCtx);\n", 
            "+        }\n", 
            "+\n", 
            "+        String soapAction = (String) EIPUtils.lookupFunctionParam(synCtx, \"action\");\n", 
            "+\n", 
            "+        if (soapAction != null && !soapAction.trim().equals(\"\")) {\n", 
            "+            setAction(soapAction);\n", 
            "+        }\n", 
            "+\n", 
            "+        Object sXpath = EIPUtils.lookupFunctionParam(synCtx, \"source_xpath\");\n", 
            "+        Object sKey = EIPUtils.lookupFunctionParam(synCtx, \"source_key\");\n", 
            "+\n", 
            "+        if (sXpath != null && sXpath instanceof SynapseXPath) {\n", 
            "+            try {\n", 
            "+                setRequestXPath((SynapseXPath) sXpath);\n", 
            "+            } catch (JaxenException e) {\n", 
            "+                handleException(\"Invalid source XPath  \",synCtx);\n", 
            "+            }\n", 
            "+        } else if (sKey != null) {\n", 
            "+            setRequestKey((String) sKey);\n", 
            "+        } else {\n", 
            "+            handleException(\"The message 'source' must be specified for a Callout mediator\", synCtx);\n", 
            "+        }\n", 
            "+\n", 
            "+        Object tXpath = EIPUtils.lookupFunctionParam(synCtx, \"target_xpath\");\n", 
            "+        Object tKey = EIPUtils.lookupFunctionParam(synCtx, \"target_key\");\n", 
            "+\n", 
            "+        if (tXpath != null && tXpath instanceof SynapseXPath) {\n", 
            "+            try {\n", 
            "+                setTargetXPath((SynapseXPath) tXpath);\n", 
            "+            } catch (JaxenException e) {\n", 
            "+                handleException(\"Invalid target XPath  \",synCtx);\n", 
            "+            }\n", 
            "+        } else if (tKey != null) {\n", 
            "+            setTargetKey((String) tKey);\n", 
            "+        } else {\n", 
            "+            handleException(\"The message 'target' must be specified for a Callout mediator\", synCtx);\n", 
            "+        }\n", 
            "+\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Fault Handler\n", 
            "+     * @param synCtx MessageContext\n", 
            "+     * @param axisFault AxisFault\n", 
            "+     */\n", 
            "+    private void handleFault(MessageContext synCtx, AxisFault axisFault) {\n", 
            "+        synCtx.setProperty(SynapseConstants.SENDING_FAULT, Boolean.TRUE);\n", 
            "+        if (axisFault.getFaultCodeElement() != null) {\n", 
            "+            synCtx.setProperty(SynapseConstants.ERROR_CODE,\n", 
            "+                    axisFault.getFaultCodeElement().getText());\n", 
            "+        } else {\n", 
            "+            synCtx.setProperty(SynapseConstants.ERROR_CODE,\n", 
            "+                    SynapseConstants.CALLOUT_OPERATION_FAILED);\n", 
            "+        }\n", 
            "+\n", 
            "+        if (axisFault.getFaultReasonElement() != null) {\n", 
            "+            synCtx.setProperty(SynapseConstants.ERROR_MESSAGE,\n", 
            "+                    axisFault.getFaultReasonElement().getText());\n", 
            "+        } else {\n", 
            "+            synCtx.setProperty(SynapseConstants.ERROR_MESSAGE, \"Error while performing \" +\n", 
            "+                    \"the callout operation\");\n", 
            "+        }\n", 
            "+\n", 
            "+        if (axisFault.getFaultDetailElement() != null) {\n", 
            "+            if (axisFault.getFaultDetailElement().getFirstElement() != null) {\n", 
            "+                synCtx.setProperty(SynapseConstants.ERROR_DETAIL,\n", 
            "+                        axisFault.getFaultDetailElement().getFirstElement());\n", 
            "+            } else {\n", 
            "+                synCtx.setProperty(SynapseConstants.ERROR_DETAIL,\n", 
            "+                        axisFault.getFaultDetailElement().getText());\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        synCtx.setProperty(SynapseConstants.ERROR_EXCEPTION, axisFault);\n", 
            "+        throw new SynapseException(\"Error while performing the callout operation\", axisFault);\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     *\n", 
            "+     * @param synCtx MessageContext\n", 
            "+     * @return null\n", 
            "+     * @throws AxisFault\n", 
            "+     */\n", 
            "+    private OMElement getRequestPayload(MessageContext synCtx) throws AxisFault {\n", 
            "+\n", 
            "+        if (getRequestKey() != null) {\n", 
            "+            Object request = synCtx.getProperty(getRequestKey());\n", 
            "+            if (request == null) {\n", 
            "+                request = synCtx.getEntry(getRequestKey());\n", 
            "+            }\n", 
            "+            if (request != null && request instanceof OMElement) {\n", 
            "+                return (OMElement) request;\n", 
            "+            } else {\n", 
            "+                handleException(\"The property : \" + getRequestKey() + \" is not an OMElement\", synCtx);\n", 
            "+            }\n", 
            "+        } else if (getRequestXPath() != null) {\n", 
            "+            try {\n", 
            "+                Object o = getRequestXPath().evaluate(MessageHelper.cloneMessageContext(synCtx));\n", 
            "+\n", 
            "+                if (o instanceof OMElement) {\n", 
            "+                    return (OMElement) o;\n", 
            "+                } else if (o instanceof List && !((List) o).isEmpty()) {\n", 
            "+                    return (OMElement) ((List) o).get(0);  // Always fetches *only* the first\n", 
            "+                } else {\n", 
            "+                    handleException(\"The evaluation of the XPath expression : \"\n", 
            "+                            + getRequestXPath().toString() + \" did not result in an OMElement\", synCtx);\n", 
            "+                }\n", 
            "+            } catch (JaxenException e) {\n", 
            "+                handleException(\"Error evaluating XPath expression : \"\n", 
            "+                        + getRequestXPath().toString(), e, synCtx);\n", 
            "+            }\n", 
            "+        }\n", 
            "+        return null;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Initialize synapse environment\n", 
            "+     * @param synEnv SynapseEnvironment\n", 
            "+     */\n", 
            "+    public void init(SynapseEnvironment synEnv) {\n", 
            "+        try {\n", 
            "+            configCtx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(\n", 
            "+                    clientRepository != null ? clientRepository : DEFAULT_CLIENT_REPO,\n", 
            "+                    axis2xml != null ? axis2xml : DEFAULT_AXIS2_XML);\n", 
            "+        } catch (AxisFault e) {\n", 
            "+            String msg = \"Error initializing callout mediator : \" + e.getMessage();\n", 
            "+            log.error(msg, e);\n", 
            "+            throw new SynapseException(msg, e);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void destroy() {\n", 
            "+        try {\n", 
            "+            configCtx.terminate();\n", 
            "+        } catch (AxisFault ignore) {\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setServiceURL(String serviceURL) {\n", 
            "+        this.serviceURL.set(serviceURL);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setAction(String action) {\n", 
            "+        this.action.set(action);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setRequestKey(String requestKey) {\n", 
            "+        this.requestKey.set(requestKey);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setRequestXPath(SynapseXPath requestXPath) throws JaxenException {\n", 
            "+        this.requestXPath.set(requestXPath);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setTargetXPath(SynapseXPath targetXPath) throws JaxenException {\n", 
            "+        this.targetXPath.set(targetXPath);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setTargetKey(String targetKey) {\n", 
            "+        this.targetKey.set(targetKey);\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getServiceURL() {\n", 
            "+        return serviceURL.get();\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getAction() {\n", 
            "+        return action.get();\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getRequestKey() {\n", 
            "+        return requestKey.get();\n", 
            "+    }\n", 
            "+\n", 
            "+    public SynapseXPath getRequestXPath() {\n", 
            "+        return requestXPath.get();\n", 
            "+    }\n", 
            "+\n", 
            "+    public SynapseXPath getTargetXPath() {\n", 
            "+        return targetXPath.get();\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getTargetKey() {\n", 
            "+        return targetKey.get();\n", 
            "+    }\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/libraries/eip/CalloutBlockMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/libraries/eip/CalloutBlockMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,293", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.libraries.eip;\n", 
            "+\n", 
            "+import org.apache.synapse.MessageContext;\n", 
            "+import org.apache.synapse.commons.evaluators.*;\n", 
            "+import org.apache.synapse.commons.evaluators.source.HeaderTextRetriever;\n", 
            "+import org.apache.synapse.commons.evaluators.source.SourceTextRetriever;\n", 
            "+import org.apache.synapse.commons.evaluators.source.URLTextRetriever;\n", 
            "+import org.apache.synapse.mediators.AbstractMediator;\n", 
            "+import org.apache.synapse.mediators.eip.Target;\n", 
            "+import org.apache.synapse.mediators.filters.router.ConditionalRoute;\n", 
            "+import org.apache.synapse.mediators.filters.router.ConditionalRouterMediator;\n", 
            "+\n", 
            "+import java.util.ArrayList;\n", 
            "+import java.util.List;\n", 
            "+import java.util.regex.Pattern;\n", 
            "+\n", 
            "+/*\n", 
            "+ *\n", 
            "+ * The Dynamic Router Mediator implements the Dynamic Router EIP ,\n", 
            "+ * this pattern route a message consecutively through a series of condition steps, which is parsed by the conditions parameter\n", 
            "+ * The list of sequences through which the message should pass is decided dynamically at run time.\n", 
            "+ * Checks whether the route condition evaluates to true and mediates using the given sequence\n", 
            "+ * Routing decision is based on the message contents such as HTTP url,HTTP headers or combination of both\n", 
            "+ */\n", 
            "+\n", 
            "+\n", 
            "+public class DynamicRouterMediator extends AbstractMediator {\n", 
            "+    private static final String DELIMITER_1 = \",\";\n", 
            "+    private static final String DELIMITER_2 = \";\";\n", 
            "+    private static final String DELIMITER_3 = \"=\";\n", 
            "+    private static final String DELIMITER_4 = \":\";\n", 
            "+    private static final String DELIMITER_5 = \"\\\\{AND}\";\n", 
            "+    private static final String DELIMITER_6 = \"\\\\{OR}\";\n", 
            "+    MessageContext synCtx;\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Route a message consecutively through a series of condition steps\n", 
            "+     *\n", 
            "+     * @param msgCtx the current message for mediation\n", 
            "+     * @return\n", 
            "+     */\n", 
            "+    public boolean mediate(MessageContext msgCtx) {\n", 
            "+        synCtx = msgCtx;\n", 
            "+        ConditionalRouterMediator conditionalRouterMediator = new ConditionalRouterMediator();\n", 
            "+        conditionalRouterMediator.setContinueAfter(false);\n", 
            "+        createDynamicRoute(msgCtx, conditionalRouterMediator);\n", 
            "+        conditionalRouterMediator.mediate(msgCtx);\n", 
            "+\n", 
            "+        return true;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Initialize dynamic route with the given String of parameters\n", 
            "+     *\n", 
            "+     * @param synCtx                    MessageContext\n", 
            "+     * @param conditionalRouterMediator ConditionalRouterMediator\n", 
            "+     * @return true\n", 
            "+     */\n", 
            "+    private boolean createDynamicRoute(MessageContext synCtx, ConditionalRouterMediator conditionalRouterMediator) {\n", 
            "+        String conditionRouts = (String) EIPUtils.lookupFunctionParam(synCtx, \"conditions\");\n", 
            "+        String[] conditionsSet = conditionRouts.split(DELIMITER_1);\n", 
            "+        if (conditionsSet.length == 0) {\n", 
            "+            log.warn(\"No Definitions found for dynamic routing\");\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+\n", 
            "+        ConditionalRoute conditionalRoute;\n", 
            "+\n", 
            "+        for (String conditionRoute : conditionsSet) {\n", 
            "+            if (conditionRoute != null && !\"\".equals(conditionRoute.trim())) {\n", 
            "+                conditionalRoute = createConRoute(conditionRoute.trim());\n", 
            "+                conditionalRouterMediator.addRoute(conditionalRoute);\n", 
            "+            }\n", 
            "+        }\n", 
            "+        return true;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Creates ConditionalRoute with given the String of parameters\n", 
            "+     *\n", 
            "+     * @param conRoute String of expression\n", 
            "+     * @return conditionalRoute ConditionalRoute\n", 
            "+     */\n", 
            "+    private ConditionalRoute createConRoute(String conRoute) {\n", 
            "+        ConditionalRoute conditionalRoute = new ConditionalRoute();\n", 
            "+        String[] conditionDefs = conRoute.split(DELIMITER_2);\n", 
            "+        conditionalRoute.setBreakRoute(false);\n", 
            "+        if (conditionDefs.length < 2) {\n", 
            "+            handleException(\"Conditional Route is not defined\", synCtx);\n", 
            "+            return null;\n", 
            "+        }\n", 
            "+\n", 
            "+        String condition = conditionDefs[0];\n", 
            "+        String target = conditionDefs[1];\n", 
            "+\n", 
            "+        if (condition != null && !\"\".equals(condition.trim())) {\n", 
            "+            createCondition(conditionalRoute, condition.trim());\n", 
            "+        } else {\n", 
            "+            handleException(\"Routing condition can not be empty\", synCtx);\n", 
            "+        }\n", 
            "+        if (target != null && !\"\".equals(target.trim())) {\n", 
            "+            createTarget(conditionalRoute, target);\n", 
            "+        } else {\n", 
            "+            handleException(\"Routing Target can not be empty\", synCtx);\n", 
            "+        }\n", 
            "+\n", 
            "+\n", 
            "+        return conditionalRoute;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Creates Condition parameter for ConditionalRoute\n", 
            "+     *\n", 
            "+     * @param conRoute  ConditionalRoute\n", 
            "+     * @param condition String expression\n", 
            "+     */\n", 
            "+    private void createCondition(ConditionalRoute conRoute, String condition) {\n", 
            "+\n", 
            "+\n", 
            "+        if (!condition.contains(\"{AND}\") && !condition.contains(\"{OR}\")) {\n", 
            "+            Evaluator evaluator = createMatchEvaluator(condition);\n", 
            "+            conRoute.setEvaluator(evaluator);\n", 
            "+        } else if (condition.contains(\"{AND}\") && !condition.contains(\"{OR}\")) {\n", 
            "+            Evaluator andEvaluator = createAndEvaluator(condition);\n", 
            "+            conRoute.setEvaluator(andEvaluator);\n", 
            "+        } else if (condition.contains(\"{OR}\") && !condition.contains(\"{AND}\")) {\n", 
            "+            Evaluator orEvaluator = createOrEvaluator(condition);\n", 
            "+            conRoute.setEvaluator(orEvaluator);\n", 
            "+        } else {\n", 
            "+            handleException(\"Routing condition is wrong\", synCtx);\n", 
            "+        }\n", 
            "+\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Creates Evaluator parameters for Condition\n", 
            "+     *\n", 
            "+     * @param matchElements String expression\n", 
            "+     * @return matchEvaluator Evaluator\n", 
            "+     */\n", 
            "+    private Evaluator createMatchEvaluator(String matchElements) {\n", 
            "+        String[] matchElem = matchElements.split(DELIMITER_3);\n", 
            "+\n", 
            "+        String matchValue = matchElem[0].trim();\n", 
            "+        String matchConfig = matchElem[1].trim();\n", 
            "+        MatchEvaluator matchEvaluator = new MatchEvaluator();\n", 
            "+        String[] matchParams = matchConfig.split(DELIMITER_4);\n", 
            "+\n", 
            "+        SourceTextRetriever textRetriever = null;\n", 
            "+        String regEx = null;\n", 
            "+        String source ;\n", 
            "+        if (matchParams.length == 1) {\n", 
            "+            regEx = matchParams[0].trim();\n", 
            "+            if (matchValue.equals(EvaluatorConstants.URL)) {\n", 
            "+                textRetriever = new URLTextRetriever();\n", 
            "+            }\n", 
            "+        } else if (matchParams.length == 2) {\n", 
            "+            source = matchParams[0].trim();\n", 
            "+\n", 
            "+            if (matchValue.equals(EvaluatorConstants.HEADER)) {\n", 
            "+                if (source != null) {\n", 
            "+                    textRetriever = new HeaderTextRetriever(source);\n", 
            "+                } else {\n", 
            "+                    handleException(EvaluatorConstants.SOURCE + \" attribute is required\", synCtx);\n", 
            "+                }\n", 
            "+            } else if (matchValue.equals(EvaluatorConstants.URL)) {\n", 
            "+                textRetriever = new URLTextRetriever();\n", 
            "+                if (source != null) {\n", 
            "+                    ((URLTextRetriever) textRetriever).setSource(source);\n", 
            "+                }\n", 
            "+            } else {\n", 
            "+                handleException(\"Unsupported evaluator:\" + matchValue, synCtx);\n", 
            "+            }\n", 
            "+\n", 
            "+            regEx = matchParams[1].trim();\n", 
            "+        } else {\n", 
            "+            handleException(\"Unsupported condition\" + matchConfig, synCtx);\n", 
            "+        }\n", 
            "+\n", 
            "+        matchEvaluator.setTextRetriever(textRetriever);\n", 
            "+\n", 
            "+        if (regEx == null) {\n", 
            "+            handleException(EvaluatorConstants.REGEX + \" attribute is required\", synCtx);\n", 
            "+            return null;\n", 
            "+        }\n", 
            "+        matchEvaluator.setRegex(Pattern.compile(regEx));\n", 
            "+\n", 
            "+        return matchEvaluator;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Creates AndEvaluator parameters for Condition\n", 
            "+     *\n", 
            "+     * @param andConfig String expression\n", 
            "+     * @return andEvaluator Evaluator\n", 
            "+     */\n", 
            "+    private Evaluator createAndEvaluator(String andConfig) {\n", 
            "+\n", 
            "+        String[] andEvals = andConfig.split(DELIMITER_5);\n", 
            "+        AndEvaluator andEvaluator = new AndEvaluator();\n", 
            "+        List<Evaluator> evaluators = new ArrayList<Evaluator>();\n", 
            "+\n", 
            "+        for (String matchElements : andEvals) {\n", 
            "+\n", 
            "+            if (matchElements != null && !\"\".equals(matchElements.trim())) {\n", 
            "+                Evaluator evaluator = createMatchEvaluator(matchElements.trim());\n", 
            "+                evaluators.add(evaluator);\n", 
            "+\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        if (evaluators.size() > 1) {\n", 
            "+            andEvaluator.setEvaluators(evaluators.toArray(new Evaluator[evaluators.size()]));\n", 
            "+\n", 
            "+        } else {\n", 
            "+            handleException(\"Two or more expressions should be provided under And\", synCtx);\n", 
            "+\n", 
            "+        }\n", 
            "+        return andEvaluator;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Creates OrEvaluator parameters for Condition\n", 
            "+     *\n", 
            "+     * @param orConfig String expression\n", 
            "+     * @return orEvaluator Evaluator\n", 
            "+     */\n", 
            "+    private Evaluator createOrEvaluator(String orConfig) {\n", 
            "+\n", 
            "+        String[] orEvals = orConfig.split(DELIMITER_6);\n", 
            "+        OrEvaluator orEvaluator = new OrEvaluator();\n", 
            "+        List<Evaluator> evaluators = new ArrayList<Evaluator>();\n", 
            "+\n", 
            "+        for (String matchElements : orEvals) {\n", 
            "+\n", 
            "+            if (matchElements != null && !\"\".equals(matchElements.trim())) {\n", 
            "+                Evaluator evaluator = createMatchEvaluator(matchElements.trim());\n", 
            "+                evaluators.add(evaluator);\n", 
            "+\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        if (evaluators.size() > 1) {\n", 
            "+            orEvaluator.setEvaluators(evaluators.toArray(new Evaluator[evaluators.size()]));\n", 
            "+        } else {\n", 
            "+            handleException(\"Two or more expressions should be provided under Or\", synCtx);\n", 
            "+\n", 
            "+        }\n", 
            "+        return orEvaluator;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Creates Target parameter for ConditionalRoute\n", 
            "+     *\n", 
            "+     * @param conRoute  ConditionalRoute\n", 
            "+     * @param targetVal String expression\n", 
            "+     */\n", 
            "+    private void createTarget(ConditionalRoute conRoute, String targetVal) {\n", 
            "+        Target target = new Target();\n", 
            "+        String[] elements = targetVal.split(DELIMITER_3);\n", 
            "+        String type = elements[0].trim();\n", 
            "+        String value = elements[1].trim();\n", 
            "+        if (type.equalsIgnoreCase(\"seq\")) {\n", 
            "+            target.setAsynchronous(false);\n", 
            "+            target.setSequenceRef(value);\n", 
            "+            conRoute.setTarget(target);\n", 
            "+        } else {\n", 
            "+            handleException(\"Target Sequence has defined wrong\", synCtx);\n", 
            "+        }\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/libraries/eip/DynamicRouterMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/libraries/eip/DynamicRouterMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,26", 
          "lines": [
            "+package org.apache.synapse.libraries.eip;\n", 
            "+\n", 
            "+import org.apache.synapse.MessageContext;\n", 
            "+import org.apache.synapse.SynapseConstants;\n", 
            "+import org.apache.synapse.mediators.template.TemplateContext;\n", 
            "+\n", 
            "+import java.util.Stack;\n", 
            "+\n", 
            "+/**\n", 
            "+ * This is an utility class to fetch parameter values parsed by call template mediators\n", 
            "+ */\n", 
            "+public class EIPUtils {\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Fetch parameter values parsed by call template mediators\n", 
            "+     * @param synCtx MessageContext\n", 
            "+     * @param paramName String name\n", 
            "+     * @return paramValue Object\n", 
            "+     */\n", 
            "+    public static Object lookupFunctionParam(MessageContext synCtx, String paramName) {\n", 
            "+        Stack<TemplateContext> funcStack = (Stack) synCtx.getProperty(SynapseConstants.SYNAPSE__FUNCTION__STACK);\n", 
            "+        TemplateContext currentFuncHolder = funcStack.peek();\n", 
            "+        Object paramValue = currentFuncHolder.getParameterValue(paramName);\n", 
            "+        return paramValue;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/libraries/eip/EIPUtils.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/libraries/eip/EIPUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,189", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.libraries.eip;\n", 
            "+\n", 
            "+import org.apache.synapse.MessageContext;\n", 
            "+import org.apache.synapse.SynapseException;\n", 
            "+import org.apache.synapse.config.xml.AnonymousListMediator;\n", 
            "+import org.apache.synapse.config.xml.SwitchCase;\n", 
            "+import org.apache.synapse.mediators.AbstractMediator;\n", 
            "+import org.apache.synapse.mediators.Value;\n", 
            "+import org.apache.synapse.mediators.base.SequenceMediator;\n", 
            "+import org.apache.synapse.mediators.filters.SwitchMediator;\n", 
            "+import org.apache.synapse.util.xpath.SynapseXPath;\n", 
            "+\n", 
            "+import java.util.regex.Pattern;\n", 
            "+import java.util.regex.PatternSyntaxException;\n", 
            "+\n", 
            "+/*\n", 
            "+ *\n", 
            "+ * Content Base Router Mediator implements the Content Base Router EIP,\n", 
            "+ * This pattern route messages to the appropriate sequence,\n", 
            "+ * according to the message contents.\n", 
            "+ * Routing decision is taken by matching given Xpath expression and RegEx\n", 
            "+ */\n", 
            "+public class ContentBasedRouterMediator extends AbstractMediator {\n", 
            "+    private static final String DELIMITER_1 = \";\";\n", 
            "+    private static final String DELIMITER_2 = \",\";\n", 
            "+    private static final String DELIMITER_3 = \":\";\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Route messages to the appropriate sequence according to the message contents\n", 
            "+     *\n", 
            "+     * @param messageContext the current message for mediation\n", 
            "+     * @return  true\n", 
            "+     */\n", 
            "+    public boolean mediate(MessageContext messageContext) {\n", 
            "+        SwitchMediator switchMediator = new SwitchMediator();\n", 
            "+        initParams(messageContext, switchMediator);\n", 
            "+        switchMediator.mediate(messageContext);\n", 
            "+        return true;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * For each message we build the routing mediators programmatically\n", 
            "+     *\n", 
            "+     * @param synCtx         MessageContext\n", 
            "+     * @param switchMediator SwitchMediator Object\n", 
            "+     */\n", 
            "+    private void initParams(MessageContext synCtx, SwitchMediator switchMediator) {\n", 
            "+        //fetch routung expression\n", 
            "+        Object sourceXpath = EIPUtils.lookupFunctionParam(synCtx, \"routing_exp\");\n", 
            "+        if (sourceXpath == null) {\n", 
            "+            String msg = \"A 'source' XPath attribute is required for a switch mediator\";\n", 
            "+            log.error(msg);\n", 
            "+            throw new SynapseException(msg);\n", 
            "+        } else {\n", 
            "+            try {\n", 
            "+                switchMediator.setSource((SynapseXPath) sourceXpath);\n", 
            "+            } catch (Exception e) {\n", 
            "+                String msg = \"Invalid XPath for attribute 'source'\";\n", 
            "+                log.error(msg);\n", 
            "+                throw new SynapseException(msg);\n", 
            "+            }\n", 
            "+        }\n", 
            "+        String matchContent = (String) EIPUtils.lookupFunctionParam(synCtx, \"match_content\");\n", 
            "+        String[] contentSet = matchContent.split(DELIMITER_1);\n", 
            "+        if (contentSet.length == 1) {\n", 
            "+            String caseItr = contentSet[0].trim();\n", 
            "+            createCases(switchMediator, caseItr);\n", 
            "+        } else if (contentSet.length == 2) {\n", 
            "+            String caseItr = contentSet[0].trim();\n", 
            "+            createCases(switchMediator, caseItr);\n", 
            "+\n", 
            "+            String caseDefault = contentSet[1].trim();\n", 
            "+            if (caseDefault == null || \"\".equals(caseDefault)) {\n", 
            "+                String msg = \"Default Sequence Reference is not defined\";\n", 
            "+                log.error(msg);\n", 
            "+            }\n", 
            "+            AnonymousListMediator mediator = new AnonymousListMediator();\n", 
            "+            SequenceMediator sequenceMediator = new SequenceMediator();\n", 
            "+            Value value = new Value(caseDefault);\n", 
            "+            sequenceMediator.setKey(value);\n", 
            "+            mediator.addChild(sequenceMediator);\n", 
            "+            SwitchCase defaultCase = new SwitchCase();\n", 
            "+            defaultCase.setCaseMediator(mediator);\n", 
            "+            switchMediator.setDefaultCase(defaultCase);\n", 
            "+\n", 
            "+        } else {\n", 
            "+            String msg = \"Invalid match content\";\n", 
            "+            log.error(msg);\n", 
            "+        }\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Creates cases for the switch mediator\n", 
            "+     *\n", 
            "+     * @param switchMediator SwitchMediator Object\n", 
            "+     * @param caseItr        String parameter for Cases\n", 
            "+     * @return true\n", 
            "+     */\n", 
            "+    private boolean createCases(SwitchMediator switchMediator, String caseItr) {\n", 
            "+        String[] caseSet = caseItr.split(DELIMITER_2);\n", 
            "+        if (caseSet.length == 0) {\n", 
            "+            log.warn(\"No Definitions found for dynamic routing\");\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+\n", 
            "+        SwitchCase aCase;\n", 
            "+        for (String newCase : caseSet) {\n", 
            "+            if (newCase != null && !\"\".equals(newCase.trim())) {\n", 
            "+                aCase = createCase(newCase.trim());\n", 
            "+                switchMediator.addCase(aCase);\n", 
            "+            } else {\n", 
            "+                String msg = \"Sequence Reference has not defined\";\n", 
            "+                log.error(msg);\n", 
            "+            }\n", 
            "+        }\n", 
            "+        return true;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Creates case Object for the switch mediator\n", 
            "+     *\n", 
            "+     * @param caseConfig String parameter for Case expression\n", 
            "+     * @return SwitchCase Object\n", 
            "+     */\n", 
            "+    private SwitchCase createCase(String caseConfig) {\n", 
            "+        SwitchCase aCase = new SwitchCase();\n", 
            "+        String[] caseAttr = caseConfig.split(DELIMITER_3);\n", 
            "+        String regEx = null;\n", 
            "+        String seqRef = null;\n", 
            "+\n", 
            "+        if (caseAttr.length == 2) {\n", 
            "+            regEx = caseAttr[0].trim();\n", 
            "+            seqRef = caseAttr[1].trim();\n", 
            "+        } else if (caseAttr.length == 1) {\n", 
            "+            regEx = caseAttr[0].trim();\n", 
            "+            seqRef = \"main\";\n", 
            "+        } else {\n", 
            "+            String msg = \"Unsupported routing condition\";\n", 
            "+            log.error(msg);\n", 
            "+        }\n", 
            "+\n", 
            "+        if (regEx == null || \"\".equals(regEx.trim())) {\n", 
            "+            String msg = \"The 'regex' attribute is required for a switch case definition\";\n", 
            "+            log.error(msg);\n", 
            "+            throw new SynapseException(msg);\n", 
            "+        }\n", 
            "+        try {\n", 
            "+            aCase.setRegex(Pattern.compile(regEx));\n", 
            "+        } catch (PatternSyntaxException pse) {\n", 
            "+            String msg = \"Invalid Regular Expression for attribute 'regex' : \" + regEx;\n", 
            "+            log.error(msg);\n", 
            "+            throw new SynapseException(msg);\n", 
            "+        }\n", 
            "+\n", 
            "+        if (seqRef == null || \"\".equals(seqRef.trim())) {\n", 
            "+            String msg = \"Sequence Reference has not defined\";\n", 
            "+            log.error(msg);\n", 
            "+\n", 
            "+        }\n", 
            "+        AnonymousListMediator mediator = new AnonymousListMediator();\n", 
            "+        SequenceMediator sequenceMediator = new SequenceMediator();\n", 
            "+        Value value = new Value(seqRef);\n", 
            "+        sequenceMediator.setKey(value);\n", 
            "+        mediator.addChild(sequenceMediator);\n", 
            "+        aCase.setCaseMediator(mediator);\n", 
            "+\n", 
            "+        return aCase;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/libraries/eip/ContentBasedRouterMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/libraries/eip/ContentBasedRouterMediator.java"
    }
  ], 
  "id": "1395449"
}