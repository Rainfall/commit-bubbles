{
  "when": "2016-05-28T16:52:04-04:00", 
  "message": "Fixing the support for FORCE_HTTP_CONTENT_LENGTH and COPY_CONTENT_LENGTH_FROM_INCOMING; Applying the patch from SYNAPSE-923", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-141,6 +141,10", 
          "lines": [
            "             headerMap.put(headerEntry.getKey(), headerEntry.getValue());\n", 
            "         }\n", 
            "         responseMsgCtx.setProperty(MessageContext.TRANSPORT_HEADERS, headerMap);\n", 
            "+        if (headerMap.get(HTTP.CONTENT_LEN) != null){\n", 
            "+            responseMsgCtx.setProperty(PassThroughConstants.ORIGINAL_CONTENT_LENGTH,\n", 
            "+                    headerMap.get(HTTP.CONTENT_LEN));\n", 
            "+        }\n", 
            " \n", 
            "         if (response.getStatus() == 202) {\n", 
            "             responseMsgCtx.setProperty(AddressingConstants.\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ClientWorker.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ClientWorker.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-359,6 +359,20", 
          "lines": [
            "     }\n", 
            " \n", 
            " \tprivate void sendRequestContent(final MessageContext msgContext) throws AxisFault {\n", 
            "+        // NOTE:this a special case where, when the backend service expects content-length but,\n", 
            "+        // we don't want the message to be built. If FORCE_HTTP_CONTENT_LENGTH and\n", 
            "+        // COPY_CONTENT_LENGTH_FROM_INCOMING, we assume that the content coming from the\n", 
            "+        // client side has not changed.\n", 
            "+        boolean forceContentLength = msgContext.isPropertyTrue(NhttpConstants.FORCE_HTTP_CONTENT_LENGTH);\n", 
            "+        boolean copyContentLength = msgContext.isPropertyTrue(PassThroughConstants.COPY_CONTENT_LENGTH_FROM_INCOMING);\n", 
            "+\n", 
            "+        if (forceContentLength && copyContentLength &&\n", 
            "+                msgContext.getProperty(PassThroughConstants.ORIGINAL_CONTENT_LENGTH) != null) {\n", 
            "+            long contentLength = Long.parseLong((String) msgContext.getProperty(\n", 
            "+                    PassThroughConstants.ORIGINAL_CONTENT_LENGTH));\n", 
            "+            msgContext.setProperty(PassThroughConstants.PASS_THROUGH_MESSAGE_LENGTH, contentLength);\n", 
            "+        }\n", 
            "+\n", 
            " \t\tif (Boolean.TRUE.equals(msgContext.getProperty(PassThroughConstants.MESSAGE_BUILDER_INVOKED))) {\n", 
            " \t\t\tsynchronized (msgContext) {\n", 
            " \t\t\t\twhile (!Boolean.TRUE.equals(msgContext.getProperty(\"READY2ROCK\")) &&\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-29,6 +29,7", 
          "lines": [
            " import org.apache.synapse.transport.passthru.SourceRequest;\n", 
            " import org.apache.synapse.transport.passthru.SourceResponse;\n", 
            " import org.apache.synapse.transport.passthru.config.SourceConfiguration;\n", 
            "+import org.apache.synapse.transport.passthru.PassThroughConstants;\n", 
            " \n", 
            " import java.util.HashMap;\n", 
            " import java.util.Map;\n"
          ]
        }, 
        {
          "locn": "-46,6 +47,14", 
          "lines": [
            " \n", 
            "         // set any transport headers\n", 
            "         Map transportHeaders = (Map) msgContext.getProperty(MessageContext.TRANSPORT_HEADERS);\n", 
            "+\n", 
            "+        if (msgContext.isPropertyTrue(NhttpConstants.FORCE_HTTP_CONTENT_LENGTH) &&\n", 
            "+                msgContext.isPropertyTrue(PassThroughConstants.COPY_CONTENT_LENGTH_FROM_INCOMING) &&\n", 
            "+                msgContext.getProperty(PassThroughConstants.ORIGINAL_CONTENT_LENGTH) != null) {\n", 
            "+            sourceResponse.addHeader(HTTP.CONTENT_LEN,\n", 
            "+                    (String) msgContext.getProperty(PassThroughConstants.ORIGINAL_CONTENT_LENGTH));\n", 
            "+        }\n", 
            "+\n", 
            "         if (transportHeaders != null) {\n", 
            "             addResponseHeader(sourceResponse, transportHeaders);\n", 
            "         } else {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/SourceResponseFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/SourceResponseFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-163,11 +163,19", 
          "lines": [
            " \n", 
            "             BasicHttpEntity entity = new BasicHttpEntity();\n", 
            " \n", 
            "-            if (contentLength != -1) {\n", 
            "+            if (requestMsgCtx.isPropertyTrue(NhttpConstants.FORCE_HTTP_CONTENT_LENGTH)) {\n", 
            "                 entity.setChunked(false);\n", 
            "-                entity.setContentLength(contentLength);\n", 
            "+                if (requestMsgCtx.isPropertyTrue(PassThroughConstants.COPY_CONTENT_LENGTH_FROM_INCOMING)\n", 
            "+                        && contentLength > 0) {\n", 
            "+                    entity.setContentLength(contentLength);\n", 
            "+                }\n", 
            "             } else {\n", 
            "-                entity.setChunked(chunk);\n", 
            "+                if (contentLength != -1) {\n", 
            "+                    entity.setChunked(false);\n", 
            "+                    entity.setContentLength(contentLength);\n", 
            "+                } else {\n", 
            "+                    entity.setChunked(chunk);\n", 
            "+                }\n", 
            "             }\n", 
            "             ((BasicHttpEntityEnclosingRequest) request).setEntity(entity);\n", 
            "            \n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-477,6 +477,10", 
          "lines": [
            "             headers.put(entry.getKey(), entry.getValue());\n", 
            "         }\n", 
            "         msgContext.setProperty(MessageContext.TRANSPORT_HEADERS, headers);\n", 
            "+        if (headers.get(HTTP.CONTENT_LEN) != null){\n", 
            "+            msgContext.setProperty(PassThroughConstants.ORIGINAL_CONTENT_LENGTH,\n", 
            "+                    headers.get(HTTP.CONTENT_LEN));\n", 
            "+        }\n", 
            " \n", 
            "         // Following section is required for throttling to work\n", 
            "         \n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ServerWorker.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ServerWorker.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-126,4 +126,6", 
          "lines": [
            " \t\n", 
            " \tpublic static final String GET_REQUEST_HANDLED = \"GET_REQUEST_HANDLED\";\n", 
            " \n", 
            "+    public static final String COPY_CONTENT_LENGTH_FROM_INCOMING=\"COPY_CONTENT_LENGTH_FROM_INCOMING\";\n", 
            "+    public static final String ORIGINAL_CONTENT_LENGTH =\"ORIGINAL_CONTENT_LENGTH\";\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughConstants.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughConstants.java"
    }
  ], 
  "id": "1745938"
}