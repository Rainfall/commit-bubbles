{
  "when": "2013-07-30T02:57:22-04:00", 
  "who": "rajikak", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-86,7 +86,6", 
          "lines": [
            "             this.responseMessage = responseMessage;\n", 
            "         }\n", 
            " \n", 
            "-        @Override\n", 
            "         public void run() {\n", 
            "             try {\n", 
            "                 channel.queueDeclare(queueName, false, false, false, null);\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPSimpleConsumerTask.java", 
      "from": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPSimpleConsumerTask.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-413,6 +413,12", 
          "lines": [
            " \n", 
            "     <dependencies>\n", 
            "         <dependency>\n", 
            "+            <groupId>com.rabbitmq</groupId>\n", 
            "+            <artifactId>amqp-client</artifactId>\n", 
            "+            <version>${rabbitmq.version}</version>\n", 
            "+            <scope>compile</scope>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "             <groupId>org.apache.synapse</groupId>\n", 
            "             <artifactId>synapse-core</artifactId>\n", 
            "         </dependency>\n"
          ]
        }
      ], 
      "to": "java/modules/samples/pom.xml", 
      "from": "java/modules/samples/pom.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,112", 
          "lines": [
            "+/*\n", 
            "+ * ====================================================================\n", 
            "+ * Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ * or more contributor license agreements.  See the NOTICE file\n", 
            "+ * distributed with this work for additional information\n", 
            "+ * regarding copyright ownership.  The ASF licenses this file\n", 
            "+ * to you under the Apache License, Version 2.0 (the\n", 
            "+ * \"License\"); you may not use this file except in compliance\n", 
            "+ * with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ * Unless required by applicable law or agreed to in writing,\n", 
            "+ * software distributed under the License is distributed on an\n", 
            "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ * KIND, either express or implied.  See the License for the\n", 
            "+ * specific language governing permissions and limitations\n", 
            "+ * under the License.\n", 
            "+ * ====================================================================\n", 
            "+ *\n", 
            "+ * This software consists of voluntary contributions made by many\n", 
            "+ * individuals on behalf of the Apache Software Foundation.  For more\n", 
            "+ * information on the Apache Software Foundation, please see\n", 
            "+ * <http://www.apache.org/>.\n", 
            "+ *\n", 
            "+ */\n", 
            "+package samples.userguide;\n", 
            "+\n", 
            "+import com.rabbitmq.client.Channel;\n", 
            "+import com.rabbitmq.client.Connection;\n", 
            "+import com.rabbitmq.client.ConnectionFactory;\n", 
            "+import com.rabbitmq.client.QueueingConsumer;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+\n", 
            "+/**\n", 
            "+ * A generic client for RabbitMQ\n", 
            "+ */\n", 
            "+public class RabbitMQAMQPClient {\n", 
            "+\n", 
            "+    public static void main(String[] args) throws IOException, InterruptedException {\n", 
            "+        String queueName = System.getProperty(\"queueName\");\n", 
            "+        String mode = System.getProperty(\"mode\");\n", 
            "+        String routingKey = System.getProperty(\"routingKey\");\n", 
            "+        String exchangeName = System.getProperty(\"exchangeName\");\n", 
            "+\n", 
            "+        String quote = System.getProperty(\"payLoad\");\n", 
            "+        if (quote == null) {\n", 
            "+            quote = \"IBM\";\n", 
            "+        }\n", 
            "+        String msg =\n", 
            "+                \"<m:placeOrder xmlns:m=\\\"http://services.samples\\\">\\n\" +\n", 
            "+                        \"    <m:order>\\n\" +\n", 
            "+                        \"        <m:price>\" + getRandom(100, 0.9, true) + \"</m:price>\\n\" +\n", 
            "+                        \"        <m:quantity>\" + (int) getRandom(10000, 1.0, true) + \"</m:quantity>\\n\" +\n", 
            "+                        \"        <m:symbol>\" + quote + \"</m:symbol>\\n\" +\n", 
            "+                        \"    </m:order>\\n\" +\n", 
            "+                        \"</m:placeOrder>\";\n", 
            "+\n", 
            "+\n", 
            "+        ConnectionFactory factory = new ConnectionFactory();\n", 
            "+        factory.setHost(\"localhost\");\n", 
            "+        Connection connection = factory.newConnection();\n", 
            "+\n", 
            "+        Channel channel = connection.createChannel();\n", 
            "+        channel.queueDeclare(queueName, false, false, false, null);\n", 
            "+\n", 
            "+\n", 
            "+        if (mode == null) {\n", 
            "+            mode = \"producer\";\n", 
            "+        }\n", 
            "+\n", 
            "+        if (\"producer\".equals(mode)) {\n", 
            "+            if (queueName != null) {\n", 
            "+                channel.basicPublish(\"\", queueName, null, msg.getBytes());\n", 
            "+            } else {\n", 
            "+                if (routingKey != null) {\n", 
            "+                    if (exchangeName == null) {\n", 
            "+                        exchangeName = \"topic-exchange\";\n", 
            "+                    }\n", 
            "+                    channel.basicPublish(exchangeName, routingKey, null, msg.getBytes());\n", 
            "+\n", 
            "+                } else {\n", 
            "+                    if (exchangeName == null) {\n", 
            "+                        exchangeName = \"subscriber-exchange\";\n", 
            "+                    }\n", 
            "+                    channel.basicPublish(exchangeName, \"\", null, msg.getBytes());\n", 
            "+                }\n", 
            "+            }\n", 
            "+        } else {\n", 
            "+            if (queueName == null) {\n", 
            "+                queueName = \"ConsumerProxy\";\n", 
            "+            }\n", 
            "+            QueueingConsumer consumer = new QueueingConsumer(channel);\n", 
            "+            channel.basicConsume(queueName, true, consumer);\n", 
            "+\n", 
            "+            QueueingConsumer.Delivery delivery = consumer.nextDelivery();\n", 
            "+            String message = new String(delivery.getBody());\n", 
            "+            System.out.println(\"[x] received '\" + message + \"'\");\n", 
            "+        }\n", 
            "+\n", 
            "+        channel.close();\n", 
            "+        connection.close();\n", 
            "+    }\n", 
            "+\n", 
            "+    private static double getRandom(double base, double varience, boolean onlypositive) {\n", 
            "+        double rand = Math.random();\n", 
            "+        return (base + ((rand > 0.5 ? 1 : -1) * varience * base * rand))\n", 
            "+                * (onlypositive ? 1 : (rand > 0.5 ? 1 : -1));\n", 
            "+    }\n", 
            "+\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/samples/src/main/java/samples/userguide/RabbitMQAMQPClient.java", 
      "from": "java/modules/samples/src/main/java/samples/userguide/RabbitMQAMQPClient.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-119,6 +119,16", 
          "lines": [
            "         ant jsonclient\n", 
            "             [-Daddurl=http://localhost:8280/services/JSONProxy]\n", 
            "             [-Dsymbol=DELL]\n", 
            "+\n", 
            "+    ant rabbitmqclient\n", 
            "+        A simple client for RabbitMQ AMQP broker.\n", 
            "+\n", 
            "+        examples:\n", 
            "+        ant rabbitmqclient [-Damqpmode=consumer] [-DqueueName=ConsumerProxy] [-DpayLoad=IBM]\n", 
            "+        ant rabbitmqclient [-Damqpmode=producer] [-DqueueName=ConsumerProxy] [-DpayLoad=IBM]\n", 
            "+        ant rabbitmqclient [-Damqpmode=producer] [-DexchangeName=subscriber-exchange] [-DpayLoad=IBM]\n", 
            "+        ant rabbitmqclient [-Damqpmode=producer] [-DexchangeName=topic-exchange] [-DroutingKey=kern.critical] [-DpayLoad=IBM]\n", 
            "+\n", 
            "     </echo>\n", 
            "     </target>\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-159,7 +169,11", 
          "lines": [
            "     <property name=\"topicns\" value=\"\"/>\n", 
            "     <property name=\"mode\" value=\"\"/>\n", 
            "     <property name=\"identifier\" value=\"\"/>\n", 
            "-    <property name=\"expires\" value=\"\"/>\n", 
            "+    <property name=\"amqpmode\" value=\"\"/>\n", 
            "+    <property name=\"queueName\" value=\"\"/>\n", 
            "+    <property name=\"payLoad\" value=\"\"/>\n", 
            "+    <property name=\"exchangeName\" value=\"\"/>\n", 
            "+    <property name=\"routingKey\" value=\"\"/>\n", 
            " \n", 
            "     <target name=\"clean\">\n", 
            "         <delete dir=\"target\" quiet=\"true\"/>\n"
          ]
        }, 
        {
          "locn": "-242,6 +256,17", 
          "lines": [
            "         </java>\n", 
            "     </target>\n", 
            " \n", 
            "+    <target name=\"rabbitmqclient\" depends=\"compile\">\n", 
            "+        <java classname=\"samples.userguide.RabbitMQAMQPClient\"\n", 
            "+              classpathref=\"javac.classpath\" fork=\"true\">\n", 
            "+            <sysproperty key=\"amqpmode\"    value=\"${amqpmode}\"/>\n", 
            "+            <sysproperty key=\"queueName\"    value=\"${queueName}\"/>\n", 
            "+            <sysproperty key=\"payLoad\" value=\"${payLoad}\"/>\n", 
            "+            <sysproperty key=\"exchangeName\" value=\"${exchangeName}\"/>\n", 
            "+            <sysproperty key=\"routingKey\" value=\"${routingKey}\"/>\n", 
            "+        </java>\n", 
            "+    </target>\n", 
            "+\n", 
            "     <target name=\"fixclient\" depends=\"compile\">\n", 
            "         <java classname=\"samples.userguide.FIXClient\"\n", 
            "              classpathref=\"javac.classpath\" fork=\"true\">\n"
          ]
        }
      ], 
      "to": "java/modules/samples/src/main/scripts/axis2Client/build.xml", 
      "from": "java/modules/samples/src/main/scripts/axis2Client/build.xml"
    }
  ], 
  "id": "1508322"
}