{
  "when": "2016-05-29T15:28:02-04:00", 
  "who": "dushan", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-118,9 +118,8", 
          "lines": [
            "                                              boolean preserveServerHeader,\n", 
            "                                              boolean preserveUserAgentHeader) {\n", 
            "         Map headers = (Map) msgContext.getProperty(MessageContext.TRANSPORT_HEADERS);\n", 
            "-        Map excessHeaders = (Map) msgContext.getProperty(NhttpConstants.EXCESS_TRANSPORT_HEADERS);\n", 
            "+\t\tMap excessHeaders = (Map) msgContext.getProperty(NhttpConstants.EXCESS_TRANSPORT_HEADERS);\n", 
            " \n", 
            "-\n", 
            "         if (headers == null || headers.isEmpty()) {\n", 
            "             return;\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/PassThroughTransportUtils.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/PassThroughTransportUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-129,17 +129,17", 
          "lines": [
            "                 request.setFullUrl(true);                \n", 
            "             }\n", 
            "             \n", 
            "-            // Add excess respsonse header.\n", 
            "-            String excessProp = NhttpConstants.EXCESS_TRANSPORT_HEADERS;\n", 
            "-            Map excessHeaders = (Map) msgContext.getProperty(excessProp);\n", 
            "-            if (excessHeaders != null) {\n", 
            "-                    for (Iterator iterator = excessHeaders.keySet().iterator(); iterator.hasNext();) {\n", 
            "-                            String key = (String) iterator.next();\n", 
            "-                            for (String excessVal : (Collection<String>) excessHeaders.get(key)) {\n", 
            "-                                    request.addHeader(key, (String) excessVal);\n", 
            "-                            }\n", 
            "-                    }\n", 
            "-            }\n", 
            "+\t\t\t// Add excess respsonse header.\n", 
            "+\t\t\tString excessProp = NhttpConstants.EXCESS_TRANSPORT_HEADERS;\n", 
            "+\t\t\tMap excessHeaders = (Map) msgContext.getProperty(excessProp);\n", 
            "+\t\t\tif (excessHeaders != null) {\n", 
            "+\t\t\t\tfor (Iterator iterator = excessHeaders.keySet().iterator(); iterator.hasNext();) {\n", 
            "+\t\t\t\t\tString key = (String) iterator.next();\n", 
            "+\t\t\t\t\tfor (String excessVal : (Collection<String>) excessHeaders.get(key)) {\n", 
            "+\t\t\t\t\t\trequest.addHeader(key, (String) excessVal);\n", 
            "+\t\t\t\t\t}\n", 
            "+\t\t\t\t}\n", 
            "+\t\t\t}\n", 
            " \n", 
            "             return request;\n", 
            "         } catch (MalformedURLException e) {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/TargetRequestFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/TargetRequestFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-62,9 +62,9", 
          "lines": [
            " \n", 
            "     private Pipe pipe = null;\n", 
            " \n", 
            "-    /** Headers map */\n", 
            "-    private Map<String, TreeSet<String>> headers = new HashMap<String, TreeSet<String>>();\n", 
            "-    \n", 
            "+\t/** Headers map */\n", 
            "+\tprivate Map<String, TreeSet<String>> headers = new HashMap<String, TreeSet<String>>();\n", 
            "+\n", 
            "     /** URL */\n", 
            "     private URL url;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-129,14 +129,14", 
          "lines": [
            "         long contentLength = -1;\n", 
            "         String contentLengthHeader = null;\n", 
            "         \n", 
            "-        if(headers.get(HTTP.CONTENT_LEN) != null && headers.get(HTTP.CONTENT_LEN).size() > 0) {\n", 
            "-\t        contentLengthHeader = headers.get(HTTP.CONTENT_LEN).first();\n", 
            "-\t    }\n", 
            "-         \n", 
            "-        if (contentLengthHeader != null) {\n", 
            "-            contentLength = Integer.parseInt(contentLengthHeader);\n", 
            "-            headers.remove(HTTP.CONTENT_LEN);\n", 
            "-        }\n", 
            "+\t\tif (headers.get(HTTP.CONTENT_LEN) != null && headers.get(HTTP.CONTENT_LEN).size() > 0) {\n", 
            "+\t\t\tcontentLengthHeader = headers.get(HTTP.CONTENT_LEN).first();\n", 
            "+\t\t}\n", 
            "+\n", 
            "+\t\tif (contentLengthHeader != null) {\n", 
            "+\t\t\tcontentLength = Integer.parseInt(contentLengthHeader);\n", 
            "+\t\t\theaders.remove(HTTP.CONTENT_LEN);\n", 
            "+\t\t}\n", 
            "   \n", 
            "         \n", 
            "         MessageContext requestMsgCtx = TargetContext.get(conn).getRequestMsgCtx();\n"
          ]
        }, 
        {
          "locn": "-193,15 +193,15", 
          "lines": [
            "         }\n", 
            " \n", 
            "         \n", 
            "-        Set<Map.Entry<String, TreeSet<String>>> entries = headers.entrySet();\n", 
            "-        for (Map.Entry<String, TreeSet<String>> entry : entries) {\n", 
            "-             if (entry.getKey() != null) {\n", 
            "-                Iterator<String> i = entry.getValue().iterator();\n", 
            "-                 while(i.hasNext()) {\n", 
            "-                        request.addHeader(entry.getKey(), i.next());\n", 
            "-                 }\n", 
            "-             }\n", 
            "-         }\n", 
            "+\t\tSet<Map.Entry<String, TreeSet<String>>> entries = headers.entrySet();\n", 
            "+\t\tfor (Map.Entry<String, TreeSet<String>> entry : entries) {\n", 
            "+\t\t\tif (entry.getKey() != null) {\n", 
            "+\t\t\t\tIterator<String> i = entry.getValue().iterator();\n", 
            "+\t\t\t\twhile (i.hasNext()) {\n", 
            "+\t\t\t\t\trequest.addHeader(entry.getKey(), i.next());\n", 
            "+\t\t\t\t}\n", 
            "+\t\t\t}\n", 
            "+\t\t}\n", 
            "         \n", 
            "         //setup wsa action..\n", 
            "         if (request != null){\n"
          ]
        }, 
        {
          "locn": "-250,7 +250,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     \n", 
            "-    public void addHeader(String name, String value) {\n", 
            "+\tpublic void addHeader(String name, String value) {\n", 
            " \t\tif (headers.get(name) == null) {\n", 
            " \t\t\tTreeSet<String> values = new TreeSet<String>();\n", 
            " \t\t\tvalues.add(value);\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-78,16 +78,16", 
          "lines": [
            "         this.status = response.getStatusLine().getStatusCode();\n", 
            "         this.statusLine = response.getStatusLine().getReasonPhrase();\n", 
            " \n", 
            "-        Header[] headers = response.getAllHeaders();\n", 
            "-        if (headers != null) {\n", 
            "-            for (Header header : headers) {\n", 
            "-            \tif(this.headers.containsKey(header.getName())) {\n", 
            "-            \t\taddExcessHeader(header);\n", 
            "-            \t} else {\n", 
            "-            \t\tthis.headers.put(header.getName(), header.getValue());\n", 
            "-            \t}\n", 
            "-             }        \n", 
            "-        }   \n", 
            "+\t\tHeader[] headers = response.getAllHeaders();\n", 
            "+\t\tif (headers != null) {\n", 
            "+\t\t\tfor (Header header : headers) {\n", 
            "+\t\t\t\tif (this.headers.containsKey(header.getName())) {\n", 
            "+\t\t\t\t\taddExcessHeader(header);\n", 
            "+\t\t\t\t} else {\n", 
            "+\t\t\t\t\tthis.headers.put(header.getName(), header.getValue());\n", 
            "+\t\t\t\t}\n", 
            "+\t\t\t}\n", 
            "+\t\t}\n", 
            " \n", 
            "         this.expectResponseBody = expectResponseBody;\n", 
            "     }    \n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetResponse.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetResponse.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-67,10 +67,9", 
          "lines": [
            "     /** The connection from the client */\n", 
            "     private NHttpServerConnection connection = null;\n", 
            "     \n", 
            "-    /** Excess headers of the request */\n", 
            "-    private Map excessHeaders = new MultiValueMap();\n", 
            "+\t/** Excess headers of the request */\n", 
            "+\tprivate Map excessHeaders = new MultiValueMap();\n", 
            " \n", 
            "-\n", 
            "     public SourceRequest(SourceConfiguration sourceConfiguration,\n", 
            "                          HttpRequest request,\n", 
            "                          NHttpServerConnection conn) {\n"
          ]
        }, 
        {
          "locn": "-89,16 +88,16", 
          "lines": [
            "             this.version = HttpVersion.HTTP_1_1;\n", 
            "         }\n", 
            " \n", 
            "-        Header[] headers = request.getAllHeaders();\n", 
            "-        if (headers != null) {\n", 
            "-            for (Header header : headers) {\n", 
            "-                if(this.headers.containsKey(header.getName())) {\n", 
            "-\t                 addExcessHeader(header);\n", 
            "-\t            } else {\n", 
            "-\t                 this.headers.put(header.getName(), header.getValue());\n", 
            "-\t            }\n", 
            "-\t        }\n", 
            "-\t    }\n", 
            "+\t\tHeader[] headers = request.getAllHeaders();\n", 
            "+\t\tif (headers != null) {\n", 
            "+\t\t\tfor (Header header : headers) {\n", 
            "+\t\t\t\tif (this.headers.containsKey(header.getName())) {\n", 
            "+\t\t\t\t\taddExcessHeader(header);\n", 
            "+\t\t\t\t} else {\n", 
            "+\t\t\t\t\tthis.headers.put(header.getName(), header.getValue());\n", 
            "+\t\t\t\t}\n", 
            "+\t\t\t}\n", 
            "+\t\t}\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-191,11 +190,11", 
          "lines": [
            "         return entityEnclosing;\n", 
            "     }\n", 
            "     \n", 
            "-    public Map getExcessHeaders() {\n", 
            "-        return this.excessHeaders;\n", 
            "-   }\n", 
            "+\tpublic Map getExcessHeaders() {\n", 
            "+\t\treturn this.excessHeaders;\n", 
            "+\t}\n", 
            "     \n", 
            "-    public void addExcessHeader(Header h) {\n", 
            "-        this.excessHeaders.put(h.getName(), h.getValue());\n", 
            "-   }\n", 
            "+\tpublic void addExcessHeader(Header h) {\n", 
            "+\t\tthis.excessHeaders.put(h.getName(), h.getValue());\n", 
            "+\t}\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceRequest.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceRequest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-40,8 +40,8", 
          "lines": [
            " \n", 
            "     private Pipe pipe = null;\n", 
            " \n", 
            "-    /** Transport headers */\n", 
            "-    private Map<String, TreeSet<String>> headers = new HashMap<String, TreeSet<String>>();\n", 
            "+\t/** Transport headers */\n", 
            "+\tprivate Map<String, TreeSet<String>> headers = new HashMap<String, TreeSet<String>>();\n", 
            " \n", 
            "     /** Status of the response */\n", 
            "     private int status = HttpStatus.SC_OK;\n"
          ]
        }, 
        {
          "locn": "-122,17 +122,17", 
          "lines": [
            " \n", 
            "         response.setEntity(entity);\n", 
            " \n", 
            "-        // set any transport headers\n", 
            "-        Set<Map.Entry<String, TreeSet<String>>> entries = headers.entrySet();\n", 
            "+\t\t// set any transport headers\n", 
            "+\t\tSet<Map.Entry<String, TreeSet<String>>> entries = headers.entrySet();\n", 
            " \n", 
            "-        for (Map.Entry<String, TreeSet<String>> entry : entries) {\n", 
            "-            if (entry.getKey() != null) {     \n", 
            "-            \tIterator<String> i = entry.getValue().iterator();\n", 
            "-                while(i.hasNext()) {\n", 
            "-                \tresponse.addHeader(entry.getKey(), i.next());\n", 
            "-                }   \n", 
            "-            }\n", 
            "-        }\n", 
            "+\t\tfor (Map.Entry<String, TreeSet<String>> entry : entries) {\n", 
            "+\t\t\tif (entry.getKey() != null) {\n", 
            "+\t\t\t\tIterator<String> i = entry.getValue().iterator();\n", 
            "+\t\t\t\twhile (i.hasNext()) {\n", 
            "+\t\t\t\t\tresponse.addHeader(entry.getKey(), i.next());\n", 
            "+\t\t\t\t}\n", 
            "+\t\t\t}\n", 
            "+\t\t}\n", 
            "         \n", 
            " \n", 
            "         SourceContext.updateState(conn, ProtocolState.RESPONSE_HEAD);\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceResponse.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceResponse.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-167,9 +167,9", 
          "lines": [
            "     //property name of nhttp log directory\n", 
            "     public static final String NHTTP_LOG_DIRECTORY = \"nhttp.log.directory\";\n", 
            "     \n", 
            "-    /**\n", 
            "-     * This holds a MultiValue Map, which keeps transport headers' values other than last value\n", 
            "-     * (in order they appear) against the transport header.\n", 
            "-     */\n", 
            "-    public static final String EXCESS_TRANSPORT_HEADERS = \"EXCESS_TRANSPORT_HEADERS\";\n", 
            "+\t/**\n", 
            "+\t * This holds a MultiValue Map, which keeps transport headers' values other\n", 
            "+\t * than last value (in order they appear) against the transport header.\n", 
            "+\t */\n", 
            "+\tpublic static final String EXCESS_TRANSPORT_HEADERS = \"EXCESS_TRANSPORT_HEADERS\";\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/NhttpConstants.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/NhttpConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-157,13 +157,11", 
          "lines": [
            "         <dependency>\n", 
            "             <groupId>commons-lang</groupId>\n", 
            "             <artifactId>commons-lang</artifactId>\n", 
            "-        </dependency>\n", 
            "-        \n", 
            "-       <dependency>\n", 
            "-        <groupId>commons-collections</groupId>\n", 
            "-        <artifactId>commons-collections</artifactId>\n", 
            "-      </dependency>\n", 
            "-\n", 
            "+        </dependency>   \n", 
            "+        <dependency>\n", 
            "+        \t<groupId>commons-collections</groupId>\n", 
            "+        \t<artifactId>commons-collections</artifactId>\n", 
            "+      \t</dependency>\n", 
            "         <!-- BouncyCastle API which is required when validating Certificates. -->\n", 
            "         <dependency>\n", 
            "             <groupId>org.bouncycastle</groupId>\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/pom.xml", 
      "from": "java/modules/transports/core/nhttp/pom.xml"
    }
  ], 
  "id": "1746052"
}