{
  "when": "2013-08-01T19:51:47-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-110,7 +110,7", 
          "lines": [
            "     /**\n", 
            "      * This will provide the timer daemon object for the scheduled tasks.\n", 
            "      */\n", 
            "-    private Timer synapseTimer = new Timer(true);\n", 
            "+    private Timer synapseTimer;\n", 
            " \n", 
            "     /** Hold reference to the Axis2 ConfigurationContext */\n", 
            "     private AxisConfiguration axisConfiguration = null;\n"
          ]
        }, 
        {
          "locn": "-167,14 +167,17", 
          "lines": [
            "     /**\n", 
            "      * Holds synapse Libraries indexed by library qualified name\n", 
            "      */\n", 
            "-    Map<String,Library> synapseLibraries = new ConcurrentHashMap<String,Library>();\n", 
            "+    private Map<String,Library> synapseLibraries = new ConcurrentHashMap<String,Library>();\n", 
            " \n", 
            "     /**\n", 
            "      * Holds the library imports  currently being included into Synapse engine\n", 
            "      */\n", 
            "-    Map<String,SynapseImport> synapseImports = new ConcurrentHashMap<String,SynapseImport>();\n", 
            "+    private Map<String,SynapseImport> synapseImports = new ConcurrentHashMap<String,SynapseImport>();\n", 
            "+\n", 
            "     private boolean allowHotUpdate = true;\n", 
            " \n", 
            "+    private boolean initialized = false;\n", 
            "+\n", 
            "     /**\n", 
            "      * Add a named sequence into the local registry. If a sequence already exists by the specified\n", 
            "      * key a runtime exception is thrown.\n"
          ]
        }, 
        {
          "locn": "-696,7 +699,7", 
          "lines": [
            "                     try {\n", 
            "                         o = registry.getResource(entry, getProperties());\n", 
            "                     } catch (Exception e) {\n", 
            "-                        // Error occured while loading the resource from the registry\n", 
            "+                        // Error occurred while loading the resource from the registry\n", 
            "                         // Fall back to the cached value - Do not increase the expiry time\n", 
            "                         log.warn(\"Error while loading the resource \" + key + \" from the remote \" +\n", 
            "                                 \"registry. Previously cached value will be used. Check the \" +\n"
          ]
        }, 
        {
          "locn": "-1106,6 +1109,10", 
          "lines": [
            "      * @return synapseTimer timer object of the configuration\n", 
            "      */\n", 
            "     public Timer getSynapseTimer() {\n", 
            "+        if (synapseTimer == null) {\n", 
            "+            handleException(\"Attempted to access the Synapse timer \" +\n", 
            "+                    \"before initializing SynapseConfiguration\");\n", 
            "+        }\n", 
            "         return synapseTimer;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-1190,7 +1197,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     * Sets the properties to configure the Synapse enviornment.\n", 
            "+     * Sets the properties to configure the Synapse environment.\n", 
            "      *\n", 
            "      * @param properties - Properties which needs to be set\n", 
            "      *\n"
          ]
        }, 
        {
          "locn": "-1247,7 +1254,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     * Gets the propety value if the property specified by the propKey is there or null else\n", 
            "+     * Gets the property value if the property specified by the propKey is there or null else\n", 
            "      *\n", 
            "      * @param propKey - key for the property lookup\n", 
            "      * @return String representation of the property value if found or null else\n"
          ]
        }, 
        {
          "locn": "-1268,89 +1275,50", 
          "lines": [
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     * This method will be called on the soft shutdown or destroying the configuration\n", 
            "-     * and will destroy all the stateful managed parts of the configuration.\n", 
            "+     * This method will be called in the startup of Synapse or in an initiation\n", 
            "+     * and will initialize all the managed parts of the Synapse Configuration\n", 
            "+     *\n", 
            "+     * @param se\n", 
            "+     *          SynapseEnvironment specifying the env to be initialized\n", 
            "      */\n", 
            "-    public synchronized void destroy() {\n", 
            "-        \n", 
            "-        if (log.isDebugEnabled()) {\n", 
            "-            log.debug(\"Destroying the Synapse Configuration\");\n", 
            "+    public synchronized void init(SynapseEnvironment se) {\n", 
            "+        if (initialized) {\n", 
            "+            log.warn(\"Attempted to re-initialize SynapseConfiguration\");\n", 
            "+            return;\n", 
            "         }\n", 
            " \n", 
            "-        // clear the timer tasks of Synapse\n", 
            "-        synapseTimer.cancel();\n", 
            "-        synapseTimer = null;\n", 
            "-\n", 
            "-        // stop and shutdown all the proxy services\n", 
            "-        for (ProxyService p : getProxyServices()) {\n", 
            "-\n", 
            "-            if (p.getTargetInLineInSequence() != null) {\n", 
            "-                p.getTargetInLineInSequence().destroy();\n", 
            "-            }\n", 
            "-\n", 
            "-            if (p.getTargetInLineOutSequence() != null) {\n", 
            "-                p.getTargetInLineOutSequence().destroy();\n", 
            "-            }\n", 
            "+        if (log.isDebugEnabled()) {\n", 
            "+            log.debug(\"Initializing the Synapse Configuration using the SynapseEnvironment\");\n", 
            "         }\n", 
            "-\n", 
            "-        // destroy the managed mediators\n", 
            "-        for (ManagedLifecycle seq : getDefinedSequences().values()) {\n", 
            "-            seq.destroy();\n", 
            "+        try {\n", 
            "+            doInit(se);\n", 
            "+        } finally {\n", 
            "+            initialized = true;\n", 
            "         }\n", 
            "+    }\n", 
            " \n", 
            "-        //destroy sequence templates\n", 
            "-        for (TemplateMediator seqTemplate : getSequenceTemplates().values()) {\n", 
            "-            seqTemplate.destroy();\n", 
            "+    /**\n", 
            "+     * This method will be called on the soft shutdown or destroying the configuration\n", 
            "+     * and will destroy all the stateful managed parts of the configuration.\n", 
            "+     */\n", 
            "+    public synchronized void destroy() {\n", 
            "+        if (!initialized) {\n", 
            "+            log.warn(\"Attempted to destroy uninitialized SynapseConfiguration\");\n", 
            "+            return;\n", 
            "         }\n", 
            " \n", 
            "-        // destroy the managed endpoints\n", 
            "-        for (Endpoint endpoint : getDefinedEndpoints().values()) {\n", 
            "-            endpoint.destroy();\n", 
            "+        if (log.isDebugEnabled()) {\n", 
            "+            log.debug(\"Destroying the Synapse Configuration\");\n", 
            "         }\n", 
            "-\n", 
            "-        // destroy the startups\n", 
            "-        for (ManagedLifecycle stp : startups.values()) {\n", 
            "-            stp.destroy();\n", 
            "-        }\n", 
            "-        \n", 
            "-        // clear session information used for SA load balancing\n", 
            "         try {\n", 
            "-            SALSessions.getInstance().reset();\n", 
            "-            DataSourceRepositoryHolder.getInstance().getDataSourceRepositoryManager().clear();\n", 
            "-        } catch (Throwable ignored) {}\n", 
            "-\n", 
            "-        // destroy the priority executors. \n", 
            "-        for(PriorityExecutor pe : executors.values()) {\n", 
            "-            pe.destroy();\n", 
            "+            doDestroy();\n", 
            "+        } finally {\n", 
            "+            initialized = false;\n", 
            "         }\n", 
            "-\n", 
            "-        // destroy the Message Stores\n", 
            "-        for(MessageStore ms : messageStores.values()) {\n", 
            "-            ms.destroy();\n", 
            "-        }\n", 
            "-\n", 
            "-        // destroy the Message processors\n", 
            "-        for(MessageProcessor mp : messageProcessors.values()) {\n", 
            "-            mp.destroy();\n", 
            "-        }\n", 
            "-\n", 
            "-        for (API api : apiTable.values()) {\n", 
            "-            api.destroy();\n", 
            "-        }\n", 
            "     }\n", 
            " \n", 
            "-    /**\n", 
            "-     * This method will be called in the startup of Synapse or in an initiation\n", 
            "-     * and will initialize all the managed parts of the Synapse Configuration\n", 
            "-     *\n", 
            "-     * @param se\n", 
            "-     *          SynapseEnvironment specifying the env to be initialized\n", 
            "-     */\n", 
            "-    public synchronized void init(SynapseEnvironment se) {\n", 
            "-        \n", 
            "-        if (log.isDebugEnabled()) {\n", 
            "-            log.debug(\"Initializing the Synapse Configuration using the SynapseEnvironment\");\n", 
            "-        }\n", 
            "+    private void doInit(SynapseEnvironment se) {\n", 
            "+        synapseTimer = new Timer(true);\n", 
            " \n", 
            "         // initialize registry\n", 
            "         if (registry != null && registry instanceof ManagedLifecycle) {\n"
          ]
        }, 
        {
          "locn": "-1367,7 +1335,7", 
          "lines": [
            "             seqTemplate.init(se);\n", 
            "         }\n", 
            " \n", 
            "-         // initialize managed mediators\n", 
            "+        // initialize managed mediators\n", 
            "         for (ManagedLifecycle seq : getDefinedSequences().values()) {\n", 
            "             if (seq != null) {\n", 
            "                 seq.init(se);\n"
          ]
        }, 
        {
          "locn": "-1407,12 +1375,12", 
          "lines": [
            "         }\n", 
            " \n", 
            "         //initialize message stores\n", 
            "-        for(MessageStore messageStore : messageStores.values()) {\n", 
            "+        for (MessageStore messageStore : messageStores.values()) {\n", 
            "             messageStore.init(se);\n", 
            "         }\n", 
            " \n", 
            "         // initialize message processors\n", 
            "-        for(MessageProcessor messageProcessor : messageProcessors.values()) {\n", 
            "+        for (MessageProcessor messageProcessor : messageProcessors.values()) {\n", 
            "             messageProcessor.init(se);\n", 
            "         }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-1421,6 +1389,69", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "+    private void doDestroy() {\n", 
            "+        // clear the timer tasks of Synapse\n", 
            "+        synapseTimer.cancel();\n", 
            "+        synapseTimer = null;\n", 
            "+\n", 
            "+        // stop and shutdown all the proxy services\n", 
            "+        for (ProxyService p : getProxyServices()) {\n", 
            "+\n", 
            "+            if (p.getTargetInLineInSequence() != null) {\n", 
            "+                p.getTargetInLineInSequence().destroy();\n", 
            "+            }\n", 
            "+\n", 
            "+            if (p.getTargetInLineOutSequence() != null) {\n", 
            "+                p.getTargetInLineOutSequence().destroy();\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        // destroy the managed mediators\n", 
            "+        for (ManagedLifecycle seq : getDefinedSequences().values()) {\n", 
            "+            seq.destroy();\n", 
            "+        }\n", 
            "+\n", 
            "+        //destroy sequence templates\n", 
            "+        for (TemplateMediator seqTemplate : getSequenceTemplates().values()) {\n", 
            "+            seqTemplate.destroy();\n", 
            "+        }\n", 
            "+\n", 
            "+        // destroy the managed endpoints\n", 
            "+        for (Endpoint endpoint : getDefinedEndpoints().values()) {\n", 
            "+            endpoint.destroy();\n", 
            "+        }\n", 
            "+\n", 
            "+        // destroy the startups\n", 
            "+        for (ManagedLifecycle stp : startups.values()) {\n", 
            "+            stp.destroy();\n", 
            "+        }\n", 
            "+\n", 
            "+        // clear session information used for SA load balancing\n", 
            "+        try {\n", 
            "+            SALSessions.getInstance().reset();\n", 
            "+            DataSourceRepositoryHolder.getInstance().getDataSourceRepositoryManager().clear();\n", 
            "+        } catch (Throwable ignored) {}\n", 
            "+\n", 
            "+        // destroy the priority executors.\n", 
            "+        for (PriorityExecutor pe : executors.values()) {\n", 
            "+            pe.destroy();\n", 
            "+        }\n", 
            "+\n", 
            "+        // destroy the Message Stores\n", 
            "+        for (MessageStore ms : messageStores.values()) {\n", 
            "+            ms.destroy();\n", 
            "+        }\n", 
            "+\n", 
            "+        // destroy the Message processors\n", 
            "+        for (MessageProcessor mp : messageProcessors.values()) {\n", 
            "+            mp.destroy();\n", 
            "+        }\n", 
            "+\n", 
            "+        for (API api : apiTable.values()) {\n", 
            "+            api.destroy();\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "     private void handleException(String msg) {\n", 
            "         log.error(msg);\n", 
            "         throw new SynapseException(msg);\n"
          ]
        }, 
        {
          "locn": "-1570,7 +1601,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     * Get Message sotres defined\n", 
            "+     * Get Message stores defined\n", 
            "      * @return  message store map stored as name of the message store and message store\n", 
            "      */\n", 
            "     public Map<String, MessageStore> getMessageStores() {\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/SynapseConfiguration.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/SynapseConfiguration.java"
    }
  ], 
  "id": "1509472"
}