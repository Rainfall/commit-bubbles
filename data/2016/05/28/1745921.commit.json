{
  "when": "2016-05-28T15:12:53-04:00", 
  "who": "dushan", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-23,7 +23,6", 
          "lines": [
            " import junit.framework.TestSuite;\n", 
            " \n", 
            " import org.apache.axis2.transport.testkit.ManagedTestSuite;\n", 
            "-import org.apache.axis2.transport.testkit.axis2.TransportDescriptionFactory;\n", 
            " import org.apache.axis2.transport.testkit.http.HttpTransportTestSuiteBuilder;\n", 
            " \n", 
            " public class HttpCoreNIOListenerTest extends TestCase {\n"
          ]
        }, 
        {
          "locn": "-33,7 +32,7", 
          "lines": [
            "         // These tests don't work because of a problem similar to SYNAPSE-418\n", 
            "         suite.addExclude(\"(test=EchoXML)\");\n", 
            "         \n", 
            "-        TransportDescriptionFactory tdfNIO = new HttpTransportDescriptionFactory();\n", 
            "+        HttpTransportDescriptionFactory tdfNIO = new HttpTransportDescriptionFactory();\n", 
            "         \n", 
            "         HttpTransportTestSuiteBuilder builder = new HttpTransportTestSuiteBuilder(suite, tdfNIO);\n", 
            "         \n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/test/java/org/apache/synapse/transport/nhttp/HttpCoreNIOListenerTest.java", 
      "from": "java/modules/transports/core/nhttp/src/test/java/org/apache/synapse/transport/nhttp/HttpCoreNIOListenerTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-53,6 +53,7", 
          "lines": [
            " import java.io.IOException;\n", 
            " import java.io.InputStream;\n", 
            " import java.io.OutputStream;\n", 
            "+import java.net.InetAddress;\n", 
            " import java.util.ArrayList;\n", 
            " import java.util.List;\n", 
            " import java.util.Map;\n"
          ]
        }, 
        {
          "locn": "-275,7 +276,7", 
          "lines": [
            " \n", 
            "         if (outBuf == null) {\n", 
            "             // fix for SYNAPSE 584. This is a temporarily fix because of HTTPCORE-208\n", 
            "-            shutdownConnection(conn);\n", 
            "+            shutdownConnection(conn, false, null);\n", 
            "             return;\n", 
            "         }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-379,10 +380,10", 
          "lines": [
            " \n", 
            "             conn.submitResponse(response);\n", 
            "         } catch (HttpException e) {\n", 
            "-            shutdownConnection(conn);\n", 
            "+            shutdownConnection(conn, true, e.getMessage());\n", 
            "             throw e;\n", 
            "         } catch (IOException e) {\n", 
            "-            shutdownConnection(conn);\n", 
            "+            shutdownConnection(conn, true, e.getMessage());\n", 
            "             throw e;\n", 
            "         }\n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-399,13 +400,15", 
          "lines": [
            "             if (log.isDebugEnabled()) {\n", 
            "                 log.debug(\"Keepalive connection was closed\");\n", 
            "             }\n", 
            "+            shutdownConnection(conn, false, null);\n", 
            "         } else {\n", 
            "-            log.error(\"Connection Timeout - before message body was fully read : \" + conn);\n", 
            "+            String msg = \"Connection Timeout - before message body was fully read : \" + conn;\n", 
            "+            log.error(msg);\n", 
            "             if (metrics != null) {\n", 
            "                 metrics.incrementTimeoutsReceiving();\n", 
            "             }\n", 
            "+            shutdownConnection(conn, true, msg);\n", 
            "         }\n", 
            "-        shutdownConnection(conn);\n", 
            "     }\n", 
            " \n", 
            "     public void connected(final NHttpServerConnection conn) {\n"
          ]
        }, 
        {
          "locn": "-453,7 +456,7", 
          "lines": [
            "     public void closed(final NHttpServerConnection conn) {\n", 
            " \n", 
            "         HttpContext context = conn.getContext();\n", 
            "-        shutdownConnection(conn);\n", 
            "+        shutdownConnection(conn, false, null);\n", 
            "         context.removeAttribute(REQUEST_SINK_BUFFER);\n", 
            "         context.removeAttribute(RESPONSE_SOURCE_BUFFER);\n", 
            "         context.removeAttribute(CONNECTION_CREATION_TIME);\n"
          ]
        }, 
        {
          "locn": "-517,11 +520,12", 
          "lines": [
            "         } else if (e instanceof IOException) {\n", 
            "             exception(conn, (IOException) e);\n", 
            "         } else {\n", 
            "-            log.error(\"Unexpected error: \" + e.getClass().getName(), e);\n", 
            "+            String errMsg = \"Unexpected error: \" + e.getClass().getName();\n", 
            "+            log.error(errMsg, e);\n", 
            "             if (metrics != null) {\n", 
            "                 metrics.incrementFaultsReceiving();\n", 
            "             }\n", 
            "-            shutdownConnection(conn);\n", 
            "+            shutdownConnection(conn, true, errMsg);\n", 
            "         }\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-531,31 +535,36", 
          "lines": [
            "      * @param e the exception encountered\n", 
            "      */\n", 
            "     public void exception(NHttpServerConnection conn, IOException e) {\n", 
            "+        String errMsg = \"I/O error : \" + e.getMessage();\n", 
            "         if (e instanceof ConnectionClosedException || (e.getMessage() != null &&\n", 
            "                 e.getMessage().contains(\"Connection reset by peer\") ||\n", 
            "                 e.getMessage().contains(\"forcibly closed\"))) {\n", 
            "             if (log.isDebugEnabled()) {\n", 
            "-                log.debug(\"I/O error (Probably the keepalive connection \" +\n", 
            "-                        \"was closed):\" + e.getMessage());\n", 
            "+                errMsg = \"I/O error (Probably the keepalive connection \" +\n", 
            "+                        \"was closed):\" + e.getMessage();\n", 
            "+                log.debug(errMsg);\n", 
            "             }\n", 
            "         } else if (e.getMessage() != null) {\n", 
            "-            String msg = e.getMessage().toLowerCase();\n", 
            "-            if (msg.indexOf(\"broken\") != -1) {\n", 
            "-                log.warn(\"I/O error (Probably the connection \" +\n", 
            "-                        \"was closed by the remote party):\" + e.getMessage());\n", 
            "+            errMsg = e.getMessage().toLowerCase();\n", 
            "+            if (errMsg.indexOf(\"broken\") != -1) {\n", 
            "+                errMsg = \"I/O error (Probably the connection \" +\n", 
            "+                        \"was closed by the remote party):\" + e.getMessage();\n", 
            "+                log.warn(errMsg);\n", 
            "             } else {\n", 
            "-                log.error(\"I/O error: \" + e.getMessage(), e);\n", 
            "+                errMsg = \"I/O error: \" + e.getMessage();\n", 
            "+                log.error(errMsg, e);\n", 
            "             }\n", 
            "             if (metrics != null) {\n", 
            "                 metrics.incrementFaultsReceiving();\n", 
            "             }\n", 
            "         } else {\n", 
            "-            log.error(\"Unexpected I/O error: \" + e.getClass().getName(), e);\n", 
            "+            errMsg = \"Unexpected I/O error: \" + e.getMessage();\n", 
            "+            log.error(errMsg, e);\n", 
            "             if (metrics != null) {\n", 
            "                 metrics.incrementFaultsReceiving();\n", 
            "             }\n", 
            "         }\n", 
            "-        shutdownConnection(conn);\n", 
            "+        shutdownConnection(conn, true, errMsg);\n", 
            "     }\n", 
            " \n", 
            "     // ----------- utility methods -----------\n"
          ]
        }, 
        {
          "locn": "-563,7 +572,7", 
          "lines": [
            "     private void handleException(String msg, Exception e, NHttpServerConnection conn) {\n", 
            "         log.error(msg, e);\n", 
            "         if (conn != null) {\n", 
            "-            shutdownConnection(conn);\n", 
            "+            shutdownConnection(conn, true, e.getMessage());\n", 
            "         }\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-570,8 +579,10", 
          "lines": [
            "     /**\n", 
            "      * Shutdown the connection ignoring any IO errors during the process\n", 
            "      * @param conn the connection to be shutdown\n", 
            "+     * @param isError whether shutdown is due to an error\n", 
            "+     * @param errorMsg error message if shutdown happens on error\n", 
            "      */\n", 
            "-    private void shutdownConnection(final NHttpServerConnection conn) {\n", 
            "+    private void shutdownConnection(final NHttpServerConnection conn, boolean isError, String errorMsg) {\n", 
            "         SharedOutputBuffer outputBuffer = (SharedOutputBuffer)\n", 
            "             conn.getContext().getAttribute(RESPONSE_SOURCE_BUFFER);\n", 
            "         if (outputBuffer != null) {\n"
          ]
        }, 
        {
          "locn": "-583,6 +594,39", 
          "lines": [
            "             inputBuffer.close();\n", 
            "         }\n", 
            " \n", 
            "+        if (log.isWarnEnabled() && (isError || log.isDebugEnabled()) && conn instanceof HttpInetConnection) {\n", 
            "+\n", 
            "+            HttpInetConnection inetConnection = (HttpInetConnection) conn;\n", 
            "+            InetAddress remoteAddress = inetConnection.getRemoteAddress();\n", 
            "+            int remotePort = inetConnection.getRemotePort();\n", 
            "+\n", 
            "+            String msg;\n", 
            "+            if (remotePort != -1 && remoteAddress != null) {  // If connection is still alive\n", 
            "+                msg = \"Connection from remote address : \"\n", 
            "+                        + remoteAddress + \":\" + remotePort\n", 
            "+                        + \" to local address : \"\n", 
            "+                        + inetConnection.getLocalAddress() + \":\" + inetConnection.getLocalPort() +\n", 
            "+                        \" is closed!\"\n", 
            "+                        + (errorMsg != null ? \" - On error : \" + errorMsg : \"\");\n", 
            "+\n", 
            "+            } else {  // if connection is already closed. obtain params from http context\n", 
            "+                HttpContext httpContext = conn.getContext();\n", 
            "+                msg = \"Connection from remote address : \"\n", 
            "+                        + httpContext.getAttribute(NhttpConstants.CLIENT_REMOTE_ADDR)\n", 
            "+                        + \":\" + httpContext.getAttribute(NhttpConstants.CLIENT_REMOTE_PORT)\n", 
            "+                        + \" to local address : \"\n", 
            "+                        + inetConnection.getLocalAddress() + \":\" + inetConnection.getLocalPort() +\n", 
            "+                        \" is closed!\"\n", 
            "+                        + (errorMsg != null ? \" - On error : \" + errorMsg : \"\");\n", 
            "+            }\n", 
            "+\n", 
            "+            if (isError) {\n", 
            "+                log.warn(msg);\n", 
            "+            } else {\n", 
            "+                log.debug(msg);\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "         synchronized (this) {\n", 
            "             if (activeConnections.remove(conn) && log.isDebugEnabled()) {\n", 
            "                 log.debug(\"Removing the connection : \" + conn\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ServerHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ServerHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-279,14 +279,15", 
          "lines": [
            " \n", 
            "         if (axis2Request != null && !axis2Request.isCompleted()) {\n", 
            "             checkAxisRequestComplete(conn, NhttpConstants.CONNECTION_CLOSED, message, null);\n", 
            "+            shutdownConnection(conn, true, \"Connection closed before response is received\");\n", 
            "         } else {\n", 
            "             if (log.isDebugEnabled()) {\n", 
            "                 log.debug(getErrorMessage(\"Keep-alive connection closed\", conn));\n", 
            "             }\n", 
            "+            shutdownConnection(conn, false, null);\n", 
            "         }\n", 
            " \n", 
            "         HttpContext context = conn.getContext();\n", 
            "-        shutdownConnection(conn);\n", 
            "         context.removeAttribute(RESPONSE_SINK_BUFFER);\n", 
            "         context.removeAttribute(REQUEST_SOURCE_BUFFER);\n", 
            "         metrics.disconnected();\n"
          ]
        }, 
        {
          "locn": "-309,14 +310,15", 
          "lines": [
            " \n", 
            "         if (axis2Request != null && !axis2Request.isCompleted()) {\n", 
            "             checkAxisRequestComplete(conn, NhttpConstants.CONNECTION_TIMEOUT, message, null);\n", 
            "+            shutdownConnection(conn, true, \"Connection timeout before response is received\");\n", 
            "         } else {\n", 
            "             if (log.isDebugEnabled()) {\n", 
            "                 log.debug(getErrorMessage(\"Keep-alive connection timed out\", conn));\n", 
            "             }\n", 
            "+            shutdownConnection(conn, false, null);\n", 
            "         }\n", 
            " \n", 
            "         HttpContext context = conn.getContext();\n", 
            "-        shutdownConnection(conn);\n", 
            "         context.removeAttribute(RESPONSE_SINK_BUFFER);\n", 
            "         context.removeAttribute(REQUEST_SOURCE_BUFFER);\n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-332,7 +334,7", 
          "lines": [
            "             exception(conn, (IOException) e);\n", 
            "         } else {\n", 
            "             log.error(e.getMessage(), e);\n", 
            "-            shutdownConnection(conn);\n", 
            "+            shutdownConnection(conn, true, \"Error occurred : \" + e.getMessage());\n", 
            "         }\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-346,7 +348,7", 
          "lines": [
            "         String message = getErrorMessage(\"HTTP protocol violation : \" + e.getMessage(), conn);\n", 
            "         log.error(message, e);\n", 
            "     \tcheckAxisRequestComplete(conn, NhttpConstants.PROTOCOL_VIOLATION, message, e);\n", 
            "-        shutdownConnection(conn);\n", 
            "+        shutdownConnection(conn, true, \"HTTP protocol violation : \" + e.getMessage());\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-363,7 +365,7", 
          "lines": [
            "             log.error(message, e);\n", 
            "         }\n", 
            "         checkAxisRequestComplete(conn, NhttpConstants.SND_IO_ERROR_SENDING, message, e);\n", 
            "-        shutdownConnection(conn);\n", 
            "+        shutdownConnection(conn, true, \"I/O error : \" + e.getMessage());\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-547,12 +549,12", 
          "lines": [
            "                     try {\n", 
            "                         // this is a connection we should not re-use\n", 
            "                         ConnectionPool.forget(conn);\n", 
            "-                        shutdownConnection(conn);\n", 
            "+                        shutdownConnection(conn, false, null);\n", 
            "                         context.removeAttribute(RESPONSE_SINK_BUFFER);\n", 
            "                         context.removeAttribute(REQUEST_SOURCE_BUFFER);\n", 
            "                     } catch (Exception ignore) {}\n", 
            "                 } else if (!connStrategy.keepAlive(response, context)) {\n", 
            "-                    shutdownConnection(conn);\n", 
            "+                    shutdownConnection(conn, false, null);\n", 
            "                     context.removeAttribute(RESPONSE_SINK_BUFFER);\n", 
            "                     context.removeAttribute(REQUEST_SOURCE_BUFFER);\n", 
            "                 } else {\n"
          ]
        }, 
        {
          "locn": "-957,7 +959,7", 
          "lines": [
            "                 try {\n", 
            "                     // this is a connection we should not re-use\n", 
            "                     ConnectionPool.forget(conn);\n", 
            "-                    shutdownConnection(conn);\n", 
            "+                    shutdownConnection(conn, false, null);\n", 
            "                     context.removeAttribute(RESPONSE_SINK_BUFFER);\n", 
            "                     context.removeAttribute(REQUEST_SOURCE_BUFFER);\n", 
            "                 } catch (Exception ignore) {}\n"
          ]
        }, 
        {
          "locn": "-976,19 +978,28", 
          "lines": [
            "         workerPool.execute(task);        \n", 
            "     }\n", 
            " \n", 
            "+\n", 
            "     /**\n", 
            "      * Shutdown the connection ignoring any IO errors during the process\n", 
            "-     * \n", 
            "+     *\n", 
            "      * @param conn the connection to be shutdown\n", 
            "+     * @param isError whether shutdown is due to an error\n", 
            "+     * @param errorMsg error message if shutdown happens on error\n", 
            "      */\n", 
            "-    private void shutdownConnection(final NHttpClientConnection conn) {\n", 
            "+    private void shutdownConnection(final NHttpClientConnection conn, boolean isError, String errorMsg) {\n", 
            "         if (conn instanceof HttpInetConnection) {\n", 
            "             HttpInetConnection inetConnection = (HttpInetConnection) conn;\n", 
            "-            if (log.isDebugEnabled()) {\n", 
            "-                log.debug(\"Connection to remote address : \" + inetConnection.getRemoteAddress()\n", 
            "+            if (log.isWarnEnabled() && (isError || log.isDebugEnabled())) {\n", 
            "+                String msg = \"Connection to remote address : \" + inetConnection.getRemoteAddress()\n", 
            "                         + \":\" + inetConnection.getRemotePort() + \" from local address : \"\n", 
            "                         + inetConnection.getLocalAddress() + \":\" + inetConnection.getLocalPort() +\n", 
            "-                        \" is closed!\");\n", 
            "+                        \" is closed!\"\n", 
            "+                        + (errorMsg != null ? \" - On error : \" + errorMsg : \"\");\n", 
            "+                if (isError) {\n", 
            "+                    log.warn(msg);\n", 
            "+                } else {\n", 
            "+                    log.debug(msg);\n", 
            "+                }\n", 
            "             }\n", 
            "             \n", 
            "             if (countConnections) {\n"
          ]
        }, 
        {
          "locn": "-1131,7 +1142,7", 
          "lines": [
            "             log.error(msg, e);\n", 
            "         }\n", 
            "         if (conn != null) {\n", 
            "-            shutdownConnection(conn);\n", 
            "+            shutdownConnection(conn, true, msg);\n", 
            "         }\n", 
            "     }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ClientHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ClientHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-53,6 +53,9", 
          "lines": [
            "     public static final String REQUEST_CONTENT_TYPE = \"DEFAULT_REQUEST_CONTENT_TYPE\";\n", 
            "     public static final String DEFAULT_CONTENT_TYPE = \"application/octet-stream\";\n", 
            " \n", 
            "+    public static final String CLIENT_REMOTE_ADDR = \"CLIENT_REMOTE_ADDR\";\n", 
            "+    public static final String CLIENT_REMOTE_PORT = \"CLIENT_REMOTE_PORT\";\n", 
            "+\n", 
            "     public static final String SEND_TIMEOUT = \"SEND_TIMEOUT\";\n", 
            " \n", 
            "     public static final String HIDDEN_SERVICE_PARAM_NAME = \"hiddenService\";\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/NhttpConstants.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/NhttpConstants.java"
    }
  ], 
  "id": "1745921"
}