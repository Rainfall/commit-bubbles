{
  "when": "2011-12-08T05:10:18-05:00", 
  "message": "Code refactoring", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-1,301 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-package org.apache.synapse.samples.framework;\n", 
            "-\n", 
            "-import java.util.HashMap;\n", 
            "-import java.util.Set;\n", 
            "-\n", 
            "-/**\n", 
            "-* Stores the configuration information for Synapse, Axis2 Server and Clients.\n", 
            "-* All the information loaded from sample descriptor files are stored here.\n", 
            "-*/\n", 
            "-public class SampleConfiguration {\n", 
            "-    private String sampleName;\n", 
            "-    private SynapseSampleConfiguration synapseConfig;\n", 
            "-    private HashMap<String, Axis2SampleConfiguration> axis2Configs;\n", 
            "-    private HashMap<String, JMSBrokerSampleConfiguration> jmsConfigs;\n", 
            "-    private HashMap<String, DerbyServerSampleConfiguration> derbyConfigs;\n", 
            "-    private HashMap<String, FIXExecutorSampleConfiguration> executorConfigs;\n", 
            "-    private ClientSampleConfiguration clientConfig;\n", 
            "-\n", 
            "-    public SampleConfiguration() {\n", 
            "-        this.synapseConfig = new SynapseSampleConfiguration();\n", 
            "-        this.axis2Configs = new HashMap<String, Axis2SampleConfiguration>();\n", 
            "-        this.jmsConfigs = new HashMap<String, JMSBrokerSampleConfiguration>();\n", 
            "-        this.derbyConfigs = new HashMap<String, DerbyServerSampleConfiguration>();\n", 
            "-        this.executorConfigs = new HashMap<String, FIXExecutorSampleConfiguration>();\n", 
            "-        this.clientConfig = new ClientSampleConfiguration();\n", 
            "-    }\n", 
            "-\n", 
            "-    public String getSampleName() {\n", 
            "-        return sampleName;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setSampleName(String name) {\n", 
            "-        this.sampleName = sampleName;\n", 
            "-    }\n", 
            "-\n", 
            "-    public SynapseSampleConfiguration getSynapseConfig() {\n", 
            "-        return synapseConfig;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void addNewAxis2Server(String name) {\n", 
            "-        axis2Configs.put(name, new Axis2SampleConfiguration());\n", 
            "-    }\n", 
            "-\n", 
            "-    public void addNewJMSBroker(String name) {\n", 
            "-        jmsConfigs.put(name, new JMSBrokerSampleConfiguration());\n", 
            "-    }\n", 
            "-\n", 
            "-    public void addNewDerbyServer(String name) {\n", 
            "-        derbyConfigs.put(name, new DerbyServerSampleConfiguration());\n", 
            "-    }\n", 
            "-\n", 
            "-    public void addNewFIXExecutor(String name) {\n", 
            "-        executorConfigs.put(name, new FIXExecutorSampleConfiguration());\n", 
            "-    }\n", 
            "-\n", 
            "-    public Axis2SampleConfiguration getAxis2Config(String name) {\n", 
            "-        return axis2Configs.get(name);\n", 
            "-    }\n", 
            "-\n", 
            "-    public JMSBrokerSampleConfiguration getJMSConfig(String name) {\n", 
            "-        return jmsConfigs.get(name);\n", 
            "-    }\n", 
            "-\n", 
            "-    public DerbyServerSampleConfiguration getDerbyConfig(String name) {\n", 
            "-        return derbyConfigs.get(name);\n", 
            "-    }\n", 
            "-\n", 
            "-    public FIXExecutorSampleConfiguration getFIXExecutorConfig(String name) {\n", 
            "-        return executorConfigs.get(name);\n", 
            "-    }\n", 
            "-\n", 
            "-    public Set<String> getAxis2ServersList() {\n", 
            "-        return axis2Configs.keySet();\n", 
            "-    }\n", 
            "-\n", 
            "-    public int getBackEndServerCount() {\n", 
            "-        return axis2Configs.size() + jmsConfigs.size();\n", 
            "-    }\n", 
            "-\n", 
            "-    public ClientSampleConfiguration getClientConfig() {\n", 
            "-        return clientConfig;\n", 
            "-    }\n", 
            "-\n", 
            "-    class SynapseSampleConfiguration {\n", 
            "-        private String serverName;\n", 
            "-        private String synapseHome;\n", 
            "-        private String axis2Repo;\n", 
            "-        private String axis2Xml;\n", 
            "-        private String synapseXml;\n", 
            "-        private boolean clusteringEnabled;\n", 
            "-\n", 
            "-        public String getServerName() {\n", 
            "-            return serverName;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setServerName(String serverName) {\n", 
            "-            this.serverName = serverName;\n", 
            "-        }\n", 
            "-\n", 
            "-        public String getSynapseHome() {\n", 
            "-            return synapseHome;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setSynapseHome(String synapseHome) {\n", 
            "-            this.synapseHome = synapseHome;\n", 
            "-        }\n", 
            "-\n", 
            "-        public String getAxis2Repo() {\n", 
            "-            return axis2Repo;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setAxis2Repo(String axis2Repo) {\n", 
            "-            this.axis2Repo = axis2Repo;\n", 
            "-        }\n", 
            "-\n", 
            "-        public String getAxis2Xml() {\n", 
            "-            return axis2Xml;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setAxis2Xml(String axis2Xml) {\n", 
            "-            this.axis2Xml = axis2Xml;\n", 
            "-        }\n", 
            "-\n", 
            "-        public String getSynapseXml() {\n", 
            "-            return synapseXml;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setSynapseXml(String synapseXml) {\n", 
            "-            this.synapseXml = synapseXml;\n", 
            "-        }\n", 
            "-\n", 
            "-        public boolean isClusteringEnabled() {\n", 
            "-            return clusteringEnabled;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setClusteringEnabled(boolean clusteringEnabled) {\n", 
            "-            this.clusteringEnabled = clusteringEnabled;\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    class Axis2SampleConfiguration {\n", 
            "-        private String serverName;\n", 
            "-        private String axis2Repo;\n", 
            "-        private String axis2Xml;\n", 
            "-        private String httpPort;\n", 
            "-        private String httpsPort;\n", 
            "-        private boolean clusteringEnabled;\n", 
            "-\n", 
            "-        public String getServerName() {\n", 
            "-            return serverName;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setServerName(String serverName) {\n", 
            "-            this.serverName = serverName;\n", 
            "-        }\n", 
            "-\n", 
            "-        public String getAxis2Repo() {\n", 
            "-            return axis2Repo;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setAxis2Repo(String axis2Repo) {\n", 
            "-            this.axis2Repo = axis2Repo;\n", 
            "-        }\n", 
            "-\n", 
            "-        public String getAxis2Xml() {\n", 
            "-            return axis2Xml;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setAxis2Xml(String axis2Xml) {\n", 
            "-            this.axis2Xml = axis2Xml;\n", 
            "-        }\n", 
            "-\n", 
            "-        public String getHttpPort() {\n", 
            "-            return httpPort;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setHttpPort(String httpPort) {\n", 
            "-            this.httpPort = httpPort;\n", 
            "-        }\n", 
            "-\n", 
            "-        public String getHttpsPort() {\n", 
            "-            return httpsPort;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setHttpsPort(String httpsPort) {\n", 
            "-            this.httpsPort = httpsPort;\n", 
            "-        }\n", 
            "-\n", 
            "-        public boolean isClusteringEnabled() {\n", 
            "-            return clusteringEnabled;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setClusteringEnabled(boolean clusteringEnabled) {\n", 
            "-            this.clusteringEnabled = clusteringEnabled;\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    class JMSBrokerSampleConfiguration {\n", 
            "-        private String serverName;\n", 
            "-        private String providerURL;\n", 
            "-        private String initialNamingFactory;\n", 
            "-\n", 
            "-        public String getServerName() {\n", 
            "-            return serverName;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setServerName(String serverName) {\n", 
            "-            this.serverName = serverName;\n", 
            "-        }\n", 
            "-\n", 
            "-        public String getProviderURL() {\n", 
            "-            return providerURL;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setProviderURL(String providerURL) {\n", 
            "-            this.providerURL = providerURL;\n", 
            "-        }\n", 
            "-\n", 
            "-        public String getInitialNamingFactory() {\n", 
            "-            return initialNamingFactory;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setInitialNamingFactory(String initialNamingFactory) {\n", 
            "-            this.initialNamingFactory = initialNamingFactory;\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-\n", 
            "-    class DerbyServerSampleConfiguration {\n", 
            "-        private String serverName;\n", 
            "-\n", 
            "-        public String getServerName() {\n", 
            "-            return serverName;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setServerName(String serverName) {\n", 
            "-            this.serverName = serverName;\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    class FIXExecutorSampleConfiguration {\n", 
            "-        private String serverName;\n", 
            "-\n", 
            "-        public String getServerName() {\n", 
            "-            return serverName;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setServerName(String serverName) {\n", 
            "-            this.serverName = serverName;\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public class ClientSampleConfiguration {\n", 
            "-        private String clientRepo;\n", 
            "-        private String fileName;\n", 
            "-        private String axis2Xml;\n", 
            "-\n", 
            "-        public String getClientRepo() {\n", 
            "-            return clientRepo;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setClientRepo(String clientRepo) {\n", 
            "-            this.clientRepo = clientRepo;\n", 
            "-        }\n", 
            "-\n", 
            "-        public String getFileName() {\n", 
            "-            return fileName;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setFileName(String fileName) {\n", 
            "-            this.fileName = fileName;\n", 
            "-        }\n", 
            "-\n", 
            "-        public String getAxis2Xml() {\n", 
            "-            return axis2Xml;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void setAxis2Xml(String axis2Xml) {\n", 
            "-            this.axis2Xml = axis2Xml;\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfiguration.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-22,6 +22,7", 
          "lines": [
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.synapse.ServerConfigurationInformation;\n", 
            " import org.apache.synapse.ServerManager;\n", 
            "+import org.apache.synapse.samples.framework.config.SynapseServerConfiguration;\n", 
            " \n", 
            " import java.util.concurrent.CountDownLatch;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-34,13 +35,13", 
          "lines": [
            "     private static final Log log = LogFactory.getLog(SynapseProcessController.class);\n", 
            " \n", 
            "     private ServerThread serverThread;\n", 
            "-    private SampleConfiguration.SynapseSampleConfiguration configuration;\n", 
            "+    private SynapseServerConfiguration configuration;\n", 
            "     private ServerConfigurationInformation information;\n", 
            "     private ServerManager manager;\n", 
            "     private CountDownLatch cdLatch;\n", 
            "     private Exception processException;\n", 
            " \n", 
            "-    public SynapseProcessController(SampleConfiguration.SynapseSampleConfiguration configuration) {\n", 
            "+    public SynapseProcessController(SynapseServerConfiguration configuration) {\n", 
            "         this.configuration = configuration;\n", 
            "         information = new ServerConfigurationInformation();\n", 
            "         manager = new ServerManager();\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseProcessController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseProcessController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,77", 
          "lines": [
            "+/*\n", 
            "+*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n", 
            "+*\n", 
            "+*  WSO2 Inc. licenses this file to you under the Apache License,\n", 
            "+*  Version 2.0 (the \"License\"); you may not use this file except\n", 
            "+*  in compliance with the License.\n", 
            "+*  You may obtain a copy of the License at\n", 
            "+*\n", 
            "+*    http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+*\n", 
            "+* Unless required by applicable law or agreed to in writing,\n", 
            "+* software distributed under the License is distributed on an\n", 
            "+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+* KIND, either express or implied.  See the License for the\n", 
            "+* specific language governing permissions and limitations\n", 
            "+* under the License.\n", 
            "+*/\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework.config;\n", 
            "+\n", 
            "+public class Axis2ServerConfiguration {\n", 
            "+\n", 
            "+    private String serverName;\n", 
            "+    private String axis2Repo;\n", 
            "+    private String axis2Xml;\n", 
            "+    private String httpPort;\n", 
            "+    private String httpsPort;\n", 
            "+    private boolean clusteringEnabled;\n", 
            "+\n", 
            "+    public String getServerName() {\n", 
            "+        return serverName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setServerName(String serverName) {\n", 
            "+        this.serverName = serverName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getAxis2Repo() {\n", 
            "+        return axis2Repo;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setAxis2Repo(String axis2Repo) {\n", 
            "+        this.axis2Repo = axis2Repo;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getAxis2Xml() {\n", 
            "+        return axis2Xml;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setAxis2Xml(String axis2Xml) {\n", 
            "+        this.axis2Xml = axis2Xml;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getHttpPort() {\n", 
            "+        return httpPort;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setHttpPort(String httpPort) {\n", 
            "+        this.httpPort = httpPort;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getHttpsPort() {\n", 
            "+        return httpsPort;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setHttpsPort(String httpsPort) {\n", 
            "+        this.httpsPort = httpsPort;\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean isClusteringEnabled() {\n", 
            "+        return clusteringEnabled;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setClusteringEnabled(boolean clusteringEnabled) {\n", 
            "+        this.clusteringEnabled = clusteringEnabled;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/Axis2ServerConfiguration.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/Axis2ServerConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,50", 
          "lines": [
            "+/*\n", 
            "+*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n", 
            "+*\n", 
            "+*  WSO2 Inc. licenses this file to you under the Apache License,\n", 
            "+*  Version 2.0 (the \"License\"); you may not use this file except\n", 
            "+*  in compliance with the License.\n", 
            "+*  You may obtain a copy of the License at\n", 
            "+*\n", 
            "+*    http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+*\n", 
            "+* Unless required by applicable law or agreed to in writing,\n", 
            "+* software distributed under the License is distributed on an\n", 
            "+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+* KIND, either express or implied.  See the License for the\n", 
            "+* specific language governing permissions and limitations\n", 
            "+* under the License.\n", 
            "+*/\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework.config;\n", 
            "+\n", 
            "+public class JMSBrokerConfiguration {\n", 
            "+\n", 
            "+    private String serverName;\n", 
            "+    private String providerURL;\n", 
            "+    private String initialNamingFactory;\n", 
            "+\n", 
            "+    public String getServerName() {\n", 
            "+        return serverName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setServerName(String serverName) {\n", 
            "+        this.serverName = serverName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getProviderURL() {\n", 
            "+        return providerURL;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setProviderURL(String providerURL) {\n", 
            "+        this.providerURL = providerURL;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getInitialNamingFactory() {\n", 
            "+        return initialNamingFactory;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setInitialNamingFactory(String initialNamingFactory) {\n", 
            "+        this.initialNamingFactory = initialNamingFactory;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/JMSBrokerConfiguration.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/JMSBrokerConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,97", 
          "lines": [
            "+/*\n", 
            "+*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n", 
            "+*\n", 
            "+*  WSO2 Inc. licenses this file to you under the Apache License,\n", 
            "+*  Version 2.0 (the \"License\"); you may not use this file except\n", 
            "+*  in compliance with the License.\n", 
            "+*  You may obtain a copy of the License at\n", 
            "+*\n", 
            "+*    http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+*\n", 
            "+* Unless required by applicable law or agreed to in writing,\n", 
            "+* software distributed under the License is distributed on an\n", 
            "+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+* KIND, either express or implied.  See the License for the\n", 
            "+* specific language governing permissions and limitations\n", 
            "+* under the License.\n", 
            "+*/\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework.config;\n", 
            "+\n", 
            "+import java.util.HashMap;\n", 
            "+import java.util.Set;\n", 
            "+\n", 
            "+public class SampleConfiguration {\n", 
            "+\n", 
            "+    private String sampleName;\n", 
            "+    private SynapseServerConfiguration synapseServerConfig;\n", 
            "+    private HashMap<String, Axis2ServerConfiguration> axis2ServerConfigs;\n", 
            "+    private HashMap<String, JMSBrokerConfiguration> jmsConfigs;\n", 
            "+    private HashMap<String, DerbyConfiguration> derbyConfigs;\n", 
            "+    private Axis2ClientConfiguration axis2ClientConfig;\n", 
            "+\n", 
            "+    public SampleConfiguration() {\n", 
            "+        this.synapseServerConfig = new SynapseServerConfiguration();\n", 
            "+        this.axis2ServerConfigs = new HashMap<String, Axis2ServerConfiguration>();\n", 
            "+        this.jmsConfigs = new HashMap<String, JMSBrokerConfiguration>();\n", 
            "+        this.derbyConfigs = new HashMap<String, DerbyConfiguration>();\n", 
            "+        this.axis2ClientConfig = new Axis2ClientConfiguration();\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getSampleName() {\n", 
            "+        return sampleName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setSampleName(String sampleName) {\n", 
            "+        this.sampleName = sampleName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public Axis2ClientConfiguration getAxis2ClientConfig() {\n", 
            "+        return axis2ClientConfig;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setAxis2Client(Axis2ClientConfiguration axis2ClientConfig) {\n", 
            "+        this.axis2ClientConfig = axis2ClientConfig;\n", 
            "+    }\n", 
            "+\n", 
            "+    public SynapseServerConfiguration getSynapseServerConfig() {\n", 
            "+        return synapseServerConfig;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setSynapseServerConfig(SynapseServerConfiguration synapseServerConfig) {\n", 
            "+        this.synapseServerConfig = synapseServerConfig;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void addNewAxis2Server(String name) {\n", 
            "+        axis2ServerConfigs.put(name, new Axis2ServerConfiguration());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void addNewJMSBroker(String name) {\n", 
            "+        jmsConfigs.put(name, new JMSBrokerConfiguration());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void addNewDerbyServer(String name) {\n", 
            "+        derbyConfigs.put(name, new DerbyConfiguration());\n", 
            "+    }\n", 
            "+\n", 
            "+    public Axis2ServerConfiguration getAxis2Config(String name) {\n", 
            "+        return axis2ServerConfigs.get(name);\n", 
            "+    }\n", 
            "+\n", 
            "+    public JMSBrokerConfiguration getJMSConfig(String name) {\n", 
            "+        return jmsConfigs.get(name);\n", 
            "+    }\n", 
            "+\n", 
            "+    public DerbyConfiguration getDerbyConfig(String name) {\n", 
            "+        return derbyConfigs.get(name);\n", 
            "+    }\n", 
            "+\n", 
            "+    public Set<String> getAxis2ServersList() {\n", 
            "+        return axis2ServerConfigs.keySet();\n", 
            "+    }\n", 
            "+\n", 
            "+    public int getBackEndServerCount() {\n", 
            "+        return axis2ServerConfigs.size() + jmsConfigs.size();\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SampleConfiguration.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SampleConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,50", 
          "lines": [
            "+/*\n", 
            "+*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n", 
            "+*\n", 
            "+*  WSO2 Inc. licenses this file to you under the Apache License,\n", 
            "+*  Version 2.0 (the \"License\"); you may not use this file except\n", 
            "+*  in compliance with the License.\n", 
            "+*  You may obtain a copy of the License at\n", 
            "+*\n", 
            "+*    http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+*\n", 
            "+* Unless required by applicable law or agreed to in writing,\n", 
            "+* software distributed under the License is distributed on an\n", 
            "+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+* KIND, either express or implied.  See the License for the\n", 
            "+* specific language governing permissions and limitations\n", 
            "+* under the License.\n", 
            "+*/\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework.config;\n", 
            "+\n", 
            "+public class Axis2ClientConfiguration {\n", 
            "+\n", 
            "+    private String clientRepo;\n", 
            "+    private String fileName;\n", 
            "+    private String axis2Xml;\n", 
            "+\n", 
            "+    public String getClientRepo() {\n", 
            "+        return clientRepo;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setClientRepo(String clientRepo) {\n", 
            "+        this.clientRepo = clientRepo;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getFileName() {\n", 
            "+        return fileName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setFileName(String fileName) {\n", 
            "+        this.fileName = fileName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getAxis2Xml() {\n", 
            "+        return axis2Xml;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setAxis2Xml(String axis2Xml) {\n", 
            "+        this.axis2Xml = axis2Xml;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/Axis2ClientConfiguration.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/Axis2ClientConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,32", 
          "lines": [
            "+/*\n", 
            "+*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n", 
            "+*\n", 
            "+*  WSO2 Inc. licenses this file to you under the Apache License,\n", 
            "+*  Version 2.0 (the \"License\"); you may not use this file except\n", 
            "+*  in compliance with the License.\n", 
            "+*  You may obtain a copy of the License at\n", 
            "+*\n", 
            "+*    http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+*\n", 
            "+* Unless required by applicable law or agreed to in writing,\n", 
            "+* software distributed under the License is distributed on an\n", 
            "+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+* KIND, either express or implied.  See the License for the\n", 
            "+* specific language governing permissions and limitations\n", 
            "+* under the License.\n", 
            "+*/\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework.config;\n", 
            "+\n", 
            "+public class DerbyConfiguration {\n", 
            "+\n", 
            "+    private String serverName;\n", 
            "+\n", 
            "+    public String getServerName() {\n", 
            "+        return serverName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setServerName(String serverName) {\n", 
            "+        this.serverName = serverName;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/DerbyConfiguration.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/DerbyConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,77", 
          "lines": [
            "+/*\n", 
            "+*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n", 
            "+*\n", 
            "+*  WSO2 Inc. licenses this file to you under the Apache License,\n", 
            "+*  Version 2.0 (the \"License\"); you may not use this file except\n", 
            "+*  in compliance with the License.\n", 
            "+*  You may obtain a copy of the License at\n", 
            "+*\n", 
            "+*    http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+*\n", 
            "+* Unless required by applicable law or agreed to in writing,\n", 
            "+* software distributed under the License is distributed on an\n", 
            "+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+* KIND, either express or implied.  See the License for the\n", 
            "+* specific language governing permissions and limitations\n", 
            "+* under the License.\n", 
            "+*/\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework.config;\n", 
            "+\n", 
            "+public class SynapseServerConfiguration {\n", 
            "+\n", 
            "+    private String serverName;\n", 
            "+    private String synapseHome;\n", 
            "+    private String axis2Repo;\n", 
            "+    private String axis2Xml;\n", 
            "+    private String synapseXml;\n", 
            "+    private boolean clusteringEnabled;\n", 
            "+\n", 
            "+    public String getServerName() {\n", 
            "+        return serverName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setServerName(String serverName) {\n", 
            "+        this.serverName = serverName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getSynapseHome() {\n", 
            "+        return synapseHome;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setSynapseHome(String synapseHome) {\n", 
            "+        this.synapseHome = synapseHome;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getAxis2Repo() {\n", 
            "+        return axis2Repo;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setAxis2Repo(String axis2Repo) {\n", 
            "+        this.axis2Repo = axis2Repo;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getAxis2Xml() {\n", 
            "+        return axis2Xml;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setAxis2Xml(String axis2Xml) {\n", 
            "+        this.axis2Xml = axis2Xml;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getSynapseXml() {\n", 
            "+        return synapseXml;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setSynapseXml(String synapseXml) {\n", 
            "+        this.synapseXml = synapseXml;\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean isClusteringEnabled() {\n", 
            "+        return clusteringEnabled;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setClusteringEnabled(boolean clusteringEnabled) {\n", 
            "+        this.clusteringEnabled = clusteringEnabled;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SynapseServerConfiguration.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SynapseServerConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-8,6 +8,7", 
          "lines": [
            " import org.apache.axis2.engine.ListenerManager;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.config.Axis2ServerConfiguration;\n", 
            " \n", 
            " import java.util.concurrent.CountDownLatch;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-23,12 +24,12", 
          "lines": [
            "     private BackEndServerThread serverThread;\n", 
            "     private ConfigurationContext configContext;\n", 
            "     private ListenerManager listenerManager;\n", 
            "-    private SampleConfiguration.Axis2SampleConfiguration configuration;\n", 
            "+    private Axis2ServerConfiguration configuration;\n", 
            "     private CountDownLatch cdLatch;\n", 
            "     private Exception processException;\n", 
            " \n", 
            "     public Axis2BackEndServerController(String serverName,\n", 
            "-                                        SampleConfiguration.Axis2SampleConfiguration configuration) {\n", 
            "+                                        Axis2ServerConfiguration configuration) {\n", 
            "         this.serverName = serverName;\n", 
            "         this.configuration = configuration;\n", 
            "         serverThread = new BackEndServerThread();\n"
          ]
        }, 
        {
          "locn": "-88,7 +89,6", 
          "lines": [
            "                 // setting System.setProperty does not work since this all servers are run on same jvm\n", 
            "                 configContext.setProperty(\"server_name\", serverName);\n", 
            " \n", 
            "-\n", 
            "                 TransportInDescription httpTrsIn = configContext.getAxisConfiguration().\n", 
            "                         getTransportsIn().get(\"http\");\n", 
            "                 String httpPort = configuration.getHttpPort();\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/Axis2BackEndServerController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/Axis2BackEndServerController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-29,6 +29,7", 
          "lines": [
            " import org.apache.synapse.samples.framework.clients.EventSampleClient;\n", 
            " import org.apache.synapse.samples.framework.clients.MTOMSwASampleClient;\n", 
            " import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+import org.apache.synapse.samples.framework.config.SampleConfiguration;\n", 
            " \n", 
            " import javax.xml.namespace.QName;\n", 
            " import java.io.File;\n"
          ]
        }, 
        {
          "locn": "-83,7 +84,7", 
          "lines": [
            "         assertTrue(\"Could not load client configuration settings for the sample \" + sampleId,\n", 
            "                 initClientConfigInfo());\n", 
            " \n", 
            "-        if (configuration.getSynapseConfig().isClusteringEnabled()) {\n", 
            "+        if (configuration.getSynapseServerConfig().isClusteringEnabled()) {\n", 
            "             assertTrue(\"Could not properly configure clustering\", configureClustering());\n", 
            "         }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-216,35 +217,35", 
          "lines": [
            "         Boolean clusteringEnabled = Boolean.parseBoolean(\n", 
            "                 (String) synapseProperties.get(SampleConfigConstants.TAG_ENABLE_CLUSTERING));\n", 
            " \n", 
            "-        configuration.getSynapseConfig().setServerName(\"SynapseServerForSample\" + sampleId);\n", 
            "+        configuration.getSynapseServerConfig().setServerName(\"SynapseServerForSample\" + sampleId);\n", 
            " \n", 
            "         if (synapseXml == null) {\n", 
            "             log.error(\"synapse config file must be specified for the sample\");\n", 
            "             return false;\n", 
            "         } else {\n", 
            "-            configuration.getSynapseConfig().setSynapseXml(synapseHome + synapseXml);\n", 
            "+            configuration.getSynapseServerConfig().setSynapseXml(synapseHome + synapseXml);\n", 
            "         }\n", 
            " \n", 
            "         if (axis2Repo == null) {\n", 
            "-            configuration.getSynapseConfig().setAxis2Repo(synapseHome +\n", 
            "+            configuration.getSynapseServerConfig().setAxis2Repo(synapseHome +\n", 
            "                     SampleConfigConstants.DEFAULT_SYNAPSE_CONF_AXIS2_REPO);\n", 
            "         } else {\n", 
            "             log.info(\"Using Synapse Axis2 repository: \" + axis2Repo);\n", 
            "-            configuration.getSynapseConfig().setAxis2Repo(synapseHome + axis2Repo);\n", 
            "+            configuration.getSynapseServerConfig().setAxis2Repo(synapseHome + axis2Repo);\n", 
            "         }\n", 
            " \n", 
            "         if (axis2Xml == null) {\n", 
            "-            configuration.getSynapseConfig().setAxis2Xml(synapseHome +\n", 
            "+            configuration.getSynapseServerConfig().setAxis2Xml(synapseHome +\n", 
            "                     SampleConfigConstants.DEFAULT_SYNAPSE_CONF_AXIS2_XML);\n", 
            "         } else {\n", 
            "             log.info(\"Using Synapse Axis2 XML: \" + axis2Xml);\n", 
            "-            configuration.getSynapseConfig().setAxis2Xml(synapseHome + axis2Xml);\n", 
            "+            configuration.getSynapseServerConfig().setAxis2Xml(synapseHome + axis2Xml);\n", 
            "         }\n", 
            " \n", 
            "-        configuration.getSynapseConfig().setSynapseHome(synapseHome);\n", 
            "-        configuration.getSynapseConfig().setClusteringEnabled(clusteringEnabled);\n", 
            "+        configuration.getSynapseServerConfig().setSynapseHome(synapseHome);\n", 
            "+        configuration.getSynapseServerConfig().setClusteringEnabled(clusteringEnabled);\n", 
            " \n", 
            "-        pc = new SynapseProcessController(configuration.getSynapseConfig());\n", 
            "+        pc = new SynapseProcessController(configuration.getSynapseServerConfig());\n", 
            "         return true;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-255,10 +256,10", 
          "lines": [
            "      */\n", 
            "     private boolean initBackEndServersConfigInfo() {\n", 
            "         OMElement bESConfigEle = null;\n", 
            "-        Iterator itr_BEEle = sampleConfigElement.getChildrenWithLocalName(\n", 
            "+        Iterator itrBackEndElements = sampleConfigElement.getChildrenWithLocalName(\n", 
            "                 SampleConfigConstants.TAG_BE_SERVER_CONF);\n", 
            "-        while (itr_BEEle.hasNext()) {\n", 
            "-            bESConfigEle = (OMElement) itr_BEEle.next();\n", 
            "+        while (itrBackEndElements.hasNext()) {\n", 
            "+            bESConfigEle = (OMElement) itrBackEndElements.next();\n", 
            "         }\n", 
            "         if (bESConfigEle == null) {\n", 
            "             log.warn(\"No backend servers are defined\");\n"
          ]
        }, 
        {
          "locn": "-412,20 +413,20", 
          "lines": [
            "                 SampleConfigConstants.TAG_CLIENT_CONF_AXIS2_XML);\n", 
            " \n", 
            "         if (clientRepo == null) {\n", 
            "-            configuration.getClientConfig().setClientRepo(FilenameUtils.normalize(\n", 
            "+            configuration.getAxis2ClientConfig().setClientRepo(FilenameUtils.normalize(\n", 
            "                     currentLocation + SampleConfigConstants.DEFAULT_CLIENT_CONF_REPO));\n", 
            "         } else {\n", 
            "             log.info(\"Using client Axis2 repository location: \" + clientRepo);\n", 
            "-            configuration.getClientConfig().setClientRepo(FilenameUtils.normalize(\n", 
            "+            configuration.getAxis2ClientConfig().setClientRepo(FilenameUtils.normalize(\n", 
            "                     currentLocation + clientRepo));\n", 
            "         }\n", 
            " \n", 
            "         if (clientAxis2Xml == null) {\n", 
            "-            configuration.getClientConfig().setAxis2Xml(FilenameUtils.normalize(\n", 
            "+            configuration.getAxis2ClientConfig().setAxis2Xml(FilenameUtils.normalize(\n", 
            "                     currentLocation + SampleConfigConstants.DEFAULT_CLIENT_CONF_AXIS2_XML));\n", 
            "         } else {\n", 
            "             log.info(\"Using client Axis2 XML: \" + clientAxis2Xml);\n", 
            "-            configuration.getClientConfig().setAxis2Xml(FilenameUtils.normalize(\n", 
            "+            configuration.getAxis2ClientConfig().setAxis2Xml(FilenameUtils.normalize(\n", 
            "                     currentLocation + clientAxis2Xml));\n", 
            "         }\n", 
            "         return true;\n"
          ]
        }, 
        {
          "locn": "-441,13 +442,13", 
          "lines": [
            "             }\n", 
            "             log.info(\" Using the IP :\" + ip);\n", 
            " \n", 
            "-            String synapseAxis2Xml = configuration.getSynapseConfig().getAxis2Xml();\n", 
            "+            String synapseAxis2Xml = configuration.getSynapseServerConfig().getAxis2Xml();\n", 
            "             String axis2Config = FileUtils.readFileToString(new File(synapseAxis2Xml));\n", 
            "             String modifiedSynapseAxis2 = SynapseTestUtils.replace(axis2Config, \"${replace.me}\", ip);\n", 
            "             File tempSynapseAxis2 = File.createTempFile(\"axis2Syn-\", \"xml\");\n", 
            "             tempSynapseAxis2.deleteOnExit();\n", 
            "             FileUtils.writeStringToFile(tempSynapseAxis2, modifiedSynapseAxis2);\n", 
            "-            configuration.getSynapseConfig().setAxis2Xml(tempSynapseAxis2.getAbsolutePath());\n", 
            "+            configuration.getSynapseServerConfig().setAxis2Xml(tempSynapseAxis2.getAbsolutePath());\n", 
            " \n", 
            "             for (BackEndServerController controller : backendServerControllers) {\n", 
            "                 String serverName = controller.getServerName();\n"
          ]
        }, 
        {
          "locn": "-478,15 +479,15", 
          "lines": [
            "     }\n", 
            " \n", 
            "     public StockQuoteSampleClient getStockQuoteClient() {\n", 
            "-        return new StockQuoteSampleClient(configuration.getClientConfig());\n", 
            "+        return new StockQuoteSampleClient(configuration.getAxis2ClientConfig());\n", 
            "     }\n", 
            " \n", 
            "     public EventSampleClient getEventSubscriberSampleClient() {\n", 
            "-        return new EventSampleClient(configuration.getClientConfig());\n", 
            "+        return new EventSampleClient(configuration.getAxis2ClientConfig());\n", 
            "     }\n", 
            " \n", 
            "     public MTOMSwASampleClient getMTOMSwASampleClient() {\n", 
            "-        return new MTOMSwASampleClient(configuration.getClientConfig());\n", 
            "+        return new MTOMSwASampleClient(configuration.getAxis2ClientConfig());\n", 
            "     }\n", 
            " \n", 
            "     protected void assertResponseReceived(SampleClientResult result) {\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestCase.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestCase.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-19,6 +19,7", 
          "lines": [
            " package org.apache.synapse.samples.framework;\n", 
            " \n", 
            " import java.util.Properties;\n", 
            "+import java.util.concurrent.atomic.AtomicInteger;\n", 
            " \n", 
            " /**\n", 
            "  * Stores the results after executing a client\n"
          ]
        }, 
        {
          "locn": "-25,13 +26,12", 
          "lines": [
            "  */\n", 
            " public class SampleClientResult {\n", 
            " \n", 
            "-    private boolean responseReceived;\n", 
            "-    private boolean isFinished;\n", 
            "+    private AtomicInteger responseCount = new AtomicInteger(0);\n", 
            "     private Exception exception;\n", 
            "     private Properties clientProperties = new Properties();\n", 
            " \n", 
            "-    public void setResponseReceived(boolean responseReceived) {\n", 
            "-        this.responseReceived = responseReceived;\n", 
            "+    public void incrementResponseCount() {\n", 
            "+        responseCount.incrementAndGet();\n", 
            "     }\n", 
            " \n", 
            "     public void setException(Exception exception) {\n"
          ]
        }, 
        {
          "locn": "-39,7 +39,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     public boolean responseReceived() {\n", 
            "-        return responseReceived;\n", 
            "+        return responseCount.get() > 0;\n", 
            "     }\n", 
            " \n", 
            "     public Exception getException() {\n"
          ]
        }, 
        {
          "locn": "-46,14 +46,6", 
          "lines": [
            "         return exception;\n", 
            "     }\n", 
            " \n", 
            "-    public boolean isFinished() {\n", 
            "-        return isFinished;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setFinished(boolean finished) {\n", 
            "-        isFinished = finished;\n", 
            "-    }\n", 
            "-\n", 
            "     public void addProperty(String pName, String pValue){\n", 
            "         clientProperties.setProperty(pName,pValue);\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleClientResult.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleClientResult.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-4,6 +4,7", 
          "lines": [
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.derby.drda.NetworkServerControl;\n", 
            "+import org.apache.synapse.samples.framework.config.DerbyConfiguration;\n", 
            " \n", 
            " import java.io.File;\n", 
            " import java.net.InetAddress;\n"
          ]
        }, 
        {
          "locn": "-21,11 +22,10", 
          "lines": [
            "     private static final Log log = LogFactory.getLog(DerbyServerController.class);\n", 
            " \n", 
            "     private String serverName;\n", 
            "-    private SampleConfiguration.DerbyServerSampleConfiguration configuration;\n", 
            "+    private DerbyConfiguration configuration;\n", 
            "     private NetworkServerControl server;\n", 
            " \n", 
            "-    public DerbyServerController(String serverName,\n", 
            "-                                 SampleConfiguration.DerbyServerSampleConfiguration configuration) {\n", 
            "+    public DerbyServerController(String serverName, DerbyConfiguration configuration) {\n", 
            "         this.serverName = serverName;\n", 
            "         this.configuration = configuration;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/DerbyServerController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/DerbyServerController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-35,7 +35,7", 
          "lines": [
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "-import org.apache.synapse.samples.framework.SampleConfiguration;\n", 
            "+import org.apache.synapse.samples.framework.config.Axis2ClientConfiguration;\n", 
            " \n", 
            " import javax.activation.DataHandler;\n", 
            " import javax.activation.FileDataSource;\n"
          ]
        }, 
        {
          "locn": "-46,18 +46,15", 
          "lines": [
            " import java.io.InputStream;\n", 
            " \n", 
            " public class MTOMSwASampleClient {\n", 
            "+\n", 
            "     private static final Log log = LogFactory.getLog(StockQuoteSampleClient.class);\n", 
            "-    ConfigurationContext configContext = null;\n", 
            " \n", 
            "-    Options options;\n", 
            "     SampleClientResult clientResult;\n", 
            "     OMElement payload;\n", 
            "-    OMElement response;\n", 
            "     ServiceClient serviceClient;\n", 
            "-    boolean completed;\n", 
            "-    SampleConfiguration.ClientSampleConfiguration configuration;\n", 
            "+    Axis2ClientConfiguration configuration;\n", 
            " \n", 
            "-    public MTOMSwASampleClient(SampleConfiguration.ClientSampleConfiguration configuration) {\n", 
            "+    public MTOMSwASampleClient(Axis2ClientConfiguration configuration) {\n", 
            "         this.configuration = configuration;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-113,11 +110,9", 
          "lines": [
            "             dest.flush();\n", 
            "             dest.close();\n", 
            "             log.info(\"Saved response to file : \" + tempFile.getAbsolutePath());\n", 
            "-\n", 
            "-            clientResult.setResponseReceived(true);\n", 
            "+            clientResult.incrementResponseCount();\n", 
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error invoking service\", e);\n", 
            "-            clientResult.setResponseReceived(false);\n", 
            "             clientResult.setException(e);\n", 
            "         }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-183,11 +178,9", 
          "lines": [
            "             fos.close();\n", 
            " \n", 
            "             log.info(\"Saved response to file : \" + tempFile.getAbsolutePath());\n", 
            "-\n", 
            "-            clientResult.setResponseReceived(true);\n", 
            "+            clientResult.incrementResponseCount();\n", 
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error invoking service\", e);\n", 
            "-            clientResult.setResponseReceived(false);\n", 
            "             clientResult.setException(e);\n", 
            "         }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/MTOMSwASampleClient.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/MTOMSwASampleClient.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-33,7 +33,7", 
          "lines": [
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "-import org.apache.synapse.samples.framework.SampleConfiguration;\n", 
            "+import org.apache.synapse.samples.framework.config.Axis2ClientConfiguration;\n", 
            " \n", 
            " import javax.xml.namespace.QName;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-44,8 +44,7", 
          "lines": [
            " \n", 
            "     private Options options;\n", 
            "     private ServiceClient serviceClient;\n", 
            "-    private SampleClientResult clientResult;\n", 
            "-    private SampleConfiguration.ClientSampleConfiguration configuration;\n", 
            "+    private Axis2ClientConfiguration configuration;\n", 
            "     private OMFactory factory;\n", 
            "     private OMElement message;\n", 
            "     private OMNamespace schemaNamespace;\n"
          ]
        }, 
        {
          "locn": "-53,7 +52,7", 
          "lines": [
            "     private OMNamespace addressingNamespace;\n", 
            "     private OMNamespace eventingNamespace;\n", 
            " \n", 
            "-    public EventSampleClient(SampleConfiguration.ClientSampleConfiguration configuration) {\n", 
            "+    public EventSampleClient(Axis2ClientConfiguration configuration) {\n", 
            "         this.configuration = configuration;\n", 
            "         factory = OMAbstractFactory.getOMFactory();\n", 
            "         schemaNamespace = factory.createOMNamespace(\"http://www.w3.org/2001/XMLSchema\", \"xmlns\");\n"
          ]
        }, 
        {
          "locn": "-67,9 +66,6", 
          "lines": [
            " \n", 
            "     private void initializeClient(String addUrl) throws Exception {\n", 
            "         options = new Options();\n", 
            "-        clientResult = new SampleClientResult();\n", 
            "-        clientResult.setResponseReceived(false);\n", 
            "-\n", 
            "         ConfigurationContext configContext;\n", 
            "         configContext = ConfigurationContextFactory.\n", 
            "                 createConfigurationContextFromFileSystem(configuration.getClientRepo(),\n"
          ]
        }, 
        {
          "locn": "-118,8 +114,8", 
          "lines": [
            "         }\n", 
            "         subscribeOm.addChild(filterOm);\n", 
            " \n", 
            "-\n", 
            "         log.info(\"Subscribing: \" + subscribeOm.toString());\n", 
            "+        SampleClientResult clientResult = new SampleClientResult();\n", 
            "         try {\n", 
            "             initializeClient(addUrl);\n", 
            "             options.setAction(\"http://schemas.xmlsoap.org/ws/2004/08/eventing/Subscribe\");\n"
          ]
        }, 
        {
          "locn": "-141,10 +137,9", 
          "lines": [
            "                                     new QName(eventingNamespace.getNamespaceURI(), \"Identifier\")).getText();\n", 
            "             log.info(\"Subscription identifier: \" + subId);\n", 
            "             clientResult.addProperty(\"subId\", subId);\n", 
            "-            clientResult.setResponseReceived(true);\n", 
            "+            clientResult.incrementResponseCount();\n", 
            "         } catch (Exception e) {\n", 
            "             log.error(\"Fault Received : \" + e.toString(), e);\n", 
            "-            clientResult.setResponseReceived(false);\n", 
            "             clientResult.setException(e);\n", 
            "         }\n", 
            "         deInitializeClient();\n"
          ]
        }, 
        {
          "locn": "-184,6 +179,7", 
          "lines": [
            "         OMElement subscribeOm = factory.createOMElement(\"Unsubscribe\", eventingNamespace);\n", 
            " \n", 
            "         log.info(\"UnSubscribing: \" + subscribeOm.toString());\n", 
            "+        SampleClientResult clientResult = new SampleClientResult();\n", 
            "         try {\n", 
            "             initializeClient(addUrl);\n", 
            "             options.setAction(\"http://schemas.xmlsoap.org/ws/2004/08/eventing/Unsubscribe\");\n"
          ]
        }, 
        {
          "locn": "-195,10 +191,9", 
          "lines": [
            "             log.info(\"UnSubscribed to ID \" + identifier);\n", 
            "             Thread.sleep(1000);\n", 
            "             log.info(\"UnSubscribe Response Received: \" + response.toString());\n", 
            "-            clientResult.setResponseReceived(true);\n", 
            "+            clientResult.incrementResponseCount();\n", 
            "         } catch (Exception e) {\n", 
            "             log.error(\"Fault Received : \" + e.toString(), e);\n", 
            "-            clientResult.setResponseReceived(false);\n", 
            "             clientResult.setException(e);\n", 
            "         }\n", 
            "         deInitializeClient();\n"
          ]
        }, 
        {
          "locn": "-244,6 +239,7", 
          "lines": [
            " \n", 
            " \n", 
            "         log.info(\"SynapseSubscription Renew \\n\" + subscribeOm.toString());\n", 
            "+        SampleClientResult clientResult = new SampleClientResult();\n", 
            "         try {\n", 
            "             initializeClient(addUrl);\n", 
            "             OMElement identifierOm = factory.createOMElement(\"Identifier\", eventingNamespace);\n"
          ]
        }, 
        {
          "locn": "-258,10 +254,9", 
          "lines": [
            " \n", 
            "             }\n", 
            "             log.info(\"SynapseSubscription Renew Response Received: \" + response.toString());\n", 
            "-            clientResult.setResponseReceived(true);\n", 
            "+            clientResult.incrementResponseCount();\n", 
            "         } catch (Exception e) {\n", 
            "             log.error(\"Fault Received : \" + e.toString(), e);\n", 
            "-            clientResult.setResponseReceived(false);\n", 
            "             clientResult.setException(e);\n", 
            "         }\n", 
            "         deInitializeClient();\n"
          ]
        }, 
        {
          "locn": "-300,6 +295,7", 
          "lines": [
            "         OMElement subscribeOm = factory.createOMElement(\"GetStatus\", eventingNamespace);\n", 
            " \n", 
            "         log.info(\"GetStatus using: \" + subscribeOm.toString());\n", 
            "+        SampleClientResult clientResult = new SampleClientResult();\n", 
            "         try {\n", 
            "             initializeClient(addUrl);\n", 
            "             options.setAction(\"http://schemas.xmlsoap.org/ws/2004/08/eventing/GetStatus\");\n"
          ]
        }, 
        {
          "locn": "-315,10 +311,9", 
          "lines": [
            " \n", 
            "             }\n", 
            "             log.info(\"GetStatus Response Received: \" + response.toString());\n", 
            "-            clientResult.setResponseReceived(true);\n", 
            "+            clientResult.incrementResponseCount();\n", 
            "         } catch (Exception e) {\n", 
            "             log.error(\"Fault Received : \" + e.toString(), e);\n", 
            "-            clientResult.setResponseReceived(false);\n", 
            "             clientResult.setException(e);\n", 
            "         }\n", 
            "         deInitializeClient();\n"
          ]
        }, 
        {
          "locn": "-327,9 +322,9", 
          "lines": [
            " \n", 
            "     public SampleClientResult sendEvent(String addUrl, String symbol, String price, String qty,\n", 
            "                                         String topic, String topicns) {\n", 
            "+        SampleClientResult clientResult = new SampleClientResult();\n", 
            "         try {\n", 
            "             initializeClient(addUrl);\n", 
            "-\n", 
            "             OMNamespace aipNamespace = factory.createOMNamespace(topicns, \"aip\");\n", 
            "             // set the target topic\n", 
            "             OMElement topicOm = factory.createOMElement(\"Topic\", aipNamespace);\n"
          ]
        }, 
        {
          "locn": "-351,10 +346,9", 
          "lines": [
            "             serviceClient.fireAndForget(payload);\n", 
            "             log.info(\"Event sent to topic \" + topic);\n", 
            "             Thread.sleep(1000);\n", 
            "-            clientResult.setResponseReceived(true);\n", 
            "+            clientResult.incrementResponseCount();\n", 
            "         } catch (Exception e) {\n", 
            "             log.error(\"Fault Received : \" + e.toString(), e);\n", 
            "-            clientResult.setResponseReceived(false);\n", 
            "             clientResult.setException(e);\n", 
            "         }\n", 
            "         deInitializeClient();\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/EventSampleClient.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/EventSampleClient.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-42,7 +42,7", 
          "lines": [
            " import org.apache.neethi.PolicyEngine;\n", 
            " import org.apache.rampart.RampartMessageData;\n", 
            " import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "-import org.apache.synapse.samples.framework.SampleConfiguration;\n", 
            "+import org.apache.synapse.samples.framework.config.Axis2ClientConfiguration;\n", 
            " \n", 
            " import javax.xml.namespace.QName;\n", 
            " import java.net.URL;\n"
          ]
        }, 
        {
          "locn": "-56,45 +56,36", 
          "lines": [
            " \n", 
            "     private final static String COOKIE = \"Cookie\";\n", 
            "     private final static String SET_COOKIE = \"Set-Cookie\";\n", 
            "+\n", 
            "     private ConfigurationContext configContext = null;\n", 
            "-\n", 
            "-    private Options options;\n", 
            "     private ServiceClient serviceClient;\n", 
            "-    //private SampleClientResult clientResult;\n", 
            "     private OMElement payload;\n", 
            "     private OMElement response;\n", 
            "     private boolean completed;\n", 
            "-    private SampleConfiguration.ClientSampleConfiguration configuration;\n", 
            "+    private Axis2ClientConfiguration clientConfig;\n", 
            " \n", 
            "-    public StockQuoteSampleClient(SampleConfiguration.ClientSampleConfiguration configuration) {\n", 
            "-        this.configuration = configuration;\n", 
            "+    public StockQuoteSampleClient(Axis2ClientConfiguration clientConfig) {\n", 
            "+        this.clientConfig = clientConfig;\n", 
            "     }\n", 
            " \n", 
            "-    private void initializeClient(String addUrl, String trpUrl, String prxUrl,\n", 
            "-                                  String svcPolicy, long timeout) throws Exception {\n", 
            "-        log.info(\"initialing client config...\");\n", 
            "-        options = new Options();\n", 
            "-        /*clientResult = new SampleClientResult();\n", 
            "-        clientResult.setResponseReceived(false);*/\n", 
            "-        payload = null;\n", 
            "+    private void init(String addUrl, String trpUrl, String prxUrl,\n", 
            "+                      String policyKey, long timeout) throws Exception {\n", 
            " \n", 
            "-        log.info(\"creating axis2 configuration context using the repo: \" + configuration.getClientRepo());\n", 
            "+        log.info(\"Initializing sample Axis2 client\");\n", 
            " \n", 
            "-        configContext = ConfigurationContextFactory.\n", 
            "-                createConfigurationContextFromFileSystem(configuration.getClientRepo(),\n", 
            "-                        configuration.getAxis2Xml());\n", 
            "+        configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(\n", 
            "+                    clientConfig.getClientRepo(), clientConfig.getAxis2Xml());\n", 
            "         serviceClient = new ServiceClient(configContext, null);\n", 
            " \n", 
            "-        log.info(\"setting address, transport, proxy urls where applicable\");\n", 
            "-        if (addUrl != null && !\"null\".equals(addUrl)) {\n", 
            "+        Options options = new Options();\n", 
            "+        if (addUrl != null && !\"\".equals(addUrl)) {\n", 
            "             serviceClient.engageModule(\"addressing\");\n", 
            "             options.setTo(new EndpointReference(addUrl));\n", 
            "         }\n", 
            "-        if (trpUrl != null && !\"null\".equals(trpUrl)) {\n", 
            "+        if (trpUrl != null && !\"\".equals(trpUrl)) {\n", 
            "             options.setProperty(Constants.Configuration.TRANSPORT_URL, trpUrl);\n", 
            "         }\n", 
            "-\n", 
            "-        if (prxUrl != null && !\"null\".equals(prxUrl)) {\n", 
            "+        if (prxUrl != null && !\"\".equals(prxUrl)) {\n", 
            "             HttpTransportProperties.ProxyProperties proxyProperties =\n", 
            "                     new HttpTransportProperties.ProxyProperties();\n", 
            "             URL url = new URL(prxUrl);\n"
          ]
        }, 
        {
          "locn": "-106,15 +97,13", 
          "lines": [
            "             options.setProperty(HTTPConstants.PROXY, proxyProperties);\n", 
            "         }\n", 
            " \n", 
            "-        // apply any service policies if any\n", 
            "-        if (svcPolicy != null && !\"null\".equals(svcPolicy) && svcPolicy.length() > 0) {\n", 
            "+        if (policyKey != null && !\"\".equals(policyKey)) {\n", 
            "             log.info(\"Using WS-Security\");\n", 
            "             serviceClient.engageModule(\"addressing\");\n", 
            "             serviceClient.engageModule(\"rampart\");\n", 
            "-            StAXOMBuilder builder = new StAXOMBuilder(svcPolicy);\n", 
            "+            StAXOMBuilder builder = new StAXOMBuilder(policyKey);\n", 
            "             Policy policy = PolicyEngine.getPolicy(builder.getDocumentElement());\n", 
            "-            options.setProperty(\n", 
            "-                    RampartMessageData.KEY_RAMPART_POLICY, policy);\n", 
            "+            options.setProperty(RampartMessageData.KEY_RAMPART_POLICY, policy);\n", 
            "         }\n", 
            " \n", 
            "         if (timeout > 0) {\n"
          ]
        }, 
        {
          "locn": "-125,7 +114,7", 
          "lines": [
            "         serviceClient.setOptions(options);\n", 
            "     }\n", 
            " \n", 
            "-    private void terminateClient() {\n", 
            "+    private void terminate() {\n", 
            "         if (serviceClient != null) {\n", 
            "             try {\n", 
            "                 log.info(\"cleaning up client\");\n"
          ]
        }, 
        {
          "locn": "-152,22 +141,20", 
          "lines": [
            "         log.info(\"sending standard quote request\");\n", 
            "         SampleClientResult clientResult = new SampleClientResult();\n", 
            "         try {\n", 
            "-            initializeClient(addUrl, trpUrl, prxUrl, svcPolicy, 10000);\n", 
            "+            init(addUrl, trpUrl, prxUrl, svcPolicy, 10000);\n", 
            " \n", 
            "             payload = StockQuoteHandler.createStandardQuoteRequest(\n", 
            "                     symbol, 1);\n", 
            "-            options.setAction(\"urn:getQuote\");\n", 
            "+            serviceClient.getOptions().setAction(\"urn:getQuote\");\n", 
            "             OMElement resultElement = serviceClient.sendReceive(payload);\n", 
            "             log.info(\"Standard :: Stock price = $\" +\n", 
            "                     StockQuoteHandler.parseStandardQuoteResponse(resultElement));\n", 
            "-            clientResult.setResponseReceived(true);\n", 
            "+            clientResult.incrementResponseCount();\n", 
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error invoking service\", e);\n", 
            "-            clientResult.setResponseReceived(false);\n", 
            "             clientResult.setException(e);\n", 
            "         }\n", 
            "-        terminateClient();\n", 
            "-\n", 
            "+        terminate();\n", 
            "         return clientResult;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-176,12 +163,11", 
          "lines": [
            "         log.info(\"sending dual quote request\");\n", 
            "         SampleClientResult clientResult = new SampleClientResult();\n", 
            "         try {\n", 
            "-            initializeClient(addUrl, trpUrl, prxUrl, null, 10000);\n", 
            "+            init(addUrl, trpUrl, prxUrl, null, 10000);\n", 
            " \n", 
            "             payload = StockQuoteHandler.createStandardQuoteRequest(\n", 
            "                     symbol, 1);\n", 
            "-            options.setAction(\"urn:getQuote\");\n", 
            "-            //serviceClient.engageModule(\"addressing\");\n", 
            "+            serviceClient.getOptions().setAction(\"urn:getQuote\");\n", 
            "             setCompleted(false);\n", 
            "             serviceClient.sendReceiveNonBlocking(payload, new StockQuoteCallback(this));\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-189,7 +175,7", 
          "lines": [
            "                 if (isCompleted()) {\n", 
            "                     log.info(\"Standard dual channel :: Stock price = $\" +\n", 
            "                             StockQuoteHandler.parseStandardQuoteResponse(getResponse()));\n", 
            "-                    clientResult.setResponseReceived(true);\n", 
            "+                    clientResult.incrementResponseCount();\n", 
            "                     break;\n", 
            "                 } else {\n", 
            "                     Thread.sleep(100);\n"
          ]
        }, 
        {
          "locn": "-197,11 +183,9", 
          "lines": [
            "             }\n", 
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error invoking service\", e);\n", 
            "-            clientResult.setResponseReceived(false);\n", 
            "             clientResult.setException(e);\n", 
            "         }\n", 
            "-        terminateClient();\n", 
            "-\n", 
            "+        terminate();\n", 
            "         return clientResult;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-210,21 +194,19", 
          "lines": [
            "         log.info(\"sending custom quote request\");\n", 
            "         SampleClientResult clientResult = new SampleClientResult();\n", 
            "         try {\n", 
            "-            initializeClient(addUrl, trpUrl, prxUrl, null, 10000);\n", 
            "+            init(addUrl, trpUrl, prxUrl, null, 10000);\n", 
            " \n", 
            "             payload = StockQuoteHandler.createCustomQuoteRequest(symbol);\n", 
            "-            options.setAction(\"urn:getQuote\");\n", 
            "+            serviceClient.getOptions().setAction(\"urn:getQuote\");\n", 
            "             OMElement resultElement = serviceClient.sendReceive(payload);\n", 
            "             log.info(\"Custom :: Stock price = $\" +\n", 
            "                     StockQuoteHandler.parseCustomQuoteResponse(resultElement));\n", 
            "-            clientResult.setResponseReceived(true);\n", 
            "+            clientResult.incrementResponseCount();\n", 
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error invoking service\", e);\n", 
            "-            clientResult.setResponseReceived(false);\n", 
            "             clientResult.setException(e);\n", 
            "         }\n", 
            "-        terminateClient();\n", 
            "-\n", 
            "+        terminate();\n", 
            "         return clientResult;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-232,26 +214,23", 
          "lines": [
            "         log.info(\"sending fire and forget (place order) request\");\n", 
            "         SampleClientResult clientResult = new SampleClientResult();\n", 
            "         try {\n", 
            "-            initializeClient(addUrl, trpUrl, prxUrl, null, 10000);\n", 
            "+            init(addUrl, trpUrl, prxUrl, null, 10000);\n", 
            "             double price = getRandom(100, 0.9, true);\n", 
            "             int quantity = (int) getRandom(10000, 1.0, true);\n", 
            "             payload = StockQuoteHandler.createPlaceOrderRequest(price, quantity, symbol);\n", 
            "-            options.setAction(\"urn:placeOrder\");\n", 
            "+            serviceClient.getOptions().setAction(\"urn:placeOrder\");\n", 
            " \n", 
            "             serviceClient.fireAndForget(payload);\n", 
            "             Thread.sleep(5000);\n", 
            " \n", 
            "-            log.info(\"Order placed for \" + quantity\n", 
            "-                    + \" shares of stock \" + symbol\n", 
            "+            log.info(\"Order placed for \" + quantity + \" shares of stock \" + symbol\n", 
            "                     + \" at a price of $ \" + price);\n", 
            "-            clientResult.setResponseReceived(true);\n", 
            "+            clientResult.incrementResponseCount();\n", 
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error invoking service\", e);\n", 
            "-            clientResult.setResponseReceived(false);\n", 
            "             clientResult.setException(e);\n", 
            "         }\n", 
            "-        terminateClient();\n", 
            "-\n", 
            "+        terminate();\n", 
            "         return clientResult;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-260,25 +239,21", 
          "lines": [
            "         log.info(\"sending rest request\");\n", 
            "         SampleClientResult clientResult = new SampleClientResult();\n", 
            "         try {\n", 
            "-            initializeClient(addUrl, trpUrl, prxUrl, null, 10000);\n", 
            "-\n", 
            "-            payload = StockQuoteHandler.createStandardQuoteRequest(\n", 
            "-                    symbol, 1);\n", 
            "-            options.setAction(\"urn:getQuote\");\n", 
            "-            options.setProperty(Constants.Configuration.ENABLE_REST, Constants.VALUE_TRUE);\n", 
            "+            init(addUrl, trpUrl, prxUrl, null, 10000);\n", 
            "+            payload = StockQuoteHandler.createStandardQuoteRequest(symbol, 1);\n", 
            "+            serviceClient.getOptions().setAction(\"urn:getQuote\");\n", 
            "+            serviceClient.getOptions().setProperty(Constants.Configuration.ENABLE_REST,\n", 
            "+                    Constants.VALUE_TRUE);\n", 
            "             OMElement resultElement = serviceClient.sendReceive(payload);\n", 
            "-            log.info(\"Standard :: Stock price = $\" +\n", 
            "-                    StockQuoteHandler.parseStandardQuoteResponse(resultElement));\n", 
            "-            clientResult.setResponseReceived(true);\n", 
            "+            log.info(\"Standard :: Stock price = $\" + StockQuoteHandler.\n", 
            "+                    parseStandardQuoteResponse(resultElement));\n", 
            "+            clientResult.incrementResponseCount();\n", 
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error invoking service\", e);\n", 
            "-            clientResult.setResponseReceived(false);\n", 
            "             clientResult.setException(e);\n", 
            "         }\n", 
            "-        terminateClient();\n", 
            "-\n", 
            "+        terminate();\n", 
            "         return clientResult;\n", 
            "-\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-290,36 +265,26", 
          "lines": [
            "             OMElement value = fac.createOMElement(\"Value\", null);\n", 
            "             value.setText(\"Sample string\");\n", 
            " \n", 
            "-            initializeClient(addUrl, trpUrl, null, null, 10000);\n", 
            "+            init(addUrl, trpUrl, null, null, 10000);\n", 
            "+            serviceClient.getOptions().setAction(\"urn:sampleOperation\");\n", 
            " \n", 
            "-            options.setAction(\"urn:sampleOperation\");\n", 
            "-\n", 
            "-\n", 
            "             String testString = \"\";\n", 
            "-\n", 
            "             long i = 0;\n", 
            "             while (i < iterations || infinite) {\n", 
            "                 serviceClient.getOptions().setManageSession(true);\n", 
            "                 OMElement responseElement = serviceClient.sendReceive(value);\n", 
            "                 String response = responseElement.getText();\n", 
            "+                clientResult.incrementResponseCount();\n", 
            " \n", 
            "-                if (!clientResult.responseReceived()) {\n", 
            "-                    clientResult.setResponseReceived(true);\n", 
            "-                }\n", 
            "-\n", 
            "                 i++;\n", 
            "                 log.info(\"Request: \" + i + \" ==> \" + response);\n", 
            "                 testString = testString.concat(\":\" + i + \">\" + response + \":\");\n", 
            "             }\n", 
            "-\n", 
            "-            clientResult.setFinished(true);\n", 
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error invoking service\", e);\n", 
            "-            clientResult.setFinished(true);\n", 
            "             clientResult.setException(e);\n", 
            "         }\n", 
            "-        terminateClient();\n", 
            "-\n", 
            "+        terminate();\n", 
            "         return clientResult;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-328,7 +293,6", 
          "lines": [
            "         String session = null;\n", 
            " \n", 
            "         SampleClientResult clientResult = new SampleClientResult();\n", 
            "-        clientResult.setResponseReceived(false);\n", 
            "         try {\n", 
            "             SOAPEnvelope env1 = buildSoapEnvelope(\"c1\", \"v1\");\n", 
            "             SOAPEnvelope env2 = buildSoapEnvelope(\"c2\", \"v1\");\n"
          ]
        }, 
        {
          "locn": "-335,10 +299,9", 
          "lines": [
            "             SOAPEnvelope env3 = buildSoapEnvelope(\"c3\", \"v1\");\n", 
            "             SOAPEnvelope[] envelopes = {env1, env2, env3};\n", 
            " \n", 
            "-            initializeClient(addUrl, trpUrl, null, null, 10000);\n", 
            "+            init(addUrl, trpUrl, null, null, 10000);\n", 
            "+            serviceClient.getOptions().setAction(\"urn:sampleOperation\");\n", 
            " \n", 
            "-            options.setAction(\"urn:sampleOperation\");\n", 
            "-\n", 
            "             int i = 0;\n", 
            "             int sessionNumber;\n", 
            "             String[] cookies = new String[3];\n"
          ]
        }, 
        {
          "locn": "-372,14 +335,10", 
          "lines": [
            "                     }\n", 
            " \n", 
            "                     SOAPEnvelope responseEnvelope = responseContext.getEnvelope();\n", 
            "-\n", 
            "                     OMElement vElement =\n", 
            "                             responseEnvelope.getBody().getFirstChildWithName(new QName(\"Value\"));\n", 
            "+                    clientResult.incrementResponseCount();\n", 
            " \n", 
            "-                    if (!clientResult.responseReceived()) {\n", 
            "-                        clientResult.setResponseReceived(true);\n", 
            "-                    }\n", 
            "-\n", 
            "                     log.info(\"Request: \" + i + \" with Session ID: \" +\n", 
            "                                     (httpSession ? cookie : sessionNumber) + \" ---- \" +\n", 
            "                                     \"Response : with  \" + (httpSession && receivedCookie != null ?\n"
          ]
        }, 
        {
          "locn": "-391,15 +350,11", 
          "lines": [
            "                             \"- Get a Fault : \" + axisFault.getMessage(), axisFault);\n", 
            "                 }\n", 
            "             }\n", 
            "-\n", 
            "-            clientResult.setFinished(true);\n", 
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error invoking service\", e);\n", 
            "-            clientResult.setFinished(true);\n", 
            "             clientResult.setException(e);\n", 
            "         }\n", 
            "-        terminateClient();\n", 
            "-\n", 
            "+        terminate();\n", 
            "         return clientResult;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-421,7 +376,6", 
          "lines": [
            "     }\n", 
            " \n", 
            "     protected void setSessionID(MessageContext axis2MessageContext, String value) {\n", 
            "-\n", 
            "         if (value == null) {\n", 
            "             return;\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-434,7 +388,6", 
          "lines": [
            "     }\n", 
            " \n", 
            "     protected String extractSessionID(MessageContext axis2MessageContext) {\n", 
            "-\n", 
            "         Object o = axis2MessageContext.getProperty(MessageContext.TRANSPORT_HEADERS);\n", 
            " \n", 
            "         if (o != null && o instanceof Map) {\n"
          ]
        }, 
        {
          "locn": "-475,10 +428,10", 
          "lines": [
            "     }\n", 
            " \n", 
            " \n", 
            "-    private double getRandom(double base, double varience, boolean onlypositive) {\n", 
            "+    private double getRandom(double base, double variance, boolean positiveOnly) {\n", 
            "         double rand = Math.random();\n", 
            "-        return (base + ((rand > 0.5 ? 1 : -1) * varience * base * rand))\n", 
            "-                * (onlypositive ? 1 : (rand > 0.5 ? 1 : -1));\n", 
            "+        return (base + ((rand > 0.5 ? 1 : -1) * variance * base * rand))\n", 
            "+                * (positiveOnly ? 1 : (rand > 0.5 ? 1 : -1));\n", 
            "     }\n", 
            " \n", 
            "     public boolean isCompleted() {\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteSampleClient.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteSampleClient.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-22,6 +22,7", 
          "lines": [
            " import org.apache.activemq.broker.BrokerService;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.config.JMSBrokerConfiguration;\n", 
            " \n", 
            " /**\n", 
            "  * Responsible for starting up and shutting down\n"
          ]
        }, 
        {
          "locn": "-32,11 +33,10", 
          "lines": [
            "     private static final Log log = LogFactory.getLog(JMSBrokerController.class);\n", 
            " \n", 
            "     private String serverName;\n", 
            "-    private SampleConfiguration.JMSBrokerSampleConfiguration configuration;\n", 
            "+    private JMSBrokerConfiguration configuration;\n", 
            "     private BrokerService broker;\n", 
            " \n", 
            "-    public JMSBrokerController(String serverName,\n", 
            "-                               SampleConfiguration.JMSBrokerSampleConfiguration configuration) {\n", 
            "+    public JMSBrokerController(String serverName, JMSBrokerConfiguration configuration) {\n", 
            "         this.serverName = serverName;\n", 
            "         this.configuration = configuration;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/JMSBrokerController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/JMSBrokerController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-44,11 +44,12", 
          "lines": [
            "         addUrl = \"http://localhost:8280/services/LBService1\";\n", 
            "         log.info(\"Running test: Failover sending among 3 endpoints\");\n", 
            " \n", 
            "-        new Thread(new Runnable() {\n", 
            "+        Thread t = new Thread(new Runnable() {\n", 
            "             public void run() {\n", 
            "-                result = client.sessionlessClient(addUrl, null, -1);\n", 
            "+                result = client.sessionlessClient(addUrl, null, 10000);\n", 
            "             }\n", 
            "-        }).start();\n", 
            "+        });\n", 
            "+        t.start();\n", 
            " \n", 
            "         for (int i = 0; i < 3; i++) {\n", 
            "             try {\n"
          ]
        }, 
        {
          "locn": "-60,25 +61,17", 
          "lines": [
            "         }\n", 
            " \n", 
            "         try {\n", 
            "-            Thread.sleep(2000);\n", 
            "+            t.join();\n", 
            "         } catch (InterruptedException e) {\n", 
            " \n", 
            "         }\n", 
            " \n", 
            "-        while (!result.isFinished()) {\n", 
            "-            try {\n", 
            "-                Thread.sleep(1000);\n", 
            "-            } catch (InterruptedException e) {\n", 
            "-            }\n", 
            "-        }\n", 
            "-\n", 
            "         assertResponseReceived(result);\n", 
            "         Exception resultEx = result.getException();\n", 
            "         assertNotNull(\"Did not receive expected error\", resultEx);\n", 
            "         log.info(\"Got an error as expected: \" + resultEx.getMessage());\n", 
            "         assertTrue(\"Did not receive expected error\", resultEx instanceof AxisFault);\n", 
            "-        assertTrue(\"Did not receive expected error\",\n", 
            "-                resultEx.getMessage().indexOf(expectedError) != -1);\n", 
            "+        assertTrue(\"Did not receive expected error\", resultEx.getMessage().contains(expectedError));\n", 
            "     }\n", 
            " \n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample53.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample53.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-40,19 +40,20", 
          "lines": [
            "     public void testSessionFullLBFailOver() {\n", 
            "         final String addUrl = \"http://localhost:8280/services/LBService1\";\n", 
            "         log.info(\"Running test: Failover sending among 3 endpoints\");\n", 
            "-        new Thread(new Runnable() {\n", 
            "+        Thread t = new Thread(new Runnable() {\n", 
            "             public void run() {\n", 
            "                 result = client.statefulClient(addUrl, null, 200);\n", 
            "             }\n", 
            "-        }).start();\n", 
            "+        });\n", 
            "+        t.start();\n", 
            " \n", 
            "         try {\n", 
            "-            Thread.sleep(2000);\n", 
            "+            t.join();\n", 
            "         } catch (InterruptedException e) {\n", 
            " \n", 
            "         }\n", 
            "+\n", 
            "         getBackendServerControllers().get(0).stop();\n", 
            "-\n", 
            "         try {\n", 
            "             Thread.sleep(2000);\n", 
            "         } catch (InterruptedException e) {\n"
          ]
        }, 
        {
          "locn": "-59,12 +60,6", 
          "lines": [
            " \n", 
            "         }\n", 
            " \n", 
            "-        while (!result.isFinished()) {\n", 
            "-            try {\n", 
            "-                Thread.sleep(1000);\n", 
            "-            } catch (InterruptedException e) {\n", 
            "-            }\n", 
            "-        }\n", 
            "         assertTrue(\"Did not receive a response\", result.responseReceived());\n", 
            "     }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample55.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample55.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-45,43 +45,32", 
          "lines": [
            "         } catch (InterruptedException e) {\n", 
            " \n", 
            "         }\n", 
            "-        new Thread(new Runnable() {\n", 
            "+        Thread t = new Thread(new Runnable() {\n", 
            "             public void run() {\n", 
            "                 result = client.sessionlessClient(addUrl, null, 500);\n", 
            "             }\n", 
            "-        }).start();\n", 
            "+        });\n", 
            "+        t.start();\n", 
            " \n", 
            "         try {\n", 
            "-            Thread.sleep(3000);\n", 
            "+            t.join();\n", 
            "         } catch (InterruptedException e) {\n", 
            " \n", 
            "         }\n", 
            " \n", 
            "-        while (!result.isFinished()) {\n", 
            "-            try {\n", 
            "-                Thread.sleep(1000);\n", 
            "-            } catch (InterruptedException e) {\n", 
            "-            }\n", 
            "-        }\n", 
            "-\n", 
            "-        new Thread(new Runnable() {\n", 
            "+        t = new Thread(new Runnable() {\n", 
            "             public void run() {\n", 
            "                 result = client.sessionlessClient(addUrl, null, 500);\n", 
            "             }\n", 
            "-        }).start();\n", 
            "+        });\n", 
            "+        t.start();\n", 
            "+\n", 
            "         try {\n", 
            "-            Thread.sleep(5000);\n", 
            "+            t.join();\n", 
            "         } catch (InterruptedException e) {\n", 
            " \n", 
            "         }\n", 
            " \n", 
            "-        while (!result.isFinished()) {\n", 
            "-            try {\n", 
            "-                Thread.sleep(1000);\n", 
            "-            } catch (InterruptedException e) {\n", 
            "-            }\n", 
            "-        }\n", 
            "-\n", 
            "         assertResponseReceived(result);\n", 
            "     }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample57.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample57.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-10,23 +10,23", 
          "lines": [
            "         <axis2Server id='1'>\n", 
            "             <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "             <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "-\t    <httpPort>9001</httpPort>\n", 
            "-\t    <httpsPort>9005</httpsPort>\n", 
            "+            <httpPort>9001</httpPort>\n", 
            "+            <httpsPort>9005</httpsPort>\n", 
            "         </axis2Server>\n", 
            "         <axis2Server id='2'>\n", 
            "             <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "             <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "-\t    <httpPort>9002</httpPort>\n", 
            "-\t    <httpsPort>9006</httpsPort>\n", 
            "+            <httpPort>9002</httpPort>\n", 
            "+            <httpsPort>9006</httpsPort>\n", 
            "         </axis2Server>\n", 
            "         <axis2Server id='3'>\n", 
            "             <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "             <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "-\t    <httpPort>9003</httpPort>\n", 
            "-\t    <httpsPort>9007</httpsPort>\n", 
            "+            <httpPort>9003</httpPort>\n", 
            "+            <httpsPort>9007</httpsPort>\n", 
            "         </axis2Server>\n", 
            "     </backEndServerConfig>\n", 
            "     <clientConfig>\n", 
            "-\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+        <clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "     </clientConfig>\n", 
            " </synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample53.xml", 
      "from": "java/modules/integration/src/test/resources/sample53.xml"
    }
  ], 
  "id": "1211800"
}