{
  "when": "2013-07-29T15:01:07-04:00", 
  "who": "rajikak", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-105,13 +105,15", 
          "lines": [
            "     /**\n", 
            "      * True if requesting a mandatory publishing.\n", 
            "      */\n", 
            "-    public static final String PARAMETER_PUBLISHER_MANDATORY_PUBLISH = \"transport.amqp.MandatoryPublish\";\n", 
            "+    public static final String PARAMETER_PUBLISHER_MANDATORY_PUBLISH =\n", 
            "+            \"transport.amqp.MandatoryPublish\";\n", 
            " \n", 
            " \n", 
            "     /**\n", 
            "      * True if requesting an immediate publishing.\n", 
            "      */\n", 
            "-    public static final String PARAMETER_PUBLISHER_IMMEDIATE_PUBLISH = \"transport.amqp.ImmediatePublish\";\n", 
            "+    public static final String PARAMETER_PUBLISHER_IMMEDIATE_PUBLISH =\n", 
            "+            \"transport.amqp.ImmediatePublish\";\n", 
            " \n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-150,18 +152,20", 
          "lines": [
            " \n", 
            " \n", 
            "     /**\n", 
            "-     * True if the polling task should wait until the she processed the accepted message. This can be used\n", 
            "-     * in conjunction with a single thread polling task(in the whole transport, i.e. only a single AMQP proxy per flow)\n", 
            "-     * to achieve in order delivery.\n", 
            "+     * True if the polling task should wait until the she processed the accepted message.\n", 
            "+     * This can be used in conjunction with a single thread polling task(in the whole transport,\n", 
            "+     * i.e. only a single AMQP proxy per flow) to achieve in order delivery.\n", 
            "      */\n", 
            "-    public static final String PARAMETER_OPERATE_ON_BLOCKING_MODE = \"transport.amqp.OperateOnBlockingMode\";\n", 
            "+    public static final String PARAMETER_OPERATE_ON_BLOCKING_MODE =\n", 
            "+            \"transport.amqp.OperateOnBlockingMode\";\n", 
            " \n", 
            " \n", 
            "     /**\n", 
            "-     * If a polling task encounter an exception due to some reason(most probably due to broker outage) the number of\n", 
            "-     * milliseconds it should be suspended before next re-try.\n", 
            "+     * If a polling task encounter an exception due to some reason(most probably due to broker\n", 
            "+     * outage) the number of milliseconds it should be suspended before next re-try.\n", 
            "      */\n", 
            "-    public static final String PARAMETER_INITIAL_RE_CONNECTION_DURATION = \"transport.amqp.InitialReconnectDuration\";\n", 
            "+    public static final String PARAMETER_INITIAL_RE_CONNECTION_DURATION =\n", 
            "+            \"transport.amqp.InitialReconnectDuration\";\n", 
            " \n", 
            "     /**\n", 
            "      * If the polling task fails again after the initial re-connection duration\n"
          ]
        }, 
        {
          "locn": "-169,25 +173,31", 
          "lines": [
            "      * next suspend duration will be calculated using this\n", 
            "      * (PARAMETER_RE_CONNECTION_PROGRESSION_FACTOR * PARAMETER_INITIAL_RE_CONNECTION_DURATION).\n", 
            "      */\n", 
            "-    public static final String PARAMETER_RE_CONNECTION_PROGRESSION_FACTOR = \"transport.amqp.ReconnectionProgressionFactor\";\n", 
            "+    public static final String PARAMETER_RE_CONNECTION_PROGRESSION_FACTOR =\n", 
            "+            \"transport.amqp.ReconnectionProgressionFactor\";\n", 
            " \n", 
            " \n", 
            "     /**\n", 
            "-     * The maximum duration to suspend the polling task in case of an error. The current suspend duration will reach this\n", 
            "+     * The maximum duration to suspend the polling task in case of an error. The current suspend\n", 
            "+     * duration will reach this\n", 
            "      * value by following the series,\n", 
            "-     * PARAMETER_RE_CONNECTION_PROGRESSION_FACTOR * PARAMETER_INITIAL_RE_CONNECTION_DURATION. This upper bound is there\n", 
            "+     * PARAMETER_RE_CONNECTION_PROGRESSION_FACTOR * PARAMETER_INITIAL_RE_CONNECTION_DURATION.\n", 
            "+     * This upper bound is there\n", 
            "      * because nobody wants to wait a long time until the next re-try if the broker is alive.\n", 
            "      */\n", 
            "-    public static final String PARAMETER_MAX_RE_CONNECTION_DURATION = \"transport.amqp.MaximumReconnectionDuration\";\n", 
            "+    public static final String PARAMETER_MAX_RE_CONNECTION_DURATION =\n", 
            "+            \"transport.amqp.MaximumReconnectionDuration\";\n", 
            " \n", 
            " \n", 
            "     /**\n", 
            "      * The connection factory to be used either with consumer or producer.\n", 
            "      */\n", 
            "-    public static final String PARAMETER_CONNECTION_FACTORY_NAME = \"transport.amqp.ConnectionFactoryName\";\n", 
            "+    public static final String PARAMETER_CONNECTION_FACTORY_NAME =\n", 
            "+            \"transport.amqp.ConnectionFactoryName\";\n", 
            " \n", 
            "     /**\n", 
            "-     * In a two-way scenario which connection factory of the senders' should be used to send the response\n", 
            "+     * In a two-way scenario which connection factory of the senders' should be used to send\n", 
            "+     * the response\n", 
            "      */\n", 
            "     public static final String PARAMETER_RESPONSE_CONNECTION_FACTORY_NAME =\n", 
            "             \"transport.amqp.ResponseConnectionFactoryName\";\n"
          ]
        }, 
        {
          "locn": "-211,23 +221,27", 
          "lines": [
            "      * {@link AMQPTransportConstant#PARAMETER_SCHEDULED_TASK_INITIAL_DELAY} and\n", 
            "      * {@link AMQPTransportConstant#PARAMETER_SCHEDULED_TASK_DELAY}.\n", 
            "      */\n", 
            "-    public static final String PARAMETER_SCHEDULED_TASK_TIME_UNIT = \"transport.amqp.ScheduledTaskTimeUnit\";\n", 
            "+    public static final String PARAMETER_SCHEDULED_TASK_TIME_UNIT =\n", 
            "+            \"transport.amqp.ScheduledTaskTimeUnit\";\n", 
            " \n", 
            "     /**\n", 
            "      * Number of concurrent consumers per polling task.\n", 
            "      */\n", 
            "-    public static final String PARAMETER_NO_OF_CONCURRENT_CONSUMERS = \"transport.amqp.NoOfConcurrentConsumers\";\n", 
            "+    public static final String PARAMETER_NO_OF_CONCURRENT_CONSUMERS =\n", 
            "+            \"transport.amqp.NoOfConcurrentConsumers\";\n", 
            " \n", 
            "     /**\n", 
            "      * Number of dispatching task to use any request messages to actual processing task.\n", 
            "      */\n", 
            "-    public static final String PARAMETER_DISPATCHING_TASK_SIZE = \"transport.amqp.NoOfDispatchingTask\";\n", 
            "+    public static final String PARAMETER_DISPATCHING_TASK_SIZE =\n", 
            "+            \"transport.amqp.NoOfDispatchingTask\";\n", 
            " \n", 
            "     /**\n", 
            "      * Use the given channel number if possible. See\n", 
            "      * http://www.rabbitmq.com/releases/rabbitmq-java-client/v3.0.1/rabbitmq-java-client-javadoc-3.0.1/com/rabbitmq/client/Connection.html#createChannel(int)\n", 
            "      */\n", 
            "-    public static final String PARAMETER_AMQP_CHANNEL_NUMBER = \"transport.amqp.ChannelNumber\";\n", 
            "+    public static final String PARAMETER_AMQP_CHANNEL_NUMBER =\n", 
            "+            \"transport.amqp.ChannelNumber\";\n", 
            " \n", 
            "     /**\n", 
            "      * Configure the content type as a service parameter\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/AMQPTransportConstant.java", 
      "from": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/AMQPTransportConstant.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-113,7 +113,9", 
          "lines": [
            " \n", 
            " \n", 
            "     /**\n", 
            "-     * The name of the queue this consumer should bind to.{@link AMQPTransportConstant#PARAMETER_QUEUE_NAME}\n", 
            "+     * The name of the queue this consumer should bind to.{\n", 
            "+     *\n", 
            "+     * @link AMQPTransportConstant#PARAMETER_QUEUE_NAME}\n", 
            "      */\n", 
            "     private String queueName = null;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-460,7 +462,12", 
          "lines": [
            " \n", 
            "             } else {\n", 
            "                 // assume default exchange and bindings - simple consumer\n", 
            "-                channel.queueDeclare(queueName, isQueueDurable, isQueueRestricted, isQueueAutoDelete, null);\n", 
            "+                channel.queueDeclare(\n", 
            "+                        queueName,\n", 
            "+                        isQueueDurable,\n", 
            "+                        isQueueRestricted,\n", 
            "+                        isQueueAutoDelete,\n", 
            "+                        null);\n", 
            " \n", 
            "             }\n", 
            "         } catch (IOException e) {\n"
          ]
        }, 
        {
          "locn": "-467,7 +474,8", 
          "lines": [
            "             handleException(e.getMessage(), e);\n", 
            "         }\n", 
            " \n", 
            "-        // schedule dispatching tasks to handover messages from the internal buffer to actual processing task\n", 
            "+        // schedule dispatching tasks to handover messages from the internal buffer to actual\n", 
            "+        // processing task\n", 
            "         for (int i = 0; i < noOfDispatchingTask; i++) {\n", 
            "             pollingTaskScheduler.execute(new MessageDispatchTask(buffers));\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-490,8 +498,8", 
          "lines": [
            "         }\n", 
            " \n", 
            "         if (log.isDebugEnabled()) {\n", 
            "-            log.debug(\"A polling task started listening on the queue '\" + queueName + \"' on behalf of the service '\" +\n", 
            "-                    serviceName + \"'\");\n", 
            "+            log.debug(\"A polling task started listening on the queue '\" + queueName + \"' on \" +\n", 
            "+                    \"behalf of the service '\" + serviceName + \"'\");\n", 
            "         }\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-547,8 +555,8", 
          "lines": [
            "                 log.error(\"Polling task for service '\" + serviceName + \"' received a \" +\n", 
            "                         \"shutdown signal\", e);\n", 
            "             } catch (ConsumerCancelledException e) {\n", 
            "-                log.error(\"Polling task for service '\" + serviceName + \"' received a cancellation \" +\n", 
            "-                        \"signal\");\n", 
            "+                log.error(\"Polling task for service '\" + serviceName + \"' received a \" +\n", 
            "+                        \"cancellation signal\");\n", 
            "             }\n", 
            "         }\n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-601,8 +609,8", 
          "lines": [
            "                     handleFaultMessage(message, buffers, axisFault);\n", 
            "                 } catch (Exception e) {\n", 
            "                     // do not let the task die\n", 
            "-                    log.error(\"Error while sending the fault message to the client. Client will not\" +\n", 
            "-                            \" receive any errors!\", e);\n", 
            "+                    log.error(\"Error while sending the fault message to the client. Client will \" +\n", 
            "+                            \"not receive any errors!\", e);\n", 
            "                 }\n", 
            "             }\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-629,15 +637,17", 
          "lines": [
            "                     Map<String, Object> trpHeaders = message.getHeaders();\n", 
            " \n", 
            "                     if (message.getReplyTo() != null) {\n", 
            "-                        // this may not be the optimal way to check if this message should send a reply\n", 
            "-                        // a one way message can be send with 'reply to' set\n", 
            "+                        // this may not be the optimal way to check if this message should send\n", 
            "+                        // a reply a one way message can be send with 'reply to' set\n", 
            "                         msgContext.setProperty(Constants.OUT_TRANSPORT_INFO,\n", 
            "                                 new AMQPOutTransportInfo(contentType, responseConnectionFactory,\n", 
            "                                         message.getReplyTo()));\n", 
            "                         msgContext.setProperty(AMQPTransportConstant.PROPERTY_AMQP_REPLY_TO,\n", 
            "                                 message.getReplyTo());\n", 
            "-                        // cache the connection factory so that it can be used for sending the response\n", 
            "-                        msgContext.setProperty(AMQPTransportConstant.RESPONSE_CONNECTION_FACTORY_NAME,\n", 
            "+                        // cache the connection factory so that it can be used for sending the\n", 
            "+                        // response\n", 
            "+                        msgContext.setProperty(\n", 
            "+                                AMQPTransportConstant.RESPONSE_CONNECTION_FACTORY_NAME,\n", 
            "                                 responseConnectionFactory);\n", 
            "                     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-653,8 +663,10", 
          "lines": [
            "                     msgContext.setProperty(MessageContext.TRANSPORT_HEADERS, trpHeaders);\n", 
            " \n", 
            "                     Builder builder = BuilderUtil.getBuilderFromSelector(contentType, msgContext);\n", 
            "-                    InputStream gzipInputStream = HTTPTransportUtils.handleGZip(msgContext, inputStream);\n", 
            "-                    OMElement documentElement = builder.processDocument(gzipInputStream, contentType, msgContext);\n", 
            "+                    InputStream gzipInputStream = HTTPTransportUtils.handleGZip(\n", 
            "+                            msgContext, inputStream);\n", 
            "+                    OMElement documentElement = builder.processDocument(\n", 
            "+                            gzipInputStream, contentType, msgContext);\n", 
            "                     msgContext.setEnvelope(TransportUtils.createSOAPEnvelope(documentElement));\n", 
            "                     isSOAP11 = msgContext.isSOAP11();\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-708,4 +720,4", 
          "lines": [
            "         log.error(msg, t);\n", 
            "         throw new AMQPTransportException(msg, t);\n", 
            "     }\n", 
            "-}\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPTransportPollingTask.java", 
      "from": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPTransportPollingTask.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-94,7 +94,8", 
          "lines": [
            "         pt.setConnectionFactoryName(connectionFactory.getName());\n", 
            " \n", 
            "         String responseConFac = AMQPTransportUtils.getOptionalStringParameter(\n", 
            "-                AMQPTransportConstant.PARAMETER_RESPONSE_CONNECTION_FACTORY_NAME, svcParam, conFacParam);\n", 
            "+                AMQPTransportConstant.PARAMETER_RESPONSE_CONNECTION_FACTORY_NAME,\n", 
            "+                svcParam, conFacParam);\n", 
            "         if (responseConFac != null) {\n", 
            "             pt.setResponseConnectionFactory(responseConFac);\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-157,7 +158,8", 
          "lines": [
            " \n", 
            "         try {\n", 
            "             Integer noOfConsumers = AMQPTransportUtils.getOptionalIntParameter(\n", 
            "-                    AMQPTransportConstant.PARAMETER_NO_OF_CONCURRENT_CONSUMERS, svcParam, conFacParam);\n", 
            "+                    AMQPTransportConstant.PARAMETER_NO_OF_CONCURRENT_CONSUMERS,\n", 
            "+                    svcParam, conFacParam);\n", 
            "             if (noOfConsumers != null) {\n", 
            "                 pt.setNoOfConcurrentConsumers(noOfConsumers);\n", 
            "             }\n"
          ]
        }, 
        {
          "locn": "-167,7 +169,8", 
          "lines": [
            " \n", 
            "         try {\n", 
            "             Integer initialReconectionDuration = AMQPTransportUtils.getOptionalIntParameter(\n", 
            "-                    AMQPTransportConstant.PARAMETER_INITIAL_RE_CONNECTION_DURATION, svcParam, conFacParam);\n", 
            "+                    AMQPTransportConstant.PARAMETER_INITIAL_RE_CONNECTION_DURATION,\n", 
            "+                    svcParam, conFacParam);\n", 
            "             if (initialReconectionDuration != null) {\n", 
            "                 pt.setInitialReconnectDuration(initialReconectionDuration);\n", 
            "             }\n"
          ]
        }, 
        {
          "locn": "-177,7 +180,8", 
          "lines": [
            " \n", 
            "         try {\n", 
            "             Integer reconnectionFactor = AMQPTransportUtils.getOptionalIntParameter(\n", 
            "-                    AMQPTransportConstant.PARAMETER_RE_CONNECTION_PROGRESSION_FACTOR, svcParam, conFacParam);\n", 
            "+                    AMQPTransportConstant.PARAMETER_RE_CONNECTION_PROGRESSION_FACTOR,\n", 
            "+                    svcParam, conFacParam);\n", 
            "             if (reconnectionFactor != null) {\n", 
            "                 pt.setReconnectionFactor(reconnectionFactor);\n", 
            "             }\n"
          ]
        }, 
        {
          "locn": "-187,7 +191,8", 
          "lines": [
            " \n", 
            "         try {\n", 
            "             Integer dispatchingTask = AMQPTransportUtils.getOptionalIntParameter(\n", 
            "-                    AMQPTransportConstant.PARAMETER_DISPATCHING_TASK_SIZE, svcParam, conFacParam);\n", 
            "+                    AMQPTransportConstant.PARAMETER_DISPATCHING_TASK_SIZE,\n", 
            "+                    svcParam, conFacParam);\n", 
            "             if (dispatchingTask != null) {\n", 
            "                 pt.setNoOfDispatchingTask(dispatchingTask);\n", 
            "             }\n"
          ]
        }, 
        {
          "locn": "-203,7 +208,8", 
          "lines": [
            " \n", 
            "         try {\n", 
            "             Integer initialDelay = AMQPTransportUtils.getOptionalIntParameter(\n", 
            "-                    AMQPTransportConstant.PARAMETER_SCHEDULED_TASK_INITIAL_DELAY, svcParam, conFacParam);\n", 
            "+                    AMQPTransportConstant.PARAMETER_SCHEDULED_TASK_INITIAL_DELAY,\n", 
            "+                    svcParam, conFacParam);\n", 
            "             if (initialDelay != null) {\n", 
            "                 pt.setScheduledTaskInitialDelay(initialDelay.intValue());\n", 
            "             }\n"
          ]
        }, 
        {
          "locn": "-213,7 +219,8", 
          "lines": [
            " \n", 
            "         try {\n", 
            "             Integer delay = AMQPTransportUtils.getOptionalIntParameter(\n", 
            "-                    AMQPTransportConstant.PARAMETER_SCHEDULED_TASK_INITIAL_DELAY, svcParam, conFacParam);\n", 
            "+                    AMQPTransportConstant.PARAMETER_SCHEDULED_TASK_INITIAL_DELAY,\n", 
            "+                    svcParam, conFacParam);\n", 
            "             if (delay != null) {\n", 
            "                 pt.setScheduledTaskDelay(delay.intValue());\n", 
            "             }\n"
          ]
        }, 
        {
          "locn": "-222,7 +229,8", 
          "lines": [
            "         }\n", 
            " \n", 
            "         String timeUnit = AMQPTransportUtils.getOptionalStringParameter(\n", 
            "-                AMQPTransportConstant.PARAMETER_SCHEDULED_TASK_TIME_UNIT, svcParam, conFacParam);\n", 
            "+                AMQPTransportConstant.PARAMETER_SCHEDULED_TASK_TIME_UNIT,\n", 
            "+                svcParam, conFacParam);\n", 
            " \n", 
            "         if (timeUnit != null) {\n", 
            "             pt.setScheduledTaskTimeUnit(getTimeUnit(timeUnit));\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPTransportPollingTaskFactory.java", 
      "from": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPTransportPollingTaskFactory.java"
    }
  ], 
  "id": "1508181"
}