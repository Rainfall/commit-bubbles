{
  "when": "2013-10-19T20:51:00-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>10002</sampleID>\n", 
            "+    <sampleName>Pass Through Transport and Deferred Building Sanity Checks</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <!--if we don't specify the optional values, framework will use defaults-->\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>modules/integration/src/test/resources/extras/synapse_sample_10002.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <echoServer id=\"0\">\n", 
            "+            <httpPort>9000</httpPort>\n", 
            "+        </echoServer>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+        <clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample10002.xml", 
      "from": "java/modules/integration/src/test/resources/sample10002.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,113", 
          "lines": [
            "+<syn:definitions xmlns:syn=\"http://ws.apache.org/ns/synapse\">\n", 
            "+    <syn:proxy name=\"DirectMediationProxy\">\n", 
            "+        <syn:target>\n", 
            "+            <syn:endpoint>\n", 
            "+                <syn:address uri=\"http://localhost:9000/services/EchoService\"/>\n", 
            "+            </syn:endpoint>\n", 
            "+            <syn:outSequence>\n", 
            "+                <syn:send/>\n", 
            "+            </syn:outSequence>\n", 
            "+        </syn:target>\n", 
            "+    </syn:proxy>\n", 
            "+\n", 
            "+    <syn:proxy name=\"ContentBasedRoutingProxy\">\n", 
            "+        <syn:target>\n", 
            "+            <syn:inSequence>\n", 
            "+                <syn:filter source=\"//bar[1]\" regex=\"^uuid.*\">\n", 
            "+                    <syn:then>\n", 
            "+                        <syn:send>\n", 
            "+                            <syn:endpoint>\n", 
            "+                                <syn:address uri=\"http://localhost:9000/services/EchoService\"/>\n", 
            "+                            </syn:endpoint>\n", 
            "+                        </syn:send>\n", 
            "+                    </syn:then>\n", 
            "+                    <syn:else>\n", 
            "+                        <syn:makefault version=\"soap11\">\n", 
            "+                            <syn:code xmlns:sf11=\"http://schemas.xmlsoap.org/soap/envelope/\" value=\"sf11:Server\"/>\n", 
            "+                            <syn:reason value=\"First order must be for the symbol IBM\"/>\n", 
            "+                        </syn:makefault>\n", 
            "+                        <syn:header name=\"To\" action=\"remove\"/>\n", 
            "+                        <syn:property name=\"RESPONSE\" value=\"true\"/>\n", 
            "+                        <syn:send/>\n", 
            "+                    </syn:else>\n", 
            "+                </syn:filter>\n", 
            "+            </syn:inSequence>\n", 
            "+        </syn:target>\n", 
            "+    </syn:proxy>\n", 
            "+\n", 
            "+    <syn:proxy name=\"HeaderBasedRoutingProxy\">\n", 
            "+        <syn:target>\n", 
            "+            <syn:inSequence>\n", 
            "+                <syn:filter source=\"$trp:CustomHeader\" regex=\"TestValue\">\n", 
            "+                    <syn:then>\n", 
            "+                        <syn:send>\n", 
            "+                            <syn:endpoint>\n", 
            "+                                <syn:address uri=\"http://localhost:9000/services/EchoService\"/>\n", 
            "+                            </syn:endpoint>\n", 
            "+                        </syn:send>\n", 
            "+                    </syn:then>\n", 
            "+                    <syn:else>\n", 
            "+                        <syn:makefault version=\"soap11\">\n", 
            "+                            <syn:code xmlns:sf11=\"http://schemas.xmlsoap.org/soap/envelope/\" value=\"sf11:Server\"/>\n", 
            "+                            <syn:reason value=\"First order must be for the symbol IBM\"/>\n", 
            "+                        </syn:makefault>\n", 
            "+                        <syn:header name=\"To\" action=\"remove\"/>\n", 
            "+                        <syn:property name=\"RESPONSE\" value=\"true\"/>\n", 
            "+                        <syn:send/>\n", 
            "+                    </syn:else>\n", 
            "+                </syn:filter>\n", 
            "+            </syn:inSequence>\n", 
            "+        </syn:target>\n", 
            "+    </syn:proxy>\n", 
            "+\n", 
            "+    <syn:proxy name=\"XSLTProxy\">\n", 
            "+        <syn:target>\n", 
            "+            <syn:endpoint>\n", 
            "+                <syn:address uri=\"http://localhost:9000/services/EchoService\"/>\n", 
            "+            </syn:endpoint>\n", 
            "+            <syn:inSequence>\n", 
            "+                <syn:xslt key=\"xslt_transform_reverse\"/>\n", 
            "+            </syn:inSequence>\n", 
            "+            <syn:outSequence>\n", 
            "+                <syn:xslt key=\"xslt_transform\"/>\n", 
            "+                <syn:send/>\n", 
            "+            </syn:outSequence>\n", 
            "+        </syn:target>\n", 
            "+    </syn:proxy>\n", 
            "+\n", 
            "+    <syn:localEntry key=\"xslt_transform_reverse\">\n", 
            "+        <xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n", 
            "+                        version=\"2.0\">\n", 
            "+            <xsl:output method=\"xml\"\n", 
            "+                        omit-xml-declaration=\"yes\"\n", 
            "+                        indent=\"no\"/>\n", 
            "+            <xsl:template match=\"foo\">\n", 
            "+                <oof>\n", 
            "+                    <xsl:for-each select=\"bar\">\n", 
            "+                        <rab>\n", 
            "+                            <xsl:value-of select=\"bar\"/>\n", 
            "+                        </rab>\n", 
            "+                    </xsl:for-each>\n", 
            "+                </oof>\n", 
            "+            </xsl:template>\n", 
            "+        </xsl:stylesheet>\n", 
            "+    </syn:localEntry>\n", 
            "+\n", 
            "+    <syn:localEntry key=\"xslt_transform\">\n", 
            "+        <xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n", 
            "+                        version=\"2.0\">\n", 
            "+            <xsl:output method=\"xml\"\n", 
            "+                        omit-xml-declaration=\"yes\"\n", 
            "+                        indent=\"no\"/>\n", 
            "+            <xsl:template match=\"oof\">\n", 
            "+                <foo>\n", 
            "+                    <xsl:for-each select=\"rab\">\n", 
            "+                        <bar>\n", 
            "+                            <xsl:value-of select=\"rab\"/>\n", 
            "+                        </bar>\n", 
            "+                    </xsl:for-each>\n", 
            "+                </foo>\n", 
            "+            </xsl:template>\n", 
            "+        </xsl:stylesheet>\n", 
            "+    </syn:localEntry>\n", 
            "+</syn:definitions>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/extras/synapse_sample_10002.xml", 
      "from": "java/modules/integration/src/test/resources/extras/synapse_sample_10002.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,150", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework.tests.rest;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.http.HttpStatus;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.BasicHttpClient;\n", 
            "+import org.apache.synapse.samples.framework.clients.HttpResponse;\n", 
            "+\n", 
            "+import java.util.HashMap;\n", 
            "+import java.util.Iterator;\n", 
            "+import java.util.Map;\n", 
            "+import java.util.UUID;\n", 
            "+\n", 
            "+public class Sample10002 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final int[] SIZES = new int[] {\n", 
            "+            500, 1024, 10240, 102400, 1024 * 1024\n", 
            "+    };\n", 
            "+\n", 
            "+    private static final String[] SIZE_STRINGS = new String[] {\n", 
            "+            \"500B\", \"1K\", \"10K\", \"100K\", \"1M\"\n", 
            "+    };\n", 
            "+\n", 
            "+    public Sample10002() {\n", 
            "+        super(10002);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testDirectMediation() throws Exception {\n", 
            "+        BasicHttpClient client = new BasicHttpClient();\n", 
            "+        int children = 0;\n", 
            "+        StringBuilder xml = new StringBuilder(\"<foo>\");\n", 
            "+\n", 
            "+        for (int i = 0; i < SIZES.length; i++) {\n", 
            "+            while (xml.length() < SIZES[i]) {\n", 
            "+                xml.append(\"<bar>\").append(UUID.randomUUID().toString()).append(\"</bar>\");\n", 
            "+                children++;\n", 
            "+            }\n", 
            "+            verifyMediationResult(\"DirectMediation\", client, xml, children, SIZE_STRINGS[i]);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testCBRMediation() throws Exception {\n", 
            "+        BasicHttpClient client = new BasicHttpClient();\n", 
            "+        int children = 1;\n", 
            "+        StringBuilder xml = new StringBuilder(\"<foo><bar>uuid:1234567890</bar>\");\n", 
            "+\n", 
            "+        for (int i = 0; i < SIZES.length; i++) {\n", 
            "+            while (xml.length() < SIZES[i]) {\n", 
            "+                xml.append(\"<bar>\").append(UUID.randomUUID().toString()).append(\"</bar>\");\n", 
            "+                children++;\n", 
            "+            }\n", 
            "+            verifyMediationResult(\"ContentBasedRouting\", client, xml, children, SIZE_STRINGS[i]);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testHeaderBasedRoutingMediation() throws Exception {\n", 
            "+        BasicHttpClient client = new BasicHttpClient();\n", 
            "+        int children = 0;\n", 
            "+        StringBuilder xml = new StringBuilder(\"<foo>\");\n", 
            "+\n", 
            "+        Map<String,String> headers = new HashMap<String, String>();\n", 
            "+        headers.put(\"CustomHeader\", \"TestValue\");\n", 
            "+\n", 
            "+        for (int i = 0; i < SIZES.length; i++) {\n", 
            "+            while (xml.length() < SIZES[i]) {\n", 
            "+                xml.append(\"<bar>\").append(UUID.randomUUID().toString()).append(\"</bar>\");\n", 
            "+                children++;\n", 
            "+            }\n", 
            "+            verifyMediationResult(\"HeaderBasedRouting\", client, xml, children,\n", 
            "+                    SIZE_STRINGS[i], headers);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testXSLTMediation() throws Exception {\n", 
            "+        BasicHttpClient client = new BasicHttpClient();\n", 
            "+        int children = 0;\n", 
            "+        StringBuilder xml = new StringBuilder(\"<foo>\");\n", 
            "+\n", 
            "+        for (int i = 0; i < SIZES.length; i++) {\n", 
            "+            while (xml.length() < SIZES[i]) {\n", 
            "+                xml.append(\"<bar>\").append(UUID.randomUUID().toString()).append(\"</bar>\");\n", 
            "+                children++;\n", 
            "+            }\n", 
            "+            verifyMediationResult(\"XSLT\", client, xml, children, SIZE_STRINGS[i]);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    private void verifyMediationResult(String scenario, BasicHttpClient client,\n", 
            "+                                       StringBuilder message, int childrenCount,\n", 
            "+                                       String sizeStr) throws Exception {\n", 
            "+\n", 
            "+        verifyMediationResult(scenario, client, message, childrenCount, sizeStr, null);\n", 
            "+    }\n", 
            "+\n", 
            "+    private void verifyMediationResult(String scenario, BasicHttpClient client,\n", 
            "+                                       StringBuilder message, int childrenCount,\n", 
            "+                                       String sizeStr, Map<String,String> headers) throws Exception {\n", 
            "+\n", 
            "+        log.info(\">>>>>>>>>>>>>>>> Testing \" + scenario + \"; Payload size: \" + sizeStr);\n", 
            "+\n", 
            "+        HttpResponse response;\n", 
            "+        if (headers != null) {\n", 
            "+            response = client.doPost(\"http://127.0.0.1:8280/services/\" + scenario + \"Proxy\",\n", 
            "+                    message.append(\"</foo>\").toString().getBytes(), \"application/xml\", headers);\n", 
            "+        } else {\n", 
            "+            response = client.doPost(\"http://127.0.0.1:8280/services/\" + scenario + \"Proxy\",\n", 
            "+                    message.append(\"</foo>\").toString().getBytes(), \"application/xml\");\n", 
            "+        }\n", 
            "+\n", 
            "+        // remove the closing tag added in the previous step\n", 
            "+        message.setLength(message.length() - 6);\n", 
            "+\n", 
            "+        // We must get a 200 OK\n", 
            "+        assertEquals(HttpStatus.SC_OK, response.getStatus());\n", 
            "+\n", 
            "+        OMElement body = response.getBodyAsXML();\n", 
            "+        // First element must be 'foo'\n", 
            "+        assertEquals(\"foo\", body.getLocalName());\n", 
            "+\n", 
            "+        Iterator childElements = body.getChildrenWithLocalName(\"bar\");\n", 
            "+        int returnedChildren = 0;\n", 
            "+        while (childElements.hasNext()) {\n", 
            "+            returnedChildren++;\n", 
            "+            childElements.next();\n", 
            "+        }\n", 
            "+        // Must return all the child 'bar' elements we sent\n", 
            "+        assertEquals(childrenCount, returnedChildren);\n", 
            "+\n", 
            "+        log.info(\">>>>>>>>>>>>>>>> \" + scenario + \" (\" + sizeStr + \"): SUCCESS\");\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/rest/Sample10002.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/rest/Sample10002.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-118,6 +118,8", 
          "lines": [
            "             return new DerbyServerController(root);\n", 
            "         } else if (SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_BROKER.equals(root.getLocalName())) {\n", 
            "             return new ActiveMQController(root);\n", 
            "+        } else if (SampleConfigConstants.TAG_BE_SERVER_CONF_ECHO_SERVER.equals(root.getLocalName())) {\n", 
            "+            return new EchoHttpServerController(root);\n", 
            "         }\n", 
            "         return null;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestUtils.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-39,6 +39,7", 
          "lines": [
            "     public static final String TAG_BE_SERVER_CONF_AXIS2_SERVER = \"axis2Server\";\n", 
            "     public static final String TAG_BE_SERVER_CONF_JMS_BROKER = \"jmsBroker\";\n", 
            "     public static final String TAG_BE_SERVER_CONF_DERBY_SERVER = \"derbyServer\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_ECHO_SERVER = \"echoServer\";\n", 
            "     public static final String TAG_BE_SERVER_CONF_QFIX_EXECUTOR = \"fixExecutor\";\n", 
            " \n", 
            "     public static final String TAG_BE_SERVER_CONF_AXIS2_REPO = \"axis2Repo\";\n"
          ]
        }, 
        {
          "locn": "-47,6 +48,8", 
          "lines": [
            "     public static final String TAG_BE_SERVER_CONF_AXIS2_HTTPS_PORT = \"httpsPort\";\n", 
            "     public static final String TAG_BE_SERVER_CONF_AXIS2_COUNTER_ENABLED = \"counterEnabled\";\n", 
            " \n", 
            "+    public static final String TAG_BE_SERVER_CONF_ECHO_HTTP_PORT = \"port\";\n", 
            "+\n", 
            "     public static final String TAG_BE_SERVER_CONF_DERBY_PORT = \"dbPort\";\n", 
            " \n", 
            "     public static final String TAG_BE_SERVER_CONF_JMS_PROVIDER_URL = \"providerURL\";\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SampleConfigConstants.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SampleConfigConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,188", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.*;\n", 
            "+import org.apache.http.entity.ByteArrayEntity;\n", 
            "+import org.apache.http.entity.ContentType;\n", 
            "+import org.apache.http.impl.DefaultBHttpServerConnection;\n", 
            "+import org.apache.http.impl.DefaultBHttpServerConnectionFactory;\n", 
            "+import org.apache.http.protocol.*;\n", 
            "+import org.apache.http.util.EntityUtils;\n", 
            "+import org.apache.synapse.samples.framework.config.SampleConfigConstants;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+import java.io.InterruptedIOException;\n", 
            "+import java.net.ServerSocket;\n", 
            "+import java.net.Socket;\n", 
            "+import java.util.concurrent.atomic.AtomicInteger;\n", 
            "+\n", 
            "+public class EchoHttpServerController extends AbstractBackEndServerController {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(EchoHttpServerController.class);\n", 
            "+\n", 
            "+    private int port;\n", 
            "+    private RequestListenerThread requestListener;\n", 
            "+\n", 
            "+    public EchoHttpServerController(OMElement element) {\n", 
            "+        super(element);\n", 
            "+        port = Integer.parseInt(SynapseTestUtils.getParameter(element,\n", 
            "+                SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_HTTP_PORT, \"9000\"));\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean startProcess() {\n", 
            "+        try {\n", 
            "+            requestListener = new RequestListenerThread(port);\n", 
            "+            requestListener.start();\n", 
            "+            return true;\n", 
            "+        } catch (IOException e) {\n", 
            "+            log.error(\"Error while initializing echo server\", e);\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean stopProcess() {\n", 
            "+        requestListener.halt();\n", 
            "+        requestListener = null;\n", 
            "+        return true;\n", 
            "+    }\n", 
            "+\n", 
            "+    static class EchoHttpHandler implements HttpRequestHandler {\n", 
            "+\n", 
            "+        public void handle(HttpRequest request, HttpResponse response,\n", 
            "+                           HttpContext context) throws HttpException, IOException {\n", 
            "+\n", 
            "+            if (log.isDebugEnabled()) {\n", 
            "+                log.debug(request.getRequestLine().toString());\n", 
            "+            }\n", 
            "+            if (request instanceof HttpEntityEnclosingRequest) {\n", 
            "+                HttpEntity entity = ((HttpEntityEnclosingRequest) request).getEntity();\n", 
            "+                byte[] entityContent = EntityUtils.toByteArray(entity);\n", 
            "+                response.setStatusCode(HttpStatus.SC_OK);\n", 
            "+                response.setEntity(new ByteArrayEntity(entityContent,\n", 
            "+                        ContentType.create(entity.getContentType().getValue())));\n", 
            "+            } else {\n", 
            "+                response.setStatusCode(HttpStatus.SC_NO_CONTENT);\n", 
            "+            }\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class RequestListenerThread extends Thread {\n", 
            "+\n", 
            "+        private final HttpConnectionFactory<DefaultBHttpServerConnection> connFactory;\n", 
            "+        private final ServerSocket serversocket;\n", 
            "+        private final HttpService httpService;\n", 
            "+\n", 
            "+        public RequestListenerThread(final int port) throws IOException {\n", 
            "+            this.connFactory = DefaultBHttpServerConnectionFactory.INSTANCE;\n", 
            "+            this.serversocket = new ServerSocket(port);\n", 
            "+\n", 
            "+            // Set up the HTTP protocol processor\n", 
            "+            HttpProcessor httpProcessor = HttpProcessorBuilder.create()\n", 
            "+                    .add(new ResponseDate())\n", 
            "+                    .add(new ResponseServer(\"EchoServer\"))\n", 
            "+                    .add(new ResponseContent())\n", 
            "+                    .add(new ResponseConnControl()).build();\n", 
            "+\n", 
            "+            // Set up request handlers\n", 
            "+            UriHttpRequestHandlerMapper registry = new UriHttpRequestHandlerMapper();\n", 
            "+            registry.register(\"*\", new EchoHttpHandler());\n", 
            "+\n", 
            "+            // Set up the HTTP service\n", 
            "+            this.httpService = new HttpService(httpProcessor, registry);\n", 
            "+            this.setName(\"echo-http-server\");\n", 
            "+        }\n", 
            "+\n", 
            "+        @Override\n", 
            "+        public void run() {\n", 
            "+            log.info(\"Listening on port \" + this.serversocket.getLocalPort());\n", 
            "+            AtomicInteger counter = new AtomicInteger(0);\n", 
            "+            while (!Thread.interrupted()) {\n", 
            "+                try {\n", 
            "+                    // Set up HTTP connection\n", 
            "+                    Socket socket = this.serversocket.accept();\n", 
            "+                    HttpServerConnection conn = this.connFactory.createConnection(socket);\n", 
            "+\n", 
            "+                    // Start worker thread\n", 
            "+                    Thread t = new WorkerThread(this.httpService, conn, counter.incrementAndGet());\n", 
            "+                    t.start();\n", 
            "+                } catch (InterruptedIOException ex) {\n", 
            "+                    break;\n", 
            "+                } catch (IOException e) {\n", 
            "+                    if (Thread.interrupted()) {\n", 
            "+                        break;\n", 
            "+                    }\n", 
            "+                    log.error(\"I/O error initializing connection thread\", e);\n", 
            "+                    break;\n", 
            "+                }\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        public void halt() {\n", 
            "+            log.info(\"Shutting down echo server\");\n", 
            "+            try {\n", 
            "+                this.interrupt();\n", 
            "+                this.serversocket.close();\n", 
            "+            } catch (IOException e) {\n", 
            "+                log.warn(\"Error while shutting down echo server\", e);\n", 
            "+            }\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class WorkerThread extends Thread {\n", 
            "+\n", 
            "+        private final HttpService httpservice;\n", 
            "+        private final HttpServerConnection conn;\n", 
            "+\n", 
            "+        public WorkerThread(\n", 
            "+                final HttpService httpservice,\n", 
            "+                final HttpServerConnection conn,\n", 
            "+                final int counter) {\n", 
            "+            super();\n", 
            "+            this.httpservice = httpservice;\n", 
            "+            this.conn = conn;\n", 
            "+            this.setName(\"echo-http-worker-\" + counter);\n", 
            "+        }\n", 
            "+\n", 
            "+        @Override\n", 
            "+        public void run() {\n", 
            "+            HttpContext context = new BasicHttpContext(null);\n", 
            "+            try {\n", 
            "+                while (!Thread.interrupted() && this.conn.isOpen()) {\n", 
            "+                    this.httpservice.handleRequest(this.conn, context);\n", 
            "+                }\n", 
            "+            } catch (ConnectionClosedException ex) {\n", 
            "+                log.debug(\"Client closed the connection\", ex);\n", 
            "+            } catch (IOException ex) {\n", 
            "+                log.error(\"I/O error: \" + ex.getMessage(), ex);\n", 
            "+            } catch (HttpException ex) {\n", 
            "+                log.error(\"Unrecoverable HTTP protocol violation: \" + ex.getMessage(), ex);\n", 
            "+            } finally {\n", 
            "+                try {\n", 
            "+                    this.conn.shutdown();\n", 
            "+                } catch (IOException ignore) {}\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/EchoHttpServerController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/EchoHttpServerController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-22,6 +22,7", 
          "lines": [
            " import junit.framework.TestSuite;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.tests.rest.Sample10002;\n", 
            " import org.apache.synapse.samples.framework.tests.tasks.*;\n", 
            " import org.apache.synapse.samples.framework.tests.transport.Sample250;\n", 
            " import org.apache.synapse.samples.framework.tests.advanced.*;\n"
          ]
        }, 
        {
          "locn": "-242,5 +243,6", 
          "lines": [
            " \n", 
            "         sampleClassRepo.put(\"800\", Sample800.class);\n", 
            "         sampleClassRepo.put(\"10001\", Sample10001.class);\n", 
            "+        sampleClassRepo.put(\"10002\", Sample10002.class);\n", 
            "     }\n", 
            " }\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java"
    }
  ], 
  "id": "1533847"
}