{
  "when": "2013-07-19T19:30:23-04:00", 
  "message": "Applying the patch for SYNAPSE-841. Adding support for complex XML blocks in the header mediator.", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-33,6 +33,7", 
          "lines": [
            " import org.apache.synapse.util.xpath.SynapseXPath;\n", 
            " \n", 
            " import javax.xml.namespace.QName;\n", 
            "+import java.util.ArrayList;\n", 
            " import java.util.List;\n", 
            " \n", 
            " /**\n"
          ]
        }, 
        {
          "locn": "-53,6 +54,8", 
          "lines": [
            "     private String value = null;\n", 
            "     /** Set the header (ACTION_SET) or remove it (ACTION_REMOVE). Defaults to ACTION_SET */\n", 
            "     private int action = ACTION_SET;\n", 
            "+    /** Optional embedded XML content of the header element */\n", 
            "+    private List<OMElement> embeddedXmlContent = new ArrayList<OMElement>();\n", 
            "     /** An expression which should be evaluated, and the result set as the header value */\n", 
            "     private SynapseXPath expression = null;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-83,7 +86,7", 
          "lines": [
            "                 synLog.traceOrDebug(\"Set SOAP header : \" + qName + \" to : \" + value);\n", 
            "             }\n", 
            " \n", 
            "-            if (qName.getNamespaceURI() == null || \"\".equals(qName.getNamespaceURI())) {\n", 
            "+            if (!isImplicit() && (qName.getNamespaceURI() == null || \"\".equals(qName.getNamespaceURI()))) {\n", 
            " \n", 
            "                 // is this a \"well known\" Synapse header?\n", 
            "                 if (SynapseConstants.HEADER_TO.equals(qName.getLocalPart())) {\n"
          ]
        }, 
        {
          "locn": "-160,9 +163,15", 
          "lines": [
            "         }\n", 
            "         SOAPFactory fac = (SOAPFactory) env.getOMFactory();\n", 
            "         SOAPHeader header = env.getOrCreateHeader();\n", 
            "-        SOAPHeaderBlock hb = header.addHeaderBlock(qName.getLocalPart(),\n", 
            "-                fac.createOMNamespace(qName.getNamespaceURI(), qName.getPrefix()));\n", 
            "-        hb.setText(value);\n", 
            "+        if (!isImplicit()) {\n", 
            "+            SOAPHeaderBlock hb = header.addHeaderBlock(qName.getLocalPart(),\n", 
            "+                    fac.createOMNamespace(qName.getNamespaceURI(), qName.getPrefix()));\n", 
            "+            hb.setText(value);\n", 
            "+        } else if (hasEmbeddedXml()) {\n", 
            "+            for (OMElement e : embeddedXmlContent) {\n", 
            "+                header.addChild(e);\n", 
            "+            }\n", 
            "+        }\n", 
            "     }\n", 
            " \n", 
            "     private void removeFromHeaderList(List headersList) {\n"
          ]
        }, 
        {
          "locn": "-184,6 +193,24", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "+    public List<OMElement> getEmbeddedXml() {\n", 
            "+        return embeddedXmlContent;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void addEmbeddedXml(OMElement element) {\n", 
            "+        if (element != null && !embeddedXmlContent.contains(element)) {\n", 
            "+            embeddedXmlContent.add(element);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean hasEmbeddedXml() {\n", 
            "+        return !embeddedXmlContent.isEmpty();\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean isImplicit() {\n", 
            "+        return getQName() == null;\n", 
            "+    }\n", 
            "+\n", 
            "     public int getAction() {\n", 
            "         return action;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/transform/HeaderMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/transform/HeaderMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-36,6 +36,7", 
          "lines": [
            " \n", 
            "         if (!(m instanceof HeaderMediator)) {\n", 
            "             handleException(\"Unsupported mediator passed in for serialization : \" + m.getType());\n", 
            "+            return null;\n", 
            "         }\n", 
            " \n", 
            "         HeaderMediator mediator = (HeaderMediator) m;\n"
          ]
        }, 
        {
          "locn": "-75,6 +76,11", 
          "lines": [
            "             }\n", 
            "         }\n", 
            " \n", 
            "+        if (mediator.hasEmbeddedXml()) {\n", 
            "+            for (OMElement e : mediator.getEmbeddedXml()) {\n", 
            "+                header.addChild(e);\n", 
            "+            }\n", 
            "+        }\n", 
            "         return header;\n", 
            "     }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/HeaderMediatorSerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/HeaderMediatorSerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-28,6 +28,7", 
          "lines": [
            " import org.jaxen.JaxenException;\n", 
            " \n", 
            " import javax.xml.namespace.QName;\n", 
            "+import java.util.Iterator;\n", 
            " import java.util.Properties;\n", 
            " \n", 
            " /**\n"
          ]
        }, 
        {
          "locn": "-57,9 +58,11", 
          "lines": [
            "         OMAttribute action = elem.getAttribute(ATT_ACTION);\n", 
            " \n", 
            "         if (name == null || name.getAttributeValue() == null) {\n", 
            "-            String msg = \"A valid name attribute is required for the header mediator\";\n", 
            "-            log.error(msg);\n", 
            "-            throw new SynapseException(msg);\n", 
            "+            if (elem.getChildElements() == null || !elem.getChildElements().hasNext()) {\n", 
            "+                String msg = \"A valid name attribute is required for the header mediator\";\n", 
            "+                log.error(msg);\n", 
            "+                throw new SynapseException(msg);\n", 
            "+            }\n", 
            "         } else {\n", 
            "             String nameAtt = name.getAttributeValue();\n", 
            "             int colonPos = nameAtt.indexOf(\":\");\n"
          ]
        }, 
        {
          "locn": "-101,7 +104,7", 
          "lines": [
            "         }\n", 
            " \n", 
            "         if (headerMediator.getAction() == HeaderMediator.ACTION_SET &&\n", 
            "-            value == null && exprn == null) {\n", 
            "+                value == null && exprn == null && !headerMediator.isImplicit()) {\n", 
            "             handleException(\"A 'value' or 'expression' attribute is required for a [set] \" +\n", 
            "                     \"header mediator\");\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-115,8 +118,17", 
          "lines": [
            "             } catch (JaxenException je) {\n", 
            "                 handleException(\"Invalid XPath expression : \" + exprn.getAttributeValue());\n", 
            "             }\n", 
            "+        } else if (headerMediator.isImplicit()) { // we have an implicit, non standard header\n", 
            "+            Iterator i = elem.getChildElements();\n", 
            "+            if (i == null) {\n", 
            "+                handleException(\"A non standard header with both value and expression null must \" +\n", 
            "+                        \"contain an embedded XML definition.\");\n", 
            "+                return null;\n", 
            "+            }\n", 
            "+            while (i.hasNext()) {\n", 
            "+                headerMediator.addEmbeddedXml((OMElement) i.next());\n", 
            "+            }\n", 
            "         }\n", 
            "-\n", 
            "         return headerMediator;\n", 
            "     }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/HeaderMediatorFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/HeaderMediatorFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-20,12 +20,16", 
          "lines": [
            " package org.apache.synapse.mediators.transform;\n", 
            " \n", 
            " import junit.framework.TestCase;\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axiom.om.util.AXIOMUtil;\n", 
            " import org.apache.synapse.MessageContext;\n", 
            " import org.apache.synapse.SynapseConstants;\n", 
            "+import org.apache.synapse.config.xml.HeaderMediatorFactory;\n", 
            " import org.apache.synapse.mediators.TestUtils;\n", 
            " import org.apache.synapse.util.xpath.SynapseXPath;\n", 
            " \n", 
            " import javax.xml.namespace.QName;\n", 
            "+import java.util.Properties;\n", 
            " \n", 
            " public class HeaderMediatorTest extends TestCase {\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-86,4 +90,34", 
          "lines": [
            "             // This is expected\n", 
            "         }\n", 
            "     }\n", 
            "+\n", 
            "+    public void testEmbeddedXml() throws Exception {\n", 
            "+        String simpleHeader = \"<header name=\\\"m:simpleHeader\\\" value=\\\"Simple Header\\\" xmlns:m=\\\"http://org.synapse.example\\\"/>\";\n", 
            "+        String complexHeader = \"<header><m:complexHeader xmlns:m=\\\"http://org.synapse.example\\\"><property key=\\\"k1\\\" value=\\\"v1\\\"/><property key=\\\"k2\\\" value=\\\"v2\\\"/></m:complexHeader></header>\";\n", 
            "+        String removeHeader = \"<header name=\\\"m:complexHeader\\\" action=\\\"remove\\\" xmlns:m=\\\"http://org.synapse.example\\\"/>\";\n", 
            "+\n", 
            "+        HeaderMediatorFactory fac = new HeaderMediatorFactory();\n", 
            "+        // Adding headers.\n", 
            "+        MessageContext synCtx = TestUtils.getTestContext(\"<empty/>\");\n", 
            "+        HeaderMediator headerMediator = (HeaderMediator) fac.createMediator(\n", 
            "+                AXIOMUtil.stringToOM(simpleHeader), new Properties());\n", 
            "+        headerMediator.mediate(synCtx);\n", 
            "+        OMElement result = synCtx.getEnvelope().getHeader().getFirstElement();\n", 
            "+        assertEquals(\"simpleHeader\", result.getLocalName());\n", 
            "+\n", 
            "+        headerMediator = (HeaderMediator) fac.createMediator(\n", 
            "+                AXIOMUtil.stringToOM(complexHeader), new Properties());\n", 
            "+        headerMediator.mediate(synCtx);\n", 
            "+        result = synCtx.getEnvelope().getHeader().getFirstChildWithName(\n", 
            "+                new QName(\"http://org.synapse.example\", \"complexHeader\"));\n", 
            "+        assertNotNull(result);\n", 
            "+\n", 
            "+        // Removing headers.\n", 
            "+        headerMediator = (HeaderMediator) fac.createMediator(\n", 
            "+                AXIOMUtil.stringToOM(removeHeader), new Properties());\n", 
            "+        headerMediator.mediate(synCtx);\n", 
            "+        result = synCtx.getEnvelope().getHeader().getFirstChildWithName(\n", 
            "+                new QName(\"http://org.synapse.example\", \"complexHeader\"));\n", 
            "+        assertNull(result);\n", 
            "+    }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/mediators/transform/HeaderMediatorTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/mediators/transform/HeaderMediatorTest.java"
    }
  ], 
  "id": "1505064"
}