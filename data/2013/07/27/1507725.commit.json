{
  "when": "2013-07-27T17:55:34-04:00", 
  "message": "Refactoring and clean up", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-179,7 +179,7", 
          "lines": [
            "             }\n", 
            "             response.setEntity(entity);\n", 
            "             \n", 
            "-\t\t\thttpGetRequestProcessor.process(request.getRequest(), response,msgContext,\n", 
            "+\t\t\thttpGetRequestProcessor.process(request.getRequest(), response, msgContext,\n", 
            " \t\t\t\t\trequest.getConnection(), os, true);\n", 
            " \t\t} \n", 
            " \t\t\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ServerWorker.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ServerWorker.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-124,7 +124,7", 
          "lines": [
            "         SourceContext.updateState(conn, ProtocolState.GET_REQUEST_COMPLETE);\n", 
            "         sourceHandler.commitResponseHideExceptions(conn, response);\n", 
            "         closeOutputStream(os);\n", 
            "-        msgContext.setProperty(PassThroughConstants.GET_REQUEST_HANDLED, true);\n", 
            "+        msgContext.setProperty(PassThroughConstants.GET_REQUEST_HANDLED, Boolean.TRUE);\n", 
            "     }\n", 
            " \n", 
            "     private void sendResponseAndFinish(HttpResponse response, byte[] data,\n"
          ]
        }, 
        {
          "locn": "-134,7 +134,7", 
          "lines": [
            "         sourceHandler.commitResponseHideExceptions(conn, response);\n", 
            "         os.write(data);\n", 
            "         closeOutputStream(os);\n", 
            "-        msgContext.setProperty(PassThroughConstants.GET_REQUEST_HANDLED, true);\n", 
            "+        msgContext.setProperty(PassThroughConstants.GET_REQUEST_HANDLED, Boolean.TRUE);\n", 
            "     }\n", 
            " \n", 
            " \tprivate void closeOutputStream(OutputStream os) {\n"
          ]
        }, 
        {
          "locn": "-165,28 +165,29", 
          "lines": [
            " \t\t\tMessageContext msgContext, NHttpServerConnection conn,\n", 
            " \t\t\tOutputStream os, String serviceName,\n", 
            " \t\t\tMap<String, String> parameters) {\n", 
            "-\t\tAxisService service = cfgCtx.getAxisConfiguration().getServices()\n", 
            "-\t\t\t\t.get(serviceName);\n", 
            "+\t\tAxisService service = cfgCtx.getAxisConfiguration().getServices().get(serviceName);\n", 
            " \t\tif (service != null) {\n", 
            " \t\t\ttry {\n", 
            "-\t\t\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n", 
            "+\t\t\t\tByteArrayOutputStream output = new ByteArrayOutputStream();\n", 
            " \t\t\t\tString parameterValue = parameters.get(\"wsdl\");\n", 
            " \t\t\t\tif (parameterValue == null) {\n", 
            "-\t\t\t\t\tservice.printWSDL(baos, getIpAddress());\n", 
            "+\t\t\t\t\tservice.printWSDL(output, getIpAddress());\n", 
            " \t\t\t\t} else {\n", 
            " \t\t\t\t\t// here the parameter value should be the wsdl file name\n", 
            "-\t\t\t\t\tservice.printUserWSDL(baos, parameterValue);\n", 
            "+\t\t\t\t\tservice.printUserWSDL(output, parameterValue);\n", 
            " \t\t\t\t}\n", 
            " \n", 
            "                 response.addHeader(CONTENT_TYPE, TEXT_XML);\n", 
            "-                sendResponseAndFinish(response, baos.toByteArray(), conn, os, msgContext);\n", 
            "+                sendResponseAndFinish(response, output.toByteArray(), conn, os, msgContext);\n", 
            " \n", 
            " \t\t\t} catch (Exception e) {\n", 
            " \t\t\t\thandleBrowserException(response, conn, os,\n", 
            "-\t\t\t\t\t\t\"Error generating ?wsdl output for service : \"\n", 
            "-\t\t\t\t\t\t\t\t+ serviceName, e);\n", 
            "+\t\t\t\t\t\t\"Error generating ?wsdl output for service : \" + serviceName, e);\n", 
            " \t\t\t}\n", 
            " \t\t} else {\n", 
            "+            if (log.isDebugEnabled()) {\n", 
            "+                log.debug(\"Unable to find service: \" + serviceName + \" for WSDL generation.\");\n", 
            "+            }\n", 
            " \t\t\tmsgContext.setProperty(PassThroughConstants.REST_GET_DELETE_INVOKE, true);\n", 
            " \t\t}\n", 
            " \t}\n"
          ]
        }, 
        {
          "locn": "-220,10 +221,10", 
          "lines": [
            " \t\t\t\t\t\t\t\t+ \". A WSDL cannot be generated.\", null);\n", 
            " \t\t\t}\n", 
            " \t\t\ttry {\n", 
            "-\t\t\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n", 
            "-\t\t\t\tservice.printWSDL2(baos, getIpAddress());\n", 
            "+\t\t\t\tByteArrayOutputStream output = new ByteArrayOutputStream();\n", 
            "+\t\t\t\tservice.printWSDL2(output, getIpAddress());\n", 
            " \t\t\t\tresponse.addHeader(CONTENT_TYPE, TEXT_XML);\n", 
            "-                sendResponseAndFinish(response, baos.toByteArray(), conn, os, msgContext);\n", 
            "+                sendResponseAndFinish(response, output.toByteArray(), conn, os, msgContext);\n", 
            " \t\t\t} catch (Exception e) {\n", 
            " \t\t\t\thandleBrowserException(response, conn, os,\n", 
            " \t\t\t\t\t\t\"Error generating ?wsdl2 output for service : \"\n"
          ]
        }, 
        {
          "locn": "-310,10 +311,10", 
          "lines": [
            " \t\t\t\t\t.get(serviceName);\n", 
            " \t\t\tif (service != null) {\n", 
            " \t\t\t\ttry {\n", 
            "-\t\t\t\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n", 
            "-\t\t\t\t\tservice.printSchema(baos);\n", 
            "+\t\t\t\t\tByteArrayOutputStream output = new ByteArrayOutputStream();\n", 
            "+\t\t\t\t\tservice.printSchema(output);\n", 
            " \t\t\t\t\tresponse.addHeader(CONTENT_TYPE, TEXT_XML);\n", 
            "-                    sendResponseAndFinish(response, baos.toByteArray(), conn, os, msgContext);\n", 
            "+                    sendResponseAndFinish(response, output.toByteArray(), conn, os, msgContext);\n", 
            " \t\t\t\t} catch (Exception e) {\n", 
            " \t\t\t\t\thandleBrowserException(response, conn, os,\n", 
            " \t\t\t\t\t\t\t\"Error generating ?xsd output for service : \"\n"
          ]
        }, 
        {
          "locn": "-345,14 +346,14", 
          "lines": [
            " \t\t\t\t// schema found - write it to the stream\n", 
            " \t\t\t\tif (schema != null) {\n", 
            " \t\t\t\t\ttry {\n", 
            "-\t\t\t\t\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n", 
            "-\t\t\t\t\t\tschema.write(baos);\n", 
            "+\t\t\t\t\t\tByteArrayOutputStream output = new ByteArrayOutputStream();\n", 
            "+\t\t\t\t\t\tschema.write(output);\n", 
            " \t\t\t\t\t\tresponse.addHeader(CONTENT_TYPE, TEXT_XML);\n", 
            " \t\t\t\t\t\tsourceHandler.commitResponseHideExceptions(conn,\n", 
            " \t\t\t\t\t\t\t\tresponse);\n", 
            "-\t\t\t\t\t\tos.write(baos.toByteArray());\n", 
            "+\t\t\t\t\t\tos.write(output.toByteArray());\n", 
            " \t\t\t\t\t\tcloseOutputStream(os);\n", 
            "-                        msgContext.setProperty(PassThroughConstants.GET_REQUEST_HANDLED, true);\n", 
            "+                        msgContext.setProperty(PassThroughConstants.GET_REQUEST_HANDLED, Boolean.TRUE);\n", 
            " \t\t\t\t\t} catch (Exception e) {\n", 
            " \t\t\t\t\t\thandleBrowserException(response, conn, os,\n", 
            " \t\t\t\t\t\t\t\t\"Error generating named ?xsd output for service : \"\n"
          ]
        }, 
        {
          "locn": "-363,7 +364,7", 
          "lines": [
            " \t\t\t\t\t// no schema available by that name - send 404\n", 
            " \t\t\t\t\tresponse.setStatusCode(HttpStatus.SC_NOT_FOUND);\n", 
            " \t\t\t\t\tcloseOutputStream(os);\n", 
            "-                    msgContext.setProperty(PassThroughConstants.GET_REQUEST_HANDLED, true);\n", 
            "+                    msgContext.setProperty(PassThroughConstants.GET_REQUEST_HANDLED, Boolean.TRUE);\n", 
            " \t\t\t\t}\n", 
            " \t\t\t} else {\n", 
            " \t\t\t\tmsgContext.setProperty(PassThroughConstants.REST_GET_DELETE_INVOKE, true);\n"
          ]
        }, 
        {
          "locn": "-456,8 +457,8", 
          "lines": [
            "         String address = \"127.0.0.1\";\n", 
            " \n", 
            "         while (e.hasMoreElements()) {\n", 
            "-            NetworkInterface netface = (NetworkInterface) e.nextElement();\n", 
            "-            Enumeration addresses = netface.getInetAddresses();\n", 
            "+            NetworkInterface networkInterface = (NetworkInterface) e.nextElement();\n", 
            "+            Enumeration addresses = networkInterface.getInetAddresses();\n", 
            " \n", 
            "             while (addresses.hasMoreElements()) {\n", 
            "                 InetAddress ip = (InetAddress) addresses.nextElement();\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/api/PassThroughNHttpGetProcessor.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/api/PassThroughNHttpGetProcessor.java"
    }
  ], 
  "id": "1507725"
}