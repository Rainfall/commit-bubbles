{
  "when": "2012-04-05T04:54:08-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-0,0 +1,55", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.commons.snmp;\n", 
            "+\n", 
            "+public class SNMPConstants {\n", 
            "+\n", 
            "+    /**\n", 
            "+     * This OID branch has been uniquely assigned to the Synapse project by the ASF.\n", 
            "+     * Please do not change.\n", 
            "+     * \n", 
            "+     * @see <a href=\"https://cwiki.apache.org/confluence/display/DIRxPMGT/OID+Assignment+Scheme\">ASF OID Assignments</a>\n", 
            "+     */\n", 
            "+    public static final String SYNAPSE_OID_BRANCH = \"1.3.6.1.4.1.18060.14\";\n", 
            "+    \n", 
            "+    public static final String SNMP_VERSION_1 = \"snmpv1\";\n", 
            "+    public static final String SNMP_VERSION_2_C = \"snmpv2c\";\n", 
            "+    \n", 
            "+    // Configuration parameters\n", 
            "+    public static final String SNMP_ENABLED = \"synapse.snmp.enabled\";\n", 
            "+    public static final String SNMP_COMMUNITY_NAME = \"synapse.snmp.community.name\";\n", 
            "+    public static final String SNMP_SECURITY_NAME = \"synapse.snmp.security.name\";\n", 
            "+    public static final String SNMP_CONTEXT_NAME  = \"synapse.snmp.context.name\";\n", 
            "+    public static final String SNMP_HOST = \"synapse.snmp.host\";\n", 
            "+    public static final String SNMP_PORT = \"synapse.snmp.port\";\n", 
            "+    public static final String SNMP_VERSION = \"synapse.snmp.version\";\n", 
            "+\n", 
            "+    // Configuration defaults\n", 
            "+    public static final String SNMP_DEFAULT_COMMUNITY_NAME = \"public\";\n", 
            "+    public static final String SNMP_DEFAULT_SECURITY_NAME = \"cpublic\";\n", 
            "+    public static final String SNMP_DEFAULT_CONTEXT_NAME = \"public\";\n", 
            "+    public static final String SNMP_DEFAULT_HOST = \"127.0.0.1\";\n", 
            "+    public static final int SNMP_DEFAULT_PORT = 9161;\n", 
            "+    public static final String SNMP_DEFAULT_VERSION = SNMP_VERSION_1;\n", 
            "+\n", 
            "+    public static final String BC_FILE = \"./logs/snmp/boot-counter.cfg\";\n", 
            "+    public static final String CONFIG_FILE = \"./logs/snmp/conf.cfg\";\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/commons/src/main/java/org/apache/synapse/commons/snmp/SNMPConstants.java", 
      "from": "java/modules/commons/src/main/java/org/apache/synapse/commons/snmp/SNMPConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,101", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.commons.snmp;\n", 
            "+\n", 
            "+import javax.management.ObjectName;\n", 
            "+import java.util.HashMap;\n", 
            "+import java.util.Map;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Utilities for generating Synapse OIDs and MIB entries\n", 
            "+ */\n", 
            "+public class SynapseMIBUtils {\n", 
            "+\n", 
            "+    private static final String PROPERTY_CONNECTOR_NAME = \"ConnectorName\";\n", 
            "+    private static final String PROPERTY_NAME = \"Name\";\n", 
            "+    private static final String PROPERTY_TYPE = \"Type\";\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Contains MBean name to OID mappings. MBeans which are not included\n", 
            "+     * in this map are not exposed over SNMP.\n", 
            "+     */\n", 
            "+    private static final Map<String,Integer> type2oid = new HashMap<String, Integer>();\n", 
            "+\n", 
            "+    /**\n", 
            "+     * A basic symbol table to ensure consistent OID assignment for MBean\n", 
            "+     * attributes.\n", 
            "+     */\n", 
            "+    private static final Map<String,Integer> name2oid = new HashMap<String, Integer>();\n", 
            "+\n", 
            "+    static {\n", 
            "+        type2oid.put(\"ServerManager\", 1);\n", 
            "+        type2oid.put(\"Transport\", 2);\n", 
            "+        type2oid.put(\"NhttpConnections\", 3);\n", 
            "+        type2oid.put(\"NHTTPLatencyView\", 4);\n", 
            "+        type2oid.put(\"NHTTPS2SLatencyView\", 5);\n", 
            "+\n", 
            "+        name2oid.put(\"nio-http-listener\", 1);\n", 
            "+        name2oid.put(\"nio-http-sender\", 2);\n", 
            "+        name2oid.put(\"nio-https-listener\", 3);\n", 
            "+        name2oid.put(\"nio-https-sender\", 4);\n", 
            "+        name2oid.put(\"jms-listener\", 5);\n", 
            "+        name2oid.put(\"jms-sender\", 6);\n", 
            "+        name2oid.put(\"vfs-listener\", 7);\n", 
            "+        name2oid.put(\"vfs-sender\", 8);\n", 
            "+        name2oid.put(\"mailto-listener\", 9);\n", 
            "+        name2oid.put(\"mailto-sender\", 10);\n", 
            "+        name2oid.put(\"http-listener\", 11);\n", 
            "+        name2oid.put(\"http-sender\", 12);\n", 
            "+        name2oid.put(\"https-listener\", 13);\n", 
            "+        name2oid.put(\"https-sender\", 14);\n", 
            "+        name2oid.put(\"nio-http\", 15);\n", 
            "+        name2oid.put(\"nio-https\", 16);\n", 
            "+    }\n", 
            "+\n", 
            "+    public synchronized static String getOID(ObjectName objectName) {\n", 
            "+        String type = objectName.getKeyProperty(PROPERTY_TYPE);\n", 
            "+        Integer typeOID = type2oid.get(type);\n", 
            "+        if (typeOID == null) {\n", 
            "+            return null;\n", 
            "+        }\n", 
            "+\n", 
            "+        String name;\n", 
            "+        if (\"Transport\".equals(type)) {\n", 
            "+            // ditch the time stamp suffix at the end of the connector name\n", 
            "+            String connector = objectName.getKeyProperty(PROPERTY_CONNECTOR_NAME);\n", 
            "+            name = connector.substring(0, connector.lastIndexOf('-'));\n", 
            "+        } else {\n", 
            "+            name = objectName.getKeyProperty(PROPERTY_NAME);\n", 
            "+        }\n", 
            "+        \n", 
            "+        if (name != null) {\n", 
            "+            Integer nameOID = name2oid.get(name);\n", 
            "+            if (nameOID == null) {\n", 
            "+                nameOID = new Integer(name2oid.size() + 1);\n", 
            "+                name2oid.put(name, nameOID);\n", 
            "+            }\n", 
            "+            return SNMPConstants.SYNAPSE_OID_BRANCH + \".\" + typeOID.intValue() +\n", 
            "+                    \".\" + nameOID.intValue();\n", 
            "+        } else {\n", 
            "+            return SNMPConstants.SYNAPSE_OID_BRANCH + \".\" + typeOID.intValue();\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/commons/src/main/java/org/apache/synapse/commons/snmp/SynapseMIBUtils.java", 
      "from": "java/modules/commons/src/main/java/org/apache/synapse/commons/snmp/SynapseMIBUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,268", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.commons.snmp;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.snmp4j.TransportMapping;\n", 
            "+import org.snmp4j.agent.BaseAgent;\n", 
            "+import org.snmp4j.agent.CommandProcessor;\n", 
            "+import org.snmp4j.agent.DuplicateRegistrationException;\n", 
            "+import org.snmp4j.agent.ManagedObject;\n", 
            "+import org.snmp4j.agent.io.ImportModes;\n", 
            "+import org.snmp4j.agent.mo.MOTableRow;\n", 
            "+import org.snmp4j.agent.mo.snmp.*;\n", 
            "+import org.snmp4j.agent.security.MutableVACM;\n", 
            "+import org.snmp4j.mp.MPv3;\n", 
            "+import org.snmp4j.mp.SnmpConstants;\n", 
            "+import org.snmp4j.security.*;\n", 
            "+import org.snmp4j.smi.*;\n", 
            "+import org.snmp4j.transport.TransportMappings;\n", 
            "+\n", 
            "+import javax.management.*;\n", 
            "+import java.io.File;\n", 
            "+import java.io.IOException;\n", 
            "+import java.lang.management.ManagementFactory;\n", 
            "+import java.util.*;\n", 
            "+\n", 
            "+/**\n", 
            "+ * SNMP agent which is capable of listening for incoming SNMP GET/GETNEXT requests\n", 
            "+ * and responding to them accordingly. This agent implementation exposed all the\n", 
            "+ * standard Synapse MBeans over SNMP. The view exposed by the agent is read-only as of\n", 
            "+ * now (this may be changed in a future version). The relevant OID mappings are\n", 
            "+ * defined in the SynapseMIBUtils class. Each MBean attribute becomes a leaf in the MIB\n", 
            "+ * exposed by the agent. For each MBean, attributes are arranged in the alphabetical\n", 
            "+ * order for OID assignment. MBean APIs rarely change. Therefore this scheme will\n", 
            "+ * guarantee a fairly consistent OID scheme.\n", 
            "+ */\n", 
            "+class SNMPAgent extends BaseAgent {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(SNMPAgent.class);\n", 
            "+    \n", 
            "+    private static final String FULL_READ_VIEW = \"fullReadView\";\n", 
            "+    private static final String GROUP_NAME = \"synapseSNMPGroup\";\n", 
            "+    private static final String COMMUNITY_RECORD = \"public2public\";\n", 
            "+\n", 
            "+    private Properties properties;\n", 
            "+\n", 
            "+    private Set<OID> registeredOIDs = new HashSet<OID>();\n", 
            "+    private int snmpVersion;\n", 
            "+\n", 
            "+    public SNMPAgent(Properties properties) {\n", 
            "+        super(new File(SNMPConstants.BC_FILE), new File(SNMPConstants.CONFIG_FILE),\n", 
            "+                new CommandProcessor(new OctetString(MPv3.createLocalEngineID())));\n", 
            "+        this.properties = properties;\n", 
            "+        \n", 
            "+        String version = getProperty(SNMPConstants.SNMP_VERSION, SNMPConstants.SNMP_DEFAULT_VERSION);\n", 
            "+        if (SNMPConstants.SNMP_VERSION_1.equals(version)) {\n", 
            "+            this.snmpVersion = SnmpConstants.version1;\n", 
            "+        } else if (SNMPConstants.SNMP_VERSION_2_C.equals(version)) {\n", 
            "+            this.snmpVersion = SnmpConstants.version2c;\n", 
            "+        } else {\n", 
            "+            log.warn(\"Unsupported SNMP version: \" + version + \" - Using defaults\");\n", 
            "+            this.snmpVersion = SnmpConstants.version1;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Initialize and start this SNMP agent\n", 
            "+     *\n", 
            "+     * @throws IOException If an error occurs while initializing the agent\n", 
            "+     */\n", 
            "+    public void start() throws IOException {\n", 
            "+        String context = getProperty(SNMPConstants.SNMP_CONTEXT_NAME,\n", 
            "+                SNMPConstants.SNMP_DEFAULT_CONTEXT_NAME);\n", 
            "+        init();\n", 
            "+        loadConfig(ImportModes.REPLACE_CREATE);\n", 
            "+        addShutdownHook();\n", 
            "+        getServer().addContext(new OctetString(context));\n", 
            "+        finishInit();\n", 
            "+        run();\n", 
            "+        sendColdStartNotification();\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    protected void initTransportMappings() throws IOException {\n", 
            "+        String host = getProperty(SNMPConstants.SNMP_HOST, SNMPConstants.SNMP_DEFAULT_HOST);\n", 
            "+        int port = Integer.parseInt(getProperty(SNMPConstants.SNMP_PORT,\n", 
            "+                String.valueOf(SNMPConstants.SNMP_DEFAULT_PORT)));\n", 
            "+        String address = host + \"/\" + port;\n", 
            "+        Address adr = GenericAddress.parse(address);\n", 
            "+        TransportMapping tm =\n", 
            "+                TransportMappings.getInstance().createTransportMapping(adr);\n", 
            "+        transportMappings = new TransportMapping[] { tm };\n", 
            "+        log.info(\"SNMP transport adapter initialized on udp:\" + address);\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    protected void registerManagedObjects() {\n", 
            "+        log.info(\"Initializing Synapse SNMP MIB\");\n", 
            "+        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n", 
            "+        Set<ObjectInstance> instances = mbs.queryMBeans(null, null);\n", 
            "+\n", 
            "+        try {\n", 
            "+            for (ObjectInstance instance : instances) {\n", 
            "+                ObjectName objectName = instance.getObjectName();\n", 
            "+                if (objectName.getDomain().equals(\"org.apache.synapse\")) {\n", 
            "+                    String oidString = SynapseMIBUtils.getOID(objectName);\n", 
            "+                    if (oidString == null) {\n", 
            "+                        continue;\n", 
            "+                    }\n", 
            "+                    \n", 
            "+                    MBeanInfo info = mbs.getMBeanInfo(objectName);\n", 
            "+                    MBeanAttributeInfo[] attributes = info.getAttributes();\n", 
            "+                    List<String> attributeNames = new ArrayList<String>();\n", 
            "+                    List<String> mapAttributes = new ArrayList<String>();\n", 
            "+                    for (MBeanAttributeInfo attributeInfo : attributes) {\n", 
            "+                        attributeNames.add(attributeInfo.getName());\n", 
            "+                        if (Map.class.getName().equals(attributeInfo.getType())) {\n", 
            "+                            mapAttributes.add(attributeInfo.getName());\n", 
            "+                        }\n", 
            "+                    }\n", 
            "+                    Collections.sort(attributeNames);\n", 
            "+\n", 
            "+                    doRegister(attributeNames, mapAttributes, oidString, objectName);\n", 
            "+                }\n", 
            "+            }\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Error while initializing the SNMP MIB\", e);\n", 
            "+        }\n", 
            "+    }\n", 
            "+    \n", 
            "+    private void doRegister(List<String> attributeNames, List<String> mapAttributes, \n", 
            "+                            String oidString, ObjectName objectName) {\n", 
            "+        \n", 
            "+        for (int i = 0; i < attributeNames.size(); i++) {\n", 
            "+            String attributeName = attributeNames.get(i);\n", 
            "+            if (mapAttributes.contains(attributeName)) {\n", 
            "+                continue;\n", 
            "+            }\n", 
            "+            OID oid = new OID(oidString + \".\" + (i + 1) + \".0\");\n", 
            "+            if (log.isDebugEnabled()) {\n", 
            "+                log.debug(\"Registering \" + objectName + \"@\" + attributeName +\n", 
            "+                        \" as OID: \" + oid);\n", 
            "+            }\n", 
            "+            try {\n", 
            "+                server.register(new SynapseMOScalar(\n", 
            "+                        oid, objectName, attributeName, snmpVersion), null);\n", 
            "+                registeredOIDs.add(oid);\n", 
            "+            } catch (DuplicateRegistrationException e) {\n", 
            "+                log.error(\"Error while registering the OID: \" + oid + \" for object: \" +\n", 
            "+                        objectName + \" and attribute: \" + attributeName, e);\n", 
            "+            }\n", 
            "+        }    \n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    protected void unregisterManagedObjects() {\n", 
            "+        if (log.isDebugEnabled()) {\n", 
            "+            log.debug(\"Cleaning up registered OIDs\");\n", 
            "+        }\n", 
            "+\n", 
            "+        for (OID oid : registeredOIDs) {\n", 
            "+            ManagedObject mo = server.getManagedObject(oid, null);\n", 
            "+            if (mo != null) {\n", 
            "+                server.unregister(mo, null);\n", 
            "+            }\n", 
            "+        }\n", 
            "+        registeredOIDs.clear();\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    protected void addUsmUser(USM usm) {\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    protected void addNotificationTargets(SnmpTargetMIB snmpTargetMIB,\n", 
            "+                                          SnmpNotificationMIB snmpNotificationMIB) {\n", 
            "+        \n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    protected void addViews(VacmMIB vacm) {\n", 
            "+        String communityString = getProperty(SNMPConstants.SNMP_COMMUNITY_NAME, \n", 
            "+                SNMPConstants.SNMP_DEFAULT_COMMUNITY_NAME);\n", 
            "+        String securityName = getProperty(SNMPConstants.SNMP_SECURITY_NAME,\n", 
            "+                SNMPConstants.SNMP_DEFAULT_SECURITY_NAME);\n", 
            "+\n", 
            "+        int securityModel = SecurityModel.SECURITY_MODEL_SNMPv1;\n", 
            "+        if (snmpVersion == SnmpConstants.version2c) {\n", 
            "+            securityModel = SecurityModel.SECURITY_MODEL_SNMPv2c;\n", 
            "+        }\n", 
            "+\n", 
            "+        vacm.addGroup(securityModel,\n", 
            "+                new OctetString(securityName),\n", 
            "+                new OctetString(GROUP_NAME),\n", 
            "+                StorageType.nonVolatile);\n", 
            "+\n", 
            "+        vacm.addAccess(new OctetString(GROUP_NAME), new OctetString(communityString),\n", 
            "+                securityModel,\n", 
            "+                SecurityLevel.NOAUTH_NOPRIV,\n", 
            "+                MutableVACM.VACM_MATCH_EXACT,\n", 
            "+                new OctetString(FULL_READ_VIEW), // read permission granted\n", 
            "+                new OctetString(),               // no write permissions\n", 
            "+                new OctetString(),               // no notify permissions\n", 
            "+                StorageType.nonVolatile);\n", 
            "+\n", 
            "+        vacm.addViewTreeFamily(new OctetString(FULL_READ_VIEW),\n", 
            "+                new OID(SNMPConstants.SYNAPSE_OID_BRANCH),\n", 
            "+                new OctetString(),\n", 
            "+                VacmMIB.vacmViewIncluded,\n", 
            "+                StorageType.nonVolatile);\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    protected void addCommunities(SnmpCommunityMIB communityMIB) {\n", 
            "+        String community = getProperty(SNMPConstants.SNMP_COMMUNITY_NAME, \n", 
            "+                SNMPConstants.SNMP_DEFAULT_COMMUNITY_NAME);\n", 
            "+        String securityName = getProperty(SNMPConstants.SNMP_SECURITY_NAME,\n", 
            "+                SNMPConstants.SNMP_DEFAULT_SECURITY_NAME);\n", 
            "+        String context = getProperty(SNMPConstants.SNMP_CONTEXT_NAME,\n", 
            "+                SNMPConstants.SNMP_DEFAULT_CONTEXT_NAME);\n", 
            "+\n", 
            "+        if (log.isDebugEnabled()) {\n", 
            "+            log.debug(\"Registering SNMP community string: \" + community + \" under the \" +\n", 
            "+                    \"context: \" + context);\n", 
            "+        }\n", 
            "+\n", 
            "+        Variable[] com2sec = new Variable[] {\n", 
            "+                new OctetString(community),              // community name\n", 
            "+                new OctetString(securityName),           // security name\n", 
            "+                getAgent().getContextEngineID(),         // local engine ID\n", 
            "+                new OctetString(context),                // default context name\n", 
            "+                new OctetString(),                       // transport tag\n", 
            "+                new Integer32(StorageType.nonVolatile),  // storage type\n", 
            "+                new Integer32(RowStatus.active)          // row status\n", 
            "+        };\n", 
            "+        MOTableRow row =\n", 
            "+                communityMIB.getSnmpCommunityEntry().createRow(\n", 
            "+                        new OctetString(COMMUNITY_RECORD).toSubIndex(true), com2sec);\n", 
            "+        communityMIB.getSnmpCommunityEntry().addRow(row);\n", 
            "+    }\n", 
            "+    \n", 
            "+    private String getProperty(String name, String def) {\n", 
            "+        String value = properties.getProperty(name);\n", 
            "+        if (value == null) {\n", 
            "+            value = def;\n", 
            "+        }\n", 
            "+        return value;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/commons/src/main/java/org/apache/synapse/commons/snmp/SNMPAgent.java", 
      "from": "java/modules/commons/src/main/java/org/apache/synapse/commons/snmp/SNMPAgent.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,61", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.commons.snmp;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+import java.util.Properties;\n", 
            "+\n", 
            "+/**\n", 
            "+ * This is the public API for initializing and stopping the Synapse SNMP agent.\n", 
            "+ */\n", 
            "+public class SynapseSNMPAgent {\n", 
            "+\n", 
            "+    /*\n", 
            "+     * The purpose of this class is to conceal the API of the SNMPAgent class which\n", 
            "+     * is an extension of the SNMP4J BaseAgent class. The BaseAgent exposes a whole\n", 
            "+     * bunch of methods which can be used to alter the behavior of the SNMP agent.\n", 
            "+     * We certainly don't want other modules messing around with these methods. So\n", 
            "+     * we have given package access to the SNMPAgent class and wrapped it up using\n", 
            "+     * the SynapseSNMPAgent which has a much cleaner and simple API.\n", 
            "+     */\n", 
            "+\n", 
            "+    private SNMPAgent agent;\n", 
            "+    \n", 
            "+    public SynapseSNMPAgent(Properties properties) {\n", 
            "+        this.agent = new SNMPAgent(properties);\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Start the SNMP agent for Synapse. This will initialize the SNMP transport bindings,\n", 
            "+     * initialize the MIB and start the SNMP agent to accept incoming requests.\n", 
            "+     *\n", 
            "+     * @throws IOException If an error occurs while starting the SNMP agent\n", 
            "+     */\n", 
            "+    public void start() throws IOException {\n", 
            "+        agent.start();\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Stop and shutdown the Synapse SNMP agent.\n", 
            "+     */\n", 
            "+    public void stop() {\n", 
            "+        agent.stop();\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/commons/src/main/java/org/apache/synapse/commons/snmp/SynapseSNMPAgent.java", 
      "from": "java/modules/commons/src/main/java/org/apache/synapse/commons/snmp/SynapseSNMPAgent.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,75", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.commons.snmp;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.snmp4j.agent.mo.MOAccessImpl;\n", 
            "+import org.snmp4j.agent.mo.MOScalar;\n", 
            "+import org.snmp4j.mp.SnmpConstants;\n", 
            "+import org.snmp4j.smi.*;\n", 
            "+\n", 
            "+import javax.management.*;\n", 
            "+import java.lang.management.ManagementFactory;\n", 
            "+import java.util.Date;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Synapse managed object scalar implementation. This class queries built-in JMX MBeans\n", 
            "+ * to retrieve the value of the specified OID. \n", 
            "+ */\n", 
            "+public class SynapseMOScalar extends MOScalar<Variable> {\n", 
            "+    \n", 
            "+    private static final Log log = LogFactory.getLog(SynapseMOScalar.class);\n", 
            "+    \n", 
            "+    private ObjectName objectName;\n", 
            "+    private String attribute;\n", 
            "+    private int snmpVersion;\n", 
            "+\n", 
            "+    public SynapseMOScalar(OID id, ObjectName objectName, String attribute, int snmpVersion) {\n", 
            "+        super(id, MOAccessImpl.ACCESS_READ_ONLY, new OctetString());\n", 
            "+        this.objectName = objectName;\n", 
            "+        this.attribute = attribute;\n", 
            "+        this.snmpVersion = snmpVersion;\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public Variable getValue() {\n", 
            "+        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n", 
            "+        try {\n", 
            "+            Object obj = mbs.getAttribute(objectName, attribute);\n", 
            "+            if (obj instanceof Integer) {\n", 
            "+                return new Integer32((Integer) obj);\n", 
            "+            }\n", 
            "+            \n", 
            "+            if (snmpVersion > SnmpConstants.version1) {\n", 
            "+                if (obj instanceof Long) {\n", 
            "+                    return new Counter64(((Long) obj).longValue());\n", 
            "+                } else if (obj instanceof Date) {\n", 
            "+                    return new Counter64(((Date) obj).getTime());\n", 
            "+                }\n", 
            "+            }\n", 
            "+\n", 
            "+            return new OctetString(obj.toString());\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Unexpected error while retrieving the value of OID: \" + getID(), e);\n", 
            "+            return null;\n", 
            "+        }\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/commons/src/main/java/org/apache/synapse/commons/snmp/SynapseMOScalar.java", 
      "from": "java/modules/commons/src/main/java/org/apache/synapse/commons/snmp/SynapseMOScalar.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-95,5 +95,13", 
          "lines": [
            "             <groupId>xmlunit</groupId>\n", 
            "             <artifactId>xmlunit</artifactId>\n", 
            "         </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.snmp4j</groupId>\n", 
            "+            <artifactId>snmp4j-agent</artifactId>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.snmp4j</groupId>\n", 
            "+            <artifactId>snmp4j</artifactId>\n", 
            "+        </dependency>\n", 
            "     </dependencies>\n", 
            " </project>\n"
          ]
        }
      ], 
      "to": "java/modules/commons/pom.xml", 
      "from": "java/modules/commons/pom.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-188,8 +188,10", 
          "lines": [
            "                 <exclude>xerces:xercesImpl:jar</exclude>\r\n", 
            "                 <exclude>org.apache.xerces:xercesImpl</exclude> <!-- Find the source of this -->\r\n", 
            "                 <exclude>org.apache.xerces:xml-apis</exclude>\r\n", 
            "-\t        <exclude>xalan:xalan:jar</exclude>\r\n", 
            "+\t            <exclude>xalan:xalan:jar</exclude>\r\n", 
            "                 <exclude>quickfixj:quickfixj-all:jar</exclude>\r\n", 
            "+                <exclude>org.snmp4j:snmp4j</exclude>\r\n", 
            "+                <exclude>org.snmp4j:snmp4j-agent</exclude>\r\n", 
            "             </excludes>\r\n", 
            "         </dependencySet>\r\n", 
            " \t<dependencySet>\r\n"
          ]
        }
      ], 
      "to": "java/modules/distribution/src/main/assembly/bin.xml", 
      "from": "java/modules/distribution/src/main/assembly/bin.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-31,11 +31,14", 
          "lines": [
            " import org.apache.axis2.format.PlainTextBuilder;\r\n", 
            " import org.apache.axis2.phaseresolver.PhaseException;\r\n", 
            " import org.apache.axis2.phaseresolver.PhaseMetadata;\r\n", 
            "+import org.apache.axis2.util.JavaUtils;\r\n", 
            " import org.apache.commons.io.FileUtils;\r\n", 
            " import org.apache.commons.io.FilenameUtils;\r\n", 
            " import org.apache.commons.logging.Log;\r\n", 
            " import org.apache.commons.logging.LogFactory;\r\n", 
            " import org.apache.synapse.commons.datasource.DataSourceRepositoryHolder;\r\n", 
            "+import org.apache.synapse.commons.snmp.SNMPConstants;\r\n", 
            "+import org.apache.synapse.commons.snmp.SynapseSNMPAgent;\r\n", 
            " import org.apache.synapse.commons.util.RMIRegistryController;\r\n", 
            " import org.apache.synapse.config.*;\r\n", 
            " import org.apache.synapse.libraries.imports.SynapseImport;\r\n"
          ]
        }, 
        {
          "locn": "-58,6 +61,7", 
          "lines": [
            " import org.apache.synapse.util.xpath.ext.XpathExtensionUtil;\r\n", 
            " \r\n", 
            " import java.io.File;\r\n", 
            "+import java.io.IOException;\r\n", 
            " import java.util.*;\r\n", 
            " \r\n", 
            " /**\r\n"
          ]
        }, 
        {
          "locn": "-95,6 +99,8", 
          "lines": [
            "     /** JMX Adapter */\r\n", 
            "     private JmxAdapter jmxAdapter;\r\n", 
            " \r\n", 
            "+    private SynapseSNMPAgent snmpAgent;\r\n", 
            "+\r\n", 
            "     private TaskDescriptionRepository taskDescriptionRepository;\r\n", 
            " \r\n", 
            "     private TaskScheduler taskScheduler;\r\n"
          ]
        }, 
        {
          "locn": "-265,6 +271,9", 
          "lines": [
            " \r\n", 
            "                 stopJmxAdapter();\r\n", 
            "                 RMIRegistryController.getInstance().shutDown();\r\n", 
            "+                if (snmpAgent != null) {\r\n", 
            "+                    snmpAgent.stop();\r\n", 
            "+                }\r\n", 
            " \r\n", 
            "                 // we need to call this method to clean the temp files we created.\r\n", 
            "                 if (configurationContext != null) {\r\n"
          ]
        }, 
        {
          "locn": "-324,6 +333,17", 
          "lines": [
            "                         + jmxAdapter.getJmxInformation().getJmxUrl());\r\n", 
            "             }\r\n", 
            "         }\r\n", 
            "+\r\n", 
            "+        Properties properties = SynapsePropertiesLoader.loadSynapseProperties();\r\n", 
            "+        String enabled = properties.getProperty(SNMPConstants.SNMP_ENABLED);\r\n", 
            "+        try {\r\n", 
            "+            if (enabled != null && JavaUtils.isTrueExplicitly(enabled)) {\r\n", 
            "+                snmpAgent = new SynapseSNMPAgent(properties);\r\n", 
            "+                snmpAgent.start();\r\n", 
            "+            }\r\n", 
            "+        } catch (IOException e) {\r\n", 
            "+            log.error(\"Error while initializing SNMP\", e);\r\n", 
            "+        }\r\n", 
            "     }\r\n", 
            " \r\n", 
            "     /**\r\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/Axis2SynapseController.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/Axis2SynapseController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-986,6 +986,16", 
          "lines": [
            "                 <artifactId>xercesImpl</artifactId>\n", 
            "                 <version>${xerces.version}</version>\n", 
            "             </dependency>\n", 
            "+            <dependency>\n", 
            "+                <groupId>org.snmp4j</groupId>\n", 
            "+                <artifactId>snmp4j-agent</artifactId>\n", 
            "+                <version>${snmp4j.agent.version}</version>\n", 
            "+            </dependency>\n", 
            "+            <dependency>\n", 
            "+                <groupId>org.snmp4j</groupId>\n", 
            "+                <artifactId>snmp4j</artifactId>\n", 
            "+                <version>${snmp4j.version}</version>\n", 
            "+            </dependency>\n", 
            "         </dependencies>\n", 
            "     </dependencyManagement>\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-1043,6 +1053,17", 
          "lines": [
            "                 <updatePolicy>interval:10080</updatePolicy>\n", 
            "             </snapshots>\n", 
            "         </repository>\n", 
            "+        <repository>\n", 
            "+            <id>snmp4j-repo</id>\n", 
            "+            <name>SNMP4J Repository</name>\n", 
            "+            <url>https://server.oosnmp.net/dist/release/</url>\n", 
            "+            <releases>\n", 
            "+                <updatePolicy>never</updatePolicy>\n", 
            "+            </releases>\n", 
            "+            <snapshots>\n", 
            "+                <enabled>false</enabled>\n", 
            "+            </snapshots>\n", 
            "+        </repository>\n", 
            "     </repositories>\n", 
            " \n", 
            "     <modules>\n"
          ]
        }, 
        {
          "locn": "-1123,6 +1144,8", 
          "lines": [
            "         <wso2uri-template.version>1.0.0</wso2uri-template.version>\n", 
            "         <woden.version>1.0M9</woden.version>\n", 
            "         <activemq.version>5.2.0</activemq.version>\n", 
            "+        <snmp4j.version>2.0.3</snmp4j.version>\n", 
            "+        <snmp4j.agent.version>2.0.5</snmp4j.agent.version>\n", 
            " \n", 
            "         <!-- dependencies of Synapse extensions module -->\n", 
            "         <wso2commons.version>1.2</wso2commons.version>\n"
          ]
        }
      ], 
      "to": "java/pom.xml", 
      "from": "java/pom.xml"
    }
  ], 
  "id": "1309702"
}