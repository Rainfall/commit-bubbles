{
  "when": "2016-12-27T04:06:54-05:00", 
  "message": "Move logging package to conn package - no logic changes", 
  "who": "isudana", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-1,248 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.utils.logging;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.SessionBufferStatus;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-import java.net.SocketAddress;\n", 
            "-import java.nio.ByteBuffer;\n", 
            "-import java.nio.channels.ByteChannel;\n", 
            "-import java.nio.channels.SelectionKey;\n", 
            "-import java.util.concurrent.atomic.AtomicLong;\n", 
            "-\n", 
            "-/**\n", 
            "- * A decorator (wrapper) for IOSession instances. This decorator logs additional\n", 
            "- * debug information regarding each of the events triggered on the actual IOSession\n", 
            "- * instance. Most events are logged 'before' they are dispatched to the wrapped\n", 
            "- * IOSession, but this implementation does not modify the event arguments by any means.\n", 
            "- * In that sense this decorator is read-only and safe. This implementation also facilitates\n", 
            "- * intercepting and logging HTTP messages at wire-level.\n", 
            "- */\n", 
            "-public class LoggingIOSession implements IOSession {\n", 
            "-\n", 
            "-    private static AtomicLong COUNT = new AtomicLong(0);\n", 
            "-\n", 
            "-    private final Log sessionLog;\n", 
            "-    private final Wire wireLog;\n", 
            "-    private final IOSession session;\n", 
            "-    private final ByteChannel channel;\n", 
            "-    private final String id;\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Create a new instance of the decorator.\n", 
            "-     *\n", 
            "-     * @param sessionLog Log instance used to log IOSession events.\n", 
            "-     * @param wireLog Log instance used to log wire-level HTTP messages.\n", 
            "-     * @param session IOSession to be decorated.\n", 
            "-     * @param id An identifier (name) that will be attached to the IOSession for the logging\n", 
            "-     *           purposes.\n", 
            "-     */\n", 
            "-    public LoggingIOSession(\n", 
            "-            final Log sessionLog,\n", 
            "-            final Log wireLog,\n", 
            "-            final IOSession session,\n", 
            "-            final String id) {\n", 
            "-        if (session == null) {\n", 
            "-            throw new IllegalArgumentException(\"I/O session must not be null\");\n", 
            "-        }\n", 
            "-        this.session = session;\n", 
            "-        this.channel = new LoggingByteChannel();\n", 
            "-        this.id = id + \"-\" + COUNT.incrementAndGet();\n", 
            "-        this.sessionLog = sessionLog;\n", 
            "-        this.wireLog = new Wire(wireLog);\n", 
            "-    }\n", 
            "-\n", 
            "-    public int getStatus() {\n", 
            "-        return this.session.getStatus();\n", 
            "-    }\n", 
            "-\n", 
            "-    public ByteChannel channel() {\n", 
            "-        return this.channel;\n", 
            "-    }\n", 
            "-\n", 
            "-    public SocketAddress getLocalAddress() {\n", 
            "-        return this.session.getLocalAddress();\n", 
            "-    }\n", 
            "-\n", 
            "-    public SocketAddress getRemoteAddress() {\n", 
            "-        return this.session.getRemoteAddress();\n", 
            "-    }\n", 
            "-\n", 
            "-    public int getEventMask() {\n", 
            "-        return this.session.getEventMask();\n", 
            "-    }\n", 
            "-\n", 
            "-    private static String formatOps(int ops) {\n", 
            "-        StringBuilder buffer = new StringBuilder(6);\n", 
            "-        buffer.append('[');\n", 
            "-        if ((ops & SelectionKey.OP_READ) > 0) {\n", 
            "-            buffer.append('r');\n", 
            "-        }\n", 
            "-        if ((ops & SelectionKey.OP_WRITE) > 0) {\n", 
            "-            buffer.append('w');\n", 
            "-        }\n", 
            "-        if ((ops & SelectionKey.OP_ACCEPT) > 0) {\n", 
            "-            buffer.append('a');\n", 
            "-        }\n", 
            "-        if ((ops & SelectionKey.OP_CONNECT) > 0) {\n", 
            "-            buffer.append('c');\n", 
            "-        }\n", 
            "-        buffer.append(']');\n", 
            "-        return buffer.toString();\n", 
            "-    }\n", 
            "-\n", 
            "-    private String getPreamble() {\n", 
            "-        String preamble = \"I/O session \" + this.id + \" \" + this.session;\n", 
            "-        if (this.session instanceof SSLIOSession) {\n", 
            "-            return \"SSL \" + preamble;\n", 
            "-        } else {\n", 
            "-            return preamble;\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setEventMask(int ops) {\n", 
            "-        if (sessionLog.isDebugEnabled()) {\n", 
            "-            sessionLog.debug(getPreamble() + \": Set event mask \" + formatOps(ops));\n", 
            "-        }\n", 
            "-        this.session.setEventMask(ops);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setEvent(int op) {\n", 
            "-        if (sessionLog.isDebugEnabled()) {\n", 
            "-            sessionLog.debug(getPreamble() + \": Set event \" + formatOps(op));\n", 
            "-        }\n", 
            "-        this.session.setEvent(op);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void clearEvent(int op) {\n", 
            "-        if (sessionLog.isDebugEnabled()) {\n", 
            "-            sessionLog.debug(getPreamble() + \": Clear event \" + formatOps(op));\n", 
            "-        }\n", 
            "-        this.session.clearEvent(op);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void close() {\n", 
            "-        if (sessionLog.isDebugEnabled()) {\n", 
            "-            sessionLog.debug(getPreamble() + \": Close\");\n", 
            "-        }\n", 
            "-        this.session.close();\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean isClosed() {\n", 
            "-        return this.session.isClosed();\n", 
            "-    }\n", 
            "-\n", 
            "-    public void shutdown() {\n", 
            "-        if (sessionLog.isDebugEnabled()) {\n", 
            "-            sessionLog.debug(getPreamble() + \": Shutdown\");\n", 
            "-        }\n", 
            "-        this.session.shutdown();\n", 
            "-    }\n", 
            "-\n", 
            "-    public int getSocketTimeout() {\n", 
            "-        return this.session.getSocketTimeout();\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setSocketTimeout(int timeout) {\n", 
            "-        if (sessionLog.isDebugEnabled()) {\n", 
            "-            sessionLog.debug(getPreamble() + \": Set timeout \" + timeout);\n", 
            "-        }\n", 
            "-        this.session.setSocketTimeout(timeout);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setBufferStatus(final SessionBufferStatus status) {\n", 
            "-        this.session.setBufferStatus(status);\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean hasBufferedInput() {\n", 
            "-        return this.session.hasBufferedInput();\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean hasBufferedOutput() {\n", 
            "-        return this.session.hasBufferedOutput();\n", 
            "-    }\n", 
            "-\n", 
            "-    public Object getAttribute(final String name) {\n", 
            "-        return this.session.getAttribute(name);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setAttribute(final String name, final Object obj) {\n", 
            "-        if (sessionLog.isDebugEnabled()) {\n", 
            "-            sessionLog.debug(getPreamble() + \": Set attribute \" + name);\n", 
            "-        }\n", 
            "-        this.session.setAttribute(name, obj);\n", 
            "-    }\n", 
            "-\n", 
            "-    public Object removeAttribute(final String name) {\n", 
            "-        if (sessionLog.isDebugEnabled()) {\n", 
            "-            sessionLog.debug(getPreamble() + \": Remove attribute \" + name);\n", 
            "-        }\n", 
            "-        return this.session.removeAttribute(name);\n", 
            "-    }\n", 
            "-\n", 
            "-    class LoggingByteChannel implements ByteChannel {\n", 
            "-\n", 
            "-        public int read(final ByteBuffer dst) throws IOException {\n", 
            "-            int bytesRead = session.channel().read(dst);\n", 
            "-            if (sessionLog.isDebugEnabled()) {\n", 
            "-                sessionLog.debug(getPreamble() + \": \" + bytesRead + \" bytes read\");\n", 
            "-            }\n", 
            "-            if (bytesRead > 0 && wireLog.isEnabled()) {\n", 
            "-                ByteBuffer b = dst.duplicate();\n", 
            "-                int p = b.position();\n", 
            "-                b.limit(p);\n", 
            "-                b.position(p - bytesRead);\n", 
            "-                wireLog.input(b);\n", 
            "-            }\n", 
            "-            return bytesRead;\n", 
            "-        }\n", 
            "-\n", 
            "-        public int write(final ByteBuffer src) throws IOException {\n", 
            "-            int byteWritten = session.channel().write(src);\n", 
            "-            if (sessionLog.isDebugEnabled()) {\n", 
            "-                sessionLog.debug(getPreamble() + \": \" + byteWritten + \" bytes written\");\n", 
            "-            }\n", 
            "-            if (byteWritten > 0 && wireLog.isEnabled()) {\n", 
            "-                ByteBuffer b = src.duplicate();\n", 
            "-                int p = b.position();\n", 
            "-                b.limit(p);\n", 
            "-                b.position(p - byteWritten);\n", 
            "-                wireLog.output(b);\n", 
            "-            }\n", 
            "-            return byteWritten;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void close() throws IOException {\n", 
            "-            if (sessionLog.isDebugEnabled()) {\n", 
            "-                sessionLog.debug(getPreamble() + \": Channel close\");\n", 
            "-            }\n", 
            "-            session.channel().close();\n", 
            "-        }\n", 
            "-\n", 
            "-        public boolean isOpen() {\n", 
            "-            return session.channel().isOpen();\n", 
            "-        }\n", 
            "-\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingIOSession.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingIOSession.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,43 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.utils.logging;\n", 
            "-\n", 
            "-public class LoggingConstants {\n", 
            "-\n", 
            "-    public static final String SOURCE_CONNECTION_LOG_ID =\n", 
            "-            \"org.apache.synapse.transport.http.conn.SourceConnection\";\n", 
            "-    public static final String TARGET_CONNECTION_LOG_ID =\n", 
            "-            \"org.apache.synapse.transport.http.conn.TargetConnection\";\n", 
            "-\n", 
            "-    public static final String SOURCE_HEADER_LOG_ID =\n", 
            "-            \"org.apache.synapse.transport.http.headers.SourceHeaders\";\n", 
            "-    public static final String TARGET_HEADER_LOG_ID =\n", 
            "-            \"org.apache.synapse.transport.http.headers.TargetHeaders\";\n", 
            "-\n", 
            "-    public static final String SOURCE_SESSION_LOG_ID =\n", 
            "-            \"org.apache.synapse.transport.http.session.SourceSession\";\n", 
            "-    public static final String TARGET_SESSION_LOG_ID =\n", 
            "-            \"org.apache.synapse.transport.http.session.TargetSession\";\n", 
            "-\n", 
            "-    public static final String SOURCE_WIRE_LOG_ID =\n", 
            "-            \"org.apache.synapse.transport.http.wire.SourceWire\";\n", 
            "-    public static final String TARGET_WIRE_LOG_ID =\n", 
            "-            \"org.apache.synapse.transport.http.wire.TargetWire\";\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingConstants.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,97 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.utils.logging;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.http.HttpException;\n", 
            "-import org.apache.http.HttpRequest;\n", 
            "-import org.apache.http.HttpResponse;\n", 
            "-import org.apache.http.config.MessageConstraints;\n", 
            "-import org.apache.http.entity.ContentLengthStrategy;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "-import org.apache.http.nio.NHttpMessageParserFactory;\n", 
            "-import org.apache.http.nio.NHttpMessageWriterFactory;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-import java.nio.charset.CharsetDecoder;\n", 
            "-import java.nio.charset.CharsetEncoder;\n", 
            "-\n", 
            "-/**\n", 
            "- * An extension of the DefaultNHttpClientConnection class, that provides some\n", 
            "- * additional logging features. This implementation enhances the default connection\n", 
            "- * class by logging all the major events that occur on the connection instance.\n", 
            "- */\n", 
            "-public class LoggingNHttpClientConnection extends DefaultNHttpClientConnection {\n", 
            "-\n", 
            "-    private final Log log;\n", 
            "-\n", 
            "-    public LoggingNHttpClientConnection(IOSession session,\n", 
            "-                                        int bufferSize,\n", 
            "-                                        int fragmentSizeHint,\n", 
            "-                                        ByteBufferAllocator allocator,\n", 
            "-                                        CharsetDecoder charDecoder,\n", 
            "-                                        CharsetEncoder charEncoder,\n", 
            "-                                        MessageConstraints constraints,\n", 
            "-                                        ContentLengthStrategy incomingContentStrategy,\n", 
            "-                                        ContentLengthStrategy outgoingContentStrategy,\n", 
            "-                                        NHttpMessageWriterFactory<HttpRequest> requestWriterFactory,\n", 
            "-                                        NHttpMessageParserFactory<HttpResponse> responseParserFactory,\n", 
            "-                                        Log log) {\n", 
            "-        super(session, bufferSize, fragmentSizeHint, allocator,\n", 
            "-                charDecoder, charEncoder, constraints, incomingContentStrategy,\n", 
            "-                outgoingContentStrategy, requestWriterFactory, responseParserFactory);\n", 
            "-        this.log = log;\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void close() throws IOException {\n", 
            "-        this.log.debug(\"Close connection\");\n", 
            "-        super.close();\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void shutdown() throws IOException {\n", 
            "-        this.log.debug(\"Shutdown connection\");\n", 
            "-        super.shutdown();\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void submitRequest(final HttpRequest request) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + this + \": \"  + request.getRequestLine().toString());\n", 
            "-        }\n", 
            "-        super.submitRequest(request);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void consumeInput(final NHttpClientEventHandler handler) {\n", 
            "-        this.log.debug(\"Consume input\");\n", 
            "-        super.consumeInput(handler);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void produceOutput(final NHttpClientEventHandler handler) {\n", 
            "-        this.log.debug(\"Produce output\");\n", 
            "-        super.produceOutput(handler);\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpClientConnection.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpClientConnection.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,170 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.utils.logging;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.Header;\n", 
            "-import org.apache.http.HttpException;\n", 
            "-import org.apache.http.HttpRequest;\n", 
            "-import org.apache.http.HttpResponse;\n", 
            "-import org.apache.http.config.ConnectionConfig;\n", 
            "-import org.apache.http.config.MessageConstraints;\n", 
            "-import org.apache.http.impl.ConnSupport;\n", 
            "-import org.apache.http.impl.entity.StrictContentLengthStrategy;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "-import org.apache.http.impl.nio.codecs.DefaultHttpRequestParser;\n", 
            "-import org.apache.http.impl.nio.codecs.DefaultHttpResponseWriter;\n", 
            "-import org.apache.http.nio.*;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            "-import org.apache.http.nio.reactor.SessionOutputBuffer;\n", 
            "-import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            "-import org.apache.synapse.transport.nhttp.AccessHandler;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-\n", 
            "-/**\n", 
            "- * A connection factory implementation for DefaultNHttpServerConnection instances.\n", 
            "- * Based on the current logging configuration, this factory decides whether to create\n", 
            "- * regular DefaultNHttpServerConnection objects or to create LoggingNHttpServerConnection\n", 
            "- * objects. Also, depending on the logging configuration, this factory may choose to\n", 
            "- * wrap IOSession instances in LoggingIOSession objects.\n", 
            "- */\n", 
            "-public class LoggingNHttpServerConnectionFactory implements NHttpConnectionFactory<DefaultNHttpServerConnection> {\n", 
            "-\n", 
            "-    private static final Log sourceConnLog = LogFactory.getLog(\n", 
            "-            LoggingConstants.SOURCE_CONNECTION_LOG_ID);\n", 
            "-    private static final Log sourceHeaderLog = LogFactory.getLog(\n", 
            "-            LoggingConstants.SOURCE_HEADER_LOG_ID);\n", 
            "-    private static final Log sourceSessionLog = LogFactory.getLog(\n", 
            "-            LoggingConstants.SOURCE_SESSION_LOG_ID);\n", 
            "-    private static final Log sourceWireLog = LogFactory.getLog(\n", 
            "-            LoggingConstants.SOURCE_WIRE_LOG_ID);\n", 
            "-\n", 
            "-    private static final NHttpMessageParserFactory<HttpRequest> requestParserFactory =\n", 
            "-            new LoggingNHttpRequestParserFactory();\n", 
            "-    private static final NHttpMessageWriterFactory<HttpResponse> responseWriterFactory =\n", 
            "-            new LoggingNHttpResponseWriterFactory();\n", 
            "-\n", 
            "-    private final ConnectionConfig config;\n", 
            "-\n", 
            "-    public LoggingNHttpServerConnectionFactory(ConnectionConfig config) {\n", 
            "-        this.config = config;\n", 
            "-    }\n", 
            "-\n", 
            "-    public DefaultNHttpServerConnection createConnection(IOSession session) {\n", 
            "-        if (sourceSessionLog.isDebugEnabled() || sourceWireLog.isDebugEnabled()) {\n", 
            "-            session = new LoggingIOSession(sourceSessionLog, sourceWireLog,\n", 
            "-                    session, \"http-listener\");\n", 
            "-        }\n", 
            "-\n", 
            "-        if (sourceConnLog.isDebugEnabled()) {\n", 
            "-            return new LoggingNHttpServerConnection(\n", 
            "-                    session,\n", 
            "-                    config.getBufferSize(),\n", 
            "-                    config.getFragmentSizeHint(),\n", 
            "-                    HeapByteBufferAllocator.INSTANCE,\n", 
            "-                    ConnSupport.createDecoder(config),\n", 
            "-                    ConnSupport.createEncoder(config),\n", 
            "-                    config.getMessageConstraints(),\n", 
            "-                    StrictContentLengthStrategy.INSTANCE,\n", 
            "-                    StrictContentLengthStrategy.INSTANCE,\n", 
            "-                    requestParserFactory,\n", 
            "-                    responseWriterFactory,\n", 
            "-                    sourceConnLog);\n", 
            "-        } else {\n", 
            "-            return new DefaultNHttpServerConnection(\n", 
            "-                    session,\n", 
            "-                    config.getBufferSize(),\n", 
            "-                    config.getFragmentSizeHint(),\n", 
            "-                    HeapByteBufferAllocator.INSTANCE,\n", 
            "-                    ConnSupport.createDecoder(config),\n", 
            "-                    ConnSupport.createEncoder(config),\n", 
            "-                    config.getMessageConstraints(),\n", 
            "-                    StrictContentLengthStrategy.INSTANCE,\n", 
            "-                    StrictContentLengthStrategy.INSTANCE,\n", 
            "-                    requestParserFactory,\n", 
            "-                    responseWriterFactory);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    static class LoggingNHttpRequestParserFactory implements NHttpMessageParserFactory<HttpRequest> {\n", 
            "-        public NHttpMessageParser<HttpRequest> create(SessionInputBuffer sessionBuffer,\n", 
            "-                                                      MessageConstraints messageConstraints) {\n", 
            "-            return new LoggingNHttpRequestParser(sessionBuffer, messageConstraints);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    static class LoggingNHttpResponseWriterFactory implements NHttpMessageWriterFactory<HttpResponse> {\n", 
            "-        public NHttpMessageWriter<HttpResponse> create(SessionOutputBuffer sessionBuffer) {\n", 
            "-            return new LoggingNHttpResponseWriter(sessionBuffer);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    static class LoggingNHttpRequestParser extends DefaultHttpRequestParser {\n", 
            "-\n", 
            "-        public LoggingNHttpRequestParser(SessionInputBuffer buffer, MessageConstraints constraints) {\n", 
            "-            super(buffer, constraints);\n", 
            "-        }\n", 
            "-\n", 
            "-        public HttpRequest parse() throws IOException, HttpException {\n", 
            "-            HttpRequest request = super.parse();\n", 
            "-            if (request != null) {\n", 
            "-                if (sourceHeaderLog.isDebugEnabled()) {\n", 
            "-                    sourceHeaderLog.debug(\">> \" + request.getRequestLine().toString());\n", 
            "-                    Header[] headers = request.getAllHeaders();\n", 
            "-                    for (Header header : headers) {\n", 
            "-                        sourceHeaderLog.debug(\">> \" + header.toString());\n", 
            "-                    }\n", 
            "-                }\n", 
            "-\n", 
            "-                if (AccessHandler.getAccessLog().isInfoEnabled()) {\n", 
            "-                    AccessHandler.getAccess().addAccessToQueue(request);\n", 
            "-                }\n", 
            "-            }\n", 
            "-            return request;\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    static class LoggingNHttpResponseWriter extends DefaultHttpResponseWriter {\n", 
            "-\n", 
            "-        public LoggingNHttpResponseWriter(SessionOutputBuffer buffer) {\n", 
            "-            super(buffer);\n", 
            "-        }\n", 
            "-\n", 
            "-        public void write(final HttpResponse response) throws IOException, HttpException {\n", 
            "-            if (response != null) {\n", 
            "-                if (response != null && sourceHeaderLog.isDebugEnabled()) {\n", 
            "-                    sourceHeaderLog.debug(\"<< \" + response.getStatusLine().toString());\n", 
            "-                    Header[] headers = response.getAllHeaders();\n", 
            "-                    for (Header header : headers) {\n", 
            "-                        sourceHeaderLog.debug(\"<< \" + header.toString());\n", 
            "-                    }\n", 
            "-                }\n", 
            "-\n", 
            "-                if (AccessHandler.getAccessLog().isInfoEnabled()) {\n", 
            "-                    AccessHandler.getAccess().addAccessToQueue(response);\n", 
            "-                }\n", 
            "-            }\n", 
            "-            super.write(response);\n", 
            "-        }\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpServerConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpServerConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,129 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.utils.logging;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.HttpException;\n", 
            "-import org.apache.http.HttpResponse;\n", 
            "-import org.apache.http.nio.ContentDecoder;\n", 
            "-import org.apache.http.nio.ContentEncoder;\n", 
            "-import org.apache.http.nio.NHttpClientConnection;\n", 
            "-import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-\n", 
            "-/**\n", 
            "- * A decorator (wrapper) for NHttpClientEventHandler instances. This decorator\n", 
            "- * logs additional debug information regarding each of the events triggered on the\n", 
            "- * actual NHttpClientEventHandler instance. Most events are logged 'before' they are\n", 
            "- * dispatched to the wrapped NHttpClientEventHandler, but this implementation does\n", 
            "- * not modify the event arguments by any means. In that sense this decorator is\n", 
            "- * read-only and safe. This implementation does not log the exception event. It is\n", 
            "- * expected that the actual NHttpClientEventHandler will take the necessary steps to\n", 
            "- * log exceptions.\n", 
            "- */\n", 
            "-public class LoggingClientEventHandler implements NHttpClientEventHandler {\n", 
            "-\n", 
            "-    private final Log log;\n", 
            "-\n", 
            "-    private final NHttpClientEventHandler handler;\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Create a new instance of the decorator.\n", 
            "-     *\n", 
            "-     * @param handler The instance of NHttpClientEventHandler to be decorated (wrapped)\n", 
            "-     */\n", 
            "-    public LoggingClientEventHandler(final NHttpClientEventHandler handler) {\n", 
            "-        if (handler == null) {\n", 
            "-            throw new IllegalArgumentException(\"HTTP client handler must not be null\");\n", 
            "-        }\n", 
            "-        this.handler = handler;\n", 
            "-        this.log = LogFactory.getLog(handler.getClass());\n", 
            "-    }\n", 
            "-\n", 
            "-    public void connected(final NHttpClientConnection conn, final Object attachment) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Connected (\" + attachment + \")\");\n", 
            "-        }\n", 
            "-        this.handler.connected(conn, attachment);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void closed(final NHttpClientConnection conn) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Closed\");\n", 
            "-        }\n", 
            "-        this.handler.closed(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void endOfInput(NHttpClientConnection conn) throws IOException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Closed at remote end\");\n", 
            "-        }\n", 
            "-        this.handler.endOfInput(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void exception(NHttpClientConnection conn, Exception ex) {\n", 
            "-        // Do not log errors at this level - Actual handler implementation should do that\n", 
            "-        this.handler.exception(conn, ex);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void requestReady(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": InRequest ready\");\n", 
            "-        }\n", 
            "-        this.handler.requestReady(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void outputReady(final NHttpClientConnection conn, final ContentEncoder encoder) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Output ready\");\n", 
            "-        }\n", 
            "-        this.handler.outputReady(conn, encoder);\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Content encoder \" + encoder);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void responseReceived(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "-        HttpResponse response = conn.getHttpResponse();\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \" : \" + response.getStatusLine());\n", 
            "-        }\n", 
            "-        this.handler.responseReceived(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void inputReady(final NHttpClientConnection conn, final ContentDecoder decoder) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Input ready\");\n", 
            "-        }\n", 
            "-        this.handler.inputReady(conn, decoder);\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Content decoder \" + decoder);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void timeout(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Timeout\");\n", 
            "-        }\n", 
            "-        this.handler.timeout(conn);\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingClientEventHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingClientEventHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,57 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.utils.logging;\n", 
            "-\n", 
            "-import org.apache.http.config.ConnectionConfig;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLMode;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-\n", 
            "-import javax.net.ssl.SSLContext;\n", 
            "-\n", 
            "-/**\n", 
            "- * The SSL-enabled version of the LoggingNHttpServerConnectionFactory. Identical in behavior\n", 
            "- * to the parent class, but wraps IOSession instances with SSLIOSession instances.\n", 
            "- */\n", 
            "-public class LoggingNHttpSSLServerConnectionFactory extends LoggingNHttpServerConnectionFactory {\n", 
            "-\n", 
            "-    private SSLContext sslContext;\n", 
            "-    private SSLSetupHandler sslSetupHandler;\n", 
            "-\n", 
            "-    public LoggingNHttpSSLServerConnectionFactory(ConnectionConfig config, SSLContext sslContext,\n", 
            "-                                                  SSLSetupHandler sslSetupHandler) {\n", 
            "-        super(config);\n", 
            "-        this.sslContext = sslContext;\n", 
            "-        this.sslSetupHandler = sslSetupHandler;\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public DefaultNHttpServerConnection createConnection(IOSession session) {\n", 
            "-        final SSLIOSession ssliosession = new SSLIOSession(\n", 
            "-                session,\n", 
            "-                SSLMode.SERVER,\n", 
            "-                sslContext,\n", 
            "-                sslSetupHandler);\n", 
            "-        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);\n", 
            "-        return super.createConnection(ssliosession);\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpSSLServerConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpSSLServerConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,113 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.utils.logging;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-\n", 
            "-import java.nio.ByteBuffer;\n", 
            "-\n", 
            "-/**\n", 
            "- * A utility for logging wire-level information of HTTP connections.\n", 
            "- */\n", 
            "-public class Wire {\n", 
            "-\n", 
            "-    private final Log log;\n", 
            "-\n", 
            "-    public Wire(final Log log) {\n", 
            "-        this.log = log;\n", 
            "-    }\n", 
            "-\n", 
            "-    private void wire(final String header, final byte[] b, int pos, int off) {\n", 
            "-        StringBuilder builder = new StringBuilder();\n", 
            "-        for (int i = 0; i < off; i++) {\n", 
            "-            int ch = b[pos + i];\n", 
            "-            if (ch == 13) {\n", 
            "-                builder.append(\"[\\\\r]\");\n", 
            "-            } else if (ch == 10) {\n", 
            "-                builder.append(\"[\\\\n]\\\"\");\n", 
            "-                builder.insert(0, \"\\\"\");\n", 
            "-                builder.insert(0, header);\n", 
            "-                this.log.debug(builder.toString());\n", 
            "-                builder.setLength(0);\n", 
            "-            } else if ((ch < 32) || (ch > 127)) {\n", 
            "-                builder.append(\"[0x\");\n", 
            "-                builder.append(Integer.toHexString(ch));\n", 
            "-                builder.append(\"]\");\n", 
            "-            } else {\n", 
            "-                builder.append((char) ch);\n", 
            "-            }\n", 
            "-        }\n", 
            "-        if (builder.length() > 0) {\n", 
            "-            builder.append('\\\"');\n", 
            "-            builder.insert(0, '\\\"');\n", 
            "-            builder.insert(0, header);\n", 
            "-            this.log.debug(builder.toString());\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-\n", 
            "-    public boolean isEnabled() {\n", 
            "-        return this.log.isDebugEnabled();\n", 
            "-    }\n", 
            "-\n", 
            "-    public void output(final byte[] b, int pos, int off) {\n", 
            "-        wire(\"<< \", b, pos, off);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void input(final byte[] b, int pos, int off) {\n", 
            "-        wire(\">> \", b, pos, off);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void output(byte[] b) {\n", 
            "-        output(b, 0, b.length);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void input(byte[] b) {\n", 
            "-        input(b, 0, b.length);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void output(int b) {\n", 
            "-        output(new byte[] {(byte) b});\n", 
            "-    }\n", 
            "-\n", 
            "-    public void input(int b) {\n", 
            "-        input(new byte[] {(byte) b});\n", 
            "-    }\n", 
            "-\n", 
            "-    public void output(final ByteBuffer b) {\n", 
            "-        if (b.hasArray()) {\n", 
            "-            output(b.array(), b.arrayOffset() + b.position(), b.remaining());\n", 
            "-        } else {\n", 
            "-            byte[] tmp = new byte[b.remaining()];\n", 
            "-            b.get(tmp);\n", 
            "-            output(tmp);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void input(final ByteBuffer b) {\n", 
            "-        if (b.hasArray()) {\n", 
            "-            input(b.array(), b.arrayOffset() + b.position(), b.remaining());\n", 
            "-        } else {\n", 
            "-            byte[] tmp = new byte[b.remaining()];\n", 
            "-            b.get(tmp);\n", 
            "-            input(tmp);\n", 
            "-        }\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/Wire.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/Wire.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,121 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.utils.logging;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.config.ConnectionConfig;\n", 
            "-import org.apache.http.impl.nio.DefaultHttpClientIODispatch;\n", 
            "-import org.apache.http.impl.nio.DefaultHttpServerIODispatch;\n", 
            "-import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "-import org.apache.http.nio.NHttpServerEventHandler;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-\n", 
            "-import javax.net.ssl.SSLContext;\n", 
            "-import java.util.Map;\n", 
            "-\n", 
            "-public class LoggingUtils {\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Create a new DefaultHttpServerIODispatch instance using the provided parameters.\n", 
            "-     * This method may decorate (wrap) the original arguments with logging-enabled wrappers,\n", 
            "-     * depending on the current logging configuration.\n", 
            "-     *\n", 
            "-     * @param handler An NHttpServerEventHandler instance\n", 
            "-     * @param config A ConnectionConfig instance\n", 
            "-     * @return A DefaultHttpServerIODispatch instance\n", 
            "-     */\n", 
            "-    public static DefaultHttpServerIODispatch getServerIODispatch(final NHttpServerEventHandler handler,\n", 
            "-                                                                  final ConnectionConfig config) {\n", 
            "-        return new DefaultHttpServerIODispatch(decorate(handler),\n", 
            "-                new LoggingNHttpServerConnectionFactory(config));\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Create a new DefaultHttpServerIODispatch instance using the provided parameters.\n", 
            "-     * This method may decorate (wrap) the original arguments with logging-enabled wrappers,\n", 
            "-     * depending on the current logging configuration.\n", 
            "-     *\n", 
            "-     * @param handler An NHttpServerEventHandler instance\n", 
            "-     * @param config A ConnectionConfig instance\n", 
            "-     * @param sslContext An SSLContext instance to initialize SSL support\n", 
            "-     * @param sslSetupHandler An SSLSetupHandler instance\n", 
            "-     * @return A DefaultHttpServerIODispatch instance\n", 
            "-     */\n", 
            "-    public static DefaultHttpServerIODispatch getServerIODispatch(final NHttpServerEventHandler handler,\n", 
            "-                                                                  final ConnectionConfig config,\n", 
            "-                                                                  final SSLContext sslContext,\n", 
            "-                                                                  final SSLSetupHandler sslSetupHandler) {\n", 
            "-        return new DefaultHttpServerIODispatch(decorate(handler),\n", 
            "-                new LoggingNHttpSSLServerConnectionFactory(config, sslContext, sslSetupHandler));\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Create a new DefaultHttpClientIODispatch instance using the provided parameters.\n", 
            "-     * This method may decorate (wrap) the original arguments with logging-enabled wrappers,\n", 
            "-     * depending on the current logging configuration.\n", 
            "-     *\n", 
            "-     * @param handler An NHttpClientEventHandler instance\n", 
            "-     * @param config A ConnectionConfig instance\n", 
            "-     * @return A DefaultHttpClientIODispatch instance\n", 
            "-     */\n", 
            "-    public static DefaultHttpClientIODispatch getClientIODispatch(final NHttpClientEventHandler handler,\n", 
            "-                                                                  final ConnectionConfig config) {\n", 
            "-        return new DefaultHttpClientIODispatch(decorate(handler),\n", 
            "-                new LoggingNHttpClientConnectionFactory(config));\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Create a new DefaultHttpClientIODispatch instance using the provided parameters.\n", 
            "-     * This method may decorate (wrap) the original arguments with logging-enabled wrappers,\n", 
            "-     * depending on the current logging configuration.\n", 
            "-     *\n", 
            "-     * @param handler An NHttpServerEventHandler instance\n", 
            "-     * @param config A ConnectionConfig instance\n", 
            "-     * @param sslContext An SSLContext instance to initialize SSL support\n", 
            "-     * @param sslSetupHandler An SSLSetupHandler instance\n", 
            "-     * @param customContexts A Map of endpoints and SSLContext instances\n", 
            "-     * @return A DefaultHttpClientIODispatch instance\n", 
            "-     */\n", 
            "-    public static DefaultHttpClientIODispatch getClientIODispatch(final NHttpClientEventHandler handler,\n", 
            "-                                                                  final ConnectionConfig config,\n", 
            "-                                                                  final SSLContext sslContext,\n", 
            "-                                                                  final SSLSetupHandler sslSetupHandler,\n", 
            "-                                                                  Map<String, SSLContext> customContexts) {\n", 
            "-        return new DefaultHttpClientIODispatch(decorate(handler),\n", 
            "-                new LoggingNHttpSSLClientConnectionFactory(config, sslContext, sslSetupHandler, customContexts));\n", 
            "-    }\n", 
            "-\n", 
            "-    private static NHttpClientEventHandler decorate(NHttpClientEventHandler handler) {\n", 
            "-        Log log = LogFactory.getLog(handler.getClass());\n", 
            "-        if (log.isDebugEnabled()) {\n", 
            "-            handler = new LoggingClientEventHandler(handler);\n", 
            "-        }\n", 
            "-        return handler;\n", 
            "-    }\n", 
            "-\n", 
            "-    private static NHttpServerEventHandler decorate(NHttpServerEventHandler handler) {\n", 
            "-        Log log = LogFactory.getLog(handler.getClass());\n", 
            "-        if (log.isDebugEnabled()) {\n", 
            "-            handler = new LoggingServerEventHandler(handler);\n", 
            "-        }\n", 
            "-        return handler;\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingUtils.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,172 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.utils.logging;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.Header;\n", 
            "-import org.apache.http.HttpException;\n", 
            "-import org.apache.http.HttpRequest;\n", 
            "-import org.apache.http.HttpResponse;\n", 
            "-import org.apache.http.config.ConnectionConfig;\n", 
            "-import org.apache.http.config.MessageConstraints;\n", 
            "-import org.apache.http.impl.ConnSupport;\n", 
            "-import org.apache.http.impl.entity.StrictContentLengthStrategy;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.impl.nio.codecs.DefaultHttpRequestWriter;\n", 
            "-import org.apache.http.impl.nio.codecs.DefaultHttpResponseParser;\n", 
            "-import org.apache.http.nio.*;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            "-import org.apache.http.nio.reactor.SessionOutputBuffer;\n", 
            "-import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            "-import org.apache.synapse.transport.nhttp.AccessHandler;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-\n", 
            "-/**\n", 
            "- * A connection factory implementation for DefaultNHttpClientConnection instances.\n", 
            "- * Based on the current logging configuration, this factory decides whether to create\n", 
            "- * regular DefaultNHttpClientConnection objects or to create LoggingNHttpClientConnection\n", 
            "- * objects. Also, depending on the logging configuration, this factory may choose to\n", 
            "- * wrap IOSession instances in LoggingIOSession objects.\n", 
            "- */\n", 
            "-public class LoggingNHttpClientConnectionFactory implements NHttpConnectionFactory<DefaultNHttpClientConnection> {\n", 
            "-\n", 
            "-    private static final Log targetConnLog = LogFactory.getLog(\n", 
            "-            LoggingConstants.TARGET_CONNECTION_LOG_ID);\n", 
            "-    private static final Log targetHeaderLog = LogFactory.getLog(\n", 
            "-            LoggingConstants.TARGET_HEADER_LOG_ID);\n", 
            "-    private static final Log targetSessionLog = LogFactory.getLog(\n", 
            "-            LoggingConstants.TARGET_SESSION_LOG_ID);\n", 
            "-    private static final Log targetWireLog = LogFactory.getLog(\n", 
            "-            LoggingConstants.TARGET_WIRE_LOG_ID);\n", 
            "-\n", 
            "-    private static final NHttpMessageWriterFactory<HttpRequest> requestWriterFactory =\n", 
            "-            new LoggingNHttpRequestWriterFactory();\n", 
            "-    private static final NHttpMessageParserFactory<HttpResponse> responseParserFactory =\n", 
            "-            new LoggingNHttpResponseParserFactory();\n", 
            "-\n", 
            "-    private final ConnectionConfig config;\n", 
            "-\n", 
            "-    public LoggingNHttpClientConnectionFactory(ConnectionConfig config) {\n", 
            "-        this.config = config;\n", 
            "-    }\n", 
            "-\n", 
            "-    public DefaultNHttpClientConnection createConnection(IOSession session) {\n", 
            "-        if (targetSessionLog.isDebugEnabled() || targetWireLog.isDebugEnabled()) {\n", 
            "-            session = new LoggingIOSession(targetSessionLog, targetWireLog,\n", 
            "-                    session, \"http-sender\");\n", 
            "-        }\n", 
            "-\n", 
            "-        if (targetConnLog.isDebugEnabled() || targetHeaderLog.isDebugEnabled()) {\n", 
            "-            return new LoggingNHttpClientConnection(\n", 
            "-                    session,\n", 
            "-                    config.getBufferSize(),\n", 
            "-                    config.getFragmentSizeHint(),\n", 
            "-                    HeapByteBufferAllocator.INSTANCE,\n", 
            "-                    ConnSupport.createDecoder(config),\n", 
            "-                    ConnSupport.createEncoder(config),\n", 
            "-                    config.getMessageConstraints(),\n", 
            "-                    StrictContentLengthStrategy.INSTANCE,\n", 
            "-                    StrictContentLengthStrategy.INSTANCE,\n", 
            "-                    requestWriterFactory,\n", 
            "-                    responseParserFactory,\n", 
            "-                    targetConnLog);\n", 
            "-        } else {\n", 
            "-            return new DefaultNHttpClientConnection(\n", 
            "-                    session,\n", 
            "-                    config.getBufferSize(),\n", 
            "-                    config.getFragmentSizeHint(),\n", 
            "-                    HeapByteBufferAllocator.INSTANCE,\n", 
            "-                    ConnSupport.createDecoder(config),\n", 
            "-                    ConnSupport.createEncoder(config),\n", 
            "-                    config.getMessageConstraints(),\n", 
            "-                    StrictContentLengthStrategy.INSTANCE,\n", 
            "-                    StrictContentLengthStrategy.INSTANCE,\n", 
            "-                    requestWriterFactory,\n", 
            "-                    responseParserFactory);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    static class LoggingNHttpRequestWriterFactory implements NHttpMessageWriterFactory<HttpRequest> {\n", 
            "-        public NHttpMessageWriter<HttpRequest> create(SessionOutputBuffer sessionBuffer) {\n", 
            "-            return new LoggingNHttpRequestWriter(sessionBuffer);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    static class LoggingNHttpResponseParserFactory implements NHttpMessageParserFactory<HttpResponse> {\n", 
            "-        public NHttpMessageParser<HttpResponse> create(SessionInputBuffer sessionBuffer,\n", 
            "-                                                      MessageConstraints messageConstraints) {\n", 
            "-            return new LoggingNHttpResponseParser(sessionBuffer, messageConstraints);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    static class LoggingNHttpRequestWriter extends DefaultHttpRequestWriter {\n", 
            "-\n", 
            "-        public LoggingNHttpRequestWriter(SessionOutputBuffer buffer) {\n", 
            "-            super(buffer);\n", 
            "-        }\n", 
            "-\n", 
            "-        public void write(final HttpRequest request) throws IOException, HttpException {\n", 
            "-            if (request != null) {\n", 
            "-                if (targetHeaderLog.isDebugEnabled()) {\n", 
            "-                    targetHeaderLog.debug(\">> \" + request.getRequestLine().toString());\n", 
            "-                    Header[] headers = request.getAllHeaders();\n", 
            "-                    for (Header header : headers) {\n", 
            "-                        targetHeaderLog.debug(\">> \" + header.toString());\n", 
            "-                    }\n", 
            "-                }\n", 
            "-\n", 
            "-                if (AccessHandler.getAccessLog().isInfoEnabled()) {\n", 
            "-                    AccessHandler.getAccess().addAccessToQueue(request);\n", 
            "-                }\n", 
            "-            }\n", 
            "-            super.write(request);\n", 
            "-        }\n", 
            "-\n", 
            "-    }\n", 
            "-\n", 
            "-    static class LoggingNHttpResponseParser extends DefaultHttpResponseParser {\n", 
            "-\n", 
            "-        public LoggingNHttpResponseParser(SessionInputBuffer buffer, MessageConstraints constraints) {\n", 
            "-            super(buffer, constraints);\n", 
            "-        }\n", 
            "-\n", 
            "-        public HttpResponse parse() throws IOException, HttpException {\n", 
            "-            HttpResponse response = super.parse();\n", 
            "-            if (response != null) {\n", 
            "-                if (targetHeaderLog.isDebugEnabled()) {\n", 
            "-                    targetHeaderLog.debug(\"<< \" + response.getStatusLine().toString());\n", 
            "-                    Header[] headers = response.getAllHeaders();\n", 
            "-                    for (Header header : headers) {\n", 
            "-                        targetHeaderLog.debug(\"<< \" + header.toString());\n", 
            "-                    }\n", 
            "-                }\n", 
            "-\n", 
            "-                if (AccessHandler.getAccessLog().isInfoEnabled()) {\n", 
            "-                    AccessHandler.getAccess().addAccessToQueue(response);\n", 
            "-                }\n", 
            "-            }\n", 
            "-            return response;\n", 
            "-        }\n", 
            "-\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpClientConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpClientConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,98 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.utils.logging;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.http.HttpException;\n", 
            "-import org.apache.http.HttpRequest;\n", 
            "-import org.apache.http.HttpResponse;\n", 
            "-import org.apache.http.config.MessageConstraints;\n", 
            "-import org.apache.http.entity.ContentLengthStrategy;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "-import org.apache.http.nio.NHttpMessageParserFactory;\n", 
            "-import org.apache.http.nio.NHttpMessageWriterFactory;\n", 
            "-import org.apache.http.nio.NHttpServerEventHandler;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-import java.nio.charset.CharsetDecoder;\n", 
            "-import java.nio.charset.CharsetEncoder;\n", 
            "-\n", 
            "-/**\n", 
            "- * An extension of the DefaultNHttpServerConnection class, that provides some\n", 
            "- * additional logging features. This implementation enhances the default connection\n", 
            "- * class by logging all the major events that occur on the connection instance.\n", 
            "- */\n", 
            "-public class LoggingNHttpServerConnection extends DefaultNHttpServerConnection {\n", 
            "-\n", 
            "-    private final Log log;\n", 
            "-\n", 
            "-    public LoggingNHttpServerConnection(IOSession session,\n", 
            "-                                        int bufferSize,\n", 
            "-                                        int fragmentSizeHint,\n", 
            "-                                        ByteBufferAllocator allocator,\n", 
            "-                                        CharsetDecoder charDecoder,\n", 
            "-                                        CharsetEncoder charEncoder,\n", 
            "-                                        MessageConstraints constraints,\n", 
            "-                                        ContentLengthStrategy incomingContentStrategy,\n", 
            "-                                        ContentLengthStrategy outgoingContentStrategy,\n", 
            "-                                        NHttpMessageParserFactory<HttpRequest> requestParserFactory,\n", 
            "-                                        NHttpMessageWriterFactory<HttpResponse> responseWriterFactory,\n", 
            "-                                        Log log) {\n", 
            "-        super(session, bufferSize, fragmentSizeHint, allocator,\n", 
            "-                charDecoder, charEncoder, constraints, incomingContentStrategy,\n", 
            "-                outgoingContentStrategy, requestParserFactory, responseWriterFactory);\n", 
            "-        this.log = log;\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void close() throws IOException {\n", 
            "-        this.log.debug(\"Close connection\");\n", 
            "-        super.close();\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void shutdown() throws IOException {\n", 
            "-        this.log.debug(\"Shutdown connection\");\n", 
            "-        super.shutdown();\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void submitResponse(final HttpResponse response) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + this + \": \"  + response.getStatusLine().toString());\n", 
            "-        }\n", 
            "-        super.submitResponse(response);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void consumeInput(final NHttpServerEventHandler handler) {\n", 
            "-        this.log.debug(\"Consume input\");\n", 
            "-        super.consumeInput(handler);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void produceOutput(final NHttpServerEventHandler handler) {\n", 
            "-        this.log.debug(\"Produce output\");\n", 
            "-        super.produceOutput(handler);\n", 
            "-    }\n", 
            "-\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpServerConnection.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpServerConnection.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,80 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.utils.logging;\n", 
            "-\n", 
            "-import org.apache.http.config.ConnectionConfig;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLMode;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-\n", 
            "-import javax.net.ssl.SSLContext;\n", 
            "-import java.net.InetSocketAddress;\n", 
            "-import java.util.Map;\n", 
            "-\n", 
            "-/**\n", 
            "- * The SSL-enabled version of the LoggingNHttpClientConnectionFactory. Identical in behavior\n", 
            "- * to the parent class, but wraps IOSession instances with SSLIOSession instances. This\n", 
            "- * implementation also supports using different SSLContext instances for different target\n", 
            "- * I/O sessions.\n", 
            "- */\n", 
            "-public class LoggingNHttpSSLClientConnectionFactory extends LoggingNHttpClientConnectionFactory {\n", 
            "-\n", 
            "-    private SSLContext sslContext;\n", 
            "-    private SSLSetupHandler sslSetupHandler;\n", 
            "-    private Map<String,SSLContext> customContexts;\n", 
            "-\n", 
            "-    public LoggingNHttpSSLClientConnectionFactory(ConnectionConfig config,\n", 
            "-                                                  SSLContext sslContext,\n", 
            "-                                                  SSLSetupHandler sslSetupHandler,\n", 
            "-                                                  Map<String, SSLContext> customContexts) {\n", 
            "-        super(config);\n", 
            "-        this.sslContext = sslContext;\n", 
            "-        this.sslSetupHandler = sslSetupHandler;\n", 
            "-        this.customContexts = customContexts;\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public DefaultNHttpClientConnection createConnection(IOSession session) {\n", 
            "-        final SSLIOSession ssliosession = new SSLIOSession(\n", 
            "-                session,\n", 
            "-                SSLMode.CLIENT,\n", 
            "-                getSSLContext(session),\n", 
            "-                sslSetupHandler);\n", 
            "-        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);\n", 
            "-        return super.createConnection(ssliosession);\n", 
            "-    }\n", 
            "-\n", 
            "-    private SSLContext getSSLContext(IOSession session) {\n", 
            "-        InetSocketAddress address = (InetSocketAddress) session.getRemoteAddress();\n", 
            "-        String host = address.getHostName() + \":\" + address.getPort();\n", 
            "-        SSLContext customContext = null;\n", 
            "-        if (customContexts != null) {\n", 
            "-            // See if there's a custom SSL profile configured for this server\n", 
            "-            customContext = customContexts.get(host);\n", 
            "-        }\n", 
            "-\n", 
            "-        if (customContext == null) {\n", 
            "-            customContext = sslContext;\n", 
            "-        }\n", 
            "-        return customContext;\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpSSLClientConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpSSLClientConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,132 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.utils.logging;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.HttpException;\n", 
            "-import org.apache.http.HttpRequest;\n", 
            "-import org.apache.http.nio.ContentDecoder;\n", 
            "-import org.apache.http.nio.ContentEncoder;\n", 
            "-import org.apache.http.nio.NHttpServerConnection;\n", 
            "-import org.apache.http.nio.NHttpServerEventHandler;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-\n", 
            "-/**\n", 
            "- * A decorator (wrapper) for NHttpServerEventHandler instances. This decorator\n", 
            "- * logs additional debug information regarding each of the events triggered on the\n", 
            "- * actual NHttpServerEventHandler instance. Most events are logged 'before' they are\n", 
            "- * dispatched to the wrapped NHttpServerEventHandler, but this implementation does\n", 
            "- * not modify the event arguments by any means. In that sense this decorator is\n", 
            "- * read-only and safe. This implementation does not log the exception event. It is\n", 
            "- * expected that the actual NHttpServerEventHandler will take the necessary steps to\n", 
            "- * log exceptions.\n", 
            "- */\n", 
            "-public class LoggingServerEventHandler implements NHttpServerEventHandler {\n", 
            "-\n", 
            "-    private final Log log;\n", 
            "-\n", 
            "-    private final NHttpServerEventHandler handler;\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Create a new instance of the decorator.\n", 
            "-     *\n", 
            "-     * @param handler The instance of NHttpServerEventHandler to be decorated (wrapped)\n", 
            "-     */\n", 
            "-    public LoggingServerEventHandler(final NHttpServerEventHandler handler) {\n", 
            "-        super();\n", 
            "-        if (handler == null) {\n", 
            "-            throw new IllegalArgumentException(\"HTTP service handler must not be null\");\n", 
            "-        }\n", 
            "-        this.handler = handler;\n", 
            "-        this.log = LogFactory.getLog(handler.getClass());\n", 
            "-    }\n", 
            "-\n", 
            "-    public void connected(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Connected\");\n", 
            "-        }\n", 
            "-        this.handler.connected(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void closed(final NHttpServerConnection conn) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Closed\");\n", 
            "-        }\n", 
            "-        this.handler.closed(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void endOfInput(NHttpServerConnection conn) throws IOException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Closed at the remote end\");\n", 
            "-        }\n", 
            "-        this.handler.endOfInput(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void exception(NHttpServerConnection conn, Exception ex) {\n", 
            "-        // No need to log errors at this level - Actual handler implementation\n", 
            "-        // should take care of that\n", 
            "-        this.handler.exception(conn, ex);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void requestReceived(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "-        HttpRequest request = conn.getHttpRequest();\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP InRequest Received on connection \" + conn + \": \"\n", 
            "-                    + request.getRequestLine());\n", 
            "-        }\n", 
            "-        this.handler.requestReceived(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void outputReady(final NHttpServerConnection conn, final ContentEncoder encoder) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Output ready\");\n", 
            "-        }\n", 
            "-        this.handler.outputReady(conn, encoder);\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Content encoder \" + encoder);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void responseReady(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Response ready\");\n", 
            "-        }\n", 
            "-        this.handler.responseReady(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void inputReady(final NHttpServerConnection conn, final ContentDecoder decoder) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Input ready\");\n", 
            "-        }\n", 
            "-        this.handler.inputReady(conn, decoder);\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Content decoder \" + decoder);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void timeout(final NHttpServerConnection conn) throws IOException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Timeout\");\n", 
            "-        }\n", 
            "-        this.handler.timeout(conn);\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingServerEventHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingServerEventHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-29,7 +29,7", 
          "lines": [
            " import org.apache.http.nio.reactor.IOEventDispatch;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-import org.apache.synapse.transport.utils.logging.LoggingUtils;\n", 
            "+import org.apache.synapse.transport.utils.conn.logging.LoggingUtils;\n", 
            " import org.apache.synapse.transport.utils.sslcert.CertificateVerificationConfig;\n", 
            " import org.apache.synapse.transport.utils.sslcert.CertificateVerificationException;\n", 
            " import org.apache.synapse.transport.utils.sslcert.adaptor.SynapseAdaptorForOcspCrl;\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-28,7 +28,7", 
          "lines": [
            " import org.apache.http.nio.reactor.IOEventDispatch;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-import org.apache.synapse.transport.utils.logging.LoggingUtils;\n", 
            "+import org.apache.synapse.transport.utils.conn.logging.LoggingUtils;\n", 
            " \n", 
            " import javax.net.ssl.*;\n", 
            " import javax.xml.namespace.QName;\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLListener.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLListener.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-63,10 +63,9", 
          "lines": [
            " import org.apache.synapse.transport.passthru.jmx.TransportView;\n", 
            " import org.apache.synapse.transport.passthru.util.PassThroughTransportUtils;\n", 
            " import org.apache.synapse.transport.passthru.util.SourceResponseFactory;\n", 
            "-import org.apache.synapse.transport.utils.logging.LoggingUtils;\n", 
            "+import org.apache.synapse.transport.utils.conn.logging.LoggingUtils;\n", 
            " \n", 
            " import javax.net.ssl.SSLContext;\n", 
            "-import java.io.ByteArrayOutputStream;\n", 
            " import java.io.IOException;\n", 
            " import java.io.OutputStream;\n", 
            " import java.net.MalformedURLException;\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-49,7 +49,7", 
          "lines": [
            " import org.apache.synapse.transport.passthru.config.SourceConfiguration;\n", 
            " import org.apache.synapse.transport.passthru.jmx.PassThroughTransportMetricsCollector;\n", 
            " import org.apache.synapse.transport.passthru.jmx.TransportView;\n", 
            "-import org.apache.synapse.transport.utils.logging.LoggingUtils;\n", 
            "+import org.apache.synapse.transport.utils.conn.logging.LoggingUtils;\n", 
            " \n", 
            " import javax.net.ssl.SSLContext;\n", 
            " import java.io.IOException;\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpListener.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpListener.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-59,7 +59,7", 
          "lines": [
            " import org.apache.synapse.transport.nhttp.util.MessageFormatterDecoratorFactory;\n", 
            " import org.apache.synapse.transport.nhttp.util.NhttpUtil;\n", 
            " import org.apache.synapse.transport.nhttp.util.NhttpMetricsCollector;\n", 
            "-import org.apache.synapse.transport.utils.logging.LoggingUtils;\n", 
            "+import org.apache.synapse.transport.utils.conn.logging.LoggingUtils;\n", 
            " \n", 
            " import javax.net.ssl.SSLContext;\n", 
            " import java.io.IOException;\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-43,7 +43,7", 
          "lines": [
            " import org.apache.http.nio.reactor.ListenerEndpoint;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            " import org.apache.synapse.transport.nhttp.util.NhttpMetricsCollector;\n", 
            "-import org.apache.synapse.transport.utils.logging.LoggingUtils;\n", 
            "+import org.apache.synapse.transport.utils.conn.logging.LoggingUtils;\n", 
            " \n", 
            " import javax.net.ssl.SSLContext;\n", 
            " import java.io.IOException;\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOListener.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOListener.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-31,7 +31,7", 
          "lines": [
            " import org.apache.axis2.description.TransportOutDescription;\n", 
            " import org.apache.axis2.transport.base.ParamUtils;\n", 
            " import org.apache.axiom.om.OMElement;\n", 
            "-import org.apache.synapse.transport.utils.logging.LoggingUtils;\n", 
            "+import org.apache.synapse.transport.utils.conn.logging.LoggingUtils;\n", 
            " import org.apache.synapse.transport.utils.sslcert.CertificateVerificationConfig;\n", 
            " import org.apache.synapse.transport.utils.sslcert.CertificateVerificationException;\n", 
            " import org.apache.synapse.transport.utils.sslcert.adaptor.SynapseAdaptorForOcspCrl;\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-46,7 +46,7", 
          "lines": [
            " import org.apache.http.nio.reactor.IOEventDispatch;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-import org.apache.synapse.transport.utils.logging.LoggingUtils;\n", 
            "+import org.apache.synapse.transport.utils.conn.logging.LoggingUtils;\n", 
            " \n", 
            " public class HttpCoreNIOSSLListener extends HttpCoreNIOListener {\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLListener.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLListener.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,121", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            "+import org.apache.http.impl.nio.DefaultHttpClientIODispatch;\n", 
            "+import org.apache.http.impl.nio.DefaultHttpServerIODispatch;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "+import org.apache.http.nio.NHttpServerEventHandler;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "+\n", 
            "+import javax.net.ssl.SSLContext;\n", 
            "+import java.util.Map;\n", 
            "+\n", 
            "+public class LoggingUtils {\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Create a new DefaultHttpServerIODispatch instance using the provided parameters.\n", 
            "+     * This method may decorate (wrap) the original arguments with logging-enabled wrappers,\n", 
            "+     * depending on the current logging configuration.\n", 
            "+     *\n", 
            "+     * @param handler An NHttpServerEventHandler instance\n", 
            "+     * @param config A ConnectionConfig instance\n", 
            "+     * @return A DefaultHttpServerIODispatch instance\n", 
            "+     */\n", 
            "+    public static DefaultHttpServerIODispatch getServerIODispatch(final NHttpServerEventHandler handler,\n", 
            "+                                                                  final ConnectionConfig config) {\n", 
            "+        return new DefaultHttpServerIODispatch(decorate(handler),\n", 
            "+                new LoggingNHttpServerConnectionFactory(config));\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Create a new DefaultHttpServerIODispatch instance using the provided parameters.\n", 
            "+     * This method may decorate (wrap) the original arguments with logging-enabled wrappers,\n", 
            "+     * depending on the current logging configuration.\n", 
            "+     *\n", 
            "+     * @param handler An NHttpServerEventHandler instance\n", 
            "+     * @param config A ConnectionConfig instance\n", 
            "+     * @param sslContext An SSLContext instance to initialize SSL support\n", 
            "+     * @param sslSetupHandler An SSLSetupHandler instance\n", 
            "+     * @return A DefaultHttpServerIODispatch instance\n", 
            "+     */\n", 
            "+    public static DefaultHttpServerIODispatch getServerIODispatch(final NHttpServerEventHandler handler,\n", 
            "+                                                                  final ConnectionConfig config,\n", 
            "+                                                                  final SSLContext sslContext,\n", 
            "+                                                                  final SSLSetupHandler sslSetupHandler) {\n", 
            "+        return new DefaultHttpServerIODispatch(decorate(handler),\n", 
            "+                new LoggingNHttpSSLServerConnectionFactory(config, sslContext, sslSetupHandler));\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Create a new DefaultHttpClientIODispatch instance using the provided parameters.\n", 
            "+     * This method may decorate (wrap) the original arguments with logging-enabled wrappers,\n", 
            "+     * depending on the current logging configuration.\n", 
            "+     *\n", 
            "+     * @param handler An NHttpClientEventHandler instance\n", 
            "+     * @param config A ConnectionConfig instance\n", 
            "+     * @return A DefaultHttpClientIODispatch instance\n", 
            "+     */\n", 
            "+    public static DefaultHttpClientIODispatch getClientIODispatch(final NHttpClientEventHandler handler,\n", 
            "+                                                                  final ConnectionConfig config) {\n", 
            "+        return new DefaultHttpClientIODispatch(decorate(handler),\n", 
            "+                new LoggingNHttpClientConnectionFactory(config));\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Create a new DefaultHttpClientIODispatch instance using the provided parameters.\n", 
            "+     * This method may decorate (wrap) the original arguments with logging-enabled wrappers,\n", 
            "+     * depending on the current logging configuration.\n", 
            "+     *\n", 
            "+     * @param handler An NHttpServerEventHandler instance\n", 
            "+     * @param config A ConnectionConfig instance\n", 
            "+     * @param sslContext An SSLContext instance to initialize SSL support\n", 
            "+     * @param sslSetupHandler An SSLSetupHandler instance\n", 
            "+     * @param customContexts A Map of endpoints and SSLContext instances\n", 
            "+     * @return A DefaultHttpClientIODispatch instance\n", 
            "+     */\n", 
            "+    public static DefaultHttpClientIODispatch getClientIODispatch(final NHttpClientEventHandler handler,\n", 
            "+                                                                  final ConnectionConfig config,\n", 
            "+                                                                  final SSLContext sslContext,\n", 
            "+                                                                  final SSLSetupHandler sslSetupHandler,\n", 
            "+                                                                  Map<String, SSLContext> customContexts) {\n", 
            "+        return new DefaultHttpClientIODispatch(decorate(handler),\n", 
            "+                new LoggingNHttpSSLClientConnectionFactory(config, sslContext, sslSetupHandler, customContexts));\n", 
            "+    }\n", 
            "+\n", 
            "+    private static NHttpClientEventHandler decorate(NHttpClientEventHandler handler) {\n", 
            "+        Log log = LogFactory.getLog(handler.getClass());\n", 
            "+        if (log.isDebugEnabled()) {\n", 
            "+            handler = new LoggingClientEventHandler(handler);\n", 
            "+        }\n", 
            "+        return handler;\n", 
            "+    }\n", 
            "+\n", 
            "+    private static NHttpServerEventHandler decorate(NHttpServerEventHandler handler) {\n", 
            "+        Log log = LogFactory.getLog(handler.getClass());\n", 
            "+        if (log.isDebugEnabled()) {\n", 
            "+            handler = new LoggingServerEventHandler(handler);\n", 
            "+        }\n", 
            "+        return handler;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingUtils.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,172", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.Header;\n", 
            "+import org.apache.http.HttpException;\n", 
            "+import org.apache.http.HttpRequest;\n", 
            "+import org.apache.http.HttpResponse;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            "+import org.apache.http.config.MessageConstraints;\n", 
            "+import org.apache.http.impl.ConnSupport;\n", 
            "+import org.apache.http.impl.entity.StrictContentLengthStrategy;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "+import org.apache.http.impl.nio.codecs.DefaultHttpRequestWriter;\n", 
            "+import org.apache.http.impl.nio.codecs.DefaultHttpResponseParser;\n", 
            "+import org.apache.http.nio.*;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            "+import org.apache.http.nio.reactor.SessionOutputBuffer;\n", 
            "+import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            "+import org.apache.synapse.transport.nhttp.AccessHandler;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+\n", 
            "+/**\n", 
            "+ * A connection factory implementation for DefaultNHttpClientConnection instances.\n", 
            "+ * Based on the current logging configuration, this factory decides whether to create\n", 
            "+ * regular DefaultNHttpClientConnection objects or to create LoggingNHttpClientConnection\n", 
            "+ * objects. Also, depending on the logging configuration, this factory may choose to\n", 
            "+ * wrap IOSession instances in LoggingIOSession objects.\n", 
            "+ */\n", 
            "+public class LoggingNHttpClientConnectionFactory implements NHttpConnectionFactory<DefaultNHttpClientConnection> {\n", 
            "+\n", 
            "+    private static final Log targetConnLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.TARGET_CONNECTION_LOG_ID);\n", 
            "+    private static final Log targetHeaderLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.TARGET_HEADER_LOG_ID);\n", 
            "+    private static final Log targetSessionLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.TARGET_SESSION_LOG_ID);\n", 
            "+    private static final Log targetWireLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.TARGET_WIRE_LOG_ID);\n", 
            "+\n", 
            "+    private static final NHttpMessageWriterFactory<HttpRequest> requestWriterFactory =\n", 
            "+            new LoggingNHttpRequestWriterFactory();\n", 
            "+    private static final NHttpMessageParserFactory<HttpResponse> responseParserFactory =\n", 
            "+            new LoggingNHttpResponseParserFactory();\n", 
            "+\n", 
            "+    private final ConnectionConfig config;\n", 
            "+\n", 
            "+    public LoggingNHttpClientConnectionFactory(ConnectionConfig config) {\n", 
            "+        this.config = config;\n", 
            "+    }\n", 
            "+\n", 
            "+    public DefaultNHttpClientConnection createConnection(IOSession session) {\n", 
            "+        if (targetSessionLog.isDebugEnabled() || targetWireLog.isDebugEnabled()) {\n", 
            "+            session = new LoggingIOSession(targetSessionLog, targetWireLog,\n", 
            "+                    session, \"http-sender\");\n", 
            "+        }\n", 
            "+\n", 
            "+        if (targetConnLog.isDebugEnabled() || targetHeaderLog.isDebugEnabled()) {\n", 
            "+            return new LoggingNHttpClientConnection(\n", 
            "+                    session,\n", 
            "+                    config.getBufferSize(),\n", 
            "+                    config.getFragmentSizeHint(),\n", 
            "+                    HeapByteBufferAllocator.INSTANCE,\n", 
            "+                    ConnSupport.createDecoder(config),\n", 
            "+                    ConnSupport.createEncoder(config),\n", 
            "+                    config.getMessageConstraints(),\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    requestWriterFactory,\n", 
            "+                    responseParserFactory,\n", 
            "+                    targetConnLog);\n", 
            "+        } else {\n", 
            "+            return new DefaultNHttpClientConnection(\n", 
            "+                    session,\n", 
            "+                    config.getBufferSize(),\n", 
            "+                    config.getFragmentSizeHint(),\n", 
            "+                    HeapByteBufferAllocator.INSTANCE,\n", 
            "+                    ConnSupport.createDecoder(config),\n", 
            "+                    ConnSupport.createEncoder(config),\n", 
            "+                    config.getMessageConstraints(),\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    requestWriterFactory,\n", 
            "+                    responseParserFactory);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpRequestWriterFactory implements NHttpMessageWriterFactory<HttpRequest> {\n", 
            "+        public NHttpMessageWriter<HttpRequest> create(SessionOutputBuffer sessionBuffer) {\n", 
            "+            return new LoggingNHttpRequestWriter(sessionBuffer);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpResponseParserFactory implements NHttpMessageParserFactory<HttpResponse> {\n", 
            "+        public NHttpMessageParser<HttpResponse> create(SessionInputBuffer sessionBuffer,\n", 
            "+                                                      MessageConstraints messageConstraints) {\n", 
            "+            return new LoggingNHttpResponseParser(sessionBuffer, messageConstraints);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpRequestWriter extends DefaultHttpRequestWriter {\n", 
            "+\n", 
            "+        public LoggingNHttpRequestWriter(SessionOutputBuffer buffer) {\n", 
            "+            super(buffer);\n", 
            "+        }\n", 
            "+\n", 
            "+        public void write(final HttpRequest request) throws IOException, HttpException {\n", 
            "+            if (request != null) {\n", 
            "+                if (targetHeaderLog.isDebugEnabled()) {\n", 
            "+                    targetHeaderLog.debug(\">> \" + request.getRequestLine().toString());\n", 
            "+                    Header[] headers = request.getAllHeaders();\n", 
            "+                    for (Header header : headers) {\n", 
            "+                        targetHeaderLog.debug(\">> \" + header.toString());\n", 
            "+                    }\n", 
            "+                }\n", 
            "+\n", 
            "+                if (AccessHandler.getAccessLog().isInfoEnabled()) {\n", 
            "+                    AccessHandler.getAccess().addAccessToQueue(request);\n", 
            "+                }\n", 
            "+            }\n", 
            "+            super.write(request);\n", 
            "+        }\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpResponseParser extends DefaultHttpResponseParser {\n", 
            "+\n", 
            "+        public LoggingNHttpResponseParser(SessionInputBuffer buffer, MessageConstraints constraints) {\n", 
            "+            super(buffer, constraints);\n", 
            "+        }\n", 
            "+\n", 
            "+        public HttpResponse parse() throws IOException, HttpException {\n", 
            "+            HttpResponse response = super.parse();\n", 
            "+            if (response != null) {\n", 
            "+                if (targetHeaderLog.isDebugEnabled()) {\n", 
            "+                    targetHeaderLog.debug(\"<< \" + response.getStatusLine().toString());\n", 
            "+                    Header[] headers = response.getAllHeaders();\n", 
            "+                    for (Header header : headers) {\n", 
            "+                        targetHeaderLog.debug(\"<< \" + header.toString());\n", 
            "+                    }\n", 
            "+                }\n", 
            "+\n", 
            "+                if (AccessHandler.getAccessLog().isInfoEnabled()) {\n", 
            "+                    AccessHandler.getAccess().addAccessToQueue(response);\n", 
            "+                }\n", 
            "+            }\n", 
            "+            return response;\n", 
            "+        }\n", 
            "+\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,98", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.http.HttpException;\n", 
            "+import org.apache.http.HttpRequest;\n", 
            "+import org.apache.http.HttpResponse;\n", 
            "+import org.apache.http.config.MessageConstraints;\n", 
            "+import org.apache.http.entity.ContentLengthStrategy;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "+import org.apache.http.nio.NHttpMessageParserFactory;\n", 
            "+import org.apache.http.nio.NHttpMessageWriterFactory;\n", 
            "+import org.apache.http.nio.NHttpServerEventHandler;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+import java.nio.charset.CharsetDecoder;\n", 
            "+import java.nio.charset.CharsetEncoder;\n", 
            "+\n", 
            "+/**\n", 
            "+ * An extension of the DefaultNHttpServerConnection class, that provides some\n", 
            "+ * additional logging features. This implementation enhances the default connection\n", 
            "+ * class by logging all the major events that occur on the connection instance.\n", 
            "+ */\n", 
            "+public class LoggingNHttpServerConnection extends DefaultNHttpServerConnection {\n", 
            "+\n", 
            "+    private final Log log;\n", 
            "+\n", 
            "+    public LoggingNHttpServerConnection(IOSession session,\n", 
            "+                                        int bufferSize,\n", 
            "+                                        int fragmentSizeHint,\n", 
            "+                                        ByteBufferAllocator allocator,\n", 
            "+                                        CharsetDecoder charDecoder,\n", 
            "+                                        CharsetEncoder charEncoder,\n", 
            "+                                        MessageConstraints constraints,\n", 
            "+                                        ContentLengthStrategy incomingContentStrategy,\n", 
            "+                                        ContentLengthStrategy outgoingContentStrategy,\n", 
            "+                                        NHttpMessageParserFactory<HttpRequest> requestParserFactory,\n", 
            "+                                        NHttpMessageWriterFactory<HttpResponse> responseWriterFactory,\n", 
            "+                                        Log log) {\n", 
            "+        super(session, bufferSize, fragmentSizeHint, allocator,\n", 
            "+                charDecoder, charEncoder, constraints, incomingContentStrategy,\n", 
            "+                outgoingContentStrategy, requestParserFactory, responseWriterFactory);\n", 
            "+        this.log = log;\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void close() throws IOException {\n", 
            "+        this.log.debug(\"Close connection\");\n", 
            "+        super.close();\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void shutdown() throws IOException {\n", 
            "+        this.log.debug(\"Shutdown connection\");\n", 
            "+        super.shutdown();\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void submitResponse(final HttpResponse response) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + this + \": \"  + response.getStatusLine().toString());\n", 
            "+        }\n", 
            "+        super.submitResponse(response);\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void consumeInput(final NHttpServerEventHandler handler) {\n", 
            "+        this.log.debug(\"Consume input\");\n", 
            "+        super.consumeInput(handler);\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void produceOutput(final NHttpServerEventHandler handler) {\n", 
            "+        this.log.debug(\"Produce output\");\n", 
            "+        super.produceOutput(handler);\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpServerConnection.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpServerConnection.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,80", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn.logging;\n", 
            "+\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLMode;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "+\n", 
            "+import javax.net.ssl.SSLContext;\n", 
            "+import java.net.InetSocketAddress;\n", 
            "+import java.util.Map;\n", 
            "+\n", 
            "+/**\n", 
            "+ * The SSL-enabled version of the LoggingNHttpClientConnectionFactory. Identical in behavior\n", 
            "+ * to the parent class, but wraps IOSession instances with SSLIOSession instances. This\n", 
            "+ * implementation also supports using different SSLContext instances for different target\n", 
            "+ * I/O sessions.\n", 
            "+ */\n", 
            "+public class LoggingNHttpSSLClientConnectionFactory extends LoggingNHttpClientConnectionFactory {\n", 
            "+\n", 
            "+    private SSLContext sslContext;\n", 
            "+    private SSLSetupHandler sslSetupHandler;\n", 
            "+    private Map<String,SSLContext> customContexts;\n", 
            "+\n", 
            "+    public LoggingNHttpSSLClientConnectionFactory(ConnectionConfig config,\n", 
            "+                                                  SSLContext sslContext,\n", 
            "+                                                  SSLSetupHandler sslSetupHandler,\n", 
            "+                                                  Map<String, SSLContext> customContexts) {\n", 
            "+        super(config);\n", 
            "+        this.sslContext = sslContext;\n", 
            "+        this.sslSetupHandler = sslSetupHandler;\n", 
            "+        this.customContexts = customContexts;\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public DefaultNHttpClientConnection createConnection(IOSession session) {\n", 
            "+        final SSLIOSession ssliosession = new SSLIOSession(\n", 
            "+                session,\n", 
            "+                SSLMode.CLIENT,\n", 
            "+                getSSLContext(session),\n", 
            "+                sslSetupHandler);\n", 
            "+        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);\n", 
            "+        return super.createConnection(ssliosession);\n", 
            "+    }\n", 
            "+\n", 
            "+    private SSLContext getSSLContext(IOSession session) {\n", 
            "+        InetSocketAddress address = (InetSocketAddress) session.getRemoteAddress();\n", 
            "+        String host = address.getHostName() + \":\" + address.getPort();\n", 
            "+        SSLContext customContext = null;\n", 
            "+        if (customContexts != null) {\n", 
            "+            // See if there's a custom SSL profile configured for this server\n", 
            "+            customContext = customContexts.get(host);\n", 
            "+        }\n", 
            "+\n", 
            "+        if (customContext == null) {\n", 
            "+            customContext = sslContext;\n", 
            "+        }\n", 
            "+        return customContext;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLClientConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLClientConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,132", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.HttpException;\n", 
            "+import org.apache.http.HttpRequest;\n", 
            "+import org.apache.http.nio.ContentDecoder;\n", 
            "+import org.apache.http.nio.ContentEncoder;\n", 
            "+import org.apache.http.nio.NHttpServerConnection;\n", 
            "+import org.apache.http.nio.NHttpServerEventHandler;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+\n", 
            "+/**\n", 
            "+ * A decorator (wrapper) for NHttpServerEventHandler instances. This decorator\n", 
            "+ * logs additional debug information regarding each of the events triggered on the\n", 
            "+ * actual NHttpServerEventHandler instance. Most events are logged 'before' they are\n", 
            "+ * dispatched to the wrapped NHttpServerEventHandler, but this implementation does\n", 
            "+ * not modify the event arguments by any means. In that sense this decorator is\n", 
            "+ * read-only and safe. This implementation does not log the exception event. It is\n", 
            "+ * expected that the actual NHttpServerEventHandler will take the necessary steps to\n", 
            "+ * log exceptions.\n", 
            "+ */\n", 
            "+public class LoggingServerEventHandler implements NHttpServerEventHandler {\n", 
            "+\n", 
            "+    private final Log log;\n", 
            "+\n", 
            "+    private final NHttpServerEventHandler handler;\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Create a new instance of the decorator.\n", 
            "+     *\n", 
            "+     * @param handler The instance of NHttpServerEventHandler to be decorated (wrapped)\n", 
            "+     */\n", 
            "+    public LoggingServerEventHandler(final NHttpServerEventHandler handler) {\n", 
            "+        super();\n", 
            "+        if (handler == null) {\n", 
            "+            throw new IllegalArgumentException(\"HTTP service handler must not be null\");\n", 
            "+        }\n", 
            "+        this.handler = handler;\n", 
            "+        this.log = LogFactory.getLog(handler.getClass());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void connected(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Connected\");\n", 
            "+        }\n", 
            "+        this.handler.connected(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void closed(final NHttpServerConnection conn) {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Closed\");\n", 
            "+        }\n", 
            "+        this.handler.closed(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void endOfInput(NHttpServerConnection conn) throws IOException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Closed at the remote end\");\n", 
            "+        }\n", 
            "+        this.handler.endOfInput(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void exception(NHttpServerConnection conn, Exception ex) {\n", 
            "+        // No need to log errors at this level - Actual handler implementation\n", 
            "+        // should take care of that\n", 
            "+        this.handler.exception(conn, ex);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void requestReceived(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "+        HttpRequest request = conn.getHttpRequest();\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP InRequest Received on connection \" + conn + \": \"\n", 
            "+                    + request.getRequestLine());\n", 
            "+        }\n", 
            "+        this.handler.requestReceived(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void outputReady(final NHttpServerConnection conn, final ContentEncoder encoder) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Output ready\");\n", 
            "+        }\n", 
            "+        this.handler.outputReady(conn, encoder);\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Content encoder \" + encoder);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void responseReady(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Response ready\");\n", 
            "+        }\n", 
            "+        this.handler.responseReady(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void inputReady(final NHttpServerConnection conn, final ContentDecoder decoder) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Input ready\");\n", 
            "+        }\n", 
            "+        this.handler.inputReady(conn, decoder);\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Content decoder \" + decoder);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void timeout(final NHttpServerConnection conn) throws IOException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Timeout\");\n", 
            "+        }\n", 
            "+        this.handler.timeout(conn);\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingServerEventHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingServerEventHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,248", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.SessionBufferStatus;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+import java.net.SocketAddress;\n", 
            "+import java.nio.ByteBuffer;\n", 
            "+import java.nio.channels.ByteChannel;\n", 
            "+import java.nio.channels.SelectionKey;\n", 
            "+import java.util.concurrent.atomic.AtomicLong;\n", 
            "+\n", 
            "+/**\n", 
            "+ * A decorator (wrapper) for IOSession instances. This decorator logs additional\n", 
            "+ * debug information regarding each of the events triggered on the actual IOSession\n", 
            "+ * instance. Most events are logged 'before' they are dispatched to the wrapped\n", 
            "+ * IOSession, but this implementation does not modify the event arguments by any means.\n", 
            "+ * In that sense this decorator is read-only and safe. This implementation also facilitates\n", 
            "+ * intercepting and logging HTTP messages at wire-level.\n", 
            "+ */\n", 
            "+public class LoggingIOSession implements IOSession {\n", 
            "+\n", 
            "+    private static AtomicLong COUNT = new AtomicLong(0);\n", 
            "+\n", 
            "+    private final Log sessionLog;\n", 
            "+    private final Wire wireLog;\n", 
            "+    private final IOSession session;\n", 
            "+    private final ByteChannel channel;\n", 
            "+    private final String id;\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Create a new instance of the decorator.\n", 
            "+     *\n", 
            "+     * @param sessionLog Log instance used to log IOSession events.\n", 
            "+     * @param wireLog Log instance used to log wire-level HTTP messages.\n", 
            "+     * @param session IOSession to be decorated.\n", 
            "+     * @param id An identifier (name) that will be attached to the IOSession for the logging\n", 
            "+     *           purposes.\n", 
            "+     */\n", 
            "+    public LoggingIOSession(\n", 
            "+            final Log sessionLog,\n", 
            "+            final Log wireLog,\n", 
            "+            final IOSession session,\n", 
            "+            final String id) {\n", 
            "+        if (session == null) {\n", 
            "+            throw new IllegalArgumentException(\"I/O session must not be null\");\n", 
            "+        }\n", 
            "+        this.session = session;\n", 
            "+        this.channel = new LoggingByteChannel();\n", 
            "+        this.id = id + \"-\" + COUNT.incrementAndGet();\n", 
            "+        this.sessionLog = sessionLog;\n", 
            "+        this.wireLog = new Wire(wireLog);\n", 
            "+    }\n", 
            "+\n", 
            "+    public int getStatus() {\n", 
            "+        return this.session.getStatus();\n", 
            "+    }\n", 
            "+\n", 
            "+    public ByteChannel channel() {\n", 
            "+        return this.channel;\n", 
            "+    }\n", 
            "+\n", 
            "+    public SocketAddress getLocalAddress() {\n", 
            "+        return this.session.getLocalAddress();\n", 
            "+    }\n", 
            "+\n", 
            "+    public SocketAddress getRemoteAddress() {\n", 
            "+        return this.session.getRemoteAddress();\n", 
            "+    }\n", 
            "+\n", 
            "+    public int getEventMask() {\n", 
            "+        return this.session.getEventMask();\n", 
            "+    }\n", 
            "+\n", 
            "+    private static String formatOps(int ops) {\n", 
            "+        StringBuilder buffer = new StringBuilder(6);\n", 
            "+        buffer.append('[');\n", 
            "+        if ((ops & SelectionKey.OP_READ) > 0) {\n", 
            "+            buffer.append('r');\n", 
            "+        }\n", 
            "+        if ((ops & SelectionKey.OP_WRITE) > 0) {\n", 
            "+            buffer.append('w');\n", 
            "+        }\n", 
            "+        if ((ops & SelectionKey.OP_ACCEPT) > 0) {\n", 
            "+            buffer.append('a');\n", 
            "+        }\n", 
            "+        if ((ops & SelectionKey.OP_CONNECT) > 0) {\n", 
            "+            buffer.append('c');\n", 
            "+        }\n", 
            "+        buffer.append(']');\n", 
            "+        return buffer.toString();\n", 
            "+    }\n", 
            "+\n", 
            "+    private String getPreamble() {\n", 
            "+        String preamble = \"I/O session \" + this.id + \" \" + this.session;\n", 
            "+        if (this.session instanceof SSLIOSession) {\n", 
            "+            return \"SSL \" + preamble;\n", 
            "+        } else {\n", 
            "+            return preamble;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setEventMask(int ops) {\n", 
            "+        if (sessionLog.isDebugEnabled()) {\n", 
            "+            sessionLog.debug(getPreamble() + \": Set event mask \" + formatOps(ops));\n", 
            "+        }\n", 
            "+        this.session.setEventMask(ops);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setEvent(int op) {\n", 
            "+        if (sessionLog.isDebugEnabled()) {\n", 
            "+            sessionLog.debug(getPreamble() + \": Set event \" + formatOps(op));\n", 
            "+        }\n", 
            "+        this.session.setEvent(op);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void clearEvent(int op) {\n", 
            "+        if (sessionLog.isDebugEnabled()) {\n", 
            "+            sessionLog.debug(getPreamble() + \": Clear event \" + formatOps(op));\n", 
            "+        }\n", 
            "+        this.session.clearEvent(op);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void close() {\n", 
            "+        if (sessionLog.isDebugEnabled()) {\n", 
            "+            sessionLog.debug(getPreamble() + \": Close\");\n", 
            "+        }\n", 
            "+        this.session.close();\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean isClosed() {\n", 
            "+        return this.session.isClosed();\n", 
            "+    }\n", 
            "+\n", 
            "+    public void shutdown() {\n", 
            "+        if (sessionLog.isDebugEnabled()) {\n", 
            "+            sessionLog.debug(getPreamble() + \": Shutdown\");\n", 
            "+        }\n", 
            "+        this.session.shutdown();\n", 
            "+    }\n", 
            "+\n", 
            "+    public int getSocketTimeout() {\n", 
            "+        return this.session.getSocketTimeout();\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setSocketTimeout(int timeout) {\n", 
            "+        if (sessionLog.isDebugEnabled()) {\n", 
            "+            sessionLog.debug(getPreamble() + \": Set timeout \" + timeout);\n", 
            "+        }\n", 
            "+        this.session.setSocketTimeout(timeout);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setBufferStatus(final SessionBufferStatus status) {\n", 
            "+        this.session.setBufferStatus(status);\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean hasBufferedInput() {\n", 
            "+        return this.session.hasBufferedInput();\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean hasBufferedOutput() {\n", 
            "+        return this.session.hasBufferedOutput();\n", 
            "+    }\n", 
            "+\n", 
            "+    public Object getAttribute(final String name) {\n", 
            "+        return this.session.getAttribute(name);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setAttribute(final String name, final Object obj) {\n", 
            "+        if (sessionLog.isDebugEnabled()) {\n", 
            "+            sessionLog.debug(getPreamble() + \": Set attribute \" + name);\n", 
            "+        }\n", 
            "+        this.session.setAttribute(name, obj);\n", 
            "+    }\n", 
            "+\n", 
            "+    public Object removeAttribute(final String name) {\n", 
            "+        if (sessionLog.isDebugEnabled()) {\n", 
            "+            sessionLog.debug(getPreamble() + \": Remove attribute \" + name);\n", 
            "+        }\n", 
            "+        return this.session.removeAttribute(name);\n", 
            "+    }\n", 
            "+\n", 
            "+    class LoggingByteChannel implements ByteChannel {\n", 
            "+\n", 
            "+        public int read(final ByteBuffer dst) throws IOException {\n", 
            "+            int bytesRead = session.channel().read(dst);\n", 
            "+            if (sessionLog.isDebugEnabled()) {\n", 
            "+                sessionLog.debug(getPreamble() + \": \" + bytesRead + \" bytes read\");\n", 
            "+            }\n", 
            "+            if (bytesRead > 0 && wireLog.isEnabled()) {\n", 
            "+                ByteBuffer b = dst.duplicate();\n", 
            "+                int p = b.position();\n", 
            "+                b.limit(p);\n", 
            "+                b.position(p - bytesRead);\n", 
            "+                wireLog.input(b);\n", 
            "+            }\n", 
            "+            return bytesRead;\n", 
            "+        }\n", 
            "+\n", 
            "+        public int write(final ByteBuffer src) throws IOException {\n", 
            "+            int byteWritten = session.channel().write(src);\n", 
            "+            if (sessionLog.isDebugEnabled()) {\n", 
            "+                sessionLog.debug(getPreamble() + \": \" + byteWritten + \" bytes written\");\n", 
            "+            }\n", 
            "+            if (byteWritten > 0 && wireLog.isEnabled()) {\n", 
            "+                ByteBuffer b = src.duplicate();\n", 
            "+                int p = b.position();\n", 
            "+                b.limit(p);\n", 
            "+                b.position(p - byteWritten);\n", 
            "+                wireLog.output(b);\n", 
            "+            }\n", 
            "+            return byteWritten;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void close() throws IOException {\n", 
            "+            if (sessionLog.isDebugEnabled()) {\n", 
            "+                sessionLog.debug(getPreamble() + \": Channel close\");\n", 
            "+            }\n", 
            "+            session.channel().close();\n", 
            "+        }\n", 
            "+\n", 
            "+        public boolean isOpen() {\n", 
            "+            return session.channel().isOpen();\n", 
            "+        }\n", 
            "+\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingIOSession.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingIOSession.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,43", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn.logging;\n", 
            "+\n", 
            "+public class LoggingConstants {\n", 
            "+\n", 
            "+    public static final String SOURCE_CONNECTION_LOG_ID =\n", 
            "+            \"org.apache.synapse.transport.http.conn.SourceConnection\";\n", 
            "+    public static final String TARGET_CONNECTION_LOG_ID =\n", 
            "+            \"org.apache.synapse.transport.http.conn.TargetConnection\";\n", 
            "+\n", 
            "+    public static final String SOURCE_HEADER_LOG_ID =\n", 
            "+            \"org.apache.synapse.transport.http.headers.SourceHeaders\";\n", 
            "+    public static final String TARGET_HEADER_LOG_ID =\n", 
            "+            \"org.apache.synapse.transport.http.headers.TargetHeaders\";\n", 
            "+\n", 
            "+    public static final String SOURCE_SESSION_LOG_ID =\n", 
            "+            \"org.apache.synapse.transport.http.session.SourceSession\";\n", 
            "+    public static final String TARGET_SESSION_LOG_ID =\n", 
            "+            \"org.apache.synapse.transport.http.session.TargetSession\";\n", 
            "+\n", 
            "+    public static final String SOURCE_WIRE_LOG_ID =\n", 
            "+            \"org.apache.synapse.transport.http.wire.SourceWire\";\n", 
            "+    public static final String TARGET_WIRE_LOG_ID =\n", 
            "+            \"org.apache.synapse.transport.http.wire.TargetWire\";\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingConstants.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,97", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.http.HttpException;\n", 
            "+import org.apache.http.HttpRequest;\n", 
            "+import org.apache.http.HttpResponse;\n", 
            "+import org.apache.http.config.MessageConstraints;\n", 
            "+import org.apache.http.entity.ContentLengthStrategy;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "+import org.apache.http.nio.NHttpMessageParserFactory;\n", 
            "+import org.apache.http.nio.NHttpMessageWriterFactory;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+import java.nio.charset.CharsetDecoder;\n", 
            "+import java.nio.charset.CharsetEncoder;\n", 
            "+\n", 
            "+/**\n", 
            "+ * An extension of the DefaultNHttpClientConnection class, that provides some\n", 
            "+ * additional logging features. This implementation enhances the default connection\n", 
            "+ * class by logging all the major events that occur on the connection instance.\n", 
            "+ */\n", 
            "+public class LoggingNHttpClientConnection extends DefaultNHttpClientConnection {\n", 
            "+\n", 
            "+    private final Log log;\n", 
            "+\n", 
            "+    public LoggingNHttpClientConnection(IOSession session,\n", 
            "+                                        int bufferSize,\n", 
            "+                                        int fragmentSizeHint,\n", 
            "+                                        ByteBufferAllocator allocator,\n", 
            "+                                        CharsetDecoder charDecoder,\n", 
            "+                                        CharsetEncoder charEncoder,\n", 
            "+                                        MessageConstraints constraints,\n", 
            "+                                        ContentLengthStrategy incomingContentStrategy,\n", 
            "+                                        ContentLengthStrategy outgoingContentStrategy,\n", 
            "+                                        NHttpMessageWriterFactory<HttpRequest> requestWriterFactory,\n", 
            "+                                        NHttpMessageParserFactory<HttpResponse> responseParserFactory,\n", 
            "+                                        Log log) {\n", 
            "+        super(session, bufferSize, fragmentSizeHint, allocator,\n", 
            "+                charDecoder, charEncoder, constraints, incomingContentStrategy,\n", 
            "+                outgoingContentStrategy, requestWriterFactory, responseParserFactory);\n", 
            "+        this.log = log;\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void close() throws IOException {\n", 
            "+        this.log.debug(\"Close connection\");\n", 
            "+        super.close();\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void shutdown() throws IOException {\n", 
            "+        this.log.debug(\"Shutdown connection\");\n", 
            "+        super.shutdown();\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void submitRequest(final HttpRequest request) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + this + \": \"  + request.getRequestLine().toString());\n", 
            "+        }\n", 
            "+        super.submitRequest(request);\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void consumeInput(final NHttpClientEventHandler handler) {\n", 
            "+        this.log.debug(\"Consume input\");\n", 
            "+        super.consumeInput(handler);\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void produceOutput(final NHttpClientEventHandler handler) {\n", 
            "+        this.log.debug(\"Produce output\");\n", 
            "+        super.produceOutput(handler);\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnection.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnection.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,170", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.Header;\n", 
            "+import org.apache.http.HttpException;\n", 
            "+import org.apache.http.HttpRequest;\n", 
            "+import org.apache.http.HttpResponse;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            "+import org.apache.http.config.MessageConstraints;\n", 
            "+import org.apache.http.impl.ConnSupport;\n", 
            "+import org.apache.http.impl.entity.StrictContentLengthStrategy;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "+import org.apache.http.impl.nio.codecs.DefaultHttpRequestParser;\n", 
            "+import org.apache.http.impl.nio.codecs.DefaultHttpResponseWriter;\n", 
            "+import org.apache.http.nio.*;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            "+import org.apache.http.nio.reactor.SessionOutputBuffer;\n", 
            "+import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            "+import org.apache.synapse.transport.nhttp.AccessHandler;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+\n", 
            "+/**\n", 
            "+ * A connection factory implementation for DefaultNHttpServerConnection instances.\n", 
            "+ * Based on the current logging configuration, this factory decides whether to create\n", 
            "+ * regular DefaultNHttpServerConnection objects or to create LoggingNHttpServerConnection\n", 
            "+ * objects. Also, depending on the logging configuration, this factory may choose to\n", 
            "+ * wrap IOSession instances in LoggingIOSession objects.\n", 
            "+ */\n", 
            "+public class LoggingNHttpServerConnectionFactory implements NHttpConnectionFactory<DefaultNHttpServerConnection> {\n", 
            "+\n", 
            "+    private static final Log sourceConnLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.SOURCE_CONNECTION_LOG_ID);\n", 
            "+    private static final Log sourceHeaderLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.SOURCE_HEADER_LOG_ID);\n", 
            "+    private static final Log sourceSessionLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.SOURCE_SESSION_LOG_ID);\n", 
            "+    private static final Log sourceWireLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.SOURCE_WIRE_LOG_ID);\n", 
            "+\n", 
            "+    private static final NHttpMessageParserFactory<HttpRequest> requestParserFactory =\n", 
            "+            new LoggingNHttpRequestParserFactory();\n", 
            "+    private static final NHttpMessageWriterFactory<HttpResponse> responseWriterFactory =\n", 
            "+            new LoggingNHttpResponseWriterFactory();\n", 
            "+\n", 
            "+    private final ConnectionConfig config;\n", 
            "+\n", 
            "+    public LoggingNHttpServerConnectionFactory(ConnectionConfig config) {\n", 
            "+        this.config = config;\n", 
            "+    }\n", 
            "+\n", 
            "+    public DefaultNHttpServerConnection createConnection(IOSession session) {\n", 
            "+        if (sourceSessionLog.isDebugEnabled() || sourceWireLog.isDebugEnabled()) {\n", 
            "+            session = new LoggingIOSession(sourceSessionLog, sourceWireLog,\n", 
            "+                    session, \"http-listener\");\n", 
            "+        }\n", 
            "+\n", 
            "+        if (sourceConnLog.isDebugEnabled()) {\n", 
            "+            return new LoggingNHttpServerConnection(\n", 
            "+                    session,\n", 
            "+                    config.getBufferSize(),\n", 
            "+                    config.getFragmentSizeHint(),\n", 
            "+                    HeapByteBufferAllocator.INSTANCE,\n", 
            "+                    ConnSupport.createDecoder(config),\n", 
            "+                    ConnSupport.createEncoder(config),\n", 
            "+                    config.getMessageConstraints(),\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    requestParserFactory,\n", 
            "+                    responseWriterFactory,\n", 
            "+                    sourceConnLog);\n", 
            "+        } else {\n", 
            "+            return new DefaultNHttpServerConnection(\n", 
            "+                    session,\n", 
            "+                    config.getBufferSize(),\n", 
            "+                    config.getFragmentSizeHint(),\n", 
            "+                    HeapByteBufferAllocator.INSTANCE,\n", 
            "+                    ConnSupport.createDecoder(config),\n", 
            "+                    ConnSupport.createEncoder(config),\n", 
            "+                    config.getMessageConstraints(),\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    requestParserFactory,\n", 
            "+                    responseWriterFactory);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpRequestParserFactory implements NHttpMessageParserFactory<HttpRequest> {\n", 
            "+        public NHttpMessageParser<HttpRequest> create(SessionInputBuffer sessionBuffer,\n", 
            "+                                                      MessageConstraints messageConstraints) {\n", 
            "+            return new LoggingNHttpRequestParser(sessionBuffer, messageConstraints);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpResponseWriterFactory implements NHttpMessageWriterFactory<HttpResponse> {\n", 
            "+        public NHttpMessageWriter<HttpResponse> create(SessionOutputBuffer sessionBuffer) {\n", 
            "+            return new LoggingNHttpResponseWriter(sessionBuffer);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpRequestParser extends DefaultHttpRequestParser {\n", 
            "+\n", 
            "+        public LoggingNHttpRequestParser(SessionInputBuffer buffer, MessageConstraints constraints) {\n", 
            "+            super(buffer, constraints);\n", 
            "+        }\n", 
            "+\n", 
            "+        public HttpRequest parse() throws IOException, HttpException {\n", 
            "+            HttpRequest request = super.parse();\n", 
            "+            if (request != null) {\n", 
            "+                if (sourceHeaderLog.isDebugEnabled()) {\n", 
            "+                    sourceHeaderLog.debug(\">> \" + request.getRequestLine().toString());\n", 
            "+                    Header[] headers = request.getAllHeaders();\n", 
            "+                    for (Header header : headers) {\n", 
            "+                        sourceHeaderLog.debug(\">> \" + header.toString());\n", 
            "+                    }\n", 
            "+                }\n", 
            "+\n", 
            "+                if (AccessHandler.getAccessLog().isInfoEnabled()) {\n", 
            "+                    AccessHandler.getAccess().addAccessToQueue(request);\n", 
            "+                }\n", 
            "+            }\n", 
            "+            return request;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpResponseWriter extends DefaultHttpResponseWriter {\n", 
            "+\n", 
            "+        public LoggingNHttpResponseWriter(SessionOutputBuffer buffer) {\n", 
            "+            super(buffer);\n", 
            "+        }\n", 
            "+\n", 
            "+        public void write(final HttpResponse response) throws IOException, HttpException {\n", 
            "+            if (response != null) {\n", 
            "+                if (response != null && sourceHeaderLog.isDebugEnabled()) {\n", 
            "+                    sourceHeaderLog.debug(\"<< \" + response.getStatusLine().toString());\n", 
            "+                    Header[] headers = response.getAllHeaders();\n", 
            "+                    for (Header header : headers) {\n", 
            "+                        sourceHeaderLog.debug(\"<< \" + header.toString());\n", 
            "+                    }\n", 
            "+                }\n", 
            "+\n", 
            "+                if (AccessHandler.getAccessLog().isInfoEnabled()) {\n", 
            "+                    AccessHandler.getAccess().addAccessToQueue(response);\n", 
            "+                }\n", 
            "+            }\n", 
            "+            super.write(response);\n", 
            "+        }\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpServerConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpServerConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,129", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.HttpException;\n", 
            "+import org.apache.http.HttpResponse;\n", 
            "+import org.apache.http.nio.ContentDecoder;\n", 
            "+import org.apache.http.nio.ContentEncoder;\n", 
            "+import org.apache.http.nio.NHttpClientConnection;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+\n", 
            "+/**\n", 
            "+ * A decorator (wrapper) for NHttpClientEventHandler instances. This decorator\n", 
            "+ * logs additional debug information regarding each of the events triggered on the\n", 
            "+ * actual NHttpClientEventHandler instance. Most events are logged 'before' they are\n", 
            "+ * dispatched to the wrapped NHttpClientEventHandler, but this implementation does\n", 
            "+ * not modify the event arguments by any means. In that sense this decorator is\n", 
            "+ * read-only and safe. This implementation does not log the exception event. It is\n", 
            "+ * expected that the actual NHttpClientEventHandler will take the necessary steps to\n", 
            "+ * log exceptions.\n", 
            "+ */\n", 
            "+public class LoggingClientEventHandler implements NHttpClientEventHandler {\n", 
            "+\n", 
            "+    private final Log log;\n", 
            "+\n", 
            "+    private final NHttpClientEventHandler handler;\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Create a new instance of the decorator.\n", 
            "+     *\n", 
            "+     * @param handler The instance of NHttpClientEventHandler to be decorated (wrapped)\n", 
            "+     */\n", 
            "+    public LoggingClientEventHandler(final NHttpClientEventHandler handler) {\n", 
            "+        if (handler == null) {\n", 
            "+            throw new IllegalArgumentException(\"HTTP client handler must not be null\");\n", 
            "+        }\n", 
            "+        this.handler = handler;\n", 
            "+        this.log = LogFactory.getLog(handler.getClass());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void connected(final NHttpClientConnection conn, final Object attachment) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Connected (\" + attachment + \")\");\n", 
            "+        }\n", 
            "+        this.handler.connected(conn, attachment);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void closed(final NHttpClientConnection conn) {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Closed\");\n", 
            "+        }\n", 
            "+        this.handler.closed(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void endOfInput(NHttpClientConnection conn) throws IOException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Closed at remote end\");\n", 
            "+        }\n", 
            "+        this.handler.endOfInput(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void exception(NHttpClientConnection conn, Exception ex) {\n", 
            "+        // Do not log errors at this level - Actual handler implementation should do that\n", 
            "+        this.handler.exception(conn, ex);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void requestReady(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": InRequest ready\");\n", 
            "+        }\n", 
            "+        this.handler.requestReady(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void outputReady(final NHttpClientConnection conn, final ContentEncoder encoder) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Output ready\");\n", 
            "+        }\n", 
            "+        this.handler.outputReady(conn, encoder);\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Content encoder \" + encoder);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void responseReceived(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "+        HttpResponse response = conn.getHttpResponse();\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \" : \" + response.getStatusLine());\n", 
            "+        }\n", 
            "+        this.handler.responseReceived(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void inputReady(final NHttpClientConnection conn, final ContentDecoder decoder) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Input ready\");\n", 
            "+        }\n", 
            "+        this.handler.inputReady(conn, decoder);\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Content decoder \" + decoder);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void timeout(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Timeout\");\n", 
            "+        }\n", 
            "+        this.handler.timeout(conn);\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingClientEventHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingClientEventHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,57", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn.logging;\n", 
            "+\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLMode;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "+\n", 
            "+import javax.net.ssl.SSLContext;\n", 
            "+\n", 
            "+/**\n", 
            "+ * The SSL-enabled version of the LoggingNHttpServerConnectionFactory. Identical in behavior\n", 
            "+ * to the parent class, but wraps IOSession instances with SSLIOSession instances.\n", 
            "+ */\n", 
            "+public class LoggingNHttpSSLServerConnectionFactory extends LoggingNHttpServerConnectionFactory {\n", 
            "+\n", 
            "+    private SSLContext sslContext;\n", 
            "+    private SSLSetupHandler sslSetupHandler;\n", 
            "+\n", 
            "+    public LoggingNHttpSSLServerConnectionFactory(ConnectionConfig config, SSLContext sslContext,\n", 
            "+                                                  SSLSetupHandler sslSetupHandler) {\n", 
            "+        super(config);\n", 
            "+        this.sslContext = sslContext;\n", 
            "+        this.sslSetupHandler = sslSetupHandler;\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public DefaultNHttpServerConnection createConnection(IOSession session) {\n", 
            "+        final SSLIOSession ssliosession = new SSLIOSession(\n", 
            "+                session,\n", 
            "+                SSLMode.SERVER,\n", 
            "+                sslContext,\n", 
            "+                sslSetupHandler);\n", 
            "+        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);\n", 
            "+        return super.createConnection(ssliosession);\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLServerConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLServerConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,113", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+\n", 
            "+import java.nio.ByteBuffer;\n", 
            "+\n", 
            "+/**\n", 
            "+ * A utility for logging wire-level information of HTTP connections.\n", 
            "+ */\n", 
            "+public class Wire {\n", 
            "+\n", 
            "+    private final Log log;\n", 
            "+\n", 
            "+    public Wire(final Log log) {\n", 
            "+        this.log = log;\n", 
            "+    }\n", 
            "+\n", 
            "+    private void wire(final String header, final byte[] b, int pos, int off) {\n", 
            "+        StringBuilder builder = new StringBuilder();\n", 
            "+        for (int i = 0; i < off; i++) {\n", 
            "+            int ch = b[pos + i];\n", 
            "+            if (ch == 13) {\n", 
            "+                builder.append(\"[\\\\r]\");\n", 
            "+            } else if (ch == 10) {\n", 
            "+                builder.append(\"[\\\\n]\\\"\");\n", 
            "+                builder.insert(0, \"\\\"\");\n", 
            "+                builder.insert(0, header);\n", 
            "+                this.log.debug(builder.toString());\n", 
            "+                builder.setLength(0);\n", 
            "+            } else if ((ch < 32) || (ch > 127)) {\n", 
            "+                builder.append(\"[0x\");\n", 
            "+                builder.append(Integer.toHexString(ch));\n", 
            "+                builder.append(\"]\");\n", 
            "+            } else {\n", 
            "+                builder.append((char) ch);\n", 
            "+            }\n", 
            "+        }\n", 
            "+        if (builder.length() > 0) {\n", 
            "+            builder.append('\\\"');\n", 
            "+            builder.insert(0, '\\\"');\n", 
            "+            builder.insert(0, header);\n", 
            "+            this.log.debug(builder.toString());\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public boolean isEnabled() {\n", 
            "+        return this.log.isDebugEnabled();\n", 
            "+    }\n", 
            "+\n", 
            "+    public void output(final byte[] b, int pos, int off) {\n", 
            "+        wire(\"<< \", b, pos, off);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void input(final byte[] b, int pos, int off) {\n", 
            "+        wire(\">> \", b, pos, off);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void output(byte[] b) {\n", 
            "+        output(b, 0, b.length);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void input(byte[] b) {\n", 
            "+        input(b, 0, b.length);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void output(int b) {\n", 
            "+        output(new byte[] {(byte) b});\n", 
            "+    }\n", 
            "+\n", 
            "+    public void input(int b) {\n", 
            "+        input(new byte[] {(byte) b});\n", 
            "+    }\n", 
            "+\n", 
            "+    public void output(final ByteBuffer b) {\n", 
            "+        if (b.hasArray()) {\n", 
            "+            output(b.array(), b.arrayOffset() + b.position(), b.remaining());\n", 
            "+        } else {\n", 
            "+            byte[] tmp = new byte[b.remaining()];\n", 
            "+            b.get(tmp);\n", 
            "+            output(tmp);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void input(final ByteBuffer b) {\n", 
            "+        if (b.hasArray()) {\n", 
            "+            input(b.array(), b.arrayOffset() + b.position(), b.remaining());\n", 
            "+        } else {\n", 
            "+            byte[] tmp = new byte[b.remaining()];\n", 
            "+            b.get(tmp);\n", 
            "+            input(tmp);\n", 
            "+        }\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/Wire.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/Wire.java"
    }
  ], 
  "id": "1776096"
}