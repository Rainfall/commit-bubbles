{
  "when": "2013-07-24T15:04:18-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-16,6 +16,7", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.nhttp;\n", 
            " \n", 
            " import org.apache.axiom.om.OMElement;\n"
          ]
        }, 
        {
          "locn": "-35,11 +36,11", 
          "lines": [
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.http.impl.nio.reactor.DefaultListeningIOReactor;\n", 
            "-import org.apache.http.impl.nio.reactor.SSLIOSessionHandler;\n", 
            "-import org.apache.http.nio.NHttpServiceHandler;\n", 
            "+import org.apache.http.nio.NHttpServerEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOEventDispatch;\n", 
            " import org.apache.http.nio.reactor.IOReactorExceptionHandler;\n", 
            " import org.apache.http.nio.reactor.ListenerEndpoint;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " import org.apache.synapse.transport.nhttp.util.NhttpMetricsCollector;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-74,7 +75,7", 
          "lines": [
            "     /** SSLContext if this listener is a SSL listener */\n", 
            "     private SSLContext sslContext = null;\n", 
            "     /** The SSL session handler that manages client authentication etc */\n", 
            "-    private SSLIOSessionHandler sslIOSessionHandler = null;\n", 
            "+    private SSLSetupHandler sslSetupHandler = null;\n", 
            "     /** JMX support */\n", 
            "     private TransportMBeanSupport mbeanSupport;\n", 
            "     /** state of the listener */\n"
          ]
        }, 
        {
          "locn": "-87,13 +88,13", 
          "lines": [
            "     private NhttpMetricsCollector metrics = null;\n", 
            " \n", 
            "     protected IOEventDispatch getEventDispatch(\n", 
            "-        NHttpServiceHandler handler, SSLContext sslContext, \n", 
            "-        SSLIOSessionHandler sslioSessionHandler, HttpParams params) {\n", 
            "+        NHttpServerEventHandler handler, SSLContext sslContext,\n", 
            "+        SSLSetupHandler setupHandler, HttpParams params) {\n", 
            "         return new PlainServerIOEventDispatch(handler, params);\n", 
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     * Initialize the transport listener, and execute reactor in new seperate thread\n", 
            "+     * Initialize the transport listener, and execute reactor in new separate thread\n", 
            "      * @param cfgCtx the Axis2 configuration context\n", 
            "      * @param transportIn the description of the http/s transport from Axis2 configuration\n", 
            "      * @throws AxisFault on error\n"
          ]
        }, 
        {
          "locn": "-105,7 +106,7", 
          "lines": [
            " \n", 
            "         // is this an SSL listener?\n", 
            "         sslContext = getSSLContext(transportIn);\n", 
            "-        sslIOSessionHandler = getSSLIOSessionHandler(transportIn);\n", 
            "+        sslSetupHandler = getSSLIOSessionHandler(transportIn);\n", 
            " \n", 
            "         listenerContext = new ListenerContext(cfgCtx, transportIn, sslContext != null);\n", 
            "         listenerContext.build();\n"
          ]
        }, 
        {
          "locn": "-180,7 +181,7", 
          "lines": [
            "      * @return always null\n", 
            "      * @throws AxisFault never thrown\n", 
            "      */\n", 
            "-    protected SSLIOSessionHandler getSSLIOSessionHandler(TransportInDescription transportIn)\n", 
            "+    protected SSLSetupHandler getSSLIOSessionHandler(TransportInDescription transportIn)\n", 
            "         throws AxisFault {\n", 
            "         return null;\n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-200,8 +201,8", 
          "lines": [
            "         try {\n", 
            "             String prefix = (sslContext == null ? \"http\" : \"https\") + \"-Listener I/O dispatcher\";\n", 
            "             ioReactor = new DefaultListeningIOReactor(\n", 
            "-                NHttpConfiguration.getInstance().getServerIOWorkers(),                \n", 
            "-                new NativeThreadFactory(new ThreadGroup(prefix + \" thread group\"), prefix), params);\n", 
            "+                listenerContext.getReactorConfig(),\n", 
            "+                new NativeThreadFactory(new ThreadGroup(prefix + \" thread group\"), prefix));\n", 
            " \n", 
            "             ioReactor.setExceptionHandler(new IOReactorExceptionHandler() {\n", 
            "                 public boolean handle(IOException ioException) {\n"
          ]
        }, 
        {
          "locn": "-228,7 +229,7", 
          "lines": [
            " \n", 
            "         handler = new ServerHandler(listenerContext);\n", 
            "         final IOEventDispatch ioEventDispatch = getEventDispatch(handler,\n", 
            "-                sslContext, sslIOSessionHandler, params);\n", 
            "+                sslContext, sslSetupHandler, params);\n", 
            "         state = BaseConstants.STARTED;\n", 
            " \n", 
            "         listenerContext.getHttpGetRequestProcessor().init(cfgCtx, handler);\n"
          ]
        }, 
        {
          "locn": "-289,7 +290,7", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    private void removeServiceFfromURIMap(AxisService service) {\n", 
            "+    private void removeServiceFromURIMap(AxisService service) {\n", 
            "         eprToServiceNameMap.remove(serviceNameToEPRMap.get(service.getName()));\n", 
            "         serviceNameToEPRMap.remove(service.getName());\n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-305,7 +306,7", 
          "lines": [
            "             handler.stop();\n", 
            "             state = BaseConstants.STOPPED;\n", 
            "             for (Object obj : listenerContext.getCfgCtx().getAxisConfiguration().getServices().values()) {\n", 
            "-                removeServiceFfromURIMap((AxisService) obj);\n", 
            "+                removeServiceFromURIMap((AxisService) obj);\n", 
            "             }\n", 
            "         } catch (IOException e) {\n", 
            "             handleException(\"Error shutting down IOReactor\", e);\n"
          ]
        }, 
        {
          "locn": "-314,7 +315,7", 
          "lines": [
            " \n", 
            "     /**\n", 
            "      * Pause the listener - Stops accepting new connections, but continues processing existing\n", 
            "-     * connections until they complete. This helps bring an instance into a maintenence mode\n", 
            "+     * connections until they complete. This helps bring an instance into a maintenance mode\n", 
            "      * @throws AxisFault\n", 
            "      */\n", 
            "     public void pause() throws AxisFault {\n"
          ]
        }, 
        {
          "locn": "-362,7 +363,7", 
          "lines": [
            " \n", 
            "     /**\n", 
            "      * Stop accepting new connections, and wait the maximum specified time for in-flight\n", 
            "-     * requests to complete before a controlled shutdown for maintenence\n", 
            "+     * requests to complete before a controlled shutdown for maintenance\n", 
            "      *\n", 
            "      * @param millis a number of milliseconds to wait until pending requests are allowed to complete\n", 
            "      * @throws AxisFault\n"
          ]
        }, 
        {
          "locn": "-376,7 +377,7", 
          "lines": [
            "             state = BaseConstants.STOPPED;\n", 
            "             log.info(\"Listener shutdown in : \" + (System.currentTimeMillis() - start) / 1000 + \"s\");\n", 
            "         } catch (IOException e) {\n", 
            "-            handleException(\"Error shutting down the IOReactor for maintenence\", e);\n", 
            "+            handleException(\"Error shutting down the IOReactor for maintenance\", e);\n", 
            "         }\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-479,13 +480,13", 
          "lines": [
            "                         addToServiceURIMap(service);\n", 
            "                         break;\n", 
            "                     case AxisEvent.SERVICE_REMOVE :\n", 
            "-                        removeServiceFfromURIMap(service);\n", 
            "+                        removeServiceFromURIMap(service);\n", 
            "                         break;\n", 
            "                     case AxisEvent.SERVICE_START  :\n", 
            "                         addToServiceURIMap(service);\n", 
            "                         break;\n", 
            "                     case AxisEvent.SERVICE_STOP   :\n", 
            "-                        removeServiceFfromURIMap(service);\n", 
            "+                        removeServiceFromURIMap(service);\n", 
            "                         break;\n", 
            "                 }\n", 
            "             }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOListener.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOListener.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-23,10 +23,9", 
          "lines": [
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.http.HttpRequestFactory;\n", 
            " import org.apache.http.HttpResponseFactory;\n", 
            "-import org.apache.http.nio.NHttpClientHandler;\n", 
            "-import org.apache.http.nio.NHttpClientIOTarget;\n", 
            "-import org.apache.http.nio.NHttpServerIOTarget;\n", 
            "-import org.apache.http.nio.NHttpServiceHandler;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "+import org.apache.http.nio.*;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            " import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            " import org.apache.http.params.HttpParams;\n"
          ]
        }, 
        {
          "locn": "-37,7 +36,7", 
          "lines": [
            "     public final static String WIRE_LOG_ID = \"org.apache.synapse.transport.nhttp.wire\";\n", 
            "     public final static String ACCESS_LOG_ID = \"org.apache.synapse.transport.nhttp.access\";\n", 
            " \n", 
            "-    public static NHttpClientHandler decorate(NHttpClientHandler handler) {\n", 
            "+    public static NHttpClientEventHandler decorate(NHttpClientEventHandler handler) {\n", 
            "         Log log = LogFactory.getLog(handler.getClass());\n", 
            "         if (log.isDebugEnabled()) {\n", 
            "             handler = new LoggingNHttpClientHandler(log, handler);\n"
          ]
        }, 
        {
          "locn": "-45,7 +44,7", 
          "lines": [
            "         return handler;\n", 
            "     }\n", 
            " \n", 
            "-    public static NHttpServiceHandler decorate(NHttpServiceHandler handler) {\n", 
            "+    public static NHttpServerEventHandler decorate(NHttpServerEventHandler handler) {\n", 
            "         Log log = LogFactory.getLog(handler.getClass());\n", 
            "         if (log.isDebugEnabled()) {\n", 
            "             handler = new LoggingNHttpServiceHandler(log, handler);\n"
          ]
        }, 
        {
          "locn": "-53,7 +52,7", 
          "lines": [
            "         return handler;\n", 
            "     }\n", 
            " \n", 
            "-    public static NHttpClientIOTarget createClientConnection(\n", 
            "+    public static DefaultNHttpClientConnection createClientConnection(\n", 
            "             final IOSession iosession,\n", 
            "             final HttpResponseFactory responseFactory,\n", 
            "             final ByteBufferAllocator allocator,\n"
          ]
        }, 
        {
          "locn": "-65,7 +64,7", 
          "lines": [
            "                 params);\n", 
            "     }\n", 
            " \n", 
            "-    public static NHttpServerIOTarget createServerConnection(\n", 
            "+    public static DefaultNHttpServerConnection createServerConnection(\n", 
            "             final IOSession iosession,\n", 
            "             final HttpRequestFactory requestFactory,\n", 
            "             final ByteBufferAllocator allocator,\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingUtils.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,27 +16,41", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.nhttp;\n", 
            " \n", 
            "-import org.apache.http.impl.nio.DefaultClientIOEventDispatch;\n", 
            "-import org.apache.http.nio.NHttpClientHandler;\n", 
            "-import org.apache.http.nio.NHttpClientIOTarget;\n", 
            "+import org.apache.http.HttpResponseFactory;\n", 
            "+import org.apache.http.impl.nio.DefaultHttpClientIODispatch;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpClientConnectionFactory;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " \n", 
            "-public class PlainClientIOEventDispatch extends DefaultClientIOEventDispatch {\n", 
            "+public class PlainClientIOEventDispatch extends DefaultHttpClientIODispatch {\n", 
            " \n", 
            "-    public PlainClientIOEventDispatch(final NHttpClientHandler handler, final HttpParams params) {\n", 
            "-        super(LoggingUtils.decorate(handler), params);\n", 
            "+    public PlainClientIOEventDispatch(final NHttpClientEventHandler handler, final HttpParams params) {\n", 
            "+        super(LoggingUtils.decorate(handler), new TargetConnectionFactory(params));\n", 
            "     }\n", 
            "-    \n", 
            "-    @Override\n", 
            "-    protected NHttpClientIOTarget createConnection(IOSession session) {\n", 
            "-        return LoggingUtils.createClientConnection(\n", 
            "-                session, \n", 
            "-                createHttpResponseFactory(), \n", 
            "-                this.allocator, \n", 
            "-                this.params);\n", 
            "+\n", 
            "+    private static class TargetConnectionFactory extends DefaultNHttpClientConnectionFactory {\n", 
            "+\n", 
            "+        public TargetConnectionFactory(HttpParams params) {\n", 
            "+            super(params);\n", 
            "+        }\n", 
            "+\n", 
            "+        @Override\n", 
            "+        protected DefaultNHttpClientConnection createConnection(IOSession session,\n", 
            "+                                                                HttpResponseFactory responseFactory,\n", 
            "+                                                                ByteBufferAllocator allocator,\n", 
            "+                                                                HttpParams params) {\n", 
            "+            return LoggingUtils.createClientConnection(\n", 
            "+                    session,\n", 
            "+                    responseFactory,\n", 
            "+                    allocator,\n", 
            "+                    params);\n", 
            "+        }\n", 
            "     }\n", 
            "     \n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/PlainClientIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/PlainClientIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,6 +16,7", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.nhttp;\n", 
            " \n", 
            " import java.io.IOException;\n"
          ]
        }, 
        {
          "locn": "-25,23 +26,20", 
          "lines": [
            " import org.apache.http.HttpException;\n", 
            " import org.apache.http.HttpRequest;\n", 
            " import org.apache.http.ConnectionClosedException;\n", 
            "-import org.apache.http.nio.ContentDecoder;\n", 
            "-import org.apache.http.nio.ContentEncoder;\n", 
            "-import org.apache.http.nio.NHttpServerConnection;\n", 
            "-import org.apache.http.nio.NHttpServiceHandler;\n", 
            "+import org.apache.http.nio.*;\n", 
            " \n", 
            " /**\n", 
            "- * Decorator class intended to transparently extend an {@link NHttpServiceHandler} \n", 
            "+ * Decorator class intended to transparently extend an {@link NHttpServerEventHandler}\n", 
            "  * with basic event logging capabilities using Commons Logging. \n", 
            "  */\n", 
            "-class LoggingNHttpServiceHandler implements NHttpServiceHandler {\n", 
            "+class LoggingNHttpServiceHandler implements NHttpServerEventHandler {\n", 
            " \n", 
            "     private final Log log;\n", 
            "-    private final NHttpServiceHandler handler;\n", 
            "+    private final NHttpServerEventHandler handler;\n", 
            "     \n", 
            "     public LoggingNHttpServiceHandler(\n", 
            "             final Log log, \n", 
            "-            final NHttpServiceHandler handler) {\n", 
            "+            final NHttpServerEventHandler handler) {\n", 
            "         super();\n", 
            "         if (handler == null) {\n", 
            "             throw new IllegalArgumentException(\"HTTP service handler may not be null\");\n"
          ]
        }, 
        {
          "locn": "-50,7 +48,7", 
          "lines": [
            "         this.log = LogFactory.getLog(handler.getClass());\n", 
            "     }\n", 
            "     \n", 
            "-    public void connected(final NHttpServerConnection conn) {\n", 
            "+    public void connected(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Connected\");\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-64,14 +62,24", 
          "lines": [
            "         this.handler.closed(conn);\n", 
            "     }\n", 
            " \n", 
            "-    public void exception(final NHttpServerConnection conn, final IOException ex) {\n", 
            "+    public void endOfInput(NHttpServerConnection conn) throws IOException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Closed at remote end\");\n", 
            "+        }\n", 
            "+        this.handler.endOfInput(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void exception(NHttpServerConnection conn, Exception ex) {\n", 
            "         if (ex instanceof ConnectionClosedException ||\n", 
            "                 ex.getMessage().contains(\"Connection reset by peer\") ||\n", 
            "                 ex.getMessage().contains(\"forcibly closed\")) {\n", 
            "             if (this.log.isDebugEnabled()) {\n", 
            "                 this.log.debug(\"HTTP connection \" + conn + \": \" + ex.getMessage() +\n", 
            "-                    \" (Probably the keepalive connection was closed)\");\n", 
            "+                        \" (Probably the keepalive connection was closed)\");\n", 
            "             }\n", 
            "+        } else if (ex instanceof HttpException) {\n", 
            "+            this.log.error(\"HTTP connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "+            this.handler.exception(conn, ex);\n", 
            "         } else {\n", 
            "             this.log.error(\"HTTP connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-78,12 +86,7", 
          "lines": [
            "         this.handler.exception(conn, ex);\n", 
            "     }\n", 
            " \n", 
            "-    public void exception(final NHttpServerConnection conn, final HttpException ex) {\n", 
            "-        this.log.error(\"HTTP connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "-        this.handler.exception(conn, ex);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void requestReceived(final NHttpServerConnection conn) {\n", 
            "+    public void requestReceived(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "         HttpRequest request = conn.getHttpRequest();\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": \" + request.getRequestLine());\n"
          ]
        }, 
        {
          "locn": "-91,7 +94,7", 
          "lines": [
            "         this.handler.requestReceived(conn);\n", 
            "     }\n", 
            " \n", 
            "-    public void outputReady(final NHttpServerConnection conn, final ContentEncoder encoder) {\n", 
            "+    public void outputReady(final NHttpServerConnection conn, final ContentEncoder encoder) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Output ready\");\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-101,7 +104,7", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    public void responseReady(final NHttpServerConnection conn) {\n", 
            "+    public void responseReady(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Response ready\");\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-108,7 +111,7", 
          "lines": [
            "         this.handler.responseReady(conn);\n", 
            "     }\n", 
            " \n", 
            "-    public void inputReady(final NHttpServerConnection conn, final ContentDecoder decoder) {\n", 
            "+    public void inputReady(final NHttpServerConnection conn, final ContentDecoder decoder) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Input ready\");\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-118,7 +121,7", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    public void timeout(final NHttpServerConnection conn) {\n", 
            "+    public void timeout(final NHttpServerConnection conn) throws IOException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Timeout\");\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpServiceHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpServiceHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,6 +16,7", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.nhttp;\n", 
            " \n", 
            " import org.apache.axiom.om.OMOutputFormat;\n"
          ]
        }, 
        {
          "locn": "-42,14 +43,15", 
          "lines": [
            " import org.apache.http.*;\n", 
            " import org.apache.http.entity.BasicHttpEntity;\n", 
            " import org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor;\n", 
            "-import org.apache.http.impl.nio.reactor.SSLIOSessionHandler;\n", 
            "+import org.apache.http.impl.nio.reactor.IOReactorConfig;\n", 
            " import org.apache.http.nio.NHttpClientConnection;\n", 
            "-import org.apache.http.nio.NHttpClientHandler;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            " import org.apache.http.nio.params.NIOReactorPNames;\n", 
            " import org.apache.http.nio.reactor.IOEventDispatch;\n", 
            " import org.apache.http.nio.reactor.IOReactorExceptionHandler;\n", 
            " import org.apache.http.nio.reactor.SessionRequest;\n", 
            " import org.apache.http.nio.reactor.SessionRequestCallback;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            " import org.apache.http.params.BasicHttpParams;\n", 
            " import org.apache.http.params.HttpConnectionParams;\n", 
            " import org.apache.http.params.HttpParams;\n"
          ]
        }, 
        {
          "locn": "-79,8 +81,6", 
          "lines": [
            " \n", 
            "     private static final Log log = LogFactory.getLog(HttpCoreNIOSender.class);\n", 
            " \n", 
            "-    /** The Axis2 configuration context */\n", 
            "-    private ConfigurationContext cfgCtx;\n", 
            "     /** The IOReactor */\n", 
            "     private DefaultConnectingIOReactor ioReactor = null;\n", 
            "     /** The client handler */\n"
          ]
        }, 
        {
          "locn": "-89,8 +89,6", 
          "lines": [
            "     private final SessionRequestCallback sessionRequestCallback = getSessionRequestCallback();\n", 
            "     /** The SSL Context to be used */\n", 
            "     private SSLContext sslContext = null;\n", 
            "-    /** The SSL session handler that manages hostname verification etc */\n", 
            "-    private SSLIOSessionHandler sslIOSessionHandler = null;\n", 
            "     /** JMX support */\n", 
            "     private TransportMBeanSupport mbeanSupport;\n", 
            "     /** Metrics collector for the sender */\n"
          ]
        }, 
        {
          "locn": "-118,11 +116,9", 
          "lines": [
            "      * @throws AxisFault thrown on an error\n", 
            "      */\n", 
            "     public void init(ConfigurationContext cfgCtx, TransportOutDescription transportOut) throws AxisFault {\n", 
            "-        this.cfgCtx = cfgCtx;\n", 
            "-\n", 
            "         // is this an SSL Sender?\n", 
            "         sslContext = getSSLContext(transportOut);\n", 
            "-        sslIOSessionHandler = getSSLIOSessionHandler(transportOut);\n", 
            "+        SSLSetupHandler sslSetupHandler = getSSLIOSessionHandler(transportOut);\n", 
            " \n", 
            "         // configure proxy settings - only supports HTTP right now (See SYNAPSE-418)\n", 
            "         if (sslContext == null) {\n"
          ]
        }, 
        {
          "locn": "-166,8 +162,8", 
          "lines": [
            "         try {\n", 
            "             String prefix = (sslContext == null ? \"http\" : \"https\") + \"-Sender I/O dispatcher\";\n", 
            "             ioReactor = new DefaultConnectingIOReactor(\n", 
            "-                NHttpConfiguration.getInstance().getClientIOWorkers(),\n", 
            "-                new NativeThreadFactory(new ThreadGroup(prefix + \" thread group\"), prefix), params);\n", 
            "+                getReactorConfig(),\n", 
            "+                new NativeThreadFactory(new ThreadGroup(prefix + \" thread group\"), prefix));\n", 
            "             ioReactor.setExceptionHandler(new IOReactorExceptionHandler() {\n", 
            "                 public boolean handle(IOException ioException) {\n", 
            "                     log.warn(\"System may be unstable: IOReactor encountered a checked exception : \" +\n"
          ]
        }, 
        {
          "locn": "-188,7 +184,7", 
          "lines": [
            "         metrics = new NhttpMetricsCollector(false, transportOut.getName());\n", 
            "         handler = new ClientHandler(cfgCtx, params, metrics);\n", 
            "         final IOEventDispatch ioEventDispatch = getEventDispatch(\n", 
            "-            handler, sslContext, sslIOSessionHandler, params, transportOut);\n", 
            "+            handler, sslContext, sslSetupHandler, params, transportOut);\n", 
            " \n", 
            "         // start the Sender in a new seperate thread\n", 
            "         Thread t = new Thread(new Runnable() {\n"
          ]
        }, 
        {
          "locn": "-225,8 +221,8", 
          "lines": [
            "      * @return an IOEventDispatch instance\n", 
            "      * @throws AxisFault on error\n", 
            "      */\n", 
            "-    protected IOEventDispatch getEventDispatch(NHttpClientHandler handler, SSLContext sslContext,\n", 
            "-        SSLIOSessionHandler sslIOSessionHandler, HttpParams params,\n", 
            "+    protected IOEventDispatch getEventDispatch(NHttpClientEventHandler handler, SSLContext sslContext,\n", 
            "+        SSLSetupHandler sslIOSessionHandler, HttpParams params,\n", 
            "         TransportOutDescription trpOut) throws AxisFault {\n", 
            " \n", 
            "         return new PlainClientIOEventDispatch(handler, params);\n"
          ]
        }, 
        {
          "locn": "-248,7 +244,7", 
          "lines": [
            "      * @return always null\n", 
            "      * @throws AxisFault on error\n", 
            "      */\n", 
            "-    protected SSLIOSessionHandler getSSLIOSessionHandler(TransportOutDescription transportOut)\n", 
            "+    protected SSLSetupHandler getSSLIOSessionHandler(TransportOutDescription transportOut)\n", 
            "         throws AxisFault {\n", 
            "         return null;\n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-279,6 +275,21", 
          "lines": [
            "         return params;\n", 
            "     }\n", 
            " \n", 
            "+    private IOReactorConfig getReactorConfig() {\n", 
            "+        IOReactorConfig config = new IOReactorConfig();\n", 
            "+        NHttpConfiguration cfg = NHttpConfiguration.getInstance();\n", 
            "+        config.setIoThreadCount(cfg.getClientIOWorkers());\n", 
            "+        config.setSoTimeout(cfg.getProperty(NhttpConstants.SO_TIMEOUT_SENDER, 60000));\n", 
            "+        config.setConnectTimeout(cfg.getProperty(HttpConnectionParams.CONNECTION_TIMEOUT, 10000));\n", 
            "+        config.setSndBufSize(cfg.getProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));\n", 
            "+        config.setRcvBufSize(cfg.getProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));\n", 
            "+        config.setTcpNoDelay(cfg.getProperty(HttpConnectionParams.TCP_NODELAY, 1) == 1);\n", 
            "+        if (cfg.getBooleanValue(NIOReactorPNames.INTEREST_OPS_QUEUEING, false)) {\n", 
            "+            config.setInterestOpQueued(true);\n", 
            "+        }\n", 
            "+        return config;\n", 
            "+    }\n", 
            "+\n", 
            "     /**\n", 
            "      * transport sender invocation from Axis2 core\n", 
            "      * @param msgContext message to be sent\n"
          ]
        }, 
        {
          "locn": "-441,11 +452,7", 
          "lines": [
            "                 }\n", 
            "             }\n", 
            " \n", 
            "-            try {\n", 
            "-                axis2Req.streamMessageContents();\n", 
            "-            } catch (AxisFault af) {\n", 
            "-                throw af;\n", 
            "-            }\n", 
            "+            axis2Req.streamMessageContents();\n", 
            " \n", 
            "         } catch (MalformedURLException e) {\n", 
            "             handleException(\"Malformed destination EPR : \" + epr.getAddress(), e);\n"
          ]
        }, 
        {
          "locn": "-774,7 +781,7", 
          "lines": [
            "             public void failed(SessionRequest request) {\n", 
            "                 handleError(request, NhttpConstants.CONNECTION_FAILED, \n", 
            "                     \"Connection refused or failed for : \" + request.getRemoteAddress() + \", \" +\n", 
            "-                    \"IO Exception occured : \" + request.getException().getMessage());\n", 
            "+                    \"IO Exception occurred : \" + request.getException().getMessage());\n", 
            "             }\n", 
            " \n", 
            "             public void timeout(SessionRequest request) {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,8", 
          "lines": [
            "+http.socket.timeout=60000\n", 
            "+http.connection.timeout=0\n", 
            "+http.socket.buffer-size=8096\n", 
            "+http.tcp.nodelay=1\n", 
            "+http.nio.interest-ops-queueing=false\n", 
            "+\n", 
            "+# This property is crucial for automated tests\n", 
            "+http.socket.reuseaddr=true\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/test/resources/nhttp.properties", 
      "from": "java/modules/transports/core/nhttp/src/test/resources/nhttp.properties"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,8", 
          "lines": [
            "+http.socket.timeout=60000\n", 
            "+http.connection.timeout=0\n", 
            "+http.socket.buffer-size=8096\n", 
            "+http.tcp.nodelay=1\n", 
            "+http.nio.interest-ops-queueing=false\n", 
            "+\n", 
            "+# This property is crucial for automated tests\n", 
            "+http.socket.reuseaddr=true\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/nhttp.properties", 
      "from": "java/modules/integration/src/test/resources/nhttp.properties"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,41 +16,49", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.nhttp;\n", 
            " \n", 
            " import javax.net.ssl.SSLContext;\n", 
            " \n", 
            "-import org.apache.http.impl.nio.reactor.SSLIOSessionHandler;\n", 
            "-import org.apache.http.nio.NHttpServerIOTarget;\n", 
            "-import org.apache.http.nio.NHttpServiceHandler;\n", 
            "+import org.apache.http.HttpRequestFactory;\n", 
            "+import org.apache.http.impl.nio.DefaultHttpServerIODispatch;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "+import org.apache.http.impl.nio.SSLNHttpServerConnectionFactory;\n", 
            "+import org.apache.http.nio.NHttpServerEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "+import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " \n", 
            "-public class SSLServerIOEventDispatch \n", 
            "-    extends org.apache.http.impl.nio.SSLServerIOEventDispatch {\n", 
            "+public class SSLServerIOEventDispatch\n", 
            "+        extends DefaultHttpServerIODispatch {\n", 
            " \n", 
            "     public SSLServerIOEventDispatch(\n", 
            "-            final NHttpServiceHandler handler,\n", 
            "+            final NHttpServerEventHandler handler,\n", 
            "             final SSLContext sslcontext,\n", 
            "-            final SSLIOSessionHandler sslHandler,\n", 
            "+            final SSLSetupHandler sslHandler,\n", 
            "             final HttpParams params) {\n", 
            "-        super(LoggingUtils.decorate(handler), sslcontext, sslHandler, params);\n", 
            "+        super(LoggingUtils.decorate(handler), new SSLSourceConnectionFactory(sslcontext, sslHandler, params));\n", 
            "     }\n", 
            "-    \n", 
            "-    public SSLServerIOEventDispatch(\n", 
            "-            final NHttpServiceHandler handler,\n", 
            "-            final SSLContext sslcontext,\n", 
            "-            final HttpParams params) {\n", 
            "-        this(handler, sslcontext, null, params);\n", 
            "+\n", 
            "+    private static class SSLSourceConnectionFactory extends SSLNHttpServerConnectionFactory {\n", 
            "+\n", 
            "+        public SSLSourceConnectionFactory(SSLContext sslcontext, SSLSetupHandler sslHandler, HttpParams params) {\n", 
            "+            super(sslcontext, sslHandler, params);\n", 
            "+        }\n", 
            "+\n", 
            "+        @Override\n", 
            "+        protected DefaultNHttpServerConnection createConnection(IOSession session,\n", 
            "+                                                                HttpRequestFactory requestFactory,\n", 
            "+                                                                ByteBufferAllocator allocator,\n", 
            "+                                                                HttpParams params) {\n", 
            "+            return LoggingUtils.createServerConnection(\n", 
            "+                    session,\n", 
            "+                    requestFactory,\n", 
            "+                    allocator,\n", 
            "+                    params);\n", 
            "+        }\n", 
            "     }\n", 
            "     \n", 
            "-    @Override\n", 
            "-    protected NHttpServerIOTarget createConnection(IOSession session) {\n", 
            "-        return LoggingUtils.createServerConnection(\n", 
            "-                session, \n", 
            "-                createHttpRequestFactory(), \n", 
            "-                createByteBufferAllocator(), \n", 
            "-                this.params);\n", 
            "-    }\n", 
            "-    \n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/SSLServerIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/SSLServerIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,8", 
          "lines": [
            "+http.socket.timeout=60000\n", 
            "+http.connection.timeout=0\n", 
            "+http.socket.buffer-size=8096\n", 
            "+http.tcp.nodelay=true\n", 
            "+http.nio.interest-ops-queueing=false\n", 
            "+\n", 
            "+# This property is crucial for automated tests\n", 
            "+http.socket.reuseaddr=true\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/passthru-http.properties", 
      "from": "java/modules/integration/src/test/resources/passthru-http.properties"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,6 +16,7", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.samples.framework.clients;\n", 
            " \n", 
            " import org.apache.axiom.om.*;\n"
          ]
        }, 
        {
          "locn": "-73,7 +74,9", 
          "lines": [
            "     private void init(String addUrl, String trpUrl, String prxUrl,\n", 
            "                       String policyKey, long timeout) throws Exception {\n", 
            " \n", 
            "-        log.info(\"Initializing sample Axis2 client\");\n", 
            "+        if (log.isDebugEnabled()) {\n", 
            "+            log.debug(\"Initializing sample Axis2 client\");\n", 
            "+        }\n", 
            " \n", 
            "         configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(\n", 
            "                     clientConfig.getClientRepo(), clientConfig.getAxis2Xml());\n"
          ]
        }, 
        {
          "locn": "-118,8 +121,11", 
          "lines": [
            " \n", 
            "     private void terminate() {\n", 
            "         if (serviceClient != null) {\n", 
            "+            if (log.isDebugEnabled()) {\n", 
            "+                log.debug(\"cleaning up client\");\n", 
            "+            }\n", 
            "             try {\n", 
            "-                log.info(\"cleaning up client\");\n", 
            "+                serviceClient.cleanupTransport();\n", 
            "                 serviceClient.cleanup();\n", 
            "                 configContext.terminate();\n", 
            "             } catch (AxisFault axisFault) {\n"
          ]
        }, 
        {
          "locn": "-155,8 +161,9", 
          "lines": [
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error invoking service\", e);\n", 
            "             clientResult.setException(e);\n", 
            "+        } finally {\n", 
            "+            terminate();\n", 
            "         }\n", 
            "-        terminate();\n", 
            "         return clientResult;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-187,8 +194,9", 
          "lines": [
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error invoking service\", e);\n", 
            "             clientResult.setException(e);\n", 
            "+        } finally {\n", 
            "+            terminate();\n", 
            "         }\n", 
            "-        terminate();\n", 
            "         return clientResult;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-208,8 +216,9", 
          "lines": [
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error invoking service\", e);\n", 
            "             clientResult.setException(e);\n", 
            "+        } finally {\n", 
            "+            terminate();\n", 
            "         }\n", 
            "-        terminate();\n", 
            "         return clientResult;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-232,8 +241,9", 
          "lines": [
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error invoking service\", e);\n", 
            "             clientResult.setException(e);\n", 
            "+        } finally {\n", 
            "+            terminate();\n", 
            "         }\n", 
            "-        terminate();\n", 
            "         return clientResult;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-254,8 +264,9", 
          "lines": [
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error invoking service\", e);\n", 
            "             clientResult.setException(e);\n", 
            "+        } finally {\n", 
            "+            terminate();\n", 
            "         }\n", 
            "-        terminate();\n", 
            "         return clientResult;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-286,8 +297,9", 
          "lines": [
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error invoking service\", e);\n", 
            "             clientResult.setException(e);\n", 
            "+        } finally {\n", 
            "+            terminate();\n", 
            "         }\n", 
            "-        terminate();\n", 
            "         return clientResult;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-356,8 +368,9", 
          "lines": [
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error invoking service\", e);\n", 
            "             clientResult.setException(e);\n", 
            "+        } finally {\n", 
            "+            terminate();\n", 
            "         }\n", 
            "-        terminate();\n", 
            "         return clientResult;\n", 
            "     }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteSampleClient.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteSampleClient.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,10 +26,10", 
          "lines": [
            " import org.apache.axis2.transport.base.ParamUtils;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.impl.nio.reactor.SSLSetupHandler;\n", 
            "-import org.apache.http.nio.NHttpClientHandler;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOEventDispatch;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " \n", 
            " import javax.net.ssl.*;\n"
          ]
        }, 
        {
          "locn": "-46,21 +46,17", 
          "lines": [
            " import java.util.Iterator;\n", 
            " import java.util.Map;\n", 
            " \n", 
            "+public class PassThroughHttpSSLSender extends PassThroughHttpSender {\n", 
            " \n", 
            "-public class PassThroughHttpSSLSender extends PassThroughHttpSender {\n", 
            "     private Log log = LogFactory.getLog(PassThroughHttpSSLSender.class);\n", 
            " \n", 
            "-    protected IOEventDispatch getEventDispatch(NHttpClientHandler handler,\n", 
            "+    protected IOEventDispatch getEventDispatch(NHttpClientEventHandler handler,\n", 
            "                                                SSLContext sslContext,\n", 
            "                                                SSLSetupHandler sslIOSessionHandler,\n", 
            "                                                HttpParams params,\n", 
            "-                                               TransportOutDescription transportOut)\n", 
            "-            throws AxisFault {\n", 
            "+                                               TransportOutDescription transportOut) throws AxisFault {\n", 
            " \n", 
            "-        SSLTargetIOEventDispatch dispatch = new SSLTargetIOEventDispatch(handler, sslContext,\n", 
            "-                sslIOSessionHandler, params);\n", 
            "-        dispatch.setContextMap(getCustomSSLContexts(transportOut));\n", 
            "-        return dispatch;\n", 
            "+        return new SSLTargetIOEventDispatch(handler, sslContext, sslIOSessionHandler, params);\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-288,7 +284,7", 
          "lines": [
            " \n", 
            "         return new SSLSetupHandler() {\n", 
            " \n", 
            "-            public void initalize(SSLEngine sslengine, HttpParams params) {\n", 
            "+            public void initalize(SSLEngine sslengine) {\n", 
            "             }\n", 
            " \n", 
            "             public void verify(IOSession ioSession, SSLSession session) throws SSLException {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-18,35 +18,45", 
          "lines": [
            "  */\n", 
            " package org.apache.synapse.transport.passthru;\n", 
            " \n", 
            "-import org.apache.http.impl.nio.reactor.SSLSetupHandler;\n", 
            "-import org.apache.http.impl.nio.ssl.SSLServerIOEventDispatch;\n", 
            "-import org.apache.http.nio.NHttpServerIOTarget;\n", 
            "-import org.apache.http.nio.NHttpServiceHandler;\n", 
            "+import org.apache.http.HttpRequestFactory;\n", 
            "+import org.apache.http.impl.nio.DefaultHttpServerIODispatch;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "+import org.apache.http.impl.nio.SSLNHttpServerConnectionFactory;\n", 
            "+import org.apache.http.nio.NHttpServerEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "+import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " import org.apache.synapse.transport.passthru.logging.LoggingUtils;\n", 
            " \n", 
            " import javax.net.ssl.SSLContext;\n", 
            " \n", 
            "-public class SSLSourceIOEventDispatch extends SSLServerIOEventDispatch {\n", 
            "+public class SSLSourceIOEventDispatch extends DefaultHttpServerIODispatch {\n", 
            " \n", 
            "-    private HttpParams params = null;\n", 
            "-\n", 
            "-    public SSLSourceIOEventDispatch(NHttpServiceHandler handler,\n", 
            "+    public SSLSourceIOEventDispatch(NHttpServerEventHandler handler,\n", 
            "                                     SSLContext sslcontext,\n", 
            "                                     SSLSetupHandler sslHandler,\n", 
            "                                     HttpParams params) {\n", 
            "-        super(handler, sslcontext, sslHandler, params);\n", 
            "-        this.params = params;\n", 
            "+        super(handler, new SSLSourceConnectionFactory(sslcontext, sslHandler, params));\n", 
            "     }\n", 
            " \n", 
            "-    @Override\n", 
            "-    protected NHttpServerIOTarget createConnection(IOSession session) {\n", 
            "-        session = LoggingUtils.decorate(session, \"sslserver\");\n", 
            "-        return LoggingUtils.createServerConnection(\n", 
            "-                session,\n", 
            "-                createHttpRequestFactory(),\n", 
            "-                createByteBufferAllocator(),\n", 
            "-                this.params);\n", 
            "+    private static class SSLSourceConnectionFactory extends SSLNHttpServerConnectionFactory {\n", 
            "+\n", 
            "+        public SSLSourceConnectionFactory(SSLContext sslcontext, SSLSetupHandler sslHandler, HttpParams params) {\n", 
            "+            super(sslcontext, sslHandler, params);\n", 
            "+        }\n", 
            "+\n", 
            "+        @Override\n", 
            "+        protected DefaultNHttpServerConnection createConnection(IOSession session,\n", 
            "+                                                                HttpRequestFactory requestFactory,\n", 
            "+                                                                ByteBufferAllocator allocator,\n", 
            "+                                                                HttpParams params) {\n", 
            "+            session = LoggingUtils.decorate(session, \"sslserver\");\n", 
            "+            return LoggingUtils.createServerConnection(\n", 
            "+                    session,\n", 
            "+                    requestFactory,\n", 
            "+                    allocator,\n", 
            "+                    params);\n", 
            "+        }\n", 
            "     }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SSLSourceIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SSLSourceIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-43,7 +43,7", 
          "lines": [
            "  * receives events for a particular connection. These events give information\n", 
            "  * about the message and its various states.\n", 
            "  */\n", 
            "-public class SourceHandler implements NHttpServiceHandler {\n", 
            "+public class SourceHandler implements NHttpServerEventHandler {\n", 
            " \n", 
            "     private static final Log log = LogFactory.getLog(SourceHandler.class);\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-262,7 +262,37", 
          "lines": [
            "         } \n", 
            "     }\n", 
            " \n", 
            "-    public void exception(NHttpServerConnection conn, IOException e) {        \n", 
            "+    public void endOfInput(NHttpServerConnection conn) throws IOException {\n", 
            "+        closed(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void exception(NHttpServerConnection conn, Exception e) {\n", 
            "+        if (e instanceof HttpException) {\n", 
            "+            exception(conn, (HttpException) e);\n", 
            "+        } else if (e instanceof IOException) {\n", 
            "+            exception(conn, (IOException) e);\n", 
            "+        } else {\n", 
            "+            metrics.incrementFaultsReceiving();\n", 
            "+\n", 
            "+            ProtocolState state = SourceContext.getState(conn);\n", 
            "+            if (state == ProtocolState.REQUEST_BODY ||\n", 
            "+                    state == ProtocolState.REQUEST_HEAD) {\n", 
            "+                informReaderError(conn);\n", 
            "+            } else if (state == ProtocolState.RESPONSE_BODY ||\n", 
            "+                    state == ProtocolState.RESPONSE_HEAD) {\n", 
            "+                informWriterError(conn);\n", 
            "+            } else if (state == ProtocolState.REQUEST_DONE) {\n", 
            "+                informWriterError(conn);\n", 
            "+            } else if (state == ProtocolState.RESPONSE_DONE) {\n", 
            "+                informWriterError(conn);\n", 
            "+            }\n", 
            "+\n", 
            "+            SourceContext.updateState(conn, ProtocolState.CLOSED);\n", 
            "+            sourceConfiguration.getSourceConnections().shutDownConnection(conn);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void exception(NHttpServerConnection conn, IOException e) {\n", 
            "         logIOException(e);\n", 
            " \n", 
            "         metrics.incrementFaultsReceiving();\n"
          ]
        }, 
        {
          "locn": "-312,7 +342,7", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    public void exception(NHttpServerConnection conn, HttpException e) {        \n", 
            "+    public void exception(NHttpServerConnection conn, HttpException e) {\n", 
            "         try {\n", 
            "             if (conn.isResponseSubmitted()) {\n", 
            "                 sourceConfiguration.getSourceConnections().shutDownConnection(conn);\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-19,10 +19,13", 
          "lines": [
            " \n", 
            " package org.apache.synapse.transport.passthru;\n", 
            " \n", 
            "-import org.apache.http.impl.nio.DefaultClientIOEventDispatch;\n", 
            "-import org.apache.http.nio.NHttpClientHandler;\n", 
            "-import org.apache.http.nio.NHttpClientIOTarget;\n", 
            "+import org.apache.http.HttpResponseFactory;\n", 
            "+import org.apache.http.impl.nio.DefaultHttpClientIODispatch;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpClientConnectionFactory;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " import org.apache.synapse.transport.passthru.logging.LoggingUtils;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-29,19 +32,30", 
          "lines": [
            " /**\n", 
            "  * This is a factory for creating the logging sessions or non-logging sessions.\n", 
            "  */\n", 
            "-public class TargetIOEventDispatch extends DefaultClientIOEventDispatch {\n", 
            "+public class TargetIOEventDispatch extends DefaultHttpClientIODispatch {\n", 
            " \n", 
            "-    public TargetIOEventDispatch(final NHttpClientHandler handler, final HttpParams params) {\n", 
            "-        super(LoggingUtils.decorate(handler), params);\n", 
            "+    public TargetIOEventDispatch(final NHttpClientEventHandler handler, final HttpParams params) {\n", 
            "+        super(LoggingUtils.decorate(handler), new TargetConnectionFactory(params));\n", 
            "     }\n", 
            " \n", 
            "-    @Override\n", 
            "-    protected NHttpClientIOTarget createConnection(IOSession session) {\n", 
            "-        session = LoggingUtils.decorate(session, \"client\");\n", 
            "-        return LoggingUtils.createClientConnection(\n", 
            "-                session,\n", 
            "-                createHttpResponseFactory(),\n", 
            "-                this.allocator,\n", 
            "-                this.params);\n", 
            "+    private static class TargetConnectionFactory extends DefaultNHttpClientConnectionFactory {\n", 
            "+\n", 
            "+        public TargetConnectionFactory(HttpParams params) {\n", 
            "+            super(params);\n", 
            "+        }\n", 
            "+\n", 
            "+        @Override\n", 
            "+        protected DefaultNHttpClientConnection createConnection(IOSession session,\n", 
            "+                                                                HttpResponseFactory responseFactory,\n", 
            "+                                                                ByteBufferAllocator allocator,\n", 
            "+                                                                HttpParams params) {\n", 
            "+            session = LoggingUtils.decorate(session, \"client\");\n", 
            "+            return LoggingUtils.createClientConnection(\n", 
            "+                    session,\n", 
            "+                    responseFactory,\n", 
            "+                    allocator,\n", 
            "+                    params);\n", 
            "+        }\n", 
            "     }\n", 
            "+\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-53,7 +53,7", 
          "lines": [
            "     private ConfigurationContext cfgCtx = null;\n", 
            " \n", 
            "     /** the response message context that would be created */\n", 
            "-    private org.apache.axis2.context.MessageContext responseMsgCtx = null;\n", 
            "+    private MessageContext responseMsgCtx = null;\n", 
            " \n", 
            "     /** the HttpResponse received */\n", 
            "     private TargetResponse response = null;\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ClientWorker.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ClientWorker.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-43,12 +43,12", 
          "lines": [
            " import org.apache.http.HttpException;\n", 
            " import org.apache.http.HttpStatus;\n", 
            " import org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor;\n", 
            "-import org.apache.http.impl.nio.reactor.SSLSetupHandler;\n", 
            "-import org.apache.http.nio.NHttpClientHandler;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            " import org.apache.http.nio.NHttpServerConnection;\n", 
            " import org.apache.http.nio.reactor.IOEventDispatch;\n", 
            " import org.apache.http.nio.reactor.IOReactorException;\n", 
            " import org.apache.http.nio.reactor.IOReactorExceptionHandler;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " import org.apache.synapse.transport.nhttp.NhttpConstants;\n", 
            " import org.apache.synapse.transport.nhttp.util.MessageFormatterDecoratorFactory;\n"
          ]
        }, 
        {
          "locn": "-114,8 +114,11", 
          "lines": [
            " \n", 
            "     public void init(ConfigurationContext configurationContext,\n", 
            "                      TransportOutDescription transportOutDescription) throws AxisFault {\n", 
            "-        log.info(\"Initializing Pass-through HTTP/S Sender...\");\n", 
            " \n", 
            "+        if (log.isDebugEnabled()) {\n", 
            "+            log.debug(\"Initializing Pass-through HTTP/S Sender...\");\n", 
            "+        }\n", 
            "+\n", 
            "         // is this an SSL Sender?\n", 
            "         SSLContext sslContext = getSSLContext(transportOutDescription);\n", 
            "         SSLSetupHandler sslSetupHandler = getSSLSetupHandler(transportOutDescription);\n"
          ]
        }, 
        {
          "locn": "-175,9 +178,8", 
          "lines": [
            "             String prefix = namePrefix + \"-Sender I/O dispatcher\";\n", 
            " \n", 
            "             ioReactor = new DefaultConnectingIOReactor(\n", 
            "-                            targetConfiguration.getIOThreadsPerReactor(),\n", 
            "-                            new NativeThreadFactory(new ThreadGroup(prefix + \" Thread Group\"), prefix),\n", 
            "-                            targetConfiguration.getHttpParameters());\n", 
            "+                            targetConfiguration.getReactorConfig(),\n", 
            "+                            new NativeThreadFactory(new ThreadGroup(prefix + \" Thread Group\"), prefix));\n", 
            " \n", 
            "             ioReactor.setExceptionHandler(new IOReactorExceptionHandler() {\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-231,7 +233,7", 
          "lines": [
            " \n", 
            "         state = BaseConstants.STARTED;\n", 
            " \n", 
            "-        log.info(\"Pass-through \" + namePrefix + \" Sender started...\");\n", 
            "+        log.info(\"Pass-through \" + namePrefix + \" sender started...\");\n", 
            "     }\n", 
            " \n", 
            "     public void cleanup(org.apache.axis2.context.MessageContext messageContext) throws AxisFault {\n"
          ]
        }, 
        {
          "locn": "-247,7 +249,7", 
          "lines": [
            "     }\n", 
            " \n", 
            " \n", 
            "-    public InvocationResponse invoke(org.apache.axis2.context.MessageContext msgContext) throws AxisFault {\n", 
            "+    public InvocationResponse invoke(MessageContext msgContext) throws AxisFault {\n", 
            "         // remove unwanted HTTP headers (if any from the current message)\n", 
            "         PassThroughTransportUtils.removeUnwantedHeaders(msgContext,\n", 
            "                 targetConfiguration.isPreserveServerHeader(),\n"
          ]
        }, 
        {
          "locn": "-266,7 +268,8", 
          "lines": [
            "                     Pipe pipe = new Pipe(targetConfiguration.getBufferFactory().getBuffer(),\n", 
            "                             \"Test\", targetConfiguration);\n", 
            "                     msgContext.setProperty(PassThroughConstants.PASS_THROUGH_PIPE, pipe);\n", 
            "-                    msgContext.setProperty(PassThroughConstants.MESSAGE_BUILDER_INVOKED, Boolean.TRUE);\n", 
            "+                    msgContext.setProperty(PassThroughConstants.MESSAGE_BUILDER_INVOKED,\n", 
            "+                            Boolean.TRUE);\n", 
            "                 }\n", 
            "                 try {\n", 
            "                     URL url = new URL(epr.getAddress());\n"
          ]
        }, 
        {
          "locn": "-367,7 +370,7", 
          "lines": [
            " \t\t\t\t\ttry {\n", 
            " \t\t\t\t\t\tmsgContext.wait();\n", 
            " \t\t\t\t\t} catch (InterruptedException e) {\n", 
            "-\t\t\t\t\t\te.printStackTrace();\n", 
            "+\t\t\t\t\t\tlog.warn(\"Interrupted while waiting for message serialization to complete\", e);\n", 
            " \t\t\t\t\t}\n", 
            " \t\t\t\t}\n", 
            " \t\t\t}\n"
          ]
        }, 
        {
          "locn": "-378,39 +381,46", 
          "lines": [
            " \n", 
            " \t\t\tOutputStream out = (OutputStream) msgContext.getProperty(\"GET_ME_OUT\");\n", 
            " \t\t\tif (out != null) {\n", 
            "-\t\t\t\tString disableChunking = (String) msgContext.getProperty(PassThroughConstants.DISABLE_CHUNKING);\n", 
            "-\t\t\t\tString forceHttp10 = (String) msgContext.getProperty(PassThroughConstants.FORCE_HTTP_1_0);\n", 
            "+\t\t\t\tString disableChunking = (String) msgContext.getProperty(\n", 
            "+                        PassThroughConstants.DISABLE_CHUNKING);\n", 
            "+\t\t\t\tString forceHttp10 = (String) msgContext.getProperty(\n", 
            "+                        PassThroughConstants.FORCE_HTTP_1_0);\n", 
            " \t\t\t\tPipe pipe = (Pipe) msgContext.getProperty(PassThroughConstants.PASS_THROUGH_PIPE);\n", 
            " \t\t\t\t\n", 
            " \t\t\t\tif(\"true\".equals(disableChunking) || \"true\".equals(forceHttp10) ){\n", 
            " \t\t\t\t\tByteArrayOutputStream _out = new ByteArrayOutputStream();\n", 
            "-\t\t\t\t\tMessageFormatter formatter =  MessageProcessorSelector.getMessageFormatter(msgContext);\n", 
            "+\t\t\t\t\tMessageFormatter formatter =  MessageProcessorSelector.getMessageFormatter(\n", 
            "+                            msgContext);\n", 
            " \t\t\t\t\tOMOutputFormat format = PassThroughTransportUtils.getOMOutputFormat(msgContext);\n", 
            " \t\t\t\t\tformatter.writeTo(msgContext, format, _out, false);\n", 
            " \t\t\t\t\ttry {\n", 
            "                         long messageSize = setStreamAsTempData(formatter,msgContext,format);\n", 
            "-                        msgContext.setProperty(PassThroughConstants.PASS_THROUGH_MESSAGE_LENGTH,messageSize);\n", 
            "+                        msgContext.setProperty(\n", 
            "+                                PassThroughConstants.PASS_THROUGH_MESSAGE_LENGTH, messageSize);\n", 
            "                         formatter.writeTo(msgContext, format, out, false);\n", 
            "                     } catch (IOException e) {\n", 
            "                     \t handleException(\"IO error while building message\", e);\n", 
            "                     }\n", 
            "                 \tpipe.setSerializationComplete(true);\n", 
            "-\t\t\t\t}else {\n", 
            "+\t\t\t\t} else {\n", 
            " \t\t\t\t\t\n", 
            " \t\t\t\t\tif ((disableChunking == null || !\"true\".equals(disableChunking)) ||\n", 
            " \t\t\t\t\t    (forceHttp10 == null || !\"true\".equals(forceHttp10))) {\n", 
            "-\t\t\t\t\t\tMessageFormatter formatter =  MessageProcessorSelector.getMessageFormatter(msgContext);\n", 
            "-\t\t\t\t\t\tOMOutputFormat format = PassThroughTransportUtils.getOMOutputFormat(msgContext);\n", 
            "+\t\t\t\t\t\tMessageFormatter formatter =  MessageProcessorSelector.getMessageFormatter(\n", 
            "+                                msgContext);\n", 
            "+\t\t\t\t\t\tOMOutputFormat format = PassThroughTransportUtils.getOMOutputFormat(\n", 
            "+                                msgContext);\n", 
            " \t\t\t\t\t\tformatter.writeTo(msgContext, format, out, false);\n", 
            " \t\t\t\t\t}\n", 
            " \t\t\t\t\t\n", 
            "-\t\t\t\t\tif ((msgContext.getProperty(PassThroughConstants.REST_GET_DELETE_INVOKE) != null &&\n", 
            "-\t\t\t\t\t\t    (Boolean) msgContext.getProperty(PassThroughConstants.REST_GET_DELETE_INVOKE))) {\n", 
            "+\t\t\t\t\tif ((msgContext.getProperty(\n", 
            "+                            PassThroughConstants.REST_GET_DELETE_INVOKE) != null &&\n", 
            "+\t\t\t\t\t\t    (Boolean) msgContext.getProperty(\n", 
            "+                                    PassThroughConstants.REST_GET_DELETE_INVOKE))) {\n", 
            " \t\t\t\t\t\t\tpipe.setSerializationCompleteWithoutData(true);\n", 
            "-\t\t\t\t\t}else{\n", 
            "+\t\t\t\t\t} else {\n", 
            " \t\t\t\t\t\tpipe.setSerializationComplete(true);\n", 
            " \t\t\t\t\t}\n", 
            "-\t\t\t\n", 
            " \t\t\t\t}\n", 
            " \t\t\t}\n", 
            " \t\t}\n"
          ]
        }, 
        {
          "locn": "-428,10 +438,11", 
          "lines": [
            "      * @return an IOEventDispatch instance\n", 
            "      * @throws AxisFault on error\n", 
            "      */\n", 
            "-    protected IOEventDispatch getEventDispatch(NHttpClientHandler handler,\n", 
            "+    protected IOEventDispatch getEventDispatch(NHttpClientEventHandler handler,\n", 
            "                                                SSLContext sslContext,\n", 
            "                                                SSLSetupHandler sslIOSessionHandler,\n", 
            "-                                               HttpParams params, TransportOutDescription trpOut) throws AxisFault {\n", 
            "+                                               HttpParams params,\n", 
            "+                                               TransportOutDescription trpOut) throws AxisFault {\n", 
            " \n", 
            "         return new TargetIOEventDispatch(handler, params);\n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-467,7 +478,8", 
          "lines": [
            "         NHttpServerConnection conn = (NHttpServerConnection) msgContext.getProperty(\n", 
            "                 PassThroughConstants.PASS_THROUGH_SOURCE_CONNECTION);\n", 
            "         if (conn == null) {\n", 
            "-            ServerWorker serverWorker = (ServerWorker) msgContext.getProperty(Constants.OUT_TRANSPORT_INFO);\n", 
            "+            ServerWorker serverWorker = (ServerWorker) msgContext.getProperty(\n", 
            "+                    Constants.OUT_TRANSPORT_INFO);\n", 
            "             if (serverWorker != null) {\n", 
            "                 MessageContext requestContext = serverWorker.getRequestContext();\n", 
            "                 conn = (NHttpServerConnection) requestContext.getProperty(\n"
          ]
        }, 
        {
          "locn": "-520,7 +532,8", 
          "lines": [
            "                 if (msgContext.isPropertyTrue(NhttpConstants.SC_ACCEPTED)) {\n", 
            "                     out.write(new byte[0]);\n", 
            "                 } else {\n", 
            "-                    MessageFormatter formatter = MessageProcessorSelector.getMessageFormatter(msgContext);\n", 
            "+                    MessageFormatter formatter = MessageProcessorSelector.getMessageFormatter(\n", 
            "+                            msgContext);\n", 
            "                     OMOutputFormat format = PassThroughTransportUtils.getOMOutputFormat(msgContext);\n", 
            "                     formatter.writeTo(msgContext, format, out, false);\n", 
            "                 }\n"
          ]
        }, 
        {
          "locn": "-532,11 +545,11", 
          "lines": [
            "             // nothing much to do as we have started the response already\n", 
            "             if (errorCode != null) {\n", 
            "                 if (log.isDebugEnabled()) {\n", 
            "-                    log.warn(\"A Source connection is closed because of an \" +\n", 
            "+                    log.warn(\"A source connection is closed because of an \" +\n", 
            "                             \"error in target: \" + conn);\n", 
            "                 }\n", 
            "             } else {\n", 
            "-                log.debug(\"A Source Connection is closed, because source handler \" +\n", 
            "+                log.debug(\"A source connection is closed, because source handler \" +\n", 
            "                         \"is already in the process of writing a response while \" +\n", 
            "                         \"another response is submitted: \" + conn);\n", 
            "             }\n"
          ]
        }, 
        {
          "locn": "-570,7 +583,7", 
          "lines": [
            "             state = BaseConstants.STOPPED;\n", 
            "             log.info(\"Sender shutdown in : \" + (System.currentTimeMillis() - start) / 1000 + \"s\");\n", 
            "         } catch (IOException e) {\n", 
            "-            handleException(\"Error shutting down the IOReactor for maintenence\", e);\n", 
            "+            handleException(\"Error shutting down the IOReactor for maintenance\", e);\n", 
            "         }\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-608,9 +621,9", 
          "lines": [
            "         return false;\n", 
            "     }\n", 
            " \n", 
            "-    private void handleException(String s, Exception e) throws AxisFault {\n", 
            "-        log.error(s, e);\n", 
            "-        throw new AxisFault(s, e);\n", 
            "+    private void handleException(String msg, Exception e) throws AxisFault {\n", 
            "+        log.error(msg, e);\n", 
            "+        throw new AxisFault(msg, e);\n", 
            "     }\n", 
            " \n", 
            "     private void handleException(String msg) throws AxisFault {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-19,10 +19,14", 
          "lines": [
            " \n", 
            " package org.apache.synapse.transport.passthru;\n", 
            " \n", 
            "-import org.apache.http.impl.nio.DefaultServerIOEventDispatch;\n", 
            "-import org.apache.http.nio.NHttpServiceHandler;\n", 
            "-import org.apache.http.nio.NHttpServerIOTarget;\n", 
            "+import org.apache.http.HttpRequestFactory;\n", 
            "+import org.apache.http.impl.nio.DefaultHttpServerIODispatch;\n", 
            "+\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpServerConnectionFactory;\n", 
            "+import org.apache.http.nio.NHttpServerEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " import org.apache.synapse.transport.passthru.logging.LoggingUtils;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-29,19 +33,30", 
          "lines": [
            " /**\n", 
            "  * This is a factory for creating the logging sessions or non-logging sessions.\n", 
            "  */\n", 
            "-public class SourceIOEventDispatch extends DefaultServerIOEventDispatch {\n", 
            "+public class SourceIOEventDispatch extends DefaultHttpServerIODispatch {\n", 
            " \n", 
            "-    public SourceIOEventDispatch(final NHttpServiceHandler handler, final HttpParams params) {\n", 
            "-        super(LoggingUtils.decorate(handler), params);\n", 
            "+    public SourceIOEventDispatch(final NHttpServerEventHandler handler, final HttpParams params) {\n", 
            "+        super(LoggingUtils.decorate(handler), new SourceConnectionFactory(params));\n", 
            "     }\n", 
            " \n", 
            "-    @Override\n", 
            "-    protected NHttpServerIOTarget createConnection(IOSession session) {\n", 
            "-        session = LoggingUtils.decorate(session, \"server\");\n", 
            "-        return LoggingUtils.createServerConnection(\n", 
            "-                session,\n", 
            "-                createHttpRequestFactory(),\n", 
            "-                this.allocator,\n", 
            "-                this.params);\n", 
            "+    private static class SourceConnectionFactory extends DefaultNHttpServerConnectionFactory {\n", 
            "+\n", 
            "+        public SourceConnectionFactory(HttpParams params) {\n", 
            "+            super(params);\n", 
            "+        }\n", 
            "+\n", 
            "+        @Override\n", 
            "+        protected DefaultNHttpServerConnection createConnection(IOSession session,\n", 
            "+                                                                HttpRequestFactory requestFactory,\n", 
            "+                                                                ByteBufferAllocator allocator,\n", 
            "+                                                                HttpParams params) {\n", 
            "+            session = LoggingUtils.decorate(session, \"server\");\n", 
            "+            return LoggingUtils.createServerConnection(\n", 
            "+                    session,\n", 
            "+                    requestFactory,\n", 
            "+                    allocator,\n", 
            "+                    params);\n", 
            "+        }\n", 
            "     }\n", 
            "+\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-21,10 +21,8", 
          "lines": [
            " \n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.commons.util.MiscellaneousUtil;\n", 
            " \n", 
            "-import java.io.File;\n", 
            "-import java.io.IOException;\n", 
            "-import java.io.InputStream;\n", 
            " import java.util.Properties;\n", 
            " \n", 
            " /**\n"
          ]
        }, 
        {
          "locn": "-52,7 +50,7", 
          "lines": [
            " \n", 
            "     private PassThroughConfiguration() {\n", 
            "         try {\n", 
            "-            props = loadProperties(\"passthru-http.properties\");\n", 
            "+            props = MiscellaneousUtil.loadProperties(\"passthru-http.properties\");\n", 
            "         } catch (Exception ignored) {}\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-103,50 +101,6", 
          "lines": [
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     * Loads the properties from a given property file path\n", 
            "-     *\n", 
            "-     * @param filePath Path of the property file\n", 
            "-     * @return Properties loaded from given file\n", 
            "-     */\n", 
            "-    private static Properties loadProperties(String filePath) {\n", 
            "-\n", 
            "-        Properties properties = new Properties();\n", 
            "-        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n", 
            "-\n", 
            "-        if (log.isDebugEnabled()) {\n", 
            "-            log.debug(\"Loading the file '\" + filePath + \"' from classpath\");\n", 
            "-        }\n", 
            "-\n", 
            "-        InputStream in = cl.getResourceAsStream(filePath);\n", 
            "-        if (in == null) {\n", 
            "-            if (log.isDebugEnabled()) {\n", 
            "-                log.debug(\"Unable to load file  '\" + filePath + \"'\");\n", 
            "-            }\n", 
            "-\n", 
            "-            filePath = \"conf\" + File.separatorChar + filePath;\n", 
            "-            if (log.isDebugEnabled()) {\n", 
            "-                log.debug(\"Loading the file '\" + filePath + \"'\");\n", 
            "-            }\n", 
            "-\n", 
            "-            in = cl.getResourceAsStream(filePath);\n", 
            "-            if (in == null) {\n", 
            "-                if (log.isDebugEnabled()) {\n", 
            "-                    log.debug(\"Unable to load file  '\" + filePath + \"'\");\n", 
            "-                }\n", 
            "-            }\n", 
            "-        }\n", 
            "-        if (in != null) {\n", 
            "-            try {\n", 
            "-                properties.load(in);\n", 
            "-            } catch (IOException e) {\n", 
            "-                String msg = \"Error loading properties from a file at : \" + filePath;\n", 
            "-                log.error(msg, e);\n", 
            "-            }\n", 
            "-        }\n", 
            "-        return properties;\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "      * Get an int property that tunes pass-through http transport. Prefer system properties\n", 
            "      *\n", 
            "      * @param name name of the system/config property\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/PassThroughConfiguration.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/PassThroughConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-17,7 +17,6", 
          "lines": [
            "  *  under the License.\n", 
            "  */\n", 
            " \n", 
            "-\n", 
            " package org.apache.synapse.transport.passthru.config;\n", 
            " \n", 
            " import org.apache.axis2.AxisFault;\n"
          ]
        }, 
        {
          "locn": "-25,8 +24,7", 
          "lines": [
            " import org.apache.axis2.description.ParameterInclude;\n", 
            " import org.apache.axis2.transport.base.threads.WorkerPool;\n", 
            " import org.apache.axis2.transport.base.threads.WorkerPoolFactory;\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.impl.nio.reactor.IOReactorConfig;\n", 
            " import org.apache.http.nio.params.NIOReactorPNames;\n", 
            " import org.apache.http.nio.params.NIOReactorParams;\n", 
            " import org.apache.http.nio.util.HeapByteBufferAllocator;\n"
          ]
        }, 
        {
          "locn": "-42,8 +40,6", 
          "lines": [
            "  */\n", 
            " public abstract class BaseConfiguration {\n", 
            " \n", 
            "-    private Log log = LogFactory.getLog(BaseConfiguration.class);\n", 
            "-\n", 
            "     /**\n", 
            "      * Configurations given by axis2.xml\n", 
            "      */\n"
          ]
        }, 
        {
          "locn": "-64,8 +60,6", 
          "lines": [
            " \n", 
            "     private int iOThreadsPerReactor;\n", 
            " \n", 
            "-    private int iOBufferSize;\n", 
            "-\n", 
            "     protected PassThroughConfiguration conf = PassThroughConfiguration.getInstance();\n", 
            " \n", 
            "     public BaseConfiguration(ConfigurationContext configurationContext,\n"
          ]
        }, 
        {
          "locn": "-79,8 +73,6", 
          "lines": [
            "     public void build() throws AxisFault {\n", 
            "         iOThreadsPerReactor = conf.getIOThreadsPerReactor();\n", 
            " \n", 
            "-        iOBufferSize = conf.getIOBufferSize();\n", 
            "-\n", 
            "         if (workerPool == null) {\n", 
            "             workerPool = WorkerPoolFactory.getWorkerPool(\n", 
            "                             conf.getWorkerPoolCoreSize(),\n"
          ]
        }, 
        {
          "locn": "-92,16 +84,38", 
          "lines": [
            "         }\n", 
            " \n", 
            "         httpParameters = retrieveHttpParameters();\n", 
            "-\n", 
            "-        bufferFactory = new BufferFactory(iOBufferSize, new HeapByteBufferAllocator(), 512);\n", 
            "+        bufferFactory = new BufferFactory(conf.getIOBufferSize(), new HeapByteBufferAllocator(), 512);\n", 
            "     }\n", 
            " \n", 
            "-    public int getIOThreadsPerReactor() {\n", 
            "-        return iOThreadsPerReactor;\n", 
            "-    }\n", 
            "+    public IOReactorConfig getReactorConfig() {\n", 
            "+        IOReactorConfig config = new IOReactorConfig();\n", 
            "+        config.setIoThreadCount(iOThreadsPerReactor);\n", 
            "+        config.setSoTimeout(\n", 
            "+                conf.getIntProperty(HttpConnectionParams.SO_TIMEOUT, 60000));\n", 
            "+        config.setConnectTimeout(\n", 
            "+                conf.getIntProperty(HttpConnectionParams.CONNECTION_TIMEOUT, 0));\n", 
            "+        config.setRcvBufSize(\n", 
            "+                conf.getIntProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));\n", 
            "+        config.setSndBufSize(\n", 
            "+                conf.getIntProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));\n", 
            "+        config.setTcpNoDelay(\n", 
            "+                conf.getBooleanProperty(HttpConnectionParams.TCP_NODELAY, true));\n", 
            "+        config.setInterestOpQueued(\n", 
            "+                conf.getBooleanProperty(NIOReactorParams.INTEREST_OPS_QUEUEING, false));\n", 
            " \n", 
            "-    public int getIOBufferSize() {\n", 
            "-        return iOBufferSize;\n", 
            "+        if (conf.getIntProperty(HttpConnectionParams.SO_LINGER) != null) {\n", 
            "+            config.setSoLinger(conf.getIntProperty(HttpConnectionParams.SO_LINGER));\n", 
            "+        }\n", 
            "+\n", 
            "+        if (conf.getBooleanProperty(HttpConnectionParams.SO_REUSEADDR) != null) {\n", 
            "+            config.setSoReuseAddress(conf.getBooleanProperty(HttpConnectionParams.SO_REUSEADDR));\n", 
            "+        }\n", 
            "+\n", 
            "+        if (conf.getIntProperty(NIOReactorPNames.SELECT_INTERVAL) != null) {\n", 
            "+            config.setSelectInterval(conf.getIntProperty(NIOReactorPNames.SELECT_INTERVAL));\n", 
            "+        }\n", 
            "+\n", 
            "+        return config;\n", 
            "     }\n", 
            " \n", 
            "     public WorkerPool getWorkerPool() {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/BaseConfiguration.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/BaseConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-17,7 +17,6", 
          "lines": [
            "  *  under the License.\n", 
            "  */\n", 
            " \n", 
            "-\n", 
            " package org.apache.synapse.transport.passthru;\n", 
            " \n", 
            " import org.apache.axiom.om.OMOutputFormat;\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,6 +16,7", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.passthru;\n", 
            " \n", 
            " import org.apache.axiom.om.OMElement;\n"
          ]
        }, 
        {
          "locn": "-24,10 +25,10", 
          "lines": [
            " import org.apache.axis2.description.TransportInDescription;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.impl.nio.SSLServerIOEventDispatch;\n", 
            "-import org.apache.http.impl.nio.reactor.SSLIOSessionHandler;\n", 
            "-import org.apache.http.nio.NHttpServiceHandler;\n", 
            "+import org.apache.http.nio.NHttpServerEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOEventDispatch;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " \n", 
            " import javax.net.ssl.*;\n"
          ]
        }, 
        {
          "locn": "-34,7 +35,6", 
          "lines": [
            " import javax.xml.namespace.QName;\n", 
            " import java.io.FileInputStream;\n", 
            " import java.io.IOException;\n", 
            "-import java.net.SocketAddress;\n", 
            " import java.security.GeneralSecurityException;\n", 
            " import java.security.KeyStore;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-42,10 +42,10", 
          "lines": [
            "     \n", 
            "     private Log log = LogFactory.getLog(PassThroughHttpSSLListener.class);\n", 
            " \n", 
            "-    protected IOEventDispatch getEventDispatch(\n", 
            "-        NHttpServiceHandler handler, SSLContext sslContext,\n", 
            "-        SSLIOSessionHandler sslIOSessionHandler, HttpParams params) {\n", 
            "-        return new SSLServerIOEventDispatch(handler, sslContext, sslIOSessionHandler, params);\n", 
            "+    @Override\n", 
            "+    protected IOEventDispatch getEventDispatch(NHttpServerEventHandler handler, SSLContext sslContext,\n", 
            "+                                               SSLSetupHandler sslSetupHandler, HttpParams params) {\n", 
            "+        return new SSLSourceIOEventDispatch(handler, sslContext, sslSetupHandler, params);\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-140,23 +140,14", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    /**\n", 
            "-     * Create the SSLIOSessionHandler to initialize the SSL session / engine, and request for\n", 
            "-     * client authentication at the following levels, through an Axis2 transport configuration\n", 
            "-     * parameter as follows:\n", 
            "-     * SSLVerifyClient - none, optional, require\n", 
            "-     *\n", 
            "-     * @param transportIn the Axis2 transport configuration\n", 
            "-     * @return the SSLIOSessionHandler to be used\n", 
            "-     * @throws AxisFault if a configuration error occurs\n", 
            "-     */\n", 
            "-    protected SSLIOSessionHandler getSSLIOSessionHandler(TransportInDescription transportIn) throws AxisFault {\n", 
            "+    protected SSLSetupHandler getSSLSetupHandler(TransportInDescription transportIn)\n", 
            "+            throws AxisFault {\n", 
            " \n", 
            "         final Parameter clientAuth = transportIn.getParameter(\"SSLVerifyClient\");\n", 
            " \n", 
            "-        return new SSLIOSessionHandler() {\n", 
            "+        return new SSLSetupHandler() {\n", 
            " \n", 
            "-            public void initalize(SSLEngine sslengine, HttpParams params) {\n", 
            "+            public void initalize(SSLEngine sslengine) {\n", 
            "                 if (clientAuth != null) {\n", 
            "                     if (\"optional\".equals(clientAuth.getValue())) {\n", 
            "                         sslengine.setWantClientAuth(true);\n"
          ]
        }, 
        {
          "locn": "-166,8 +157,9", 
          "lines": [
            "                 }\n", 
            "             }\n", 
            " \n", 
            "-            public void verify(SocketAddress removeAddress, SSLSession session)\n", 
            "-                throws SSLException {}\n", 
            "+            public void verify(IOSession ioSession, SSLSession sslSession) throws SSLException {\n", 
            "+\n", 
            "+            }\n", 
            "         };\n", 
            "     }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLListener.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLListener.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-56,8 +56,8", 
          "lines": [
            " import org.apache.http.HttpStatus;\n", 
            " import org.apache.http.HttpVersion;\n", 
            " import org.apache.http.entity.BasicHttpEntity;\n", 
            "-import org.apache.http.impl.nio.reactor.SSLIOSession;\n", 
            " import org.apache.http.nio.NHttpServerConnection;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            " import org.apache.http.protocol.HTTP;\n", 
            " import org.apache.synapse.transport.nhttp.HttpCoreRequestResponseTransport;\n", 
            " import org.apache.synapse.transport.nhttp.NHttpConfiguration;\n"
          ]
        }, 
        {
          "locn": "-456,9 +456,10", 
          "lines": [
            "             msgContext.setTransportIn(cfgCtx.getAxisConfiguration()\n", 
            "                 .getTransportIn(Constants.TRANSPORT_HTTPS));\n", 
            "             msgContext.setIncomingTransportName(Constants.TRANSPORT_HTTPS);\n", 
            "-            SSLIOSession session = (SSLIOSession) (conn.getContext()).getAttribute(\"SSL_SESSION\");\n", 
            "+            SSLIOSession session = (SSLIOSession) conn.getContext().getAttribute(\n", 
            "+                    SSLIOSession.SESSION_KEY);\n", 
            "             msgContext.setProperty(\"ssl.client.auth.cert.X509\",\n", 
            "-                                                session.getAttribute(\"ssl.client.auth.cert.X509\"));            \n", 
            "+                    session.getAttribute(\"ssl.client.auth.cert.X509\"));\n", 
            "         } else {\n", 
            "             msgContext.setTransportOut(cfgCtx.getAxisConfiguration()\n", 
            "                 .getTransportOut(Constants.TRANSPORT_HTTP));\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ServerWorker.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ServerWorker.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,6 +16,7", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.passthru;\n", 
            " \n", 
            " import org.apache.axis2.AxisFault;\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/DeliveryAgent.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/DeliveryAgent.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-23,8 +23,6", 
          "lines": [
            " import org.apache.synapse.transport.passthru.config.SourceConfiguration;\n", 
            " \n", 
            " import java.nio.ByteBuffer;\n", 
            "-import java.util.concurrent.locks.Lock;\n", 
            "-import java.util.concurrent.locks.ReentrantLock;\n", 
            " \n", 
            " /**\n", 
            "  * This class represents the information about a TCP Connection at a given point in time.\n"
          ]
        }, 
        {
          "locn": "-49,8 +47,6", 
          "lines": [
            " \n", 
            "     private Pipe writer;\n", 
            " \n", 
            "-    private Lock lock = new ReentrantLock();\n", 
            "-\n", 
            "     public SourceContext(SourceConfiguration sourceConfiguration) {\n", 
            "         this.sourceConfiguration = sourceConfiguration;\n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-94,10 +90,6", 
          "lines": [
            "         this.writer = null;\n", 
            "     }\n", 
            " \n", 
            "-    public Lock getLock() {\n", 
            "-        return lock;\n", 
            "-    }\n", 
            "-\n", 
            "     public boolean isShutDown() {\n", 
            "         return shutDown;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceContext.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceContext.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-20,11 +20,11", 
          "lines": [
            " package org.apache.synapse.transport.passthru.logging;\n", 
            " \n", 
            " import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "+import org.apache.http.nio.NHttpServerEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            " import org.apache.http.nio.reactor.SessionOutputBuffer;\n", 
            " import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            " import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-import org.apache.http.nio.NHttpServiceHandler;\n", 
            " import org.apache.http.nio.NHttpMessageWriter;\n", 
            " import org.apache.http.nio.NHttpMessageParser;\n", 
            " import org.apache.http.*;\n"
          ]
        }, 
        {
          "locn": "-40,7 +40,7", 
          "lines": [
            " \n", 
            "     public LoggingNHttpSourceConnection(\n", 
            "             final Log log,\n", 
            "-            final Log headerlog,\n", 
            "+            final Log headerLog,\n", 
            "             final IOSession session,\n", 
            "             final HttpRequestFactory requestFactory,\n", 
            "             final ByteBufferAllocator allocator,\n"
          ]
        }, 
        {
          "locn": "-47,7 +47,7", 
          "lines": [
            "             final HttpParams params) {\n", 
            "         super(session, requestFactory, allocator, params);\n", 
            "         this.log = log;\n", 
            "-        this.headerLog = headerlog;\n", 
            "+        this.headerLog = headerLog;\n", 
            "     }\n", 
            " \n", 
            "     @Override\n"
          ]
        }, 
        {
          "locn": "-71,19 +71,19", 
          "lines": [
            "     }\n", 
            " \n", 
            "     @Override\n", 
            "-    public void consumeInput(final NHttpServiceHandler handler) {\n", 
            "+    public void consumeInput(final NHttpServerEventHandler handler) {\n", 
            "         this.log.debug(\"Consume input\");\n", 
            "         super.consumeInput(handler);\n", 
            "     }\n", 
            " \n", 
            "     @Override\n", 
            "-    public void produceOutput(final NHttpServiceHandler handler) {\n", 
            "+    public void produceOutput(final NHttpServerEventHandler handler) {\n", 
            "         this.log.debug(\"Produce output\");\n", 
            "         super.produceOutput(handler);\n", 
            "     }\n", 
            " \n", 
            "     @Override\n", 
            "-    protected NHttpMessageWriter createResponseWriter(\n", 
            "+    protected NHttpMessageWriter<HttpResponse> createResponseWriter(\n", 
            "             final SessionOutputBuffer buffer,\n", 
            "             final HttpParams params) {\n", 
            "         return new LoggingNHttpMessageWriter(\n"
          ]
        }, 
        {
          "locn": "-91,7 +91,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     @Override\n", 
            "-    protected NHttpMessageParser createRequestParser(\n", 
            "+    protected NHttpMessageParser<HttpRequest> createRequestParser(\n", 
            "             final SessionInputBuffer buffer,\n", 
            "             final HttpRequestFactory requestFactory,\n", 
            "             final HttpParams params) {\n"
          ]
        }, 
        {
          "locn": "-99,11 +99,11", 
          "lines": [
            "                 super.createRequestParser(buffer, requestFactory, params));\n", 
            "     }\n", 
            " \n", 
            "-    class LoggingNHttpMessageWriter implements NHttpMessageWriter {\n", 
            "+    class LoggingNHttpMessageWriter implements NHttpMessageWriter<HttpResponse> {\n", 
            " \n", 
            "-        private final NHttpMessageWriter writer;\n", 
            "+        private final NHttpMessageWriter<HttpResponse> writer;\n", 
            " \n", 
            "-        public LoggingNHttpMessageWriter(final NHttpMessageWriter writer) {\n", 
            "+        public LoggingNHttpMessageWriter(final NHttpMessageWriter<HttpResponse> writer) {\n", 
            "             super();\n", 
            "             this.writer = writer;\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-112,9 +112,8", 
          "lines": [
            "             this.writer.reset();\n", 
            "         }\n", 
            " \n", 
            "-        public void write(final HttpMessage message) throws IOException, HttpException {\n", 
            "-            if (message != null && headerLog.isDebugEnabled()) {\n", 
            "-                HttpResponse response = (HttpResponse) message;\n", 
            "+        public void write(final HttpResponse response) throws IOException, HttpException {\n", 
            "+            if (response != null && headerLog.isDebugEnabled()) {\n", 
            "                 headerLog.debug(\"<< \" + response.getStatusLine().toString());\n", 
            "                 Header[] headers = response.getAllHeaders();\n", 
            "                 for (Header header : headers) {\n"
          ]
        }, 
        {
          "locn": "-121,16 +120,16", 
          "lines": [
            "                     headerLog.debug(\"<< \" + header.toString());\n", 
            "                 }\n", 
            "             }\n", 
            "-            this.writer.write(message);\n", 
            "+            this.writer.write(response);\n", 
            "         }\n", 
            " \n", 
            "     }\n", 
            " \n", 
            "-    class LoggingNHttpMessageParser implements NHttpMessageParser {\n", 
            "+    class LoggingNHttpMessageParser implements NHttpMessageParser<HttpRequest> {\n", 
            " \n", 
            "-        private final NHttpMessageParser parser;\n", 
            "+        private final NHttpMessageParser<HttpRequest> parser;\n", 
            " \n", 
            "-        public LoggingNHttpMessageParser(final NHttpMessageParser parser) {\n", 
            "+        public LoggingNHttpMessageParser(final NHttpMessageParser<HttpRequest> parser) {\n", 
            "             super();\n", 
            "             this.parser = parser;\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-143,10 +142,9", 
          "lines": [
            "             return this.parser.fillBuffer(channel);\n", 
            "         }\n", 
            " \n", 
            "-        public HttpMessage parse() throws IOException, HttpException {\n", 
            "-            HttpMessage message = this.parser.parse();\n", 
            "-            if (message != null && headerLog.isDebugEnabled()) {\n", 
            "-                HttpRequest request = (HttpRequest) message;\n", 
            "+        public HttpRequest parse() throws IOException, HttpException {\n", 
            "+            HttpRequest request = this.parser.parse();\n", 
            "+            if (request != null && headerLog.isDebugEnabled()) {\n", 
            "                 headerLog.debug(\">> \" + request.getRequestLine().toString());\n", 
            "                 Header[] headers = request.getAllHeaders();\n", 
            "                 for (Header header : headers) {\n"
          ]
        }, 
        {
          "locn": "-153,7 +151,7", 
          "lines": [
            "                     headerLog.debug(\">> \" + header.toString());\n", 
            "                 }\n", 
            "             }\n", 
            "-            return message;\n", 
            "+            return request;\n", 
            "         }\n", 
            "     }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingNHttpSourceConnection.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingNHttpSourceConnection.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-20,10 +20,7", 
          "lines": [
            " \n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.nio.NHttpServiceHandler;\n", 
            "-import org.apache.http.nio.NHttpServerConnection;\n", 
            "-import org.apache.http.nio.ContentEncoder;\n", 
            "-import org.apache.http.nio.ContentDecoder;\n", 
            "+import org.apache.http.nio.*;\n", 
            " import org.apache.http.ConnectionClosedException;\n", 
            " import org.apache.http.HttpException;\n", 
            " import org.apache.http.HttpRequest;\n"
          ]
        }, 
        {
          "locn": "-30,13 +27,13", 
          "lines": [
            " \n", 
            " import java.io.IOException;\n", 
            " \n", 
            "-public class LoggingSourceHandler implements NHttpServiceHandler {\n", 
            "+public class LoggingSourceHandler implements NHttpServerEventHandler {\n", 
            " \n", 
            "     private final Log log;\n", 
            " \n", 
            "-    private final NHttpServiceHandler handler;\n", 
            "+    private final NHttpServerEventHandler handler;\n", 
            " \n", 
            "-    public LoggingSourceHandler (final NHttpServiceHandler handler) {\n", 
            "+    public LoggingSourceHandler (final NHttpServerEventHandler handler) {\n", 
            "         super();\n", 
            "         if (handler == null) {\n", 
            "             throw new IllegalArgumentException(\"HTTP service handler may not be null\");\n"
          ]
        }, 
        {
          "locn": "-45,7 +42,7", 
          "lines": [
            "         this.log = LogFactory.getLog(handler.getClass());\n", 
            "     }\n", 
            " \n", 
            "-    public void connected(final NHttpServerConnection conn) {\n", 
            "+    public void connected(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Connected\");\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-59,26 +56,35", 
          "lines": [
            "         this.handler.closed(conn);\n", 
            "     }\n", 
            " \n", 
            "-    public void exception(final NHttpServerConnection conn, final IOException ex) {\n", 
            "+    public void endOfInput(NHttpServerConnection conn) throws IOException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Closed at the remote end\");\n", 
            "+        }\n", 
            "+        this.handler.endOfInput(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void exception(NHttpServerConnection conn, Exception ex) {\n", 
            "+        if (ex.getMessage() == null) {\n", 
            "+            ex.printStackTrace();\n", 
            "+            return;\n", 
            "+        }\n", 
            "         if (ex instanceof ConnectionClosedException ||\n", 
            "                 ex.getMessage().contains(\"Connection reset by peer\") ||\n", 
            "                 ex.getMessage().contains(\"forcibly closed\")) {\n", 
            "             if (this.log.isDebugEnabled()) {\n", 
            "                 this.log.debug(\"HTTP connection \" + conn + \": \" + ex.getMessage() +\n", 
            "-                    \" (Probably the keepalive connection was closed)\");\n", 
            "+                        \" (Probably the keep-alive connection was closed)\");\n", 
            "             }\n", 
            "+        } else if (ex instanceof HttpException) {\n", 
            "+            this.log.error(\"HTTP Error occurred on connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "+            this.handler.exception(conn, ex);\n", 
            "         } else {\n", 
            "-            this.log.error(\"IO Error occured on HTTP connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "+            this.log.error(\"IO Error occurred on HTTP connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "         }\n", 
            "         this.handler.exception(conn, ex);\n", 
            "     }\n", 
            " \n", 
            "-    public void exception(final NHttpServerConnection conn, final HttpException ex) {\n", 
            "-        this.log.error(\"HTTP Error occured on connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "-        this.handler.exception(conn, ex);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void requestReceived(final NHttpServerConnection conn) {\n", 
            "+    public void requestReceived(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "         HttpRequest request = conn.getHttpRequest();\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP InRequest Received on connection \" + conn + \": \"\n"
          ]
        }, 
        {
          "locn": "-87,7 +93,7", 
          "lines": [
            "         this.handler.requestReceived(conn);\n", 
            "     }\n", 
            " \n", 
            "-    public void outputReady(final NHttpServerConnection conn, final ContentEncoder encoder) {\n", 
            "+    public void outputReady(final NHttpServerConnection conn, final ContentEncoder encoder) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Output ready\");\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-97,7 +103,7", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    public void responseReady(final NHttpServerConnection conn) {\n", 
            "+    public void responseReady(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Response ready\");\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-104,7 +110,7", 
          "lines": [
            "         this.handler.responseReady(conn);\n", 
            "     }\n", 
            " \n", 
            "-    public void inputReady(final NHttpServerConnection conn, final ContentDecoder decoder) {\n", 
            "+    public void inputReady(final NHttpServerConnection conn, final ContentDecoder decoder) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Input ready\");\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-114,7 +120,7", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    public void timeout(final NHttpServerConnection conn) {\n", 
            "+    public void timeout(final NHttpServerConnection conn) throws IOException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Timeout\");\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingSourceHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingSourceHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,13 +16,11", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.passthru.logging;\n", 
            " \n", 
            "+import org.apache.http.nio.*;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.NHttpClientHandler;\n", 
            "-import org.apache.http.nio.NHttpServiceHandler;\n", 
            "-import org.apache.http.nio.NHttpClientIOTarget;\n", 
            "-import org.apache.http.nio.NHttpServerIOTarget;\n", 
            " import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            " import org.apache.http.HttpResponseFactory;\n", 
            " import org.apache.http.HttpRequestFactory;\n"
          ]
        }, 
        {
          "locn": "-32,21 +30,21", 
          "lines": [
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            " \n", 
            "+public class LoggingUtils {\n", 
            " \n", 
            "-public class LoggingUtils {\n", 
            "     public final static String HEADER_LOG_ID = \"org.wso2.carbon.transport.passthru.headers\";\n", 
            "     public final static String WIRE_LOG_ID = \"org.wso2.carbon.transport.passthru.wire\";\n", 
            " \n", 
            "     public static IOSession decorate(IOSession session, final String id) {\n", 
            "         Log log = LogFactory.getLog(session.getClass());\n", 
            "-        Log wirelog = LogFactory.getLog(WIRE_LOG_ID);\n", 
            "-        if (wirelog.isDebugEnabled() || log.isDebugEnabled()) {\n", 
            "-            session = new LoggingIOSession(wirelog, session, id);\n", 
            "+        Log wireLog = LogFactory.getLog(WIRE_LOG_ID);\n", 
            "+        if (wireLog.isDebugEnabled() || log.isDebugEnabled()) {\n", 
            "+            session = new LoggingIOSession(wireLog, session, id);\n", 
            "         }\n", 
            "         return session;\n", 
            "     }\n", 
            " \n", 
            "-    public static NHttpClientHandler decorate(NHttpClientHandler handler) {\n", 
            "+    public static NHttpClientEventHandler decorate(NHttpClientEventHandler handler) {\n", 
            "         Log log = LogFactory.getLog(handler.getClass());\n", 
            "         if (log.isDebugEnabled()) {\n", 
            "             handler = new LoggingTargetHandler(handler);\n"
          ]
        }, 
        {
          "locn": "-54,7 +52,7", 
          "lines": [
            "         return handler;\n", 
            "     }\n", 
            " \n", 
            "-    public static NHttpServiceHandler decorate(NHttpServiceHandler handler) {\n", 
            "+    public static NHttpServerEventHandler decorate(NHttpServerEventHandler handler) {\n", 
            "         Log log = LogFactory.getLog(handler.getClass());\n", 
            "         if (log.isDebugEnabled()) {\n", 
            "             handler = new LoggingSourceHandler(handler);\n"
          ]
        }, 
        {
          "locn": "-62,17 +60,17", 
          "lines": [
            "         return handler;\n", 
            "     }\n", 
            " \n", 
            "-    public static NHttpClientIOTarget createClientConnection(\n", 
            "+    public static DefaultNHttpClientConnection createClientConnection(\n", 
            "             final IOSession iosession,\n", 
            "             final HttpResponseFactory responseFactory,\n", 
            "             final ByteBufferAllocator allocator,\n", 
            "             final HttpParams params) {\n", 
            "         Log log = LogFactory.getLog(DefaultNHttpClientConnection.class);\n", 
            "-        Log headerlog = LogFactory.getLog(HEADER_LOG_ID);\n", 
            "-        if (headerlog.isDebugEnabled() || log.isDebugEnabled()) {\n", 
            "+        Log headerLog = LogFactory.getLog(HEADER_LOG_ID);\n", 
            "+        if (headerLog.isDebugEnabled() || log.isDebugEnabled()) {\n", 
            "             return new LoggingNHttpTargetConnection(\n", 
            "                     log,\n", 
            "-                    headerlog,\n", 
            "+                    headerLog,\n", 
            "                     iosession,\n", 
            "                     responseFactory,\n", 
            "                     allocator,\n"
          ]
        }, 
        {
          "locn": "-86,17 +84,17", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    public static NHttpServerIOTarget createServerConnection(\n", 
            "+    public static DefaultNHttpServerConnection createServerConnection(\n", 
            "             final IOSession iosession,\n", 
            "             final HttpRequestFactory requestFactory,\n", 
            "             final ByteBufferAllocator allocator,\n", 
            "             final HttpParams params) {\n", 
            "         Log log = LogFactory.getLog(DefaultNHttpClientConnection.class);\n", 
            "-        Log headerlog = LogFactory.getLog(HEADER_LOG_ID);\n", 
            "-        if (headerlog.isDebugEnabled() || log.isDebugEnabled()) {\n", 
            "+        Log headerLog = LogFactory.getLog(HEADER_LOG_ID);\n", 
            "+        if (headerLog.isDebugEnabled() || log.isDebugEnabled()) {\n", 
            "             return new LoggingNHttpSourceConnection(\n", 
            "                     log,\n", 
            "-                    headerlog,\n", 
            "+                    headerLog,\n", 
            "                     iosession,\n", 
            "                     requestFactory,\n", 
            "                     allocator,\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingUtils.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-20,11 +20,11", 
          "lines": [
            " package org.apache.synapse.transport.passthru.logging;\n", 
            " \n", 
            " import org.apache.commons.logging.Log;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            " import org.apache.http.nio.reactor.SessionOutputBuffer;\n", 
            " import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            " import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-import org.apache.http.nio.NHttpClientHandler;\n", 
            " import org.apache.http.nio.NHttpMessageWriter;\n", 
            " import org.apache.http.nio.NHttpMessageParser;\n", 
            " import org.apache.http.*;\n"
          ]
        }, 
        {
          "locn": "-35,12 +35,13", 
          "lines": [
            " import java.nio.channels.ReadableByteChannel;\n", 
            " \n", 
            " public class LoggingNHttpTargetConnection extends DefaultNHttpClientConnection {\n", 
            "+\n", 
            "     private final Log log;\n", 
            "     private final Log headerLog;\n", 
            " \n", 
            "     public LoggingNHttpTargetConnection(\n", 
            "             final Log log,\n", 
            "-            final Log headerlog,\n", 
            "+            final Log headerLog,\n", 
            "             final IOSession iosession,\n", 
            "             final HttpResponseFactory responseFactory,\n", 
            "             final ByteBufferAllocator allocator,\n"
          ]
        }, 
        {
          "locn": "-47,7 +48,7", 
          "lines": [
            "             final HttpParams params) {\n", 
            "         super(iosession, responseFactory, allocator, params);\n", 
            "         this.log = log;\n", 
            "-        this.headerLog = headerlog;\n", 
            "+        this.headerLog = headerLog;\n", 
            "     }\n", 
            " \n", 
            "     @Override\n"
          ]
        }, 
        {
          "locn": "-71,19 +72,19", 
          "lines": [
            "     }\n", 
            " \n", 
            "     @Override\n", 
            "-    public void consumeInput(final NHttpClientHandler handler) {\n", 
            "+    public void consumeInput(final NHttpClientEventHandler handler) {\n", 
            "         this.log.debug(\"Consume input\");\n", 
            "         super.consumeInput(handler);\n", 
            "     }\n", 
            " \n", 
            "     @Override\n", 
            "-    public void produceOutput(final NHttpClientHandler handler) {\n", 
            "+    public void produceOutput(final NHttpClientEventHandler handler) {\n", 
            "         this.log.debug(\"Produce output\");\n", 
            "         super.produceOutput(handler);\n", 
            "     }\n", 
            " \n", 
            "     @Override\n", 
            "-    protected NHttpMessageWriter createRequestWriter(\n", 
            "+    protected NHttpMessageWriter<HttpRequest> createRequestWriter(\n", 
            "             final SessionOutputBuffer buffer,\n", 
            "             final HttpParams params) {\n", 
            "         return new LoggingNHttpMessageWriter(\n"
          ]
        }, 
        {
          "locn": "-91,7 +92,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     @Override\n", 
            "-    protected NHttpMessageParser createResponseParser(\n", 
            "+    protected NHttpMessageParser<HttpResponse> createResponseParser(\n", 
            "             final SessionInputBuffer buffer,\n", 
            "             final HttpResponseFactory responseFactory,\n", 
            "             final HttpParams params) {\n"
          ]
        }, 
        {
          "locn": "-99,11 +100,11", 
          "lines": [
            "                 super.createResponseParser(buffer, responseFactory, params));\n", 
            "     }\n", 
            " \n", 
            "-    class LoggingNHttpMessageWriter implements NHttpMessageWriter {\n", 
            "+    class LoggingNHttpMessageWriter implements NHttpMessageWriter<HttpRequest> {\n", 
            " \n", 
            "-        private final NHttpMessageWriter writer;\n", 
            "+        private final NHttpMessageWriter<HttpRequest> writer;\n", 
            " \n", 
            "-        public LoggingNHttpMessageWriter(final NHttpMessageWriter writer) {\n", 
            "+        public LoggingNHttpMessageWriter(final NHttpMessageWriter<HttpRequest> writer) {\n", 
            "             super();\n", 
            "             this.writer = writer;\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-112,9 +113,8", 
          "lines": [
            "             this.writer.reset();\n", 
            "         }\n", 
            " \n", 
            "-        public void write(final HttpMessage message) throws IOException, HttpException {\n", 
            "-            if (message != null && headerLog.isDebugEnabled()) {\n", 
            "-                HttpRequest request = (HttpRequest) message;\n", 
            "+        public void write(final HttpRequest request) throws IOException, HttpException {\n", 
            "+            if (request != null && headerLog.isDebugEnabled()) {\n", 
            "                 headerLog.debug(\">> \" + request.getRequestLine().toString());\n", 
            "                 Header[] headers = request.getAllHeaders();\n", 
            "                 for (Header header : headers) {\n"
          ]
        }, 
        {
          "locn": "-121,16 +121,16", 
          "lines": [
            "                     headerLog.debug(\">> \" + header.toString());\n", 
            "                 }\n", 
            "             }\n", 
            "-            this.writer.write(message);\n", 
            "+            this.writer.write(request);\n", 
            "         }\n", 
            " \n", 
            "     }\n", 
            " \n", 
            "-    class LoggingNHttpMessageParser implements NHttpMessageParser {\n", 
            "+    class LoggingNHttpMessageParser implements NHttpMessageParser<HttpResponse> {\n", 
            " \n", 
            "-        private final NHttpMessageParser parser;\n", 
            "+        private final NHttpMessageParser<HttpResponse> parser;\n", 
            " \n", 
            "-        public LoggingNHttpMessageParser(final NHttpMessageParser parser) {\n", 
            "+        public LoggingNHttpMessageParser(final NHttpMessageParser<HttpResponse> parser) {\n", 
            "             super();\n", 
            "             this.parser = parser;\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-143,10 +143,9", 
          "lines": [
            "             return this.parser.fillBuffer(channel);\n", 
            "         }\n", 
            " \n", 
            "-        public HttpMessage parse() throws IOException, HttpException {\n", 
            "-            HttpMessage message = this.parser.parse();\n", 
            "-            if (message != null && headerLog.isDebugEnabled()) {\n", 
            "-                HttpResponse response = (HttpResponse) message;\n", 
            "+        public HttpResponse parse() throws IOException, HttpException {\n", 
            "+            HttpResponse response = this.parser.parse();\n", 
            "+            if (response != null && headerLog.isDebugEnabled()) {\n", 
            "                 headerLog.debug(\"<< \" + response.getStatusLine().toString());\n", 
            "                 Header[] headers = response.getAllHeaders();\n", 
            "                 for (Header header : headers) {\n"
          ]
        }, 
        {
          "locn": "-153,7 +152,7", 
          "lines": [
            "                     headerLog.debug(\"<< \" + header.toString());\n", 
            "                 }\n", 
            "             }\n", 
            "-            return message;\n", 
            "+            return response;\n", 
            "         }\n", 
            " \n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingNHttpTargetConnection.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingNHttpTargetConnection.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,26 +16,24", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.passthru.logging;\n", 
            " \n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.nio.NHttpClientHandler;\n", 
            "-import org.apache.http.nio.NHttpClientConnection;\n", 
            "-import org.apache.http.nio.ContentEncoder;\n", 
            "-import org.apache.http.nio.ContentDecoder;\n", 
            "+import org.apache.http.nio.*;\n", 
            " import org.apache.http.HttpException;\n", 
            " import org.apache.http.HttpResponse;\n", 
            " \n", 
            " import java.io.IOException;\n", 
            " \n", 
            "-public class LoggingTargetHandler implements NHttpClientHandler {\n", 
            "+public class LoggingTargetHandler implements NHttpClientEventHandler {\n", 
            " \n", 
            "     private final Log log;\n", 
            "     \n", 
            "-    private final NHttpClientHandler handler;\n", 
            "+    private final NHttpClientEventHandler handler;\n", 
            " \n", 
            "-    public LoggingTargetHandler(final NHttpClientHandler handler) {\n", 
            "+    public LoggingTargetHandler(final NHttpClientEventHandler handler) {\n", 
            "         super();\n", 
            "         if (handler == null) {\n", 
            "             throw new IllegalArgumentException(\"HTTP client handler may not be null\");\n"
          ]
        }, 
        {
          "locn": "-44,7 +42,7", 
          "lines": [
            "         this.log = LogFactory.getLog(handler.getClass());\n", 
            "     }\n", 
            " \n", 
            "-    public void connected(final NHttpClientConnection conn, final Object attachment) {\n", 
            "+    public void connected(final NHttpClientConnection conn, final Object attachment) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Connected (\" + attachment + \")\");\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-58,17 +56,19", 
          "lines": [
            "         this.handler.closed(conn);\n", 
            "     }\n", 
            " \n", 
            "-    public void exception(final NHttpClientConnection conn, final IOException ex) {\n", 
            "-        this.log.error(\"HTTP connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "-        this.handler.exception(conn, ex);\n", 
            "+    public void endOfInput(NHttpClientConnection conn) throws IOException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Closed at remote end\");\n", 
            "+        }\n", 
            "+        this.handler.endOfInput(conn);\n", 
            "     }\n", 
            " \n", 
            "-    public void exception(final NHttpClientConnection conn, final HttpException ex) {\n", 
            "+    public void exception(NHttpClientConnection conn, Exception ex) {\n", 
            "         this.log.error(\"HTTP connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "         this.handler.exception(conn, ex);\n", 
            "     }\n", 
            " \n", 
            "-    public void requestReady(final NHttpClientConnection conn) {\n", 
            "+    public void requestReady(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": InRequest ready\" + getRequestMessageID(conn));\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-75,7 +75,7", 
          "lines": [
            "         this.handler.requestReady(conn);\n", 
            "     }\n", 
            " \n", 
            "-    public void outputReady(final NHttpClientConnection conn, final ContentEncoder encoder) {\n", 
            "+    public void outputReady(final NHttpClientConnection conn, final ContentEncoder encoder) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Output ready\" + getRequestMessageID(conn));\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-85,7 +85,7", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    public void responseReceived(final NHttpClientConnection conn) {\n", 
            "+    public void responseReceived(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "         HttpResponse response = conn.getHttpResponse();\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \" : \"\n"
          ]
        }, 
        {
          "locn": "-94,7 +94,7", 
          "lines": [
            "         this.handler.responseReceived(conn);\n", 
            "     }\n", 
            " \n", 
            "-    public void inputReady(final NHttpClientConnection conn, final ContentDecoder decoder) {\n", 
            "+    public void inputReady(final NHttpClientConnection conn, final ContentDecoder decoder) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Input ready\" + getRequestMessageID(conn));\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-104,7 +104,7", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    public void timeout(final NHttpClientConnection conn) {\n", 
            "+    public void timeout(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Timeout\" + getRequestMessageID(conn));\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingTargetHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingTargetHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-38,12 +38,12", 
          "lines": [
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.http.impl.nio.reactor.DefaultListeningIOReactor;\n", 
            "-import org.apache.http.impl.nio.reactor.SSLIOSessionHandler;\n", 
            "-import org.apache.http.nio.NHttpServiceHandler;\n", 
            "+import org.apache.http.nio.NHttpServerEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOEventDispatch;\n", 
            " import org.apache.http.nio.reactor.IOReactorException;\n", 
            " import org.apache.http.nio.reactor.IOReactorExceptionHandler;\n", 
            " import org.apache.http.nio.reactor.ListenerEndpoint;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " import org.apache.synapse.transport.passthru.config.SourceConfiguration;\n", 
            " import org.apache.synapse.transport.passthru.jmx.MBeanRegistrar;\n"
          ]
        }, 
        {
          "locn": "-73,9 +73,9", 
          "lines": [
            " \n", 
            "     /** SSLContext if this listener is a SSL listener */\n", 
            "     private SSLContext sslContext = null;\n", 
            "-    \n", 
            "+\n", 
            "     /** The SSL session handler that manages client authentication etc */\n", 
            "-    private SSLIOSessionHandler sslIOSessionHandler = null;\n", 
            "+    private SSLSetupHandler sslSetupHandler = null;\n", 
            " \n", 
            "     /** The custom URI map for the services if there are any */\n", 
            "     private Map<String, String> serviceNameToEPRMap = new HashMap<String, String>();\n"
          ]
        }, 
        {
          "locn": "-91,8 +91,10", 
          "lines": [
            "     public void init(ConfigurationContext cfgCtx, TransportInDescription transportInDescription)\n", 
            "             throws AxisFault {\n", 
            " \n", 
            "-        log.info(\"Initializing Pass-through HTTP/S Listener...\");\n", 
            "-        \n", 
            "+        if (log.isDebugEnabled()) {\n", 
            "+            log.debug(\"Initializing pass-through HTTP/S Listener...\");\n", 
            "+        }\n", 
            "+\n", 
            "         int portOffset = Integer.parseInt(System.getProperty(\"portOffset\", \"0\"));\n", 
            "         Parameter portParam = transportInDescription.getParameter(\"port\");\n", 
            "         int port = Integer.parseInt(portParam.getValue().toString());\n"
          ]
        }, 
        {
          "locn": "-108,7 +110,7", 
          "lines": [
            " \n", 
            "         // is this a SSL listener?\n", 
            "         sslContext = getSSLContext(transportInDescription);\n", 
            "-        sslIOSessionHandler = getSSLIOSessionHandler(transportInDescription);\n", 
            "+        sslSetupHandler = getSSLSetupHandler(transportInDescription);\n", 
            " \n", 
            "         namePrefix = (sslContext == null) ? \"HTTP\" : \"HTTPS\";\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-133,28 +135,25", 
          "lines": [
            "     }\n", 
            " \n", 
            "     public void start() throws AxisFault {\n", 
            "-        log.info(\"Starting Pass-through \" + namePrefix + \" Listener...\");\n", 
            "+        log.info(\"Starting pass-through \" + namePrefix + \" listener...\");\n", 
            " \n", 
            "         try {\n", 
            "             String prefix = namePrefix + \"-Listener I/O dispatcher\";\n", 
            "             ioReactor = new DefaultListeningIOReactor(\n", 
            "-                            sourceConfiguration.getIOThreadsPerReactor(),\n", 
            "-                            new NativeThreadFactory(new ThreadGroup(prefix + \" thread group\"), prefix),\n", 
            "-                            sourceConfiguration.getHttpParameters());\n", 
            "+                            sourceConfiguration.getReactorConfig(),\n", 
            "+                            new NativeThreadFactory(new ThreadGroup(prefix + \" thread group\"), prefix));\n", 
            "             \n", 
            "             ioReactor.setExceptionHandler(new IOReactorExceptionHandler() {\n", 
            " \n", 
            "                 public boolean handle(IOException ioException) {\n", 
            "                     log.warn(\"System may be unstable: \" + namePrefix +\n", 
            "-                            \" ListeningIOReactor encountered a checked exception : \" +\n", 
            "-                            ioException.getMessage(), ioException);\n", 
            "+                            \" ListeningIOReactor encountered a checked exception.\" , ioException);\n", 
            "                     return true;\n", 
            "                 }\n", 
            " \n", 
            "                 public boolean handle(RuntimeException runtimeException) {\n", 
            "                     log.warn(\"System may be unstable: \" + namePrefix +\n", 
            "-                            \" ListeningIOReactor encountered a runtime exception : \"\n", 
            "-                            + runtimeException.getMessage(), runtimeException);\n", 
            "+                            \" ListeningIOReactor encountered a runtime exception.\", runtimeException);\n", 
            "                     return true;\n", 
            "                 }\n", 
            "             });\n"
          ]
        }, 
        {
          "locn": "-164,15 +163,14", 
          "lines": [
            "         }\n", 
            " \n", 
            "         SourceHandler handler = new SourceHandler(sourceConfiguration);\n", 
            "-\n", 
            "         final IOEventDispatch ioEventDispatch = getEventDispatch(handler, sslContext,\n", 
            "-                                      sslIOSessionHandler, sourceConfiguration.getHttpParameters());\n", 
            "+                sslSetupHandler, sourceConfiguration.getHttpParameters());\n", 
            " \n", 
            "-        ListenerEndpoint endpoint = ioReactor.listen(\n", 
            "-                                      new InetSocketAddress(sourceConfiguration.getPort()));\n", 
            "-        \n", 
            "-        if(sourceConfiguration.getHttpGetRequestProcessor() != null){\n", 
            "-           sourceConfiguration.getHttpGetRequestProcessor().init(sourceConfiguration.getConfigurationContext(), handler);\n", 
            "+        ListenerEndpoint endpoint = ioReactor.listen(new InetSocketAddress(\n", 
            "+                sourceConfiguration.getPort()));\n", 
            "+        HttpGetRequestProcessor getProcessor = sourceConfiguration.getHttpGetRequestProcessor();\n", 
            "+        if (getProcessor != null){\n", 
            "+           getProcessor.init(sourceConfiguration.getConfigurationContext(), handler);\n", 
            "         }\n", 
            " \n", 
            "         Thread t = new Thread(new Runnable() {\n"
          ]
        }, 
        {
          "locn": "-180,10 +178,10", 
          "lines": [
            "                 try {\n", 
            "                     ioReactor.execute(ioEventDispatch);\n", 
            "                 } catch (Exception e) {\n", 
            "-                    log.fatal(\"Exception encountered in the \" + namePrefix + \" Listener. \" +\n", 
            "-                            \"No more connections will be accepted by this transport\", e);\n", 
            "+                    log.fatal(\"Exception encountered in the \" + namePrefix + \" listener. \" +\n", 
            "+                            \"No more connections will be accepted by this transport.\", e);\n", 
            "                 }\n", 
            "-                log.info(namePrefix + \" Listener shutdown.\");\n", 
            "+                log.info(namePrefix + \" listener shutdown.\");\n", 
            "             }\n", 
            "         }, \"PassThrough\" + namePrefix + \"Listener\");\n", 
            "         t.start();\n"
          ]
        }, 
        {
          "locn": "-191,11 +189,11", 
          "lines": [
            "         try {\n", 
            "             endpoint.waitFor();\n", 
            "         } catch (InterruptedException e) {\n", 
            "-            log.warn(\"PassThroughHttpListener start event was interrupted\", e);\n", 
            "+            log.warn(\"Pass-through \" + namePrefix + \" listener startup was interrupted\", e);\n", 
            "         }\n", 
            " \n", 
            "         state = BaseConstants.STARTED;\n", 
            "-        log.info(\"Pass-through \" + namePrefix + \" Listener \" + \"started on port : \" +\n", 
            "+        log.info(\"Pass-through \" + namePrefix + \" listener \" + \"started on port: \" +\n", 
            "                 sourceConfiguration.getPort());\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-241,9 +239,8", 
          "lines": [
            "         return null;\n", 
            "     }\n", 
            " \n", 
            "-\n", 
            "     public void stop() throws AxisFault {\n", 
            "-        log.info(\"Stopping Pass-through \" + namePrefix + \" Listener..\");\n", 
            "+        log.info(\"Stopping pass-through \" + namePrefix + \" listener..\");\n", 
            "         try {\n", 
            "             ioReactor.shutdown();\n", 
            "         } catch (IOException e) {\n"
          ]
        }, 
        {
          "locn": "-252,7 +249,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     public void destroy() {\n", 
            "-        log.info(\"Destroying PassThroughHttpListener\");\n", 
            "+        log.info(\"Destroying pass-through \" + namePrefix + \" listener\");\n", 
            "         sourceConfiguration.getConfigurationContext().\n", 
            "                 getAxisConfiguration().getObserversList().remove(axisObserver);\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-377,8 +374,8", 
          "lines": [
            "     }\n", 
            " \n", 
            "     protected IOEventDispatch getEventDispatch(\n", 
            "-            NHttpServiceHandler handler, SSLContext sslContext,\n", 
            "-            SSLIOSessionHandler sslioSessionHandler, HttpParams params) {\n", 
            "+            NHttpServerEventHandler handler, SSLContext sslContext,\n", 
            "+            SSLSetupHandler sslSetupHandler, HttpParams params) {\n", 
            "         return new SourceIOEventDispatch(handler, params);\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-395,12 +392,13", 
          "lines": [
            " \n", 
            "     /**\n", 
            "      * Create the SSL IO Session handler to be used by this listener\n", 
            "-     * @param transportIn transport in description\n", 
            "+     *\n", 
            "+     * @param transportOut Transport out description\n", 
            "      * @return always null\n", 
            "-     * @throws AxisFault never thrown\n", 
            "+     * @throws AxisFault on error\n", 
            "      */\n", 
            "-    protected SSLIOSessionHandler getSSLIOSessionHandler(\n", 
            "-            TransportInDescription transportIn) throws AxisFault {\n", 
            "+    protected SSLSetupHandler getSSLSetupHandler(TransportInDescription transportOut)\n", 
            "+            throws AxisFault {\n", 
            "         return null;\n", 
            "     }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpListener.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpListener.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,32 +16,32", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.passthru;\n", 
            " \n", 
            "-import org.apache.http.impl.nio.reactor.SSLIOSession;\n", 
            "-import org.apache.http.impl.nio.reactor.SSLSetupHandler;\n", 
            "-import org.apache.http.nio.NHttpClientHandler;\n", 
            "-import org.apache.http.nio.NHttpClientIOTarget;\n", 
            "+import org.apache.http.HttpResponseFactory;\n", 
            "+import org.apache.http.impl.nio.DefaultHttpClientIODispatch;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "+import org.apache.http.impl.nio.SSLNHttpClientConnectionFactory;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "+import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " import org.apache.synapse.transport.passthru.logging.LoggingUtils;\n", 
            " \n", 
            " import javax.net.ssl.SSLContext;\n", 
            "-import java.net.InetSocketAddress;\n", 
            " import java.util.Map;\n", 
            " \n", 
            "-public class SSLTargetIOEventDispatch extends org.apache.http.impl.nio.ssl.SSLClientIOEventDispatch {\n", 
            "+public class SSLTargetIOEventDispatch extends DefaultHttpClientIODispatch {\n", 
            " \n", 
            "     private Map<String, SSLContext> contextMap;\n", 
            " \n", 
            "-    private HttpParams params = null;\n", 
            "-\n", 
            "-    public SSLTargetIOEventDispatch(NHttpClientHandler handler,\n", 
            "+    public SSLTargetIOEventDispatch(NHttpClientEventHandler handler,\n", 
            "                                     SSLContext sslcontext,\n", 
            "                                     SSLSetupHandler sslHandler,\n", 
            "                                     HttpParams params) {\n", 
            "-        super(handler, sslcontext, sslHandler, params);\n", 
            "-        this.params = params;\n", 
            "+        super(handler, new SSLTargetConnectionFactory(sslcontext, sslHandler, params));\n", 
            "     }\n", 
            " \n", 
            "     public void setContextMap(Map<String,SSLContext> contextMap) {\n"
          ]
        }, 
        {
          "locn": "-48,8 +48,28", 
          "lines": [
            "         this.contextMap = contextMap;\n", 
            "     }\n", 
            " \n", 
            "-    @Override\n", 
            "-    protected SSLIOSession createSSLIOSession(IOSession session,\n", 
            "+    private static class SSLTargetConnectionFactory extends SSLNHttpClientConnectionFactory {\n", 
            "+\n", 
            "+        public SSLTargetConnectionFactory(SSLContext sslcontext,\n", 
            "+                                          SSLSetupHandler sslHandler, HttpParams params) {\n", 
            "+            super(sslcontext, sslHandler, params);\n", 
            "+        }\n", 
            "+\n", 
            "+        @Override\n", 
            "+        protected DefaultNHttpClientConnection createConnection(IOSession session,\n", 
            "+                                                                HttpResponseFactory responseFactory,\n", 
            "+                                                                ByteBufferAllocator allocator,\n", 
            "+                                                                HttpParams params) {\n", 
            "+            session = LoggingUtils.decorate(session, \"sslclient\");\n", 
            "+            return LoggingUtils.createClientConnection(\n", 
            "+                    session,\n", 
            "+                    responseFactory,\n", 
            "+                    allocator,\n", 
            "+                    params);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    /*protected SSLIOSession createSSLIOSession(IOSession session,\n", 
            "                                               SSLContext sslcontext,\n", 
            "                                               SSLSetupHandler sslHandler) {\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-66,15 +86,5", 
          "lines": [
            "         }\n", 
            " \n", 
            "         return super.createSSLIOSession(session, customContext, sslHandler);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    protected NHttpClientIOTarget createConnection(IOSession session) {\n", 
            "-        session = LoggingUtils.decorate(session, \"sslclient\");\n", 
            "-        return LoggingUtils.createClientConnection(\n", 
            "-                session,\n", 
            "-                createHttpResponseFactory(),\n", 
            "-                createByteBufferAllocator(),\n", 
            "-                params);\n", 
            "-    }\n", 
            "+    }*/\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SSLTargetIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SSLTargetIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-32,11 +32,7", 
          "lines": [
            " import org.apache.http.HttpResponse;\n", 
            " import org.apache.http.HttpStatus;\n", 
            " import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.nio.ContentDecoder;\n", 
            "-import org.apache.http.nio.ContentEncoder;\n", 
            "-import org.apache.http.nio.NHttpClientConnection;\n", 
            "-import org.apache.http.nio.NHttpClientHandler;\n", 
            "-import org.apache.http.nio.NHttpServerConnection;\n", 
            "+import org.apache.http.nio.*;\n", 
            " import org.apache.synapse.transport.nhttp.NhttpConstants;\n", 
            " import org.apache.synapse.transport.passthru.config.TargetConfiguration;\n", 
            " import org.apache.synapse.transport.passthru.connections.HostConnections;\n"
          ]
        }, 
        {
          "locn": "-45,7 +41,7", 
          "lines": [
            " /**\n", 
            "  * This class is handling events from the transport -- > client.\n", 
            "  */\n", 
            "-public class TargetHandler implements NHttpClientHandler {\n", 
            "+public class TargetHandler implements NHttpClientEventHandler {\n", 
            " \n", 
            "     private static final Log log = LogFactory.getLog(TargetHandler.class);\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-453,6 +449,31", 
          "lines": [
            "         targetConfiguration.getConnections().shutdownConnection(conn);\n", 
            "     }\n", 
            " \n", 
            "+    public void endOfInput(NHttpClientConnection conn) throws IOException {\n", 
            "+        closed(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void exception(NHttpClientConnection conn, Exception e) {\n", 
            "+        if (e instanceof HttpException) {\n", 
            "+            exception(conn, (HttpException) e);\n", 
            "+        } else if (e instanceof IOException) {\n", 
            "+            exception(conn, (IOException) e);\n", 
            "+        } else {\n", 
            "+            ProtocolState state = TargetContext.getState(conn);\n", 
            "+            MessageContext requestMsgCtx = TargetContext.get(conn).getRequestMsgCtx();\n", 
            "+            if (requestMsgCtx != null) {\n", 
            "+                targetErrorHandler.handleError(requestMsgCtx,\n", 
            "+                        ErrorCodes.SND_IO_ERROR,\n", 
            "+                        \"Error in Sender\",\n", 
            "+                        e,\n", 
            "+                        state);\n", 
            "+            }\n", 
            "+\n", 
            "+            TargetContext.updateState(conn, ProtocolState.CLOSING);\n", 
            "+            targetConfiguration.getConnections().shutdownConnection(conn);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "     private boolean isResponseHaveBodyExpected(\n", 
            "             final String method, final HttpResponse response) {\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-41,10 +41,7", 
          "lines": [
            " import org.apache.http.entity.BasicHttpEntity;\n", 
            " import org.apache.http.impl.DefaultConnectionReuseStrategy;\n", 
            " import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.nio.ContentDecoder;\n", 
            "-import org.apache.http.nio.ContentEncoder;\n", 
            "-import org.apache.http.nio.NHttpClientConnection;\n", 
            "-import org.apache.http.nio.NHttpClientHandler;\n", 
            "+import org.apache.http.nio.*;\n", 
            " import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            " import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            " import org.apache.http.nio.util.ContentOutputBuffer;\n"
          ]
        }, 
        {
          "locn": "-75,7 +72,7", 
          "lines": [
            "  * process every connection. Hence this class should not store any data related to a single\n", 
            "  * connection - as this is being shared.\n", 
            "  */\n", 
            "-public class ClientHandler implements NHttpClientHandler {\n", 
            "+public class ClientHandler implements NHttpClientEventHandler {\n", 
            " \n", 
            "     private static final Log log = LogFactory.getLog(ClientHandler.class);\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-331,6 +328,21", 
          "lines": [
            "         context.removeAttribute(REQUEST_SOURCE_BUFFER);\n", 
            "     }\n", 
            " \n", 
            "+    public void endOfInput(NHttpClientConnection conn) throws IOException {\n", 
            "+        closed(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void exception(NHttpClientConnection conn, Exception e) {\n", 
            "+        if (e instanceof HttpException) {\n", 
            "+            exception(conn, (HttpException) e);\n", 
            "+        } else if (e instanceof IOException) {\n", 
            "+            exception(conn, (IOException) e);\n", 
            "+        } else {\n", 
            "+            log.error(e.getMessage(), e);\n", 
            "+            shutdownConnection(conn);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "     /**\n", 
            "      * Handle Http protocol violations encountered while reading from underlying channels\n", 
            "      * \n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ClientHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ClientHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-21,8 +21,6", 
          "lines": [
            " \n", 
            " import java.io.IOException;\n", 
            " import java.io.FileInputStream;\n", 
            "-import java.net.SocketAddress;\n", 
            "-import java.net.URL;\n", 
            " import java.security.GeneralSecurityException;\n", 
            " import java.security.KeyStore;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-43,9 +41,10", 
          "lines": [
            " import org.apache.axis2.description.TransportInDescription;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.impl.nio.reactor.SSLIOSessionHandler;\n", 
            "-import org.apache.http.nio.NHttpServiceHandler;\n", 
            "+import org.apache.http.nio.NHttpServerEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOEventDispatch;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " \n", 
            " public class HttpCoreNIOSSLListener extends HttpCoreNIOListener {\n"
          ]
        }, 
        {
          "locn": "-53,8 +52,8", 
          "lines": [
            "     private static final Log log = LogFactory.getLog(HttpCoreNIOSSLListener.class);\n", 
            " \n", 
            "     protected IOEventDispatch getEventDispatch(\n", 
            "-        NHttpServiceHandler handler, SSLContext sslContext,\n", 
            "-        SSLIOSessionHandler sslIOSessionHandler, HttpParams params) {\n", 
            "+        NHttpServerEventHandler handler, SSLContext sslContext,\n", 
            "+        SSLSetupHandler sslIOSessionHandler, HttpParams params) {\n", 
            "         return new SSLServerIOEventDispatch(handler, sslContext, sslIOSessionHandler, params);\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-171,13 +170,13", 
          "lines": [
            "      * @return the SSLIOSessionHandler to be used\n", 
            "      * @throws AxisFault if a configuration error occurs\n", 
            "      */\n", 
            "-    protected SSLIOSessionHandler getSSLIOSessionHandler(TransportInDescription transportIn) throws AxisFault {\n", 
            "+    protected SSLSetupHandler getSSLIOSessionHandler(TransportInDescription transportIn) throws AxisFault {\n", 
            " \n", 
            "         final Parameter clientAuth = transportIn.getParameter(\"SSLVerifyClient\");\n", 
            " \n", 
            "-        return new SSLIOSessionHandler() {\n", 
            "+        return new SSLSetupHandler() {\n", 
            " \n", 
            "-            public void initalize(SSLEngine sslengine, HttpParams params) {\n", 
            "+            public void initalize(SSLEngine sslengine) {\n", 
            "                 if (clientAuth != null) {\n", 
            "                     if (\"optional\".equals(clientAuth.getValue())) {\n", 
            "                         sslengine.setWantClientAuth(true);\n"
          ]
        }, 
        {
          "locn": "-187,8 +186,9", 
          "lines": [
            "                 }\n", 
            "             }\n", 
            " \n", 
            "-            public void verify(SocketAddress removeAddress, SSLSession session)\n", 
            "-                throws SSLException {}\n", 
            "+            public void verify(IOSession ioSession, SSLSession sslSession) throws SSLException {\n", 
            "+\n", 
            "+            }\n", 
            "         };\n", 
            "     }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLListener.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLListener.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,6 +16,7", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.nhttp;\n", 
            " \n", 
            " import java.io.IOException;\n"
          ]
        }, 
        {
          "locn": "-24,23 +25,20", 
          "lines": [
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.http.HttpException;\n", 
            " import org.apache.http.HttpResponse;\n", 
            "-import org.apache.http.nio.ContentDecoder;\n", 
            "-import org.apache.http.nio.ContentEncoder;\n", 
            "-import org.apache.http.nio.NHttpClientConnection;\n", 
            "-import org.apache.http.nio.NHttpClientHandler;\n", 
            "+import org.apache.http.nio.*;\n", 
            " \n", 
            " /**\n", 
            "- * Decorator class intended to transparently extend an {@link NHttpClientHandler}\n", 
            "+ * Decorator class intended to transparently extend an {@link NHttpClientEventHandler}\n", 
            "  * with basic event logging capabilities using Commons Logging. \n", 
            "  */\n", 
            "-class LoggingNHttpClientHandler implements NHttpClientHandler {\n", 
            "+class LoggingNHttpClientHandler implements NHttpClientEventHandler {\n", 
            " \n", 
            "     private final Log log;\n", 
            "-    private final NHttpClientHandler handler;\n", 
            "+    private final NHttpClientEventHandler handler;\n", 
            "     \n", 
            "     public LoggingNHttpClientHandler(\n", 
            "             final Log log, \n", 
            "-            final NHttpClientHandler handler) {\n", 
            "+            final NHttpClientEventHandler handler) {\n", 
            "         super();\n", 
            "         if (handler == null) {\n", 
            "             throw new IllegalArgumentException(\"HTTP client handler may not be null\");\n"
          ]
        }, 
        {
          "locn": "-49,7 +47,7", 
          "lines": [
            "         this.log = LogFactory.getLog(handler.getClass());\n", 
            "     }\n", 
            "     \n", 
            "-    public void connected(final NHttpClientConnection conn, final Object attachment) {\n", 
            "+    public void connected(final NHttpClientConnection conn, final Object attachment) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Connected (\" + attachment + \")\");\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-63,17 +61,19", 
          "lines": [
            "         this.handler.closed(conn);\n", 
            "     }\n", 
            " \n", 
            "-    public void exception(final NHttpClientConnection conn, final IOException ex) {\n", 
            "-        this.log.error(\"HTTP connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "-        this.handler.exception(conn, ex);\n", 
            "+    public void endOfInput(NHttpClientConnection conn) throws IOException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Closed at remote end\");\n", 
            "+        }\n", 
            "+        this.handler.endOfInput(conn);\n", 
            "     }\n", 
            " \n", 
            "-    public void exception(final NHttpClientConnection conn, final HttpException ex) {\n", 
            "+    public void exception(NHttpClientConnection conn, Exception ex) {\n", 
            "         this.log.error(\"HTTP connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "         this.handler.exception(conn, ex);\n", 
            "     }\n", 
            " \n", 
            "-    public void requestReady(final NHttpClientConnection conn) {\n", 
            "+    public void requestReady(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Request ready\" + getRequestMessageID(conn));\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-80,7 +80,7", 
          "lines": [
            "         this.handler.requestReady(conn);\n", 
            "     }\n", 
            " \n", 
            "-    public void outputReady(final NHttpClientConnection conn, final ContentEncoder encoder) {\n", 
            "+    public void outputReady(final NHttpClientConnection conn, final ContentEncoder encoder) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Output ready\" + getRequestMessageID(conn));\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-90,7 +90,7", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    public void responseReceived(final NHttpClientConnection conn) {\n", 
            "+    public void responseReceived(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "         HttpResponse response = conn.getHttpResponse();\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \" : \"\n"
          ]
        }, 
        {
          "locn": "-99,7 +99,7", 
          "lines": [
            "         this.handler.responseReceived(conn);\n", 
            "     }\n", 
            " \n", 
            "-    public void inputReady(final NHttpClientConnection conn, final ContentDecoder decoder) {\n", 
            "+    public void inputReady(final NHttpClientConnection conn, final ContentDecoder decoder) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Input ready\" + getRequestMessageID(conn));\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-109,7 +109,7", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    public void timeout(final NHttpClientConnection conn) {\n", 
            "+    public void timeout(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "         if (this.log.isDebugEnabled()) {\n", 
            "             this.log.debug(\"HTTP connection \" + conn + \": Timeout\" + getRequestMessageID(conn));\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpClientHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpClientHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,6 +16,7", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.nhttp;\n", 
            " \n", 
            " import org.apache.axis2.context.ConfigurationContext;\n"
          ]
        }, 
        {
          "locn": "-28,10 +29,7", 
          "lines": [
            " import org.apache.http.entity.ByteArrayEntity;\n", 
            " import org.apache.http.impl.DefaultConnectionReuseStrategy;\n", 
            " import org.apache.http.impl.DefaultHttpResponseFactory;\n", 
            "-import org.apache.http.nio.ContentDecoder;\n", 
            "-import org.apache.http.nio.ContentEncoder;\n", 
            "-import org.apache.http.nio.NHttpServerConnection;\n", 
            "-import org.apache.http.nio.NHttpServiceHandler;\n", 
            "+import org.apache.http.nio.*;\n", 
            " import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            " import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            " import org.apache.http.nio.util.ContentOutputBuffer;\n"
          ]
        }, 
        {
          "locn": "-66,7 +64,7", 
          "lines": [
            "  * process every connection. Hence this class should not store any data related to a single\n", 
            "  * connection - as this is being shared.\n", 
            "  */\n", 
            "-public class ServerHandler implements NHttpServiceHandler {\n", 
            "+public class ServerHandler implements NHttpServerEventHandler {\n", 
            " \n", 
            "     private static final Log log = LogFactory.getLog(ServerHandler.class);\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-514,6 +512,24", 
          "lines": [
            "         } catch (Exception ignore) {}        \n", 
            "     }\n", 
            " \n", 
            "+    public void endOfInput(NHttpServerConnection conn) throws IOException {\n", 
            "+        closed(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void exception(NHttpServerConnection conn, Exception e) {\n", 
            "+        if (e instanceof HttpException) {\n", 
            "+            exception(conn, (HttpException) e);\n", 
            "+        } else if (e instanceof IOException) {\n", 
            "+            exception(conn, (IOException) e);\n", 
            "+        } else {\n", 
            "+            log.error(\"Unexpected I/O error: \" + e.getClass().getName(), e);\n", 
            "+            if (metrics != null) {\n", 
            "+                metrics.incrementFaultsReceiving();\n", 
            "+            }\n", 
            "+            shutdownConnection(conn);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "     /**\n", 
            "      * Handle IO errors while reading or writing to underlying channels\n", 
            "      * @param conn the connection being processed\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ServerHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ServerHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,18 +16,21", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.nhttp;\n", 
            " \n", 
            " import javax.net.ssl.SSLContext;\n", 
            " \n", 
            "-import org.apache.http.impl.nio.reactor.SSLIOSessionHandler;\n", 
            "-import org.apache.http.impl.nio.reactor.SSLIOSession;\n", 
            "-import org.apache.http.nio.NHttpClientHandler;\n", 
            "-import org.apache.http.nio.NHttpClientIOTarget;\n", 
            "+import org.apache.http.HttpResponseFactory;\n", 
            "+import org.apache.http.impl.nio.DefaultHttpClientIODispatch;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "+import org.apache.http.impl.nio.SSLNHttpClientConnectionFactory;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "+import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " \n", 
            "-import java.net.InetSocketAddress;\n", 
            " import java.util.Map;\n", 
            " \n", 
            " /**\n"
          ]
        }, 
        {
          "locn": "-36,16 +39,16", 
          "lines": [
            "  * particular server from the specified map it uses the default SSLContext.\n", 
            "  */\n", 
            " public class SSLClientIOEventDispatch \n", 
            "-    extends org.apache.http.impl.nio.SSLClientIOEventDispatch {\n", 
            "+    extends DefaultHttpClientIODispatch {\n", 
            " \n", 
            "     private Map<String, SSLContext> contextMap;\n", 
            " \n", 
            "     public SSLClientIOEventDispatch(\n", 
            "-            final NHttpClientHandler handler,\n", 
            "+            final NHttpClientEventHandler handler,\n", 
            "             final SSLContext sslcontext,\n", 
            "-            final SSLIOSessionHandler sslHandler,\n", 
            "+            final SSLSetupHandler sslHandler,\n", 
            "             final HttpParams params) {\n", 
            "-        super(LoggingUtils.decorate(handler), sslcontext, sslHandler, params);\n", 
            "+        super(LoggingUtils.decorate(handler), new SSLTargetConnectionFactory(sslcontext, sslHandler, params));\n", 
            "     }\n", 
            " \n", 
            "     public void setContextMap(Map<String,SSLContext> contextMap) {\n"
          ]
        }, 
        {
          "locn": "-52,30 +55,42", 
          "lines": [
            "         this.contextMap = contextMap;\n", 
            "     }\n", 
            " \n", 
            "-    protected SSLIOSession createSSLIOSession(IOSession ioSession, SSLContext sslContext,\n", 
            "-                                              SSLIOSessionHandler sslioSessionHandler) {\n", 
            "+//    protected SSLIOSession createSSLIOSession(IOSession ioSession, SSLContext sslContext,\n", 
            "+//                                              SSLIOSessionHandler sslioSessionHandler) {\n", 
            "+//\n", 
            "+//        InetSocketAddress address = (InetSocketAddress) ioSession.getRemoteAddress();\n", 
            "+//        String host = address.getHostName() + \":\" + address.getPort();\n", 
            "+//        SSLContext customContext = null;\n", 
            "+//        if (contextMap != null) {\n", 
            "+//            // See if there's a custom SSL profile configured for this server\n", 
            "+//            customContext = contextMap.get(host);\n", 
            "+//        }\n", 
            "+//\n", 
            "+//        if (customContext == null) {\n", 
            "+//            customContext = sslContext;\n", 
            "+//        }\n", 
            "+//\n", 
            "+//        return super.createSSLIOSession(ioSession, customContext, sslioSessionHandler);\n", 
            "+//    }\n", 
            " \n", 
            "-        InetSocketAddress address = (InetSocketAddress) ioSession.getRemoteAddress();\n", 
            "-        String host = address.getHostName() + \":\" + address.getPort();\n", 
            "-        SSLContext customContext = null;\n", 
            "-        if (contextMap != null) {\n", 
            "-            // See if there's a custom SSL profile configured for this server\n", 
            "-            customContext = contextMap.get(host);\n", 
            "+    private static class SSLTargetConnectionFactory extends SSLNHttpClientConnectionFactory {\n", 
            "+\n", 
            "+        public SSLTargetConnectionFactory(SSLContext sslcontext,\n", 
            "+                                          SSLSetupHandler sslHandler, HttpParams params) {\n", 
            "+            super(sslcontext, sslHandler, params);\n", 
            "         }\n", 
            " \n", 
            "-        if (customContext == null) {\n", 
            "-            customContext = sslContext;\n", 
            "+        @Override\n", 
            "+        protected DefaultNHttpClientConnection createConnection(IOSession session,\n", 
            "+                                                                HttpResponseFactory responseFactory,\n", 
            "+                                                                ByteBufferAllocator allocator,\n", 
            "+                                                                HttpParams params) {\n", 
            "+            return LoggingUtils.createClientConnection(\n", 
            "+                    session,\n", 
            "+                    responseFactory,\n", 
            "+                    allocator,\n", 
            "+                    params);\n", 
            "         }\n", 
            "-        \n", 
            "-        return super.createSSLIOSession(ioSession, customContext, sslioSessionHandler);\n", 
            "     }\n", 
            " \n", 
            "-    protected NHttpClientIOTarget createConnection(IOSession session) {\n", 
            "-        return LoggingUtils.createClientConnection(\n", 
            "-                session, \n", 
            "-                createHttpResponseFactory(), \n", 
            "-                createByteBufferAllocator(), \n", 
            "-                this.params);\n", 
            "-    }\n", 
            "-\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/SSLClientIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/SSLClientIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-21,9 +21,10", 
          "lines": [
            " \n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.commons.logging.Log;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOEventDispatch;\n", 
            "-import org.apache.http.nio.NHttpClientHandler;\n", 
            "-import org.apache.http.impl.nio.reactor.SSLIOSessionHandler;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " import org.apache.axis2.AxisFault;\n", 
            " import org.apache.axis2.description.Parameter;\n"
          ]
        }, 
        {
          "locn": "-47,8 +48,8", 
          "lines": [
            " \n", 
            "     private static final Log log = LogFactory.getLog(HttpCoreNIOSSLSender.class);\n", 
            " \n", 
            "-    protected IOEventDispatch getEventDispatch(NHttpClientHandler handler, SSLContext sslContext,\n", 
            "-        SSLIOSessionHandler sslIOSessionHandler, HttpParams params,\n", 
            "+    protected IOEventDispatch getEventDispatch(NHttpClientEventHandler handler, SSLContext sslContext,\n", 
            "+        SSLSetupHandler sslIOSessionHandler, HttpParams params,\n", 
            "         TransportOutDescription transportOut) throws AxisFault {\n", 
            " \n", 
            "         SSLClientIOEventDispatch dispatch = new SSLClientIOEventDispatch(handler, sslContext,\n"
          ]
        }, 
        {
          "locn": "-96,7 +97,7", 
          "lines": [
            "      * @return the SSLIOSessionHandler to be used\n", 
            "      * @throws AxisFault if a configuration error occurs\n", 
            "      */\n", 
            "-    protected SSLIOSessionHandler getSSLIOSessionHandler(TransportOutDescription transportOut)\n", 
            "+    protected SSLSetupHandler getSSLIOSessionHandler(TransportOutDescription transportOut)\n", 
            "             throws AxisFault {\n", 
            " \n", 
            "         final Parameter hostnameVerifier = transportOut.getParameter(\"HostnameVerifier\");\n"
          ]
        }, 
        {
          "locn": "-275,17 +276,16", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    private SSLIOSessionHandler createSSLIOSessionHandler(final String hostnameVerifier)\n", 
            "+    private SSLSetupHandler createSSLIOSessionHandler(final String hostnameVerifier)\n", 
            "             throws AxisFault {\n", 
            " \n", 
            "-        return new SSLIOSessionHandler() {\n", 
            "+        return new SSLSetupHandler() {\n", 
            " \n", 
            "-            public void initalize(SSLEngine sslengine, HttpParams params) {\n", 
            "+            public void initalize(SSLEngine sslengine) {\n", 
            "             }\n", 
            " \n", 
            "-            public void verify(SocketAddress remoteAddress, SSLSession session)\n", 
            "-                throws SSLException {\n", 
            "-\n", 
            "+            public void verify(IOSession ioSession, SSLSession session) throws SSLException {\n", 
            "+                SocketAddress remoteAddress = ioSession.getRemoteAddress();\n", 
            "                 String address;\n", 
            "                 if (remoteAddress instanceof InetSocketAddress) {\n", 
            "                     address = ((InetSocketAddress) remoteAddress).getHostName();\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-31,6 +31,7", 
          "lines": [
            " import org.apache.axis2.transport.base.endpoint.config.URLEndpointsConfigurationFactory;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.impl.nio.reactor.IOReactorConfig;\n", 
            " import org.apache.http.nio.params.NIOReactorPNames;\n", 
            " import org.apache.http.params.BasicHttpParams;\n", 
            " import org.apache.http.params.HttpConnectionParams;\n"
          ]
        }, 
        {
          "locn": "-56,6 +57,7", 
          "lines": [
            "  * This class is being used to hold the different runtime objects used by the Listeners\n", 
            "  */\n", 
            " public class ListenerContext {\n", 
            "+\n", 
            "     private Log log = LogFactory.getLog(ListenerContext.class);\n", 
            " \n", 
            "     /** The Axis2 configuration context */\n"
          ]
        }, 
        {
          "locn": "-265,6 +267,22", 
          "lines": [
            "         return params;\n", 
            "     }\n", 
            " \n", 
            "+    public IOReactorConfig getReactorConfig() {\n", 
            "+        IOReactorConfig config = new IOReactorConfig();\n", 
            "+        NHttpConfiguration cfg = NHttpConfiguration.getInstance();\n", 
            "+        config.setIoThreadCount(cfg.getServerIOWorkers());\n", 
            "+        config.setSoTimeout(cfg.getProperty(NhttpConstants.SO_TIMEOUT_RECEIVER, 60000));\n", 
            "+        config.setSndBufSize(cfg.getProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));\n", 
            "+        config.setRcvBufSize(cfg.getProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));\n", 
            "+        config.setTcpNoDelay(cfg.getProperty(HttpConnectionParams.TCP_NODELAY, 1) == 1);\n", 
            "+        if (cfg.getBooleanValue(NIOReactorPNames.INTEREST_OPS_QUEUEING, false)) {\n", 
            "+            config.setInterestOpQueued(true);\n", 
            "+        }\n", 
            "+        if (cfg.getBooleanValue(HttpConnectionParams.SO_REUSEADDR, false)) {\n", 
            "+            config.setSoReuseAddress(true);\n", 
            "+        }\n", 
            "+        return config;\n", 
            "+    }\n", 
            " \n", 
            "     public ConfigurationContext getCfgCtx() {\n", 
            "         return cfgCtx;\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ListenerContext.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ListenerContext.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,27 +16,41", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.nhttp;\n", 
            " \n", 
            "-import org.apache.http.impl.nio.DefaultServerIOEventDispatch;\n", 
            "-import org.apache.http.nio.NHttpServerIOTarget;\n", 
            "-import org.apache.http.nio.NHttpServiceHandler;\n", 
            "+import org.apache.http.HttpRequestFactory;\n", 
            "+import org.apache.http.impl.nio.DefaultHttpServerIODispatch;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpServerConnectionFactory;\n", 
            "+import org.apache.http.nio.NHttpServerEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            " import org.apache.http.params.HttpParams;\n", 
            " \n", 
            "-public class PlainServerIOEventDispatch extends DefaultServerIOEventDispatch {\n", 
            "+public class PlainServerIOEventDispatch extends DefaultHttpServerIODispatch {\n", 
            " \n", 
            "-    public PlainServerIOEventDispatch(final NHttpServiceHandler handler, final HttpParams params) {\n", 
            "-        super(LoggingUtils.decorate(handler), params);\n", 
            "+    public PlainServerIOEventDispatch(NHttpServerEventHandler handler, HttpParams params) {\n", 
            "+        super(LoggingUtils.decorate(handler), new SourceConnectionFactory(params));\n", 
            "     }\n", 
            "-    \n", 
            "-    @Override\n", 
            "-    protected NHttpServerIOTarget createConnection(IOSession session) {\n", 
            "-        return LoggingUtils.createServerConnection(\n", 
            "-                session, \n", 
            "-                createHttpRequestFactory(), \n", 
            "-                this.allocator, \n", 
            "-                this.params);\n", 
            "+\n", 
            "+    private static class SourceConnectionFactory extends DefaultNHttpServerConnectionFactory {\n", 
            "+\n", 
            "+        public SourceConnectionFactory(HttpParams params) {\n", 
            "+            super(params);\n", 
            "+        }\n", 
            "+\n", 
            "+        @Override\n", 
            "+        protected DefaultNHttpServerConnection createConnection(IOSession session,\n", 
            "+                                                                HttpRequestFactory requestFactory,\n", 
            "+                                                                ByteBufferAllocator allocator,\n", 
            "+                                                                HttpParams params) {\n", 
            "+            return LoggingUtils.createServerConnection(\n", 
            "+                    session,\n", 
            "+                    requestFactory,\n", 
            "+                    allocator,\n", 
            "+                    params);\n", 
            "+        }\n", 
            "     }\n", 
            "     \n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/PlainServerIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/PlainServerIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-165,21 +165,21", 
          "lines": [
            "     <!-- Transport Ins -->\n", 
            "     <!-- ================================================= -->\n", 
            "     <!-- the non blocking http transport based on HttpCore + NIO extensions -->\n", 
            "-    <transportReceiver name=\"http\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOListener\">\n", 
            "-    \t<parameter name=\"port\">8280</parameter>\n", 
            "-    \t<parameter name=\"non-blocking\">true</parameter>\n", 
            "+    <transportReceiver name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpListener\">\n", 
            "+        <parameter name=\"port\">8280</parameter>\n", 
            "+        <parameter name=\"non-blocking\">true</parameter>\n", 
            "+        <parameter name=\"httpGetProcessor\" locked=\"false\">org.apache.synapse.transport.passthru.api.PassThroughNHttpGetProcessor</parameter>\n", 
            "         <!--parameter name=\"bind-address\" locked=\"false\">hostname or IP address</parameter-->\n", 
            "         <!--parameter name=\"WSDLEPRPrefix\" locked=\"false\">https://apachehost:port/somepath</parameter-->\n", 
            "-        <!-- paramter name=\"priorityConfigFile\" locked=\"false\">location of priority configuration file<parameter-->\n", 
            "     </transportReceiver>\n", 
            " \n", 
            "-    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->\n", 
            "-    <!--transportReceiver name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener\">\n", 
            "-    \t<parameter name=\"port\" locked=\"false\">8243</parameter>\n", 
            "+    <transportReceiver name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLListener\">\n", 
            "+        <parameter name=\"port\" locked=\"false\">8243</parameter>\n", 
            "         <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"httpGetProcessor\" locked=\"false\">org.apache.synapse.transport.passthru.api.PassThroughNHttpGetProcessor</parameter>\n", 
            "         <parameter name=\"keystore\" locked=\"false\">\n", 
            "             <KeyStore>\n", 
            "-                <Location>lib/identity.jks</Location>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "                 <Type>JKS</Type>\n", 
            "                 <Password>password</Password>\n", 
            "                 <KeyPassword>password</KeyPassword>\n"
          ]
        }, 
        {
          "locn": "-187,12 +187,14", 
          "lines": [
            "         </parameter>\n", 
            "         <parameter name=\"truststore\" locked=\"false\">\n", 
            "             <TrustStore>\n", 
            "-                <Location>lib/trust.jks</Location>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "                 <Type>JKS</Type>\n", 
            "                 <Password>password</Password>\n", 
            "             </TrustStore>\n", 
            "         </parameter>\n", 
            "-    </transportReceiver-->\n", 
            "+        <!--<parameter name=\"SSLVerifyClient\">require</parameter>\n", 
            "+            supports optional|require or defaults to none -->\n", 
            "+    </transportReceiver>\n", 
            " \n", 
            "     <!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)-->\n", 
            "     <transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\">\n"
          ]
        }, 
        {
          "locn": "-242,7 +244,7", 
          "lines": [
            "     <!-- Transport Outs -->\n", 
            "     <!-- ================================================= -->\n", 
            " \n", 
            "-    <transportSender name=\"http\"  class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSender\">\n", 
            "+    <transportSender name=\"http\"  class=\"org.apache.synapse.transport.passthru.PassThroughHttpSender\">\n", 
            "         <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "         <parameter name=\"warnOnHTTP500\" locked=\"false\">*</parameter>\n", 
            "         <!--parameter name=\"http.proxyHost\" locked=\"false\">localhost</parameter>\n"
          ]
        }, 
        {
          "locn": "-249,12 +251,13", 
          "lines": [
            "         <parameter name=\"http.proxyPort\" locked=\"false\">3128</parameter>\n", 
            "         <parameter name=\"http.nonProxyHosts\" locked=\"false\">localhost|moon|sun</parameter-->\n", 
            "     </transportSender>\n", 
            "-    <!--transportSender name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender\">\n", 
            "+\n", 
            "+    <transportSender name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLSender\">\n", 
            "         <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "         <parameter name=\"warnOnHTTP500\" locked=\"false\">*</parameter>\n", 
            "         <parameter name=\"keystore\" locked=\"false\">\n", 
            "             <KeyStore>\n", 
            "-                <Location>lib/identity.jks</Location>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "                 <Type>JKS</Type>\n", 
            "                 <Password>password</Password>\n", 
            "                 <KeyPassword>password</KeyPassword>\n"
          ]
        }, 
        {
          "locn": "-262,12 +265,14", 
          "lines": [
            "         </parameter>\n", 
            "         <parameter name=\"truststore\" locked=\"false\">\n", 
            "             <TrustStore>\n", 
            "-                <Location>lib/trust.jks</Location>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "                 <Type>JKS</Type>\n", 
            "                 <Password>password</Password>\n", 
            "             </TrustStore>\n", 
            "         </parameter>\n", 
            "-    </transportSender-->\n", 
            "+        <!--<parameter name=\"SSLVerifyClient\">require</parameter>\n", 
            "+            supports optional|require or defaults to none -->\n", 
            "+    </transportSender>\n", 
            "    \n", 
            "     <!-- Uncomment Transport sender for the non blocking local transport-->\n", 
            "     <!--transportSender name=\"local\" class=\"org.apache.axis2.transport.local.NonBlockingLocalTransportSender\"/-->\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_jms.xml", 
      "from": "java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_jms.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-1102,7 +1102,7", 
          "lines": [
            "         <truezip.version>6.6</truezip.version>\n", 
            "         <jsch.version>0.1.31</jsch.version>\n", 
            "         <jms-1.1-spec.version>1.1</jms-1.1-spec.version>\n", 
            "-        <httpcore.nio.version>4.1.4</httpcore.nio.version>\n", 
            "+        <httpcore.nio.version>4.2.4</httpcore.nio.version>\n", 
            "         <http.client.version>4.1</http.client.version>\n", 
            "         <aspectj.version>1.6.1</aspectj.version>\n", 
            "         <qfj.version>1.4.0</qfj.version>\n"
          ]
        }
      ], 
      "to": "java/pom.xml", 
      "from": "java/pom.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-18,5 +18,6", 
          "lines": [
            "         assertEquals(response.getStatus(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n", 
            "         OMElement body = response.getBodyAsXML();\n", 
            "         assertEquals(body.getLocalName(), \"Exception\");\n", 
            "+        log.info(\"An exception was thrown as expected.\");\n", 
            "     }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/rest/Sample10001.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/rest/Sample10001.java"
    }
  ], 
  "id": "1506662"
}