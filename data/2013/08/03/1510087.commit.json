{
  "when": "2013-08-03T21:48:45-04:00", 
  "message": "Adding serialization tests for message store mediator and call-template mediator", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-0,0 +1,46", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.config.xml;\n", 
            "+\n", 
            "+public class MessageStoreMediatorSerializationTest extends AbstractTestCase {\n", 
            "+\n", 
            "+    private MessageStoreMediatorFactory factory;\n", 
            "+    private MessageStoreMediatorSerializer serializer;\n", 
            "+\n", 
            "+    public MessageStoreMediatorSerializationTest() {\n", 
            "+        super(MessageStoreMediatorSerializationTest.class.getName());\n", 
            "+        factory = new MessageStoreMediatorFactory();\n", 
            "+        serializer = new MessageStoreMediatorSerializer();\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testStoreMediatorSerializationScenarioOne() throws Exception {\n", 
            "+        String inputXml = \"<store xmlns=\\\"http://ws.apache.org/ns/synapse\\\" \" +\n", 
            "+                \"messageStore=\\\"foo\\\"/>\";\n", 
            "+        assertTrue(serialization(inputXml, factory, serializer));\n", 
            "+        assertTrue(serialization(inputXml, serializer));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testStoreMediatorSerializationScenarioTwo() throws Exception {\n", 
            "+        String inputXml = \"<store xmlns=\\\"http://ws.apache.org/ns/synapse\\\" \" +\n", 
            "+                \"messageStore=\\\"foo\\\" sequence=\\\"bar\\\"/>\";\n", 
            "+        assertTrue(serialization(inputXml, factory, serializer));\n", 
            "+        assertTrue(serialization(inputXml, serializer));\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/config/xml/MessageStoreMediatorSerializationTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/config/xml/MessageStoreMediatorSerializationTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,57", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.config.xml;\n", 
            "+\n", 
            "+public class InvokeMediatorSerializationTest extends AbstractTestCase {\n", 
            "+\n", 
            "+    private InvokeMediatorFactory factory;\n", 
            "+    private InvokeMediatorSerializer serializer;\n", 
            "+\n", 
            "+    public InvokeMediatorSerializationTest() {\n", 
            "+        super(InvokeMediatorSerializationTest.class.getName());\n", 
            "+        factory = new InvokeMediatorFactory();\n", 
            "+        serializer = new InvokeMediatorSerializer();\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testInvokeMediatorSerializationScenarioOne() throws Exception {\n", 
            "+        String inputXml = \"<call-template xmlns=\\\"http://ws.apache.org/ns/synapse\\\" \" +\n", 
            "+                \"target=\\\"foo\\\"/>\";\n", 
            "+        assertTrue(serialization(inputXml, factory, serializer));\n", 
            "+        assertTrue(serialization(inputXml, serializer));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testInvokeMediatorSerializationScenarioTwo() throws Exception {\n", 
            "+        String inputXml = \"<call-template xmlns=\\\"http://ws.apache.org/ns/synapse\\\" \" +\n", 
            "+                \"target=\\\"foo\\\"><with-param name=\\\"bar\\\" value=\\\"bar_value\\\"/></call-template>\";\n", 
            "+        assertTrue(serialization(inputXml, factory, serializer));\n", 
            "+        assertTrue(serialization(inputXml, serializer));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testInvokeMediatorSerializationScenarioThree() throws Exception {\n", 
            "+        String inputXml = \"<call-template xmlns=\\\"http://ws.apache.org/ns/synapse\\\" \" +\n", 
            "+                \"target=\\\"foo\\\"><with-param name=\\\"bar\\\" value=\\\"bar_value\\\"/>\" +\n", 
            "+                \"<with-param name=\\\"bar2\\\" value=\\\"bar2_value\\\"/>\" +\n", 
            "+                \"<with-param name=\\\"bar3\\\" value=\\\"bar3_value\\\"/></call-template>\";\n", 
            "+        System.out.println(inputXml);\n", 
            "+        System.out.println(serializer.serializeSpecificMediator(factory.createSpecificMediator(createOMElement(inputXml), null)));\n", 
            "+        assertTrue(serialization(inputXml, factory, serializer));\n", 
            "+        assertTrue(serialization(inputXml, serializer));\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/config/xml/InvokeMediatorSerializationTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/config/xml/InvokeMediatorSerializationTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,6 +16,7", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.mediators.template;\n", 
            " \n", 
            " import org.apache.synapse.Mediator;\n"
          ]
        }, 
        {
          "locn": "-25,8 +26,8", 
          "lines": [
            " import org.apache.synapse.mediators.Value;\n", 
            " import org.apache.synapse.mediators.eip.EIPUtils;\n", 
            " \n", 
            "-import java.util.HashMap;\n", 
            " import java.util.Iterator;\n", 
            "+import java.util.LinkedHashMap;\n", 
            " import java.util.Map;\n", 
            " \n", 
            " /**\n"
          ]
        }, 
        {
          "locn": "-50,7 +51,8", 
          "lines": [
            "     private Map<String, Value> pName2ExpressionMap;\n", 
            " \n", 
            "     public InvokeMediator() {\n", 
            "-        pName2ExpressionMap = new HashMap<String, Value>();\n", 
            "+        // use a LinkedHashMap to maintain the order in which params are defined by the user\n", 
            "+        pName2ExpressionMap = new LinkedHashMap<String, Value>();\n", 
            "     }\n", 
            " \n", 
            "     public boolean mediate(MessageContext synCtx) {\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/template/InvokeMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/template/InvokeMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-71,9 +71,9", 
          "lines": [
            "             OMElement child = (OMElement) subElements.next();\n", 
            "             if (child.getQName().equals(WITH_PARAM_Q)) {\n", 
            "                 OMAttribute paramNameAttr = child.getAttribute(ATT_NAME);\n", 
            "-                Value paramValue = new ValueFactory().createValue(\"value\", child);\n", 
            "                 if (paramNameAttr != null) {\n", 
            "                     //set parameter value\n", 
            "+                    Value paramValue = new ValueFactory().createValue(\"value\", child);\n", 
            "                     invoker.addExpressionForParamName(paramNameAttr.getAttributeValue(), paramValue);\n", 
            "                 }\n", 
            "             }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/InvokeMediatorFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/InvokeMediatorFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-47,21 +47,21", 
          "lines": [
            "     protected Mediator createSpecificMediator(OMElement elem, Properties properties) {\n", 
            "         MessageStoreMediator messageStoreMediator = new MessageStoreMediator();\n", 
            "         OMAttribute nameAtt = elem.getAttribute(ATT_NAME);\n", 
            "-        if(nameAtt != null) {\n", 
            "+        if (nameAtt != null) {\n", 
            "             messageStoreMediator.setName(nameAtt.getAttributeValue());\n", 
            "         }\n", 
            " \n", 
            "         OMAttribute messageStoreNameAtt = elem.getAttribute(ATT_MESSAGE_STORE);\n", 
            " \n", 
            "-        if(messageStoreNameAtt != null) {\n", 
            "+        if (messageStoreNameAtt != null) {\n", 
            "             messageStoreMediator.setMessageStoreName(messageStoreNameAtt.getAttributeValue());\n", 
            "         } else {\n", 
            "-            throw new SynapseException(\"Message Store mediator must have a Message store defined\");\n", 
            "+            throw new SynapseException(\"Message Store mediator must have a message store defined\");\n", 
            "         }\n", 
            " \n", 
            "         OMAttribute sequenceAtt = elem.getAttribute(ATT_SEQUENCE);\n", 
            " \n", 
            "-        if(sequenceAtt != null) {\n", 
            "+        if (sequenceAtt != null) {\n", 
            "             messageStoreMediator.setOnStoreSequence(sequenceAtt.getAttributeValue());\n", 
            "         }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/MessageStoreMediatorFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/MessageStoreMediatorFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-69,7 +69,8", 
          "lines": [
            "                 key = new Value(attributeValue);\n", 
            "             }\n", 
            "         } else {\n", 
            "-            handleException(\"The 'key' attribute is required for the XSLT mediator\");\n", 
            "+            handleException(\"The '\" + name + \"' attribute is required on the \" +\n", 
            "+                    elem.getLocalName() + \" element\");\n", 
            "         }\n", 
            "         return key;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/ValueFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/ValueFactory.java"
    }
  ], 
  "id": "1510087"
}