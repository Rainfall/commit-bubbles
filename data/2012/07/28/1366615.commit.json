{
  "when": "2012-07-28T04:50:15-04:00", 
  "who": "veithen", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-0,0 +1,51", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.util;\n", 
            "+\n", 
            "+import java.io.StringReader;\n", 
            "+\n", 
            "+import junit.framework.TestCase;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMAbstractFactory;\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axiom.om.OMNamespace;\n", 
            "+import org.apache.axiom.om.OMXMLBuilderFactory;\n", 
            "+import org.apache.axiom.soap.SOAPEnvelope;\n", 
            "+import org.apache.axiom.soap.SOAPFactory;\n", 
            "+\n", 
            "+public class PayloadHelperTest extends TestCase {\n", 
            "+    /**\n", 
            "+     * Tests {@link PayloadHelper#setXMLPayload(SOAPEnvelope, OMElement)} with a SOAP envelope that\n", 
            "+     * has not been built completely.\n", 
            "+     */\n", 
            "+    public void testSetXMLPayloadWithIncompleteEnvelope() {\n", 
            "+        SOAPFactory factory = OMAbstractFactory.getSOAP11Factory();\n", 
            "+        SOAPEnvelope orgEnvelope = factory.getDefaultEnvelope();\n", 
            "+        OMNamespace ns = factory.createOMNamespace(\"urn:test\", \"p\");\n", 
            "+        factory.createOMElement(\"test\", ns, orgEnvelope.getBody()).setText(\"test\");\n", 
            "+        String message = orgEnvelope.toString();\n", 
            "+        SOAPEnvelope envelope = OMXMLBuilderFactory.createSOAPModelBuilder(\n", 
            "+                new StringReader(message)).getSOAPEnvelope();\n", 
            "+        OMElement newPayload = factory.createOMElement(\"test2\", ns);\n", 
            "+        newPayload.setText(\"test2\");\n", 
            "+        PayloadHelper.setXMLPayload(envelope, newPayload);\n", 
            "+        assertSame(newPayload, envelope.getBody().getFirstOMChild());\n", 
            "+        assertNull(newPayload.getNextOMSibling());\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/util/PayloadHelperTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/util/PayloadHelperTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-19,8 +19,6", 
          "lines": [
            " \r\n", 
            " package org.apache.synapse.util;\r\n", 
            " \r\n", 
            "-import java.util.Iterator;\r\n", 
            "-\r\n", 
            " import javax.activation.DataHandler;\r\n", 
            " \r\n", 
            " import javax.xml.namespace.QName;\r\n"
          ]
        }, 
        {
          "locn": "-114,10 +112,7", 
          "lines": [
            " \t\t\t\tenvelope.addChild(body);\r\n", 
            " \t\t\t}\r\n", 
            " \t\t} else {\r\n", 
            "-\t\t\tfor (Iterator it = body.getChildren(); it.hasNext();) {\r\n", 
            "-\t\t\t\tOMNode node = (OMNode) it.next();\r\n", 
            "-\t\t\t\tnode.discard();\r\n", 
            "-\t\t\t}\r\n", 
            "+\t\t    body.removeChildren();\r\n", 
            " \t\t}\r\n", 
            " \t\tbody.addChild(element);\r\n", 
            " \t}\r\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/util/PayloadHelper.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/util/PayloadHelper.java"
    }
  ], 
  "id": "1366615"
}