{
  "when": "2017-01-14T05:04:42-05:00", 
  "who": "veithen", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-358,7 +358,7", 
          "lines": [
            "     private void setFaultNode(SOAPFactory factory, SOAPFault fault) {\n", 
            "         if (faultNode != null) {\n", 
            "             SOAPFaultNode soapfaultNode = factory.createSOAPFaultNode();\n", 
            "-            soapfaultNode.setNodeValue(faultNode.toString());\n", 
            "+            soapfaultNode.setFaultNodeValue(faultNode.toString());\n", 
            "             fault.setNode(soapfaultNode);\n", 
            "         }\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/transform/FaultMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/transform/FaultMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-27,7 +27,7", 
          "lines": [
            " \n", 
            " import org.apache.axiom.om.OMAbstractFactory;\n", 
            " import org.apache.axiom.om.OMElement;\n", 
            "-import org.apache.axiom.om.impl.dom.jaxp.DOOMDocumentBuilderFactory;\n", 
            "+import org.apache.axiom.om.dom.DOMMetaFactory;\n", 
            " import org.apache.axiom.om.util.ElementHelper;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n"
          ]
        }, 
        {
          "locn": "-45,8 +45,10", 
          "lines": [
            "     private Document document;\n", 
            " \n", 
            "     public Result getResult() {\n", 
            "+        DOMMetaFactory domMetaFactory\n", 
            "+                = ((DOMMetaFactory)OMAbstractFactory.getMetaFactory(OMAbstractFactory.FEATURE_DOM));\n", 
            "         try {\n", 
            "-            document = new DOOMDocumentBuilderFactory().newDocumentBuilder().newDocument();\n", 
            "+            document = domMetaFactory.newDocumentBuilderFactory().newDocumentBuilder().newDocument();\n", 
            "         } catch (ParserConfigurationException e) {\n", 
            "             handleException(\"Unable to create empty DOOM document\", e);\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/util/jaxp/DOOMResultBuilder.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/util/jaxp/DOOMResultBuilder.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-22,12 +22,8", 
          "lines": [
            " import org.apache.axiom.om.OMAbstractFactory;\n", 
            " import org.apache.axiom.om.OMDataSourceExt;\n", 
            " import org.apache.axiom.om.OMFactory;\n", 
            "-import org.apache.axiom.om.OMOutputFormat;\n", 
            " import org.apache.axiom.om.OMSourcedElement;\n", 
            "-import org.apache.axiom.om.ds.OMDataSourceExtBase;\n", 
            "-import org.apache.axiom.om.impl.MTOMXMLStreamWriter;\n", 
            "-import org.apache.axiom.om.impl.serialize.StreamingOMSerializer;\n", 
            "-import org.apache.axiom.om.util.StAXUtils;\n", 
            "+import org.apache.axiom.om.ds.AbstractPullOMDataSource;\n", 
            " import org.apache.axiom.util.blob.OverflowBlob;\n", 
            " import org.apache.axiom.util.stax.WrappedTextNodeStreamReader;\n", 
            " import org.apache.axis2.transport.base.BaseConstants;\n"
          ]
        }, 
        {
          "locn": "-34,17 +30,13", 
          "lines": [
            " \n", 
            " import javax.xml.stream.XMLStreamException;\n", 
            " import javax.xml.stream.XMLStreamReader;\n", 
            "-import javax.xml.stream.XMLStreamWriter;\n", 
            " \n", 
            " import java.io.IOException;\n", 
            " import java.io.InputStream;\n", 
            " import java.io.InputStreamReader;\n", 
            "-import java.io.OutputStream;\n", 
            "-import java.io.UnsupportedEncodingException;\n", 
            "-import java.io.Writer;\n", 
            " import java.nio.charset.Charset;\n", 
            " \n", 
            "-public class TextFileDataSource extends OMDataSourceExtBase {\n", 
            "+public class TextFileDataSource extends AbstractPullOMDataSource {\n", 
            "     private final OverflowBlob overflowBlob;\n", 
            "     private final Charset charset;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-59,28 +51,6", 
          "lines": [
            "         return fac.createOMElement(txtFileDS, BaseConstants.DEFAULT_TEXT_WRAPPER);\n", 
            "     }\n", 
            " \n", 
            "-    @Override\n", 
            "-    public void serialize(OutputStream out, OMOutputFormat format) throws XMLStreamException {\n", 
            "-        XMLStreamWriter writer = new MTOMXMLStreamWriter(out, format);\n", 
            "-        serialize(writer);\n", 
            "-        writer.flush();\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void serialize(Writer writer, OMOutputFormat format) throws XMLStreamException {\n", 
            "-        MTOMXMLStreamWriter xmlWriter =\n", 
            "-            new MTOMXMLStreamWriter(StAXUtils.createXMLStreamWriter(writer));\n", 
            "-        xmlWriter.setOutputFormat(format);\n", 
            "-        serialize(xmlWriter);\n", 
            "-        xmlWriter.flush();\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void serialize(XMLStreamWriter xmlWriter) throws XMLStreamException {\n", 
            "-        StreamingOMSerializer serializer = new StreamingOMSerializer();\n", 
            "-        serializer.serialize(getReader(), xmlWriter);\n", 
            "-    }\n", 
            "-\n", 
            "     public XMLStreamReader getReader() throws XMLStreamException {\n", 
            "         InputStream is;\n", 
            "         try {\n"
          ]
        }, 
        {
          "locn": "-101,17 +71,6", 
          "lines": [
            "         return false;\n", 
            "     }\n", 
            " \n", 
            "-    public boolean isDestructiveWrite() {\n", 
            "-        return false;\n", 
            "-    }\n", 
            "-    \n", 
            "-    public byte[] getXMLBytes(String encoding) throws UnsupportedEncodingException {\n", 
            "-        throw new UnsupportedOperationException();\n", 
            "-    }\n", 
            "-\n", 
            "-    public void close() {\n", 
            "-    }\n", 
            "-\n", 
            "     public OMDataSourceExt copy() {\n", 
            "         return new TextFileDataSource(overflowBlob, charset);\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/util/TextFileDataSource.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/util/TextFileDataSource.java"
    }
  ], 
  "id": "1778747"
}