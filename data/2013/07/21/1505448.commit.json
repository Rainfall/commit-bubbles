{
  "when": "2013-07-21T15:13:11-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-0,0 +1,44", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Callout  mediator Security Sample-->\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+\n", 
            "+    <localEntry key=\"sec_policy\" src=\"file:repository/conf/sample/resources/policy/policy_3.xml\"/>\n", 
            "+\n", 
            "+    <sequence name=\"main\">\n", 
            "+        <callout serviceURL=\"http://localhost:9000/services/SecureStockQuoteService\"\n", 
            "+                 action=\"urn:getQuote\">\n", 
            "+            <configuration axis2xml=\"modules/integration/target/test_repos/axis2Client/conf/axis2_def.xml\" repository=\"modules/integration/target/test_repos/axis2Client\"/>\n", 
            "+            <source xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\"\n", 
            "+                    xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+                    xpath=\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\"/>\n", 
            "+            <target xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\"\n", 
            "+                    xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+                    xpath=\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\"/>\n", 
            "+            <enableSec policy=\"sec_policy\"/>\n", 
            "+        </callout>\n", 
            "+        <property name=\"RESPONSE\" value=\"true\"/>\n", 
            "+        <header name=\"To\" action=\"remove\"/>\n", 
            "+        <send/>\n", 
            "+        <drop/>\n", 
            "+    </sequence>\n", 
            "+\n", 
            "+</definitions>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/extras/synapse_sample_431_altered.xml", 
      "from": "java/modules/integration/src/test/resources/extras/synapse_sample_431_altered.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>431</sampleID>\n", 
            "+    <sampleName>Callout Mediator with security</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>modules/integration/src/test/resources/extras/synapse_sample_431_altered.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample431.xml", 
      "from": "java/modules/integration/src/test/resources/sample431.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-220,6 +220,7", 
          "lines": [
            "         sampleClassRepo.put(\"391\", Sample391.class);\n", 
            "         sampleClassRepo.put(\"420\", Sample420.class);\n", 
            "         //sampleClassRepo.put(\"430\", Sample430.class);  // Problem with repo path\n", 
            "+        sampleClassRepo.put(\"431\", Sample431.class);\n", 
            "         sampleClassRepo.put(\"450\", Sample450.class);\n", 
            "         sampleClassRepo.put(\"451\", Sample451.class);\n", 
            "         sampleClassRepo.put(\"452\", Sample452.class);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,45", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample431 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample431.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample431() {\n", 
            "+        super(431);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testCallOutSecurity() {\n", 
            "+        log.info(\"Running test: Callout Mediator with security\");\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+        result = client.requestStandardQuote(null, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample431.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample431.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-61,5 +61,19", 
          "lines": [
            "         assertTrue(serialization(inputXml, calloutMediatorFactory, calloutMediatorSerializer));\n", 
            "         assertTrue(serialization(inputXml, calloutMediatorSerializer));\n", 
            "     }\n", 
            "+\n", 
            "+    public void testCalloutMediatorSerializationScenarioThree() {\n", 
            "+        String inputXml = \"<callout xmlns=\\\"http://ws.apache.org/ns/synapse\\\" \" +\n", 
            "+                \"serviceURL=\\\"http://localhost:9000/soap/SimpleStockQuoteService\\\" \" +\n", 
            "+                \"action=\\\"urn:getQuote\\\"><source xmlns:s11=\\\"http://schemas.xmlsoap.org/\" +\n", 
            "+                \"soap/envelope/\\\" xmlns:s12=\\\"http://www.w3.org/2003/05/soap-envelope\\\" \" +\n", 
            "+                \"xpath=\\\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\\\"/>\" +\n", 
            "+                \"<target xmlns:s11=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" \" +\n", 
            "+                \"xmlns:s12=\\\"http://www.w3.org/2003/05/soap-envelope\\\" xpath=\\\"s11:Body/\" +\n", 
            "+                \"child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\\\"/>\" +\n", 
            "+                \"<enableSec policy=\\\"sec_policy\\\"/></callout>\";\n", 
            "+        assertTrue(serialization(inputXml, calloutMediatorFactory, calloutMediatorSerializer));\n", 
            "+        assertTrue(serialization(inputXml, calloutMediatorSerializer));\n", 
            "+    }\n", 
            " }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/config/xml/CalloutMediatorSerializationTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/config/xml/CalloutMediatorSerializationTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-29,6 +29,7", 
          "lines": [
            "  *      &lt;configuration [axis2xml=\"string\"] [repository=\"string\"]/&gt;?\n", 
            "  *      &lt;source xpath=\"expression\" | key=\"string\"&gt;\n", 
            "  *      &lt;target xpath=\"expression\" | key=\"string\"/&gt;\n", 
            "+ *      &lt;enableSec policy=\"string\"/&gt;?\n", 
            "  * &lt;/callout&gt;\n", 
            "  * </pre>\n", 
            "  */\n"
          ]
        }, 
        {
          "locn": "-38,6 +39,7", 
          "lines": [
            " \n", 
            "         if (!(m instanceof CalloutMediator)) {\n", 
            "             handleException(\"Unsupported mediator passed in for serialization : \" + m.getType());\n", 
            "+            return null;\n", 
            "         }\n", 
            " \n", 
            "         CalloutMediator mediator = (CalloutMediator) m;\n"
          ]
        }, 
        {
          "locn": "-82,6 +84,12", 
          "lines": [
            "                 \"key\", nullNS, mediator.getTargetKey()));\n", 
            "         }\n", 
            " \n", 
            "+        if (mediator.isSecurityOn() && mediator.getWsSecPolicyKey() != null) {\n", 
            "+            OMElement security = fac.createOMElement(\"enableSec\", synNS, callout);\n", 
            "+            security.addAttribute(fac.createOMAttribute(\n", 
            "+                    \"policy\", nullNS, mediator.getWsSecPolicyKey()));\n", 
            "+        }\n", 
            "+\n", 
            "         return callout;\n", 
            "     }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorSerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorSerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-38,6 +38,7", 
          "lines": [
            "  *      &lt;configuration [axis2xml=\"string\"] [repository=\"string\"]/&gt;?\n", 
            "  *      &lt;source xpath=\"expression\" | key=\"string\"&gt;\n", 
            "  *      &lt;target xpath=\"expression\" | key=\"string\"/&gt;\n", 
            "+ *      &lt;enableSec policy=\"string\" /&gt;?\n", 
            "  * &lt;/callout&gt;\n", 
            "  * </pre>\n", 
            "  */\n"
          ]
        }, 
        {
          "locn": "-56,6 +57,10", 
          "lines": [
            "             = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, \"source\");\n", 
            "     private static final QName Q_TARGET\n", 
            "             = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, \"target\");\n", 
            "+    private static final QName Q_SEC\n", 
            "+                = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, \"enableSec\");\n", 
            "+    private static final QName ATT_POLICY\n", 
            "+                = new QName(XMLConfigConstants.NULL_NAMESPACE, \"policy\");\n", 
            " \n", 
            "     public Mediator createSpecificMediator(OMElement elem, Properties properties) {\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-67,6 +72,7", 
          "lines": [
            "         OMElement   configElt     = elem.getFirstChildWithName(Q_CONFIG);\n", 
            "         OMElement   sourceElt     = elem.getFirstChildWithName(Q_SOURCE);\n", 
            "         OMElement   targetElt     = elem.getFirstChildWithName(Q_TARGET);\n", 
            "+        OMElement wsSec = elem.getFirstChildWithName(Q_SEC);\n", 
            " \n", 
            "         if (attServiceURL != null) {\n", 
            "             callout.setServiceURL(attServiceURL.getAttributeValue());\n"
          ]
        }, 
        {
          "locn": "-145,6 +151,16", 
          "lines": [
            "             handleException(\"The message 'target' must be specified for a Callout mediator\");\n", 
            "         }\n", 
            " \n", 
            "+        if (wsSec != null) {\n", 
            "+            OMAttribute policyKey = wsSec.getAttribute(ATT_POLICY);\n", 
            "+            if (policyKey != null) {\n", 
            "+                callout.setSecurityOn(true);\n", 
            "+                callout.setWsSecPolicyKey(policyKey.getAttributeValue());\n", 
            "+            } else {\n", 
            "+                handleException(\"A policy key is required to enable security\");\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "         return callout;\n", 
            "     }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-48,6 +48,7", 
          "lines": [
            "  *      <configuration [axis2xml=\"string\"] [repository=\"string\"]/>?\n", 
            "  *      <source xpath=\"expression\" | key=\"string\"> <!-- key can be a MC property or entry key -->\n", 
            "  *      <target xpath=\"expression\" | key=\"string\"/>\n", 
            "+ *      <enableSec policy=\"string\"/>?\n", 
            "  * </callout>\n", 
            "  */\n", 
            " public class CalloutMediator extends AbstractMediator implements ManagedLifecycle {\n"
          ]
        }, 
        {
          "locn": "-64,6 +65,8", 
          "lines": [
            "     private boolean passHeaders = false;\n", 
            "     public final static String DEFAULT_CLIENT_REPO = \"./samples/axis2Client/client_repo\";\n", 
            "     public final static String DEFAULT_AXIS2_XML = \"./samples/axis2Client/client_repo/conf/axis2.xml\";\n", 
            "+    private boolean securityOn = false;  //Should messages be sent using WS-Security?\n", 
            "+    private String wsSecPolicyKey = null;\n", 
            " \n", 
            "     public boolean mediate(MessageContext synCtx) {\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-80,6 +83,22", 
          "lines": [
            "         try {\n", 
            "             ServiceClient sc = new ServiceClient(configCtx, null);\n", 
            "             Options options = new Options();\n", 
            "+\n", 
            "+            if (isSecurityOn()) {\n", 
            "+                if (synLog.isTraceOrDebugEnabled()) {\n", 
            "+                    synLog.traceOrDebug(\"Callout mediator: using security\");\n", 
            "+                }\n", 
            "+                if (wsSecPolicyKey != null) {\n", 
            "+                    options.setProperty(\n", 
            "+                            SynapseConstants.RAMPART_POLICY,\n", 
            "+                            MessageHelper.getPolicy(synCtx, wsSecPolicyKey));\n", 
            "+                    sc.engageModule(SynapseConstants.SECURITY_MODULE_NAME);\n", 
            "+                } else {\n", 
            "+                    handleException(\"Security policy not found\", synCtx);\n", 
            "+                }\n", 
            "+\n", 
            "+            }\n", 
            "+\n", 
            "             options.setTo(new EndpointReference(serviceURL));\n", 
            " \n", 
            "             if (action != null) {\n"
          ]
        }, 
        {
          "locn": "-146,7 +165,7", 
          "lines": [
            "                         tgtNode.detach();\n", 
            "                     } else {\n", 
            "                         handleException(\"Evaluation of target XPath expression : \" +\n", 
            "-                            targetXPath.toString() + \" did not yeild an OMNode\", synCtx);\n", 
            "+                            targetXPath.toString() + \" did not yield an OMNode\", synCtx);\n", 
            "                     }\n", 
            "                 } if (targetKey != null) {\n", 
            "                     synCtx.setProperty(targetKey, result);\n"
          ]
        }, 
        {
          "locn": "-320,4 +339,40", 
          "lines": [
            "     public void setPassHeaders(boolean passHeaders) {\n", 
            "         this.passHeaders = passHeaders;\n", 
            "     }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Is WS-Security turned on?\n", 
            "+     *\n", 
            "+     * @return true if on\n", 
            "+     */\n", 
            "+    public boolean isSecurityOn() {\n", 
            "+        return securityOn;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Request that WS-Sec be turned on/off\n", 
            "+     *\n", 
            "+     * @param securityOn a boolean flag indicating security is on or not\n", 
            "+     */\n", 
            "+    public void setSecurityOn(boolean securityOn) {\n", 
            "+        this.securityOn = securityOn;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Return the Rampart Security configuration policy's 'key' to be used\n", 
            "+     *\n", 
            "+     * @return the Rampart Security configuration policy's 'key' to be used\n", 
            "+     */\n", 
            "+    public String getWsSecPolicyKey() {\n", 
            "+        return wsSecPolicyKey;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Set the Rampart Security configuration policy's 'key' to be used\n", 
            "+     *\n", 
            "+     * @param wsSecPolicyKey the Rampart Security configuration policy's 'key' to be used\n", 
            "+     */\n", 
            "+    public void setWsSecPolicyKey(String wsSecPolicyKey) {\n", 
            "+        this.wsSecPolicyKey = wsSecPolicyKey;\n", 
            "+    }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/CalloutMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/CalloutMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,43", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Callout  mediator Security Sample-->\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+\n", 
            "+    <localEntry key=\"sec_policy\" src=\"file:repository/conf/sample/resources/policy/policy_3.xml\"/>\n", 
            "+\n", 
            "+    <sequence name=\"main\">\n", 
            "+        <callout serviceURL=\"http://localhost:9000/services/SecureStockQuoteService\"\n", 
            "+                 action=\"urn:getQuote\">\n", 
            "+            <source xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\"\n", 
            "+                    xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+                    xpath=\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\"/>\n", 
            "+            <target xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\"\n", 
            "+                    xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+                    xpath=\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\"/>\n", 
            "+            <enableSec policy=\"sec_policy\"/>\n", 
            "+        </callout>\n", 
            "+        <property name=\"RESPONSE\" value=\"true\"/>\n", 
            "+        <header name=\"To\" action=\"remove\"/>\n", 
            "+        <send/>\n", 
            "+        <drop/>\n", 
            "+    </sequence>\n", 
            "+\n", 
            "+</definitions>\n"
          ]
        }
      ], 
      "to": "java/repository/conf/sample/synapse_sample_431.xml", 
      "from": "java/repository/conf/sample/synapse_sample_431.xml"
    }
  ], 
  "id": "1505448"
}