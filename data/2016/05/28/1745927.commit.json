{
  "when": "2016-05-28T16:11:29-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-209,6 +209,24", 
          "lines": [
            "             \"value\".equals(medProp.getEvaluatedExpression(synCtx)));\n", 
            "     }\n", 
            " \n", 
            "+    public void testPropertyURLEncoding() throws Exception {\n", 
            "+        // Evaluate url-encode function\n", 
            "+        PropertyMediator propMediator = new PropertyMediator();\n", 
            "+        propMediator.setName(\"name\");\n", 
            "+        propMediator.setValue(\"this/is+a/synapse test?for=url+encoding\");\n", 
            "+\n", 
            "+        MessageContext synCtx = TestUtils.getTestContext(\"<empty/>\");\n", 
            "+        propMediator.mediate(synCtx);\n", 
            "+\n", 
            "+        // read property through a mediator property\n", 
            "+        MediatorProperty mediatorProperty = new MediatorProperty();\n", 
            "+        mediatorProperty.setExpression(new SynapseXPath(\"url-encode($ctx:name)\"));\n", 
            "+\n", 
            "+        assertEquals(\"this/is%2Ba/synapse%20test?for=url+encoding\",\n", 
            "+                mediatorProperty.getEvaluatedExpression(synCtx));\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "     public void testPropertyRegexTest() throws Exception {\n", 
            "         String outputProperty = \"regexProperty\";\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/mediators/builtin/PropertyMediatorTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/mediators/builtin/PropertyMediatorTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-86,6 +86,10", 
          "lines": [
            "                    SynapseXPathConstants.BASE64_DECODE_FUNCTION.equals(localName)) {\n", 
            "             // create a base64Decode function and set it to the XPath\n", 
            "             return new Base64DecodeFunction();\n", 
            "+        } else if (localName != null &&\n", 
            "+                   SynapseXPathConstants.URL_ENCODE_FUNCTION.equals(localName)) {\n", 
            "+            // create a url-encode function and set it to the XPath\n", 
            "+            return new URLEncodeFunction();\n", 
            "         }\n", 
            "         //We check if custom Xpath extensions are available\n", 
            "         Function extensionFunction = XpathExtensionUtil.getFunctionContext(\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/util/xpath/SynapseXPathFunctionContext.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/util/xpath/SynapseXPathFunctionContext.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-33,6 +33,9", 
          "lines": [
            "     /** base64Decode XPath extension function name */\n", 
            "     public static final String BASE64_DECODE_FUNCTION = \"base64Decode\";\n", 
            " \n", 
            "+    /** URL-Encode XPath extension function name */\n", 
            "+    public static final String URL_ENCODE_FUNCTION = \"url-encode\";\n", 
            "+\n", 
            "     /** Body relative XPath variale name for the SOAPBody */\n", 
            "     public static final String SOAP_BODY_VARIABLE = \"body\";\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/util/xpath/SynapseXPathConstants.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/util/xpath/SynapseXPathConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,105", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.util.xpath;\n", 
            "+\n", 
            "+import org.apache.commons.httpclient.URIException;\n", 
            "+import org.apache.commons.httpclient.util.URIUtil;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.jaxen.Context;\n", 
            "+import org.jaxen.Function;\n", 
            "+import org.jaxen.FunctionCallException;\n", 
            "+import org.jaxen.function.StringFunction;\n", 
            "+\n", 
            "+import java.util.List;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Implements the XPath extension function synapse:url-encode(string)\n", 
            "+ */\n", 
            "+public class URLEncodeFunction implements Function {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(URLEncodeFunction.class);\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Returns the url-encoded string value of the first argument.\n", 
            "+     *\n", 
            "+     * @param context the context at the point in the expression when the function is called\n", 
            "+     * @param args  arguments of the functions\n", 
            "+     * @return The string value of a property\n", 
            "+     * @throws FunctionCallException\n", 
            "+     */\n", 
            "+    public Object call(Context context, List args) throws FunctionCallException {\n", 
            "+        boolean debugOn = log.isDebugEnabled();\n", 
            "+\n", 
            "+        if (args == null || args.size() == 0) {\n", 
            "+            if (debugOn) {\n", 
            "+                log.debug(\"Property key value for lookup is not specified\");\n", 
            "+            }\n", 
            "+            return SynapseXPathConstants.NULL_STRING;\n", 
            "+        }\n", 
            "+\n", 
            "+        int size = args.size();\n", 
            "+        if (size == 1) {\n", 
            "+            // get the first argument, it can be a function returning a string as well\n", 
            "+            String value = StringFunction.evaluate(args.get(0), context.getNavigator());\n", 
            "+\n", 
            "+            // use the default UTF-8 encoding\n", 
            "+            return encode(debugOn, SynapseXPathConstants.DEFAULT_CHARSET, value);\n", 
            "+        } else if (size == 2) {\n", 
            "+            // get the first argument, it can be a function returning a string as well\n", 
            "+            String value = StringFunction.evaluate(args.get(0), context.getNavigator());\n", 
            "+\n", 
            "+            // encoding is in the second argument\n", 
            "+            String encoding = StringFunction.evaluate(args.get(1), context.getNavigator());\n", 
            "+            \n", 
            "+            return encode(debugOn, encoding, value);\n", 
            "+        } else if (debugOn) {\n", 
            "+            log.debug(\"url-encode function expects only one argument, returning empty string\");\n", 
            "+        }\n", 
            "+        // return empty string if the arguments are wrong\n", 
            "+        return SynapseXPathConstants.NULL_STRING;\n", 
            "+    }\n", 
            "+\n", 
            "+    private Object encode(boolean debugOn, String encoding, String value) throws FunctionCallException {\n", 
            "+        if (value == null || \"\".equals(value)) {\n", 
            "+            if (debugOn) {\n", 
            "+                log.debug(\"Non empty string value should be provided for encoding\");\n", 
            "+            }\n", 
            "+\n", 
            "+            return SynapseXPathConstants.NULL_STRING;\n", 
            "+        }\n", 
            "+\n", 
            "+        String encodedString;\n", 
            "+        try {\n", 
            "+            encodedString = URIUtil.encodePathQuery(value, encoding);\n", 
            "+        } catch (URIException e) {\n", 
            "+            String msg = \"Unsupported charset encoding\";\n", 
            "+            log.error(msg, e);\n", 
            "+            throw new FunctionCallException(msg, e);\n", 
            "+        }\n", 
            "+\n", 
            "+        if (debugOn) {\n", 
            "+            log.debug(\"Converted string: \" + value + \" with encoding: \" + encoding +\n", 
            "+                    \" to url encoded value: \" + encodedString);\n", 
            "+        }\n", 
            "+\n", 
            "+        return encodedString;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/util/xpath/URLEncodeFunction.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/util/xpath/URLEncodeFunction.java"
    }
  ], 
  "id": "1745927"
}