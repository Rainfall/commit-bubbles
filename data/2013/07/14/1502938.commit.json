{
  "when": "2013-07-14T01:32:22-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-29,6 +29,7", 
          "lines": [
            " import org.apache.synapse.rest.dispatch.DispatcherHelper;\n", 
            " import org.apache.synapse.rest.dispatch.RESTDispatcher;\n", 
            " import org.apache.synapse.rest.version.DefaultStrategy;\n", 
            "+import org.apache.synapse.rest.version.URLBasedVersionStrategy;\n", 
            " import org.apache.synapse.rest.version.VersionStrategy;\n", 
            " import org.apache.synapse.config.xml.rest.VersionStrategyFactory;\n", 
            " import org.apache.synapse.transport.nhttp.NhttpConstants;\n"
          ]
        }, 
        {
          "locn": "-56,8 +57,8", 
          "lines": [
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     * get Fully Qualified name of this API\n", 
            "-     * @return returns the key combiantion for API NAME + VERSION\n", 
            "+     * Get the full qualified name of this API\n", 
            "+     * @return returns the key combination for API NAME + VERSION\n", 
            "      */\n", 
            "     public String getName() {\n", 
            "         //check if a versioning strategy exists\n"
          ]
        }, 
        {
          "locn": "-153,8 +154,12", 
          "lines": [
            "     boolean canProcess(MessageContext synCtx) {\n", 
            "         if (synCtx.isResponse()) {\n", 
            "             String apiName = (String) synCtx.getProperty(RESTConstants.SYNAPSE_REST_API);\n", 
            "-            String version = (String) synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION);\n", 
            "-            if (!name.equals(apiName) && !versionStrategy.getVersion().equals(version)) {\n", 
            "+            Object versionObj = synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION);\n", 
            "+            String version = \"\";\n", 
            "+            if (versionObj != null) {\n", 
            "+                version = (String) versionObj;\n", 
            "+            }\n", 
            "+            if (!name.equals(apiName) || !versionStrategy.getVersion().equals(version)) {\n", 
            "                 return false;\n", 
            "             }\n", 
            "         } else {\n"
          ]
        }, 
        {
          "locn": "-214,6 +219,28", 
          "lines": [
            "         synCtx.setProperty(RESTConstants.SYNAPSE_REST_API_VERSION, versionStrategy.getVersion());\n", 
            "         synCtx.setProperty(RESTConstants.REST_API_CONTEXT, context);\n", 
            " \n", 
            "+        // Remove the API context part from the REST_URL_POSTFIX\n", 
            "+        String restURLPostfix = (String) ((Axis2MessageContext) synCtx).getAxis2MessageContext().\n", 
            "+                getProperty(NhttpConstants.REST_URL_POSTFIX);\n", 
            "+        if (restURLPostfix != null) {\n", 
            "+            if (!restURLPostfix.startsWith(\"/\")) {\n", 
            "+                restURLPostfix = \"/\" + restURLPostfix;\n", 
            "+            }\n", 
            "+            if (restURLPostfix.startsWith(context)) {\n", 
            "+                restURLPostfix = restURLPostfix.substring(context.length());\n", 
            "+            }\n", 
            "+            if (versionStrategy instanceof URLBasedVersionStrategy) {\n", 
            "+                String version = versionStrategy.getVersion();\n", 
            "+                if (restURLPostfix.startsWith(version)) {\n", 
            "+                    restURLPostfix = restURLPostfix.substring(version.length());\n", 
            "+                } else if (restURLPostfix.startsWith(\"/\" + version)) {\n", 
            "+                    restURLPostfix = restURLPostfix.substring(version.length() + 1);\n", 
            "+                }\n", 
            "+            }\n", 
            "+            ((Axis2MessageContext) synCtx).getAxis2MessageContext().\n", 
            "+                    setProperty(NhttpConstants.REST_URL_POSTFIX,restURLPostfix);\n", 
            "+        }\n", 
            "+\n", 
            "         for (Handler handler : handlers) {\n", 
            "             if (log.isDebugEnabled()) {\n", 
            "                 log.debug(\"Processing message with ID: \" + synCtx.getMessageID() + \" through \" +\n"
          ]
        }, 
        {
          "locn": "-247,7 +274,7", 
          "lines": [
            " \n", 
            " \n", 
            "         String path = RESTUtils.getFullRequestPath(synCtx);\n", 
            "-        String subPath = null;\n", 
            "+        String subPath;\n", 
            "         if (versionStrategy.getVersionType().equals(VersionStrategyFactory.TYPE_URL)) {\n", 
            "             //for URL based\n", 
            "             //request --> http://{host:port}/context/version/path/to/resource\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/rest/API.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/rest/API.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-36,6 +36,8", 
          "lines": [
            "             }\n", 
            "         } else if (urlMapping.startsWith(\"*.\")) {\n", 
            "             extension = urlMapping.substring(1);\n", 
            "+        } else if (urlMapping.length() > 1 && urlMapping.endsWith(\"/\")){\n", 
            "+            exactMatch = urlMapping.substring(0, urlMapping.length() - 1);\n", 
            "         } else {\n", 
            "             exactMatch = urlMapping;\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/rest/dispatch/URLMappingHelper.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/rest/dispatch/URLMappingHelper.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-39,7 +39,7", 
          "lines": [
            "         String pathStringAfterContext = path.substring(context.length());\n", 
            " \n", 
            "         //check if context can be invalid for path url and avoid matching a false version string\n", 
            "-        if (pathStringAfterContext != null && !pathStringAfterContext.startsWith(\"/\")) {\n", 
            "+        if (pathStringAfterContext == null || !pathStringAfterContext.startsWith(\"/\")) {\n", 
            "             return false;\n", 
            "         }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-46,7 +46,7", 
          "lines": [
            "         //path after context will be starting from a \"/\" and compute index for next immediate \"/\"\n", 
            "         int indexOfNextSlash = pathStringAfterContext.substring(1).indexOf(\"/\");\n", 
            " \n", 
            "-        String incomingVersionStr = null;\n", 
            "+        String incomingVersionStr;\n", 
            "         if (indexOfNextSlash != -1) {\n", 
            "             incomingVersionStr = pathStringAfterContext.substring(1, indexOfNextSlash + 1);\n", 
            "         } else {\n"
          ]
        }, 
        {
          "locn": "-65,31 +65,4", 
          "lines": [
            "     public String getVersionParam() {\n", 
            "         return versionParam;\n", 
            "     }\n", 
            "-\n", 
            "-/*\n", 
            "-    public static void main(String[] args) {\n", 
            "-        String version = \"1.0.0\";\n", 
            "-//        String version = \"1.0.1\";\n", 
            "-\n", 
            "-//        String path = \"/test/1.0.1/foo/abc/\";\n", 
            "-//        String path = \"/test/1.0/foo/abc/\";\n", 
            "-//        String path = \"/test/1.0/foo/abc/abc='asasa'\";\n", 
            "-        String path = \"/test11.0.0/1.0/foo/abc/abc='asasa'\";\n", 
            "-\n", 
            "-//        String context = \"/test\";\n", 
            "-//        String context = \"/test123\";\n", 
            "-        String context = \"/test\";\n", 
            "-        String pathStringAfterContext = path.substring(context.length());\n", 
            "-\n", 
            "-        System.out.println(\"pathStringAfterContext : \" + pathStringAfterContext);\n", 
            "-\n", 
            "-        int indexOfNextSlash = pathStringAfterContext.substring(1).indexOf(\"/\");\n", 
            "-        System.out.println(indexOfNextSlash);\n", 
            "-        String incomingVersionStr = pathStringAfterContext.substring(1, indexOfNextSlash + 1);\n", 
            "-        System.out.println(\"incomingVersionStr : \" + incomingVersionStr);\n", 
            "-\n", 
            "-        System.out.println(version.equals(incomingVersionStr));\n", 
            "-    }\n", 
            "-*/\n", 
            "-\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/rest/version/URLBasedVersionStrategy.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/rest/version/URLBasedVersionStrategy.java"
    }
  ], 
  "id": "1502938"
}