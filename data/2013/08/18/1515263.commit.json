{
  "when": "2013-08-18T22:29:05-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-234,6 +234,7", 
          "lines": [
            "         sampleClassRepo.put(\"430\", Sample430.class);\n", 
            "         sampleClassRepo.put(\"431\", Sample431.class);\n", 
            "         sampleClassRepo.put(\"432\", Sample432.class);\n", 
            "+        sampleClassRepo.put(\"433\", Sample433.class);\n", 
            "         sampleClassRepo.put(\"450\", Sample450.class);\n", 
            "         sampleClassRepo.put(\"451\", Sample451.class);\n", 
            "         sampleClassRepo.put(\"452\", Sample452.class);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,42", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample433 extends SynapseTestCase {\n", 
            "+\n", 
            "+    SampleClientResult result;\n", 
            "+\n", 
            "+    public Sample433() {\n", 
            "+        super(433);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testCallOutDefinedEndpoint() {\n", 
            "+        log.info(\"Running test: Callout mediator - Invoke a service using a defined Endpoint\");\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "+        result = client.requestStandardQuote(null, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not run successfully\", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample433.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample433.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,44", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Callout  mediator Endpoint Sample-->\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+\n", 
            "+    <sequence name=\"main\">\n", 
            "+        <callout endpointKey=\"StockQuoteServiceEndpoint\">\n", 
            "+            <configuration axis2xml=\"modules/integration/target/test_repos/axis2Client/conf/axis2_def.xml\" repository=\"modules/integration/target/test_repos/axis2Client\"/>\n", 
            "+            <source xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\"\n", 
            "+                    xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+                    xpath=\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\"/>\n", 
            "+            <target xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\"\n", 
            "+                    xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+                    xpath=\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\"/>\n", 
            "+        </callout>\n", 
            "+        <property name=\"RESPONSE\" value=\"true\"/>\n", 
            "+        <header name=\"To\" action=\"remove\"/>\n", 
            "+        <send/>\n", 
            "+        <drop/>\n", 
            "+    </sequence>\n", 
            "+\n", 
            "+    <endpoint name=\"StockQuoteServiceEndpoint\">\n", 
            "+       <address uri=\"http://localhost:9000/services/SimpleStockQuoteService\"/>\n", 
            "+    </endpoint>\n", 
            "+\n", 
            "+</definitions>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/extras/synapse_sample_433_altered.xml", 
      "from": "java/modules/integration/src/test/resources/extras/synapse_sample_433_altered.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>433</sampleID>\n", 
            "+    <sampleName>Callout mediator - Invoke a service using a defined Endpoint</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>modules/integration/src/test/resources/extras/synapse_sample_433_altered.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample433.xml", 
      "from": "java/modules/integration/src/test/resources/sample433.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-19,6 +19,8", 
          "lines": [
            " \n", 
            " package org.apache.synapse.config.xml;\n", 
            " \n", 
            "+import org.apache.commons.io.FileUtils;\n", 
            "+\n", 
            " import java.io.File;\n", 
            " \n", 
            " /**\n"
          ]
        }, 
        {
          "locn": "-50,7 +52,9", 
          "lines": [
            " \n", 
            "     public void testCalloutMediatorSerializationScenarioTwo() throws Exception {\n", 
            "         File axis2xml = new File(\"axis2.xml\");\n", 
            "-        axis2xml.createNewFile();\n", 
            "+        if (!axis2xml.exists() && !axis2xml.createNewFile()) {\n", 
            "+            fail(\"Failed to create test axis2.xml file\");\n", 
            "+        }\n", 
            "         String inputXml = \"<callout xmlns=\\\"http://ws.apache.org/ns/synapse\\\" \" +\n", 
            "                           \"serviceURL=\\\"http://localhost:9000/soap/SimpleStockQuoteService\\\" \" +\n", 
            "                           \"action=\\\"urn:getQuote\\\"><configuration axis2xml=\\\"axis2.xml\\\" \" +\n"
          ]
        }, 
        {
          "locn": "-60,6 +64,7", 
          "lines": [
            "                           \"xmlns:s12=\\\"http://www.w3.org/2003/05/soap-envelope\\\" key=\\\"key2\\\"/></callout>\";\n", 
            "         assertTrue(serialization(inputXml, calloutMediatorFactory, calloutMediatorSerializer));\n", 
            "         assertTrue(serialization(inputXml, calloutMediatorSerializer));\n", 
            "+        FileUtils.deleteQuietly(axis2xml);\n", 
            "     }\n", 
            " \n", 
            "     public void testCalloutMediatorSerializationScenarioThree() {\n"
          ]
        }, 
        {
          "locn": "-103,5 +108,12", 
          "lines": [
            "         assertTrue(serialization(inputXml, calloutMediatorSerializer));\n", 
            "     }\n", 
            " \n", 
            "+    public void testCalloutMediatorSerializationScenarioSix() {\n", 
            "+        String inputXml = \"<callout xmlns=\\\"http://ws.apache.org/ns/synapse\\\" \" +\n", 
            "+                \"endpointKey=\\\"endpoint\\\"/>\";\n", 
            "+        assertTrue(serialization(inputXml, calloutMediatorFactory, calloutMediatorSerializer));\n", 
            "+        assertTrue(serialization(inputXml, calloutMediatorSerializer));\n", 
            "+    }\n", 
            "+\n", 
            " }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/config/xml/CalloutMediatorSerializationTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/config/xml/CalloutMediatorSerializationTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-21,55 +21,72", 
          "lines": [
            " \n", 
            " import org.apache.axiom.om.OMElement;\n", 
            " import org.apache.axiom.om.OMNode;\n", 
            "+import org.apache.axiom.soap.SOAPBody;\n", 
            " import org.apache.axiom.soap.SOAPHeader;\n", 
            " import org.apache.axis2.AxisFault;\n", 
            " import org.apache.axis2.Constants;\n", 
            "-import org.apache.axis2.transport.http.HTTPConstants;\n", 
            "-import org.apache.axis2.description.Parameter;\n", 
            "-import org.apache.axis2.addressing.AddressingConstants;\n", 
            "-import org.apache.axis2.addressing.EndpointReference;\n", 
            "-import org.apache.axis2.client.Options;\n", 
            "-import org.apache.axis2.client.ServiceClient;\n", 
            "-import org.apache.axis2.context.ConfigurationContext;\n", 
            "-import org.apache.axis2.context.ConfigurationContextFactory;\n", 
            "-import org.apache.synapse.*;\n", 
            "+import org.apache.synapse.ManagedLifecycle;\n", 
            "+import org.apache.synapse.MessageContext;\n", 
            "+import org.apache.synapse.SynapseConstants;\n", 
            "+import org.apache.synapse.SynapseException;\n", 
            "+import org.apache.synapse.SynapseLog;\n", 
            " import org.apache.synapse.core.SynapseEnvironment;\n", 
            "+import org.apache.synapse.core.axis2.Axis2BlockingClient;\n", 
            " import org.apache.synapse.core.axis2.Axis2MessageContext;\n", 
            "+import org.apache.synapse.endpoints.AbstractEndpoint;\n", 
            "+import org.apache.synapse.endpoints.AddressEndpoint;\n", 
            "+import org.apache.synapse.endpoints.DefaultEndpoint;\n", 
            "+import org.apache.synapse.endpoints.Endpoint;\n", 
            "+import org.apache.synapse.endpoints.EndpointDefinition;\n", 
            " import org.apache.synapse.mediators.AbstractMediator;\n", 
            " import org.apache.synapse.util.MessageHelper;\n", 
            " import org.apache.synapse.util.xpath.SynapseXPath;\n", 
            " import org.jaxen.JaxenException;\n", 
            " \n", 
            "-import java.util.Iterator;\n", 
            " import java.util.List;\n", 
            " \n", 
            " /**\n", 
            "  * <callout [serviceURL=\"string\"] [action=\"string\"][passHeaders=\"true|false\"]>\n", 
            "- *      <configuration [axis2xml=\"string\"] [repository=\"string\"]/>?\n", 
            "- *      <source xpath=\"expression\" | key=\"string\"> <!-- key can be a MC property or entry key -->\n", 
            "- *      <target xpath=\"expression\" | key=\"string\"/>\n", 
            "- *      <enableSec policy=\"string\" | outboundPolicy=\"String\" | inboundPolicy=\"String\"/>?\n", 
            "+ * <configuration [axis2xml=\"string\"] [repository=\"string\"]/>?\n", 
            "+ * <source xpath=\"expression\" | key=\"string\">? <!-- key can be a MC property or entry key -->\n", 
            "+ * <target xpath=\"expression\" | key=\"string\"/>?\n", 
            "+ * <enableSec policy=\"string\" | outboundPolicy=\"String\" | inboundPolicy=\"String\"/>?\n", 
            "  * </callout>\n", 
            "  */\n", 
            " public class CalloutMediator extends AbstractMediator implements ManagedLifecycle {\n", 
            " \n", 
            "-    private ConfigurationContext configCtx = null;\n", 
            "     private String serviceURL = null;\n", 
            "+\n", 
            "     private String action = null;\n", 
            "+\n", 
            "     private String requestKey = null;\n", 
            "+\n", 
            "     private SynapseXPath requestXPath = null;\n", 
            "+\n", 
            "     private SynapseXPath targetXPath = null;\n", 
            "+\n", 
            "     private String targetKey = null;\n", 
            "+\n", 
            "     private String clientRepository = null;\n", 
            "+\n", 
            "     private String axis2xml = null;\n", 
            "+\n", 
            "     private boolean passHeaders = false;\n", 
            "-    public final static String DEFAULT_CLIENT_REPO = \"./samples/axis2Client/client_repo\";\n", 
            "-    public final static String DEFAULT_AXIS2_XML = \"./samples/axis2Client/client_repo/conf/axis2.xml\";\n", 
            "+\n", 
            "     private boolean securityOn = false;  //Should messages be sent using WS-Security?\n", 
            "+\n", 
            "     private String wsSecPolicyKey = null;\n", 
            "+\n", 
            "     private String inboundWsSecPolicyKey = null;\n", 
            "+\n", 
            "     private String outboundWsSecPolicyKey = null;\n", 
            " \n", 
            "+    private String endpointKey = null;\n", 
            "+\n", 
            "+    private Endpoint endpoint;\n", 
            "+\n", 
            "+    Axis2BlockingClient blockingMsgSender = null;\n", 
            "+\n", 
            "     public boolean mediate(MessageContext synCtx) {\n", 
            " \n", 
            "         SynapseLog synLog = getLog(synCtx);\n"
          ]
        }, 
        {
          "locn": "-83,93 +100,83", 
          "lines": [
            "         }\n", 
            " \n", 
            "         try {\n", 
            "-            ServiceClient sc = new ServiceClient(configCtx, null);\n", 
            "-            Options options = new Options();\n", 
            "-\n", 
            "-            if (isSecurityOn()) {\n", 
            "+            if (endpoint == null && endpointKey != null) {\n", 
            "+                endpoint = synCtx.getEndpoint(endpointKey);\n", 
            "                 if (synLog.isTraceOrDebugEnabled()) {\n", 
            "-                    synLog.traceOrDebug(\"Callout mediator: using security\");\n", 
            "+                    synLog.traceOrDebug(\"Using the defined endpoint : \" + endpoint.getName());\n", 
            "                 }\n", 
            "-                if (wsSecPolicyKey != null) {\n", 
            "-                    options.setProperty(\n", 
            "-                            SynapseConstants.RAMPART_POLICY,\n", 
            "-                            MessageHelper.getPolicy(synCtx, wsSecPolicyKey));\n", 
            "+            } else if (synLog.isTraceOrDebugEnabled()) {\n", 
            "+                if (serviceURL != null) {\n", 
            "+                    synLog.traceOrDebug(\"Using the serviceURL : \" + serviceURL);\n", 
            "                 } else {\n", 
            "-                    if (inboundWsSecPolicyKey != null) {\n", 
            "-                        options.setProperty(SynapseConstants.RAMPART_IN_POLICY,\n", 
            "-                                            MessageHelper.getPolicy(\n", 
            "-                                                    synCtx, inboundWsSecPolicyKey));\n", 
            "+                    synLog.traceOrDebug(\"Using the To header as the EPR \");\n", 
            "+                }\n", 
            "+                if (securityOn) {\n", 
            "+                    synLog.traceOrDebug(\"Security enabled within the Callout Mediator config\");\n", 
            "+                    if (wsSecPolicyKey != null) {\n", 
            "+                        synLog.traceOrDebug(\"Using security policy key : \" + wsSecPolicyKey);\n", 
            "+                    } else {\n", 
            "+                        if (inboundWsSecPolicyKey != null) {\n", 
            "+                            synLog.traceOrDebug(\"Using inbound security policy key : \" + inboundWsSecPolicyKey);\n", 
            "+                        }\n", 
            "+                        if (outboundWsSecPolicyKey != null) {\n", 
            "+                            synLog.traceOrDebug(\"Using outbound security policy key : \" + outboundWsSecPolicyKey);\n", 
            "+                        }\n", 
            "                     }\n", 
            "-                    if (outboundWsSecPolicyKey != null) {\n", 
            "-                        options.setProperty(SynapseConstants.RAMPART_OUT_POLICY,\n", 
            "-                                            MessageHelper.getPolicy(\n", 
            "-                                                    synCtx, outboundWsSecPolicyKey));\n", 
            "-                    }\n", 
            "                 }\n", 
            "-                sc.engageModule(SynapseConstants.SECURITY_MODULE_NAME);\n", 
            "             }\n", 
            " \n", 
            "-            if (serviceURL != null) {\n", 
            "-                options.setTo(new EndpointReference(serviceURL));\n", 
            "-            } else if (synCtx.getTo() != null && synCtx.getTo().getAddress() != null) {\n", 
            "-                options.setTo(new EndpointReference(synCtx.getTo().getAddress()));\n", 
            "-            } else {\n", 
            "-                handleException(\"Service URL or 'To' header is required\", synCtx);\n", 
            "+            org.apache.axis2.context.MessageContext axis2MsgCtx =\n", 
            "+                    ((Axis2MessageContext) synCtx).getAxis2MessageContext();\n", 
            "+            if (Constants.VALUE_TRUE.equals(axis2MsgCtx.getProperty(Constants.Configuration.ENABLE_MTOM))) {\n", 
            "+                ((AbstractEndpoint) endpoint).getDefinition().setUseMTOM(true);\n", 
            "             }\n", 
            " \n", 
            "+            MessageContext synapseOutMsgCtx = MessageHelper.cloneMessageContext(synCtx);\n", 
            "+\n", 
            "             if (action != null) {\n", 
            "-                options.setAction(action);\n", 
            "-            } else {\n", 
            "-                if (synCtx.isSOAP11()) {\n", 
            "-                    options.setProperty(Constants.Configuration.DISABLE_SOAP_ACTION, true);\n", 
            "-                } else {\n", 
            "-                    Axis2MessageContext axis2smc = (Axis2MessageContext) synCtx;\n", 
            "-                    org.apache.axis2.context.MessageContext axis2MessageCtx =\n", 
            "-                            axis2smc.getAxis2MessageContext();\n", 
            "-                    axis2MessageCtx.getTransportOut().addParameter(\n", 
            "-                            new Parameter(HTTPConstants.OMIT_SOAP_12_ACTION, true));\n", 
            "-                }\n", 
            "+                synapseOutMsgCtx.setSoapAction(action);\n", 
            "             }\n", 
            " \n", 
            "-            if (passHeaders) {\n", 
            "-                SOAPHeader header = synCtx.getEnvelope().getHeader();\n", 
            "-                if (header != null) {\n", 
            "-                    Iterator headerElements = header.cloneOMElement().getChildElements();\n", 
            "-                    while (headerElements.hasNext()) {\n", 
            "-                        sc.addHeader((OMElement) headerElements.next());\n", 
            "-                    }\n", 
            "+            if (requestKey != null || requestXPath != null) {\n", 
            "+                SOAPBody soapBody = synapseOutMsgCtx.getEnvelope().getBody();\n", 
            "+                soapBody.removeChildren();\n", 
            "+                soapBody.addChild(getRequestPayload(synCtx));\n", 
            "+                if (!passHeaders) {\n", 
            "+                    SOAPHeader soapHeader = synapseOutMsgCtx.getEnvelope().getHeader();\n", 
            "+                    soapHeader.removeChildren();\n", 
            "                 }\n", 
            "             }\n", 
            " \n", 
            "-            options.setProperty(\n", 
            "-                    AddressingConstants.DISABLE_ADDRESSING_FOR_OUT_MESSAGES, Boolean.TRUE);\n", 
            "-            sc.setOptions(options);\n", 
            "-\n", 
            "-            OMElement request = getRequestPayload(synCtx);\n", 
            "             if (synLog.isTraceOrDebugEnabled()) {\n", 
            "-                synLog.traceOrDebug(\"About to invoke service : \" + serviceURL + (action != null ?\n", 
            "-                    \" with action : \" + action : \"\"));\n", 
            "+                synLog.traceOrDebug(\"About to invoke the service\");\n", 
            "                 if (synLog.isTraceTraceEnabled()) {\n", 
            "-                    synLog.traceTrace(\"Request message payload : \" + request);\n", 
            "+                    synLog.traceTrace(\"Request message payload : \" + synapseOutMsgCtx.getEnvelope());\n", 
            "                 }\n", 
            "             }\n", 
            " \n", 
            "-            OMElement result = null;\n", 
            "+            MessageContext resultMsgCtx = null;\n", 
            "             try {\n", 
            "-                options.setCallTransportCleanup(true);\n", 
            "-                result = sc.sendReceive(request);\n", 
            "-            } catch (AxisFault axisFault) {\n", 
            "-                handleFault(synCtx, axisFault);\n", 
            "+                if (\"true\".equals(synCtx.getProperty(SynapseConstants.OUT_ONLY))) {\n", 
            "+                    blockingMsgSender.send(endpoint, synapseOutMsgCtx);\n", 
            "+                } else {\n", 
            "+                    resultMsgCtx = blockingMsgSender.send(endpoint, synapseOutMsgCtx);\n", 
            "+                    if (\"true\".equals(resultMsgCtx.getProperty(SynapseConstants.BLOCKING_CLIENT_ERROR))) {\n", 
            "+                        handleFault(synCtx, (Exception) synCtx.getProperty(SynapseConstants.ERROR_EXCEPTION));\n", 
            "+                    }\n", 
            "+                }\n", 
            "+            } catch (Exception ex) {\n", 
            "+                handleFault(synCtx, ex);\n", 
            "             }\n", 
            " \n", 
            "             if (synLog.isTraceTraceEnabled()) {\n", 
            "-                synLog.traceTrace(\"Response payload received : \" + result);\n", 
            "+                synLog.traceTrace(\"Response payload received : \" + resultMsgCtx.getEnvelope());\n", 
            "             }\n", 
            " \n", 
            "-            if (result != null) {\n", 
            "+            if (resultMsgCtx != null) {\n", 
            "                 if (targetXPath != null) {\n", 
            "                     Object o = targetXPath.evaluate(synCtx);\n", 
            "-\n", 
            "+                    OMElement result = resultMsgCtx.getEnvelope().getBody().getFirstElement();\n", 
            "                     if (o != null && o instanceof OMElement) {\n", 
            "                         OMNode tgtNode = (OMElement) o;\n", 
            "                         tgtNode.insertSiblingAfter(result);\n"
          ]
        }, 
        {
          "locn": "-181,10 +188,13", 
          "lines": [
            "                         tgtNode.detach();\n", 
            "                     } else {\n", 
            "                         handleException(\"Evaluation of target XPath expression : \" +\n", 
            "-                            targetXPath.toString() + \" did not yield an OMNode\", synCtx);\n", 
            "+                                        targetXPath.toString() + \" did not yeild an OMNode\", synCtx);\n", 
            "                     }\n", 
            "-                } if (targetKey != null) {\n", 
            "+                } else if (targetKey != null) {\n", 
            "+                    OMElement result = resultMsgCtx.getEnvelope().getBody().getFirstElement();\n", 
            "                     synCtx.setProperty(targetKey, result);\n", 
            "+                } else {\n", 
            "+                    synCtx.setEnvelope(resultMsgCtx.getEnvelope());\n", 
            "                 }\n", 
            "             } else {\n", 
            "                 synLog.traceOrDebug(\"Service returned a null response\");\n"
          ]
        }, 
        {
          "locn": "-192,10 +202,10", 
          "lines": [
            " \n", 
            "         } catch (AxisFault e) {\n", 
            "             handleException(\"Error invoking service : \" + serviceURL +\n", 
            "-                (action != null ? \" with action : \" + action : \"\"), e, synCtx);\n", 
            "+                            (action != null ? \" with action : \" + action : \"\"), e, synCtx);\n", 
            "         } catch (JaxenException e) {\n", 
            "             handleException(\"Error while evaluating the XPath expression: \" + targetXPath,\n", 
            "-                    e, synCtx);\n", 
            "+                            e, synCtx);\n", 
            "         }\n", 
            " \n", 
            "         synLog.traceOrDebug(\"End : Callout mediator\");\n"
          ]
        }, 
        {
          "locn": "-202,36 +212,41", 
          "lines": [
            "         return true;\n", 
            "     }\n", 
            " \n", 
            "-    private void handleFault(MessageContext synCtx, AxisFault axisFault) {\n", 
            "+    private void handleFault(MessageContext synCtx, Exception ex) {\n", 
            "         synCtx.setProperty(SynapseConstants.SENDING_FAULT, Boolean.TRUE);\n", 
            "-        if (axisFault.getFaultCodeElement() != null) {\n", 
            "-            synCtx.setProperty(SynapseConstants.ERROR_CODE,\n", 
            "-                    axisFault.getFaultCodeElement().getText());\n", 
            "-        } else {\n", 
            "-            synCtx.setProperty(SynapseConstants.ERROR_CODE,\n", 
            "-                    SynapseConstants.CALLOUT_OPERATION_FAILED);\n", 
            "-        }\n", 
            " \n", 
            "-        if (axisFault.getFaultReasonElement() != null) {\n", 
            "-            synCtx.setProperty(SynapseConstants.ERROR_MESSAGE,\n", 
            "-                    axisFault.getFaultReasonElement().getText());\n", 
            "-        } else {\n", 
            "-            synCtx.setProperty(SynapseConstants.ERROR_MESSAGE, \"Error while performing \" +\n", 
            "-                    \"the callout operation\");\n", 
            "-        }\n", 
            "+        if (ex instanceof AxisFault) {\n", 
            "+            AxisFault axisFault = (AxisFault) ex;\n", 
            " \n", 
            "-        if (axisFault.getFaultDetailElement() != null) {\n", 
            "-            if (axisFault.getFaultDetailElement().getFirstElement() != null) {\n", 
            "-                synCtx.setProperty(SynapseConstants.ERROR_DETAIL,\n", 
            "-                        axisFault.getFaultDetailElement().getFirstElement());\n", 
            "+            if (axisFault.getFaultCodeElement() != null) {\n", 
            "+                synCtx.setProperty(SynapseConstants.ERROR_CODE,\n", 
            "+                                   axisFault.getFaultCodeElement().getText());\n", 
            "             } else {\n", 
            "-                synCtx.setProperty(SynapseConstants.ERROR_DETAIL,\n", 
            "-                        axisFault.getFaultDetailElement().getText());\n", 
            "+                synCtx.setProperty(SynapseConstants.ERROR_CODE,\n", 
            "+                                   SynapseConstants.CALLOUT_OPERATION_FAILED);\n", 
            "             }\n", 
            "+\n", 
            "+            if (axisFault.getMessage() != null) {\n", 
            "+                synCtx.setProperty(SynapseConstants.ERROR_MESSAGE,\n", 
            "+                                   axisFault.getMessage());\n", 
            "+            } else {\n", 
            "+                synCtx.setProperty(SynapseConstants.ERROR_MESSAGE, \"Error while performing \" +\n", 
            "+                                                                   \"the callout operation\");\n", 
            "+            }\n", 
            "+\n", 
            "+            if (axisFault.getFaultDetailElement() != null) {\n", 
            "+                if (axisFault.getFaultDetailElement().getFirstElement() != null) {\n", 
            "+                    synCtx.setProperty(SynapseConstants.ERROR_DETAIL,\n", 
            "+                                       axisFault.getFaultDetailElement().getFirstElement());\n", 
            "+                } else {\n", 
            "+                    synCtx.setProperty(SynapseConstants.ERROR_DETAIL,\n", 
            "+                                       axisFault.getFaultDetailElement().getText());\n", 
            "+                }\n", 
            "+            }\n", 
            "         }\n", 
            " \n", 
            "-        synCtx.setProperty(SynapseConstants.ERROR_EXCEPTION, axisFault);\n", 
            "-        throw new SynapseException(\"Error while performing the callout operation\", axisFault);\n", 
            "+        synCtx.setProperty(SynapseConstants.ERROR_EXCEPTION, ex);\n", 
            "+        throw new SynapseException(\"Error while performing the callout operation\", ex);\n", 
            "     }\n", 
            " \n", 
            "     private OMElement getRequestPayload(MessageContext synCtx) throws AxisFault {\n"
          ]
        }, 
        {
          "locn": "-267,20 +282,40", 
          "lines": [
            "     }\n", 
            " \n", 
            "     public void init(SynapseEnvironment synEnv) {\n", 
            "-        try {\n", 
            "-            configCtx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(\n", 
            "-                    clientRepository != null ? clientRepository : DEFAULT_CLIENT_REPO,\n", 
            "-            axis2xml != null ? axis2xml : DEFAULT_AXIS2_XML);\n", 
            "-        } catch (AxisFault e) {\n", 
            "-            String msg = \"Error initializing callout mediator : \" + e.getMessage();\n", 
            "-            log.error(msg, e);\n", 
            "-            throw new SynapseException(msg, e);\n", 
            "+        blockingMsgSender = new Axis2BlockingClient(clientRepository, axis2xml);\n", 
            "+\n", 
            "+        EndpointDefinition endpointDefinition = null;\n", 
            "+        if (serviceURL != null) {\n", 
            "+            endpoint = new AddressEndpoint();\n", 
            "+            endpointDefinition = new EndpointDefinition();\n", 
            "+            endpointDefinition.setAddress(serviceURL);\n", 
            "+            ((AddressEndpoint) endpoint).setDefinition(endpointDefinition);\n", 
            "+        } else if (endpointKey == null) {\n", 
            "+            // Use a default endpoint in this case - i.e. the To header\n", 
            "+            endpoint = new DefaultEndpoint();\n", 
            "+            endpointDefinition = new EndpointDefinition();\n", 
            "+            ((DefaultEndpoint) endpoint).setDefinition(endpointDefinition);\n", 
            "         }\n", 
            "+        // If the endpointKey is specified, we'll look it up at mediation time\n", 
            "+\n", 
            "+        if (endpointDefinition != null && isSecurityOn()) {\n", 
            "+            endpointDefinition.setSecurityOn(true);\n", 
            "+            if (wsSecPolicyKey != null) {\n", 
            "+                endpointDefinition.setWsSecPolicyKey(wsSecPolicyKey);\n", 
            "+            } else {\n", 
            "+                if (inboundWsSecPolicyKey != null) {\n", 
            "+                    endpointDefinition.setInboundWsSecPolicyKey(inboundWsSecPolicyKey);\n", 
            "+                }\n", 
            "+                if (outboundWsSecPolicyKey != null) {\n", 
            "+                    endpointDefinition.setOutboundWsSecPolicyKey(outboundWsSecPolicyKey);\n", 
            "+                }\n", 
            "+            }\n", 
            "+        }\n", 
            "     }\n", 
            " \n", 
            "     public void destroy() {\n", 
            "         try {\n", 
            "-            configCtx.terminate();\n", 
            "+            blockingMsgSender.cleanup();\n", 
            "         } catch (AxisFault ignore) {}\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-432,4 +467,12", 
          "lines": [
            "         this.inboundWsSecPolicyKey = inboundWsSecPolicyKey;\n", 
            "     }\n", 
            " \n", 
            "+    public void setEndpointKey(String key) {\n", 
            "+        this.endpointKey = key;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getEndpointKey() {\n", 
            "+        return endpointKey;\n", 
            "+    }\n", 
            "+\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/CalloutMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/CalloutMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,322", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.core.axis2;\n", 
            "+\n", 
            "+import org.apache.axis2.AxisFault;\n", 
            "+import org.apache.axis2.Constants;\n", 
            "+import org.apache.axis2.addressing.AddressingConstants;\n", 
            "+import org.apache.axis2.addressing.EndpointReference;\n", 
            "+import org.apache.axis2.client.Options;\n", 
            "+import org.apache.axis2.transport.http.HTTPConstants;\n", 
            "+import org.apache.axis2.transport.http.HTTPTransportUtils;\n", 
            "+import org.apache.synapse.MessageContext;\n", 
            "+import org.apache.synapse.SynapseConstants;\n", 
            "+import org.apache.synapse.endpoints.EndpointDefinition;\n", 
            "+import org.apache.synapse.rest.RESTConstants;\n", 
            "+import org.apache.synapse.transport.nhttp.NhttpConstants;\n", 
            "+import org.apache.synapse.util.MessageHelper;\n", 
            "+\n", 
            "+public class BlockingClientUtils {\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Fill client options extracting properties from the original message context and\n", 
            "+     * endpoint definition\n", 
            "+     *\n", 
            "+     * @param endpoint endpoint definition\n", 
            "+     * @param clientOptions target client options\n", 
            "+     * @param synapseInMsgCtx original message context\n", 
            "+     */\n", 
            "+    public static void fillClientOptions(EndpointDefinition endpoint, Options clientOptions,\n", 
            "+                                         MessageContext synapseInMsgCtx) {\n", 
            "+\n", 
            "+        org.apache.axis2.context.MessageContext axisInMsgCtx\n", 
            "+                = ((Axis2MessageContext) synapseInMsgCtx).getAxis2MessageContext();\n", 
            "+\n", 
            "+        if (endpoint != null) {\n", 
            "+\n", 
            "+            // if security is enabled\n", 
            "+            boolean wsSecurityEnabled = endpoint.isSecurityOn();\n", 
            "+            if (wsSecurityEnabled) {\n", 
            "+                String wsSecPolicyKey = endpoint.getWsSecPolicyKey();\n", 
            "+                if (wsSecPolicyKey != null) {\n", 
            "+                    clientOptions.setProperty(\n", 
            "+                            SynapseConstants.RAMPART_POLICY,\n", 
            "+                            MessageHelper.getPolicy(synapseInMsgCtx, wsSecPolicyKey));\n", 
            "+                } else {\n", 
            "+                    String inboundWsSecPolicyKey = endpoint.getInboundWsSecPolicyKey();\n", 
            "+                    String outboundWsSecPolicyKey = endpoint.getOutboundWsSecPolicyKey();\n", 
            "+                    if (inboundWsSecPolicyKey != null) {\n", 
            "+                        clientOptions.setProperty(SynapseConstants.RAMPART_IN_POLICY,\n", 
            "+                                                  MessageHelper.getPolicy(\n", 
            "+                                                          synapseInMsgCtx, inboundWsSecPolicyKey));\n", 
            "+                    }\n", 
            "+                    if (outboundWsSecPolicyKey != null) {\n", 
            "+                        clientOptions.setProperty(SynapseConstants.RAMPART_OUT_POLICY,\n", 
            "+                                                  MessageHelper.getPolicy(\n", 
            "+                                                          synapseInMsgCtx, outboundWsSecPolicyKey));\n", 
            "+                    }\n", 
            "+                }\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        if (axisInMsgCtx.getSoapAction() != null) {\n", 
            "+            clientOptions.setAction(axisInMsgCtx.getSoapAction());\n", 
            "+        }\n", 
            "+\n", 
            "+        clientOptions.setExceptionToBeThrownOnSOAPFault(Constants.VALUE_TRUE.equals(\n", 
            "+                synapseInMsgCtx.getProperty(SynapseConstants.THROW_EXCEPTION_ON_SOAPFAULT)));\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Fill the target message context extracting the required properties of the original\n", 
            "+     * message context and the endpoint\n", 
            "+     *\n", 
            "+     * @param endpoint endpoint definition\n", 
            "+     * @param axisOutMsgCtx target message axis2 context\n", 
            "+     * @param synapseInMsgCtx original synapse message context\n", 
            "+     * @throws org.apache.axis2.AxisFault\n", 
            "+     */\n", 
            "+    public static void fillMessageContext(EndpointDefinition endpoint,\n", 
            "+                                          org.apache.axis2.context.MessageContext axisOutMsgCtx,\n", 
            "+                                          MessageContext synapseInMsgCtx)\n", 
            "+            throws AxisFault {\n", 
            "+\n", 
            "+        org.apache.axis2.context.MessageContext axisInMsgCtx\n", 
            "+                = ((Axis2MessageContext) synapseInMsgCtx).getAxis2MessageContext();\n", 
            "+\n", 
            "+        // Copy properties\n", 
            "+        setProperties(axisInMsgCtx, axisOutMsgCtx);\n", 
            "+\n", 
            "+        // Endpoint format\n", 
            "+        if (endpoint.getFormat() != null) {\n", 
            "+            String format = endpoint.getFormat();\n", 
            "+            if (SynapseConstants.FORMAT_POX.equals(format)) {\n", 
            "+                axisOutMsgCtx.setDoingREST(true);\n", 
            "+                axisOutMsgCtx.setProperty(Constants.Configuration.MESSAGE_TYPE,\n", 
            "+                        org.apache.axis2.transport.http.HTTPConstants.MEDIA_TYPE_APPLICATION_XML);\n", 
            "+                axisOutMsgCtx.setProperty(Constants.Configuration.CONTENT_TYPE,\n", 
            "+                        org.apache.axis2.transport.http.HTTPConstants.MEDIA_TYPE_APPLICATION_XML);\n", 
            "+\n", 
            "+            } else if (SynapseConstants.FORMAT_GET.equals(format)) {\n", 
            "+                axisOutMsgCtx.setDoingREST(true);\n", 
            "+                axisOutMsgCtx.setProperty(Constants.Configuration.HTTP_METHOD,\n", 
            "+                        Constants.Configuration.HTTP_METHOD_GET);\n", 
            "+                axisOutMsgCtx.setProperty(Constants.Configuration.MESSAGE_TYPE,\n", 
            "+                        org.apache.axis2.transport.http.HTTPConstants.MEDIA_TYPE_X_WWW_FORM);\n", 
            "+\n", 
            "+            } else if (SynapseConstants.FORMAT_SOAP11.equals(format)) {\n", 
            "+                axisOutMsgCtx.setDoingREST(false);\n", 
            "+                axisOutMsgCtx.removeProperty(Constants.Configuration.MESSAGE_TYPE);\n", 
            "+                // We need to set this explicitly here in case the request was not a POST\n", 
            "+                axisOutMsgCtx.setProperty(Constants.Configuration.HTTP_METHOD,\n", 
            "+                                          Constants.Configuration.HTTP_METHOD_POST);\n", 
            "+                if (axisOutMsgCtx.getSoapAction() == null && axisOutMsgCtx.getWSAAction() != null) {\n", 
            "+                    axisOutMsgCtx.setSoapAction(axisOutMsgCtx.getWSAAction());\n", 
            "+                }\n", 
            "+                if (!axisOutMsgCtx.isSOAP11()) {\n", 
            "+                    SOAPUtils.convertSOAP12toSOAP11(axisOutMsgCtx);\n", 
            "+                }\n", 
            "+            } else if (SynapseConstants.FORMAT_SOAP12.equals(format)) {\n", 
            "+                axisOutMsgCtx.setDoingREST(false);\n", 
            "+                axisOutMsgCtx.removeProperty(Constants.Configuration.MESSAGE_TYPE);\n", 
            "+                // We need to set this explicitly here in case the request was not a POST\n", 
            "+                axisOutMsgCtx.setProperty(Constants.Configuration.HTTP_METHOD,\n", 
            "+                                          Constants.Configuration.HTTP_METHOD_POST);\n", 
            "+                if (axisOutMsgCtx.getSoapAction() == null && axisOutMsgCtx.getWSAAction() != null) {\n", 
            "+                    axisOutMsgCtx.setSoapAction(axisOutMsgCtx.getWSAAction());\n", 
            "+                }\n", 
            "+                if (axisOutMsgCtx.isSOAP11()) {\n", 
            "+                    SOAPUtils.convertSOAP11toSOAP12(axisOutMsgCtx);\n", 
            "+                }\n", 
            "+            } else if (SynapseConstants.FORMAT_REST.equals(format)) {\n", 
            "+                if (axisInMsgCtx.getProperty(Constants.Configuration.HTTP_METHOD) != null) {\n", 
            "+                    if (axisInMsgCtx.getProperty(Constants.Configuration.HTTP_METHOD).\n", 
            "+                            toString().equals(Constants.Configuration.HTTP_METHOD_GET)\n", 
            "+                        || axisInMsgCtx.getProperty(Constants.Configuration.HTTP_METHOD).\n", 
            "+                            toString().equals(Constants.Configuration.HTTP_METHOD_DELETE)) {\n", 
            "+                        axisOutMsgCtx.removeProperty(Constants.Configuration.MESSAGE_TYPE);\n", 
            "+                    }\n", 
            "+                }\n", 
            "+                axisOutMsgCtx.setDoingREST(true);\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        // MTOM/SWA\n", 
            "+        if (endpoint.isUseMTOM()) {\n", 
            "+            axisOutMsgCtx.setDoingMTOM(true);\n", 
            "+            axisOutMsgCtx.setProperty(\n", 
            "+                    Constants.Configuration.ENABLE_MTOM,\n", 
            "+                    Constants.VALUE_TRUE);\n", 
            "+            axisOutMsgCtx.setDoingMTOM(true);\n", 
            "+\n", 
            "+        } else if (endpoint.isUseSwa()) {\n", 
            "+            axisOutMsgCtx.setDoingSwA(true);\n", 
            "+            axisOutMsgCtx.setProperty(\n", 
            "+                    Constants.Configuration.ENABLE_SWA,\n", 
            "+                    Constants.VALUE_TRUE);\n", 
            "+            axisOutMsgCtx.setDoingSwA(true);\n", 
            "+        }\n", 
            "+\n", 
            "+        if (endpoint.getCharSetEncoding() != null) {\n", 
            "+            axisOutMsgCtx.setProperty(Constants.Configuration.CHARACTER_SET_ENCODING,\n", 
            "+                                      endpoint.getCharSetEncoding());\n", 
            "+        }\n", 
            "+\n", 
            "+\n", 
            "+        boolean isRest = SynapseConstants.FORMAT_REST.equals(endpoint.getFormat()) | axisInMsgCtx.isDoingREST();\n", 
            "+        if (!isRest && !endpoint.isForceSOAP11() && !endpoint.isForceSOAP12()) {\n", 
            "+            isRest = isRequestRest(axisInMsgCtx);\n", 
            "+        }\n", 
            "+        String restURLPostfix = (String) axisOutMsgCtx.getProperty(NhttpConstants.REST_URL_POSTFIX);\n", 
            "+\n", 
            "+        if (endpoint.getAddress() != null) {\n", 
            "+            String address = endpoint.getAddress(synapseInMsgCtx);\n", 
            "+            if (isRest && restURLPostfix != null && !\"\".equals(restURLPostfix)) {\n", 
            "+                address = getEPRWithRestURLPostfix(restURLPostfix, address);\n", 
            "+            }\n", 
            "+            axisOutMsgCtx.setTo(new EndpointReference(address));\n", 
            "+        } else {\n", 
            "+            EndpointReference endpointReference = axisOutMsgCtx.getTo();\n", 
            "+            if (endpointReference != null) {\n", 
            "+                if (isRest && restURLPostfix != null && !\"\".equals(restURLPostfix)) {\n", 
            "+                    String address = endpointReference.getAddress();\n", 
            "+                    address = getEPRWithRestURLPostfix(restURLPostfix, address);\n", 
            "+                    axisOutMsgCtx.setTo(new EndpointReference(address));\n", 
            "+                } else {\n", 
            "+                    axisInMsgCtx.setTo(endpointReference);\n", 
            "+                }\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        // set the connection timeout\n", 
            "+        if (endpoint.getTimeoutDuration() > 0) {\n", 
            "+            int endpointTimeout = (int) endpoint.getTimeoutDuration();\n", 
            "+            axisOutMsgCtx.setProperty(HTTPConstants.CONNECTION_TIMEOUT, endpointTimeout);\n", 
            "+            if (endpointTimeout > 30000) {\n", 
            "+                //Default Socket timeout is 30000ms.\n", 
            "+                // If endpoint timeout > SO_TIMEOUT have to increase it.\n", 
            "+                axisOutMsgCtx.setProperty(HTTPConstants.SO_TIMEOUT, endpointTimeout);\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        // Check for preserve WS-Addressing\n", 
            "+        String preserveAddressingProperty = (String) synapseInMsgCtx.getProperty(\n", 
            "+                SynapseConstants.PRESERVE_WS_ADDRESSING);\n", 
            "+        if (preserveAddressingProperty != null && Boolean.parseBoolean(preserveAddressingProperty)) {\n", 
            "+            axisOutMsgCtx.setMessageID(axisInMsgCtx.getMessageID());\n", 
            "+        } else {\n", 
            "+            MessageHelper.removeAddressingHeaders(axisOutMsgCtx);\n", 
            "+        }\n", 
            "+\n", 
            "+        // WS-Addressing\n", 
            "+        if (endpoint.isAddressingOn()) {\n", 
            "+            String wsAddressingVersion = endpoint.getAddressingVersion();\n", 
            "+            if (wsAddressingVersion != null &&\n", 
            "+                SynapseConstants.ADDRESSING_VERSION_SUBMISSION.equals(wsAddressingVersion)) {\n", 
            "+                axisOutMsgCtx.setProperty(AddressingConstants.WS_ADDRESSING_VERSION,\n", 
            "+                                          AddressingConstants.Submission.WSA_NAMESPACE);\n", 
            "+            } else if (wsAddressingVersion != null &&\n", 
            "+                       SynapseConstants.ADDRESSING_VERSION_FINAL.equals(wsAddressingVersion)) {\n", 
            "+                axisOutMsgCtx.setProperty(AddressingConstants.WS_ADDRESSING_VERSION,\n", 
            "+                                          AddressingConstants.Final.WSA_NAMESPACE);\n", 
            "+            }\n", 
            "+            axisOutMsgCtx.setProperty\n", 
            "+                    (AddressingConstants.DISABLE_ADDRESSING_FOR_OUT_MESSAGES, Boolean.FALSE);\n", 
            "+        } else {\n", 
            "+            axisOutMsgCtx.setProperty\n", 
            "+                    (AddressingConstants.DISABLE_ADDRESSING_FOR_OUT_MESSAGES, Boolean.TRUE);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Get the modified EPR with rest url postfix\n", 
            "+     * @param restURLPostfix Rest URL postfix\n", 
            "+     * @param address original EPR\n", 
            "+    */\n", 
            "+    private static String getEPRWithRestURLPostfix(String restURLPostfix, String address) {\n", 
            "+        String url;\n", 
            "+        if (!address.endsWith(\"/\") && !restURLPostfix.startsWith(\"/\") &&\n", 
            "+            !restURLPostfix.startsWith(\"?\")) {\n", 
            "+            url = address + \"/\" + restURLPostfix;\n", 
            "+        } else if (address.endsWith(\"/\") && restURLPostfix.startsWith(\"/\")) {\n", 
            "+            url = address + restURLPostfix.substring(1);\n", 
            "+        } else if (address.endsWith(\"/\") && restURLPostfix.startsWith(\"?\")) {\n", 
            "+            url = address.substring(0, address.length() - 1) + restURLPostfix;\n", 
            "+        } else {\n", 
            "+            url = address + restURLPostfix;\n", 
            "+        }\n", 
            "+        return url;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Whether the original request received by the synapse is REST\n", 
            "+     *\n", 
            "+     * @param originalInMsgCtx request message\n", 
            "+     * @return <code>true</code> if the request was a REST request\n", 
            "+     */\n", 
            "+    private static boolean isRequestRest(org.apache.axis2.context.MessageContext originalInMsgCtx) {\n", 
            "+\n", 
            "+        boolean isRestRequest =\n", 
            "+                originalInMsgCtx.getProperty(NhttpConstants.REST_REQUEST_CONTENT_TYPE) != null;\n", 
            "+\n", 
            "+        if (!isRestRequest) {\n", 
            "+            String httpMethod = (String) originalInMsgCtx.getProperty(\n", 
            "+                    Constants.Configuration.HTTP_METHOD);\n", 
            "+            isRestRequest = Constants.Configuration.HTTP_METHOD_GET.equals(httpMethod)\n", 
            "+                            || Constants.Configuration.HTTP_METHOD_DELETE.equals(httpMethod)\n", 
            "+                            || Constants.Configuration.HTTP_METHOD_PUT.equals(httpMethod)\n", 
            "+                            || RESTConstants.METHOD_OPTIONS.equals(httpMethod);\n", 
            "+            if (!isRestRequest) {\n", 
            "+                isRestRequest = Constants.Configuration.HTTP_METHOD_POST.equals(httpMethod)\n", 
            "+                                && HTTPTransportUtils.isRESTRequest(\n", 
            "+                        String.valueOf(originalInMsgCtx.getProperty(\n", 
            "+                                Constants.Configuration.MESSAGE_TYPE)));\n", 
            "+            }\n", 
            "+        }\n", 
            "+        return isRestRequest;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Set message context properties extracting from the original message context\n", 
            "+     * @param axisInMsgCtx original message context\n", 
            "+     * @param axisOutMsgCtx target message context\n", 
            "+     */\n", 
            "+    private static void setProperties(org.apache.axis2.context.MessageContext axisInMsgCtx,\n", 
            "+                                      org.apache.axis2.context.MessageContext axisOutMsgCtx) {\n", 
            "+        for (String propertyName : allowedProperties) {\n", 
            "+            Object property = axisInMsgCtx.getProperty(propertyName);\n", 
            "+            if (property != null) {\n", 
            "+                axisOutMsgCtx.setProperty(propertyName, property);\n", 
            "+            }\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    /** Properties allowed to be copied to output message context*/\n", 
            "+    private static String[] allowedProperties = {\n", 
            "+            Constants.Configuration.HTTP_METHOD,\n", 
            "+            Constants.Configuration.MESSAGE_TYPE,\n", 
            "+            Constants.Configuration.CONTENT_TYPE,\n", 
            "+            NhttpConstants.REST_URL_POSTFIX,\n", 
            "+            \"JSON_OBJECT\",\n", 
            "+            \"JSON_STREAM\",\n", 
            "+            \"JSON_STRING\"\n", 
            "+    };\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/core/axis2/BlockingClientUtils.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/core/axis2/BlockingClientUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,267", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.core.axis2;\n", 
            "+\n", 
            "+import org.apache.axis2.AxisFault;\n", 
            "+import org.apache.axis2.Constants;\n", 
            "+import org.apache.axis2.addressing.EndpointReference;\n", 
            "+import org.apache.axis2.client.OperationClient;\n", 
            "+import org.apache.axis2.client.Options;\n", 
            "+import org.apache.axis2.context.ConfigurationContext;\n", 
            "+import org.apache.axis2.context.ConfigurationContextFactory;\n", 
            "+import org.apache.axis2.context.ServiceContext;\n", 
            "+import org.apache.axis2.context.ServiceGroupContext;\n", 
            "+import org.apache.axis2.description.AxisOperation;\n", 
            "+import org.apache.axis2.description.AxisService;\n", 
            "+import org.apache.axis2.description.AxisServiceGroup;\n", 
            "+import org.apache.axis2.description.WSDL2Constants;\n", 
            "+import org.apache.axis2.wsdl.WSDLConstants;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.MessageContext;\n", 
            "+import org.apache.synapse.SynapseConstants;\n", 
            "+import org.apache.synapse.SynapseException;\n", 
            "+import org.apache.synapse.endpoints.AbstractEndpoint;\n", 
            "+import org.apache.synapse.endpoints.Endpoint;\n", 
            "+import org.apache.synapse.endpoints.EndpointDefinition;\n", 
            "+import org.apache.synapse.transport.nhttp.NhttpConstants;\n", 
            "+import org.apache.synapse.util.MessageHelper;\n", 
            "+\n", 
            "+import javax.xml.namespace.QName;\n", 
            "+\n", 
            "+public class Axis2BlockingClient {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Axis2BlockingClient.class);\n", 
            "+\n", 
            "+    private final static String DEFAULT_CLIENT_REPO = \"./repository\";\n", 
            "+    private final static String DEFAULT_AXIS2_XML = \"./repository/conf/axis2_blocking_client.xml\";\n", 
            "+\n", 
            "+    private ConfigurationContext configurationContext = null;\n", 
            "+    private boolean initClientOptions = true;\n", 
            "+    private boolean configurationContextCreated = false;\n", 
            "+\n", 
            "+    public Axis2BlockingClient(String clientRepository, String axis2xml) {\n", 
            "+        try {\n", 
            "+            configurationContext\n", 
            "+                    = ConfigurationContextFactory.createConfigurationContextFromFileSystem(\n", 
            "+                    clientRepository != null ? clientRepository : DEFAULT_CLIENT_REPO,\n", 
            "+                    axis2xml != null ? axis2xml : DEFAULT_AXIS2_XML);\n", 
            "+            configurationContextCreated = true;\n", 
            "+        } catch (AxisFault e) {\n", 
            "+            handleException(\"Error initializing Axis2 Blocking Client\", e);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public Axis2BlockingClient(ConfigurationContext configurationContext) {\n", 
            "+        this.configurationContext = configurationContext;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void cleanup() throws AxisFault {\n", 
            "+        if (configurationContextCreated) {\n", 
            "+            configurationContext.terminate();\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Send the message to a given Leaf endpoint (Address/WSDL/Default) in a blocking manner\n", 
            "+     *\n", 
            "+     * @param endpoint  leaf Endpoint\n", 
            "+     * @param synapseInMsgCtx Synapse Message Context to be sent\n", 
            "+     * @return OutPut message Context\n", 
            "+     * @throws Exception\n", 
            "+     */\n", 
            "+    public MessageContext send(Endpoint endpoint, MessageContext synapseInMsgCtx)\n", 
            "+            throws Exception {\n", 
            "+\n", 
            "+        if (log.isDebugEnabled()) {\n", 
            "+            log.debug(\"Start Sending the Message \");\n", 
            "+        }\n", 
            "+\n", 
            "+        AbstractEndpoint abstractEndpoint = (AbstractEndpoint) endpoint;\n", 
            "+        if (!abstractEndpoint.isLeafEndpoint()) {\n", 
            "+            handleException(\"Endpoint type not supported. Only leaf endpoints are supported\");\n", 
            "+        }\n", 
            "+        EndpointDefinition endpointDefinition = abstractEndpoint.getDefinition();\n", 
            "+\n", 
            "+        org.apache.axis2.context.MessageContext axisInMsgCtx =\n", 
            "+                ((Axis2MessageContext) synapseInMsgCtx).getAxis2MessageContext();\n", 
            "+        org.apache.axis2.context.MessageContext axisOutMsgCtx =\n", 
            "+                new org.apache.axis2.context.MessageContext();\n", 
            "+\n", 
            "+        String endpointReferenceValue = null;\n", 
            "+        if (endpointDefinition.getAddress() != null) {\n", 
            "+            endpointReferenceValue = endpointDefinition.getAddress();\n", 
            "+        } else if (axisInMsgCtx.getTo() != null) {\n", 
            "+            endpointReferenceValue = axisInMsgCtx.getTo().getAddress();\n", 
            "+        } else {\n", 
            "+            handleException(\"Service url, Endpoint or 'To' header is required\");\n", 
            "+        }\n", 
            "+        if (log.isDebugEnabled()) {\n", 
            "+            log.debug(\"EPR is set to : \" + endpointReferenceValue);\n", 
            "+        }\n", 
            "+        axisOutMsgCtx.setTo(new EndpointReference(endpointReferenceValue));\n", 
            "+\n", 
            "+        // Use the configuration context of the original ctx if local transport is selected\n", 
            "+        if (endpointReferenceValue != null && endpointReferenceValue.startsWith(Constants.TRANSPORT_LOCAL)) {\n", 
            "+            configurationContext = axisInMsgCtx.getConfigurationContext();\n", 
            "+        }\n", 
            "+\n", 
            "+        axisOutMsgCtx.setConfigurationContext(configurationContext);\n", 
            "+        axisOutMsgCtx.setEnvelope(axisInMsgCtx.getEnvelope());\n", 
            "+\n", 
            "+        // Fill MessageContext\n", 
            "+        BlockingClientUtils.fillMessageContext(endpointDefinition, axisOutMsgCtx, synapseInMsgCtx);\n", 
            "+\n", 
            "+        Options clientOptions;\n", 
            "+        if (initClientOptions) {\n", 
            "+            clientOptions = new Options();\n", 
            "+        } else {\n", 
            "+            clientOptions = axisInMsgCtx.getOptions();\n", 
            "+        }\n", 
            "+        // Fill Client options\n", 
            "+        BlockingClientUtils.fillClientOptions(endpointDefinition, clientOptions, synapseInMsgCtx);\n", 
            "+\n", 
            "+        AxisService anonymousService = AnonymousServiceFactory.getAnonymousService(null,\n", 
            "+                configurationContext.getAxisConfiguration(), endpointDefinition.isAddressingOn(),\n", 
            "+                false, endpointDefinition.isSecurityOn(), false);\n", 
            "+        anonymousService.getParent().addParameter(SynapseConstants.HIDDEN_SERVICE_PARAM, \"true\");\n", 
            "+        ServiceGroupContext serviceGroupContext = new ServiceGroupContext(configurationContext, (AxisServiceGroup) anonymousService.getParent());\n", 
            "+        ServiceContext serviceCtx = serviceGroupContext.getServiceContext(anonymousService);\n", 
            "+        axisOutMsgCtx.setServiceContext(serviceCtx);\n", 
            "+\n", 
            "+        // Invoke\n", 
            "+        boolean isOutOnly = isOutOnly(synapseInMsgCtx, axisOutMsgCtx);\n", 
            "+        try {\n", 
            "+            if (isOutOnly) {\n", 
            "+                if (log.isDebugEnabled()) {\n", 
            "+                    log.debug(\"invoking service in OUT_ONLY manner\");\n", 
            "+                }\n", 
            "+                sendRobust(axisOutMsgCtx, clientOptions, anonymousService, serviceCtx);\n", 
            "+            } else {\n", 
            "+                if (log.isDebugEnabled()) {\n", 
            "+                    log.debug(\"invoking service in OUT_IN manner\");\n", 
            "+                }\n", 
            "+                org.apache.axis2.context.MessageContext result = sendReceive(axisOutMsgCtx,\n", 
            "+                        clientOptions, anonymousService, serviceCtx);\n", 
            "+                synapseInMsgCtx.setEnvelope(result.getEnvelope());\n", 
            "+                synapseInMsgCtx.setProperty(NhttpConstants.HTTP_SC, result.getProperty(\n", 
            "+                        SynapseConstants.HTTP_SENDER_STATUSCODE));\n", 
            "+                return synapseInMsgCtx;\n", 
            "+            }\n", 
            "+        } catch (Exception ex) {\n", 
            "+            synapseInMsgCtx.setProperty(SynapseConstants.BLOCKING_CLIENT_ERROR, \"true\");\n", 
            "+            axisOutMsgCtx.getTransportOut().getSender().cleanup(axisOutMsgCtx);\n", 
            "+            if (!isOutOnly) {\n", 
            "+                if (ex instanceof AxisFault) {\n", 
            "+                    AxisFault fault = (AxisFault) ex;\n", 
            "+                    if (fault.getFaultCode() != null) {\n", 
            "+                        synapseInMsgCtx.setProperty(SynapseConstants.ERROR_CODE,\n", 
            "+                                fault.getFaultCode().getLocalPart());\n", 
            "+                    }\n", 
            "+                    synapseInMsgCtx.setProperty(SynapseConstants.ERROR_MESSAGE, fault.getMessage());\n", 
            "+\n", 
            "+                    if (fault.getDetail() != null) {\n", 
            "+                        synapseInMsgCtx.setProperty(SynapseConstants.ERROR_DETAIL, fault.getDetail());\n", 
            "+                    }\n", 
            "+                    synapseInMsgCtx.setProperty(SynapseConstants.ERROR_EXCEPTION, ex);\n", 
            "+                    org.apache.axis2.context.MessageContext faultMC = fault.getFaultMessageContext();\n", 
            "+                    if (faultMC != null) {\n", 
            "+                        synapseInMsgCtx.setProperty(NhttpConstants.HTTP_SC,\n", 
            "+                                faultMC.getProperty(SynapseConstants.HTTP_SENDER_STATUSCODE));\n", 
            "+                        synapseInMsgCtx.setEnvelope(faultMC.getEnvelope());\n", 
            "+                    }\n", 
            "+                }\n", 
            "+                return synapseInMsgCtx;\n", 
            "+            }\n", 
            "+            handleException(\"Error sending Message to url : \" +\n", 
            "+                    ((AbstractEndpoint) endpoint).getDefinition().getAddress());\n", 
            "+        }\n", 
            "+        return null;\n", 
            "+    }\n", 
            "+\n", 
            "+    private void sendRobust(org.apache.axis2.context.MessageContext axisOutMsgCtx,\n", 
            "+                            Options clientOptions, AxisService anonymousService,\n", 
            "+                            ServiceContext serviceCtx) throws AxisFault {\n", 
            "+\n", 
            "+        AxisOperation axisAnonymousOperation = anonymousService.getOperation(\n", 
            "+                new QName(AnonymousServiceFactory.OUT_ONLY_OPERATION));\n", 
            "+        OperationClient operationClient = axisAnonymousOperation.createClient(\n", 
            "+                serviceCtx, clientOptions);\n", 
            "+        operationClient.addMessageContext(axisOutMsgCtx);\n", 
            "+        axisOutMsgCtx.setAxisMessage(axisAnonymousOperation.getMessage(\n", 
            "+                WSDLConstants.MESSAGE_LABEL_OUT_VALUE));\n", 
            "+        operationClient.execute(true);\n", 
            "+        axisOutMsgCtx.getTransportOut().getSender().cleanup(axisOutMsgCtx);\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+    private org.apache.axis2.context.MessageContext sendReceive(org.apache.axis2.context.MessageContext axisOutMsgCtx,\n", 
            "+                                                                Options clientOptions,\n", 
            "+                                                                AxisService anonymousService,\n", 
            "+                                                                ServiceContext serviceCtx) throws AxisFault {\n", 
            "+\n", 
            "+        AxisOperation axisAnonymousOperation = anonymousService.getOperation(\n", 
            "+                new QName(AnonymousServiceFactory.OUT_IN_OPERATION));\n", 
            "+        OperationClient operationClient = axisAnonymousOperation.createClient(\n", 
            "+                serviceCtx, clientOptions);\n", 
            "+        operationClient.addMessageContext(axisOutMsgCtx);\n", 
            "+        axisOutMsgCtx.setAxisMessage(axisAnonymousOperation.getMessage(\n", 
            "+                WSDLConstants.MESSAGE_LABEL_OUT_VALUE));\n", 
            "+        operationClient.execute(true);\n", 
            "+        org.apache.axis2.context.MessageContext resultMsgCtx = operationClient.getMessageContext(\n", 
            "+                WSDLConstants.MESSAGE_LABEL_IN_VALUE);\n", 
            "+\n", 
            "+        org.apache.axis2.context.MessageContext returnMsgCtx =\n", 
            "+                new org.apache.axis2.context.MessageContext();\n", 
            "+        returnMsgCtx.setEnvelope(MessageHelper.cloneSOAPEnvelope(resultMsgCtx.getEnvelope()));\n", 
            "+        returnMsgCtx.setProperty(SynapseConstants.HTTP_SENDER_STATUSCODE,\n", 
            "+                resultMsgCtx.getProperty(SynapseConstants.HTTP_SENDER_STATUSCODE));\n", 
            "+        axisOutMsgCtx.getTransportOut().getSender().cleanup(axisOutMsgCtx);\n", 
            "+\n", 
            "+        return returnMsgCtx;\n", 
            "+    }\n", 
            "+\n", 
            "+    private boolean isOutOnly(MessageContext messageIn,\n", 
            "+                              org.apache.axis2.context.MessageContext axis2Ctx) {\n", 
            "+        return \"true\".equals(messageIn.getProperty(SynapseConstants.OUT_ONLY)) ||\n", 
            "+                axis2Ctx.getOperationContext() != null && WSDL2Constants.MEP_URI_IN_ONLY.equals(\n", 
            "+                        axis2Ctx.getOperationContext().getAxisOperation().getMessageExchangePattern());\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Set whether to create new client options.\n", 
            "+     * If set to false, client options from incoming message context is used.\n", 
            "+     * @param initClientOptions whether to initialize client options\n", 
            "+     */\n", 
            "+    public void setInitClientOptions(boolean initClientOptions) {\n", 
            "+        this.initClientOptions = initClientOptions;\n", 
            "+    }\n", 
            "+\n", 
            "+    private void handleException(String msg, Exception e) {\n", 
            "+        log.error(msg, e);\n", 
            "+        throw new SynapseException(msg, e);\n", 
            "+    }\n", 
            "+\n", 
            "+    private void handleException(String msg) {\n", 
            "+        log.error(msg);\n", 
            "+        throw new SynapseException(msg);\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/core/axis2/Axis2BlockingClient.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/core/axis2/Axis2BlockingClient.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-49,19 +49,39", 
          "lines": [
            "     public static final String OUT_IN_OPERATION   = \"anonOutInOp\";\n", 
            "     public static final String OUT_ONLY_OPERATION = \"anonOutonlyOp\";\n", 
            " \n", 
            "+\n", 
            "     /**\n", 
            "      * Creates an AxisService for the requested QoS for sending out messages\n", 
            "      * Callers must guarantee that if wsRMon or wsSecOn is required, that wsAddrOn is also set\n", 
            "+     *\n", 
            "+     * @param synCfg   Synapse configuration\n", 
            "+     * @param axisCfg  Axis2 configuration\n", 
            "+     * @param wsAddrOn whether addressing is on or not\n", 
            "+     * @param wsRMOn   whether RM is on ot not\n", 
            "+     * @param wsSecOn  whether security is on or not\n", 
            "+     * @return An Axis service for the requested QoS\n", 
            "+     */\n", 
            "+    public static AxisService getAnonymousService(SynapseConfiguration synCfg,\n", 
            "+                                                  AxisConfiguration axisCfg, boolean wsAddrOn,\n", 
            "+                                                  boolean wsRMOn, boolean wsSecOn) {\n", 
            "+        return getAnonymousService(synCfg, axisCfg, wsAddrOn, wsRMOn, wsSecOn, true);\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Creates an AxisService for the requested QoS for sending out messages\n", 
            "+     * Callers must guarantee that if wsRMon or wsSecOn is required, that wsAddrOn is also set\n", 
            "      * @param synCfg Synapse configuration\n", 
            "      * @param axisCfg Axis2 configuration\n", 
            "      * @param wsAddrOn whether addressing is on or not\n", 
            "      * @param wsRMOn whether RM is on ot not\n", 
            "      * @param wsSecOn whether security is on or not\n", 
            "+     * @param setCallback whether to register a synapse callback receiver or not\n", 
            "      * @return An Axis service for the requested QoS\n", 
            "      */\n", 
            "     public static AxisService getAnonymousService(SynapseConfiguration synCfg,\n", 
            "                                                   AxisConfiguration axisCfg, boolean wsAddrOn,\n", 
            "-                                                  boolean wsRMOn, boolean wsSecOn) {\n", 
            "+                                                  boolean wsRMOn, boolean wsSecOn, boolean setCallback) {\n", 
            " \n", 
            "         // if non of addressing, security and rm is engaged then checkbit is 0\n", 
            "         int checkbit = 0;\n"
          ]
        }, 
        {
          "locn": "-114,7 +134,7", 
          "lines": [
            "                         return service;\n", 
            "                     }\n", 
            " \n", 
            "-                    service = createAnonymousService(synCfg, axisCfg, servicekey);\n", 
            "+                    service = createAnonymousService(synCfg, axisCfg, servicekey, setCallback);\n", 
            " \n", 
            "                     if (wsAddrOn) {\n", 
            "                         service.engageModule(axisCfg.getModule(\n"
          ]
        }, 
        {
          "locn": "-147,6 +167,7", 
          "lines": [
            " \n", 
            "     /**\n", 
            "      * Create a new Anonymous Axis service for OUT-IN as default MEP\n", 
            "+     *\n", 
            "      * @param synCfg the Synapse Configuration\n", 
            "      * @param axisCfg the Axis2 configuration\n", 
            "      * @param serviceKey key for the service\n"
          ]
        }, 
        {
          "locn": "-153,46 +174,96", 
          "lines": [
            "      * @return an anonymous service named with the given QoS key\n", 
            "      */\n", 
            "     private static AxisService createAnonymousService(SynapseConfiguration synCfg,\n", 
            "-        AxisConfiguration axisCfg, String serviceKey) {\n", 
            "+        AxisConfiguration axisCfg, String serviceKey, boolean setCallback) {\n", 
            " \n", 
            "         try {\n", 
            "-            DynamicAxisOperation dynamicOperation =\n", 
            "+            if (setCallback) {\n", 
            "+                return createAxisServiceWithCallback(synCfg, axisCfg, serviceKey);\n", 
            "+            } else {\n", 
            "+                return createAxisServiceWithoutCallback(synCfg, axisCfg, serviceKey);\n", 
            "+            }\n", 
            "+        } catch (AxisFault e) {\n", 
            "+            handleException(\"Error occurred while creating an anonymous service for QoS : \" +\n", 
            "+                    serviceKey, e);\n", 
            "+        }\n", 
            "+        return null;\n", 
            "+    }\n", 
            "+\n", 
            "+   /**\n", 
            "+    * Create anonymous Axis2 service with setting a Synapse Callback receiver as the message\n", 
            "+    * receiver for operations\n", 
            "+    */\n", 
            "+    private static AxisService createAxisServiceWithCallback(SynapseConfiguration synCfg,\n", 
            "+                                                             AxisConfiguration axisCfg,\n", 
            "+                                                             String serviceKey) throws AxisFault {\n", 
            "+        DynamicAxisOperation dynamicOperation =\n", 
            "                 new DynamicAxisOperation(new QName(OUT_IN_OPERATION));\n", 
            "-            dynamicOperation.setMessageReceiver(SynapseCallbackReceiver.getInstance());\n", 
            "-            AxisMessage inMsg = new AxisMessage();\n", 
            "-            inMsg.setName(\"in-message\");\n", 
            "-            inMsg.setParent(dynamicOperation);\n", 
            "-            AxisMessage outMsg = new AxisMessage();\n", 
            "-            outMsg.setName(\"out-message\");\n", 
            "-            outMsg.setParent(dynamicOperation);\n", 
            "-            dynamicOperation.addMessage(inMsg, WSDLConstants.MESSAGE_LABEL_OUT_VALUE);\n", 
            "-            dynamicOperation.addMessage(outMsg, WSDLConstants.MESSAGE_LABEL_IN_VALUE);\n", 
            "+        dynamicOperation.setMessageReceiver(SynapseCallbackReceiver.getInstance());\n", 
            "+        AxisMessage inMsg = new AxisMessage();\n", 
            "+        inMsg.setName(\"in-message\");\n", 
            "+        inMsg.setParent(dynamicOperation);\n", 
            "+        AxisMessage outMsg = new AxisMessage();\n", 
            "+        outMsg.setName(\"out-message\");\n", 
            "+        outMsg.setParent(dynamicOperation);\n", 
            "+        dynamicOperation.addMessage(inMsg, WSDLConstants.MESSAGE_LABEL_OUT_VALUE);\n", 
            "+        dynamicOperation.addMessage(outMsg, WSDLConstants.MESSAGE_LABEL_IN_VALUE);\n", 
            " \n", 
            "-            OutOnlyAxisOperation asyncOperation =\n", 
            "+        OutOnlyAxisOperation asyncOperation =\n", 
            "                 new OutOnlyAxisOperation(new QName(OUT_ONLY_OPERATION));\n", 
            "-            asyncOperation.setMessageReceiver(SynapseCallbackReceiver.getInstance());\n", 
            "-            AxisMessage outOnlyMsg = new AxisMessage();\n", 
            "-            outOnlyMsg.setName(\"out-message\");\n", 
            "-            outOnlyMsg.setParent(asyncOperation);\n", 
            "-            asyncOperation.addMessage(outMsg, WSDLConstants.MESSAGE_LABEL_OUT_VALUE);\n", 
            "+        asyncOperation.setMessageReceiver(SynapseCallbackReceiver.getInstance());\n", 
            "+        AxisMessage outOnlyMsg = new AxisMessage();\n", 
            "+        outOnlyMsg.setName(\"out-message\");\n", 
            "+        outOnlyMsg.setParent(asyncOperation);\n", 
            "+        asyncOperation.addMessage(outMsg, WSDLConstants.MESSAGE_LABEL_OUT_VALUE);\n", 
            " \n", 
            "-            AxisService axisAnonymousService  = new AxisService(serviceKey);\n", 
            "-            axisAnonymousService.addOperation(dynamicOperation);\n", 
            "-            axisAnonymousService.addOperation(asyncOperation);\n", 
            "-            AxisServiceGroup axisAnonSvcGroup = new AxisServiceGroup(axisCfg);\n", 
            "-            axisAnonSvcGroup.setServiceGroupName(serviceKey);\n", 
            "-            axisAnonSvcGroup.addParameter(SynapseConstants.HIDDEN_SERVICE_PARAM, \"true\");\n", 
            "-            axisAnonymousService.setClientSide(true);\n", 
            "-            axisAnonSvcGroup.addService(axisAnonymousService);\n", 
            "-            axisCfg.addServiceGroup(axisAnonSvcGroup);\n", 
            "-            axisCfg.getPhasesInfo().setOperationPhases(dynamicOperation);\n", 
            "-            return axisAnonymousService;\n", 
            "+        AxisService axisAnonymousService = new AxisService(serviceKey);\n", 
            "+        axisAnonymousService.addOperation(dynamicOperation);\n", 
            "+        axisAnonymousService.addOperation(asyncOperation);\n", 
            "+        AxisServiceGroup axisAnonSvcGroup = new AxisServiceGroup(axisCfg);\n", 
            "+        axisAnonSvcGroup.setServiceGroupName(serviceKey);\n", 
            "+        axisAnonSvcGroup.addParameter(SynapseConstants.HIDDEN_SERVICE_PARAM, \"true\");\n", 
            "+        axisAnonymousService.setClientSide(true);\n", 
            "+        axisAnonSvcGroup.addService(axisAnonymousService);\n", 
            "+        axisCfg.addServiceGroup(axisAnonSvcGroup);\n", 
            "+        axisCfg.getPhasesInfo().setOperationPhases(dynamicOperation);\n", 
            "+        return axisAnonymousService;\n", 
            "+    }\n", 
            " \n", 
            "-        } catch (AxisFault e) {\n", 
            "-            handleException(\n", 
            "-                \"Error occurred while creating an anonymous service for QoS : \" +\n", 
            "-                 serviceKey, e);\n", 
            "-        }\n", 
            "-        return null;\n", 
            "+    /**\n", 
            "+     * Create anonymous Axis2 service without registering a callback for operations\n", 
            "+     */\n", 
            "+    private static AxisService createAxisServiceWithoutCallback(SynapseConfiguration synCfg,\n", 
            "+                                                                AxisConfiguration axisCfg,\n", 
            "+                                                                String serviceKey) throws AxisFault {\n", 
            "+        OutInAxisOperation outInAxisOperation =\n", 
            "+                new OutInAxisOperation(new QName(OUT_IN_OPERATION));\n", 
            "+        AxisMessage inMsg = new AxisMessage();\n", 
            "+        inMsg.setName(\"in-message\");\n", 
            "+        inMsg.setParent(outInAxisOperation);\n", 
            "+        AxisMessage outMsg = new AxisMessage();\n", 
            "+        outMsg.setName(\"out-message\");\n", 
            "+        outMsg.setParent(outInAxisOperation);\n", 
            "+        outInAxisOperation.addMessage(inMsg, WSDLConstants.MESSAGE_LABEL_OUT_VALUE);\n", 
            "+        outInAxisOperation.addMessage(outMsg, WSDLConstants.MESSAGE_LABEL_IN_VALUE);\n", 
            "+\n", 
            "+        OutOnlyAxisOperation outOnlyAxisOperation =\n", 
            "+                new OutOnlyAxisOperation(new QName(OUT_ONLY_OPERATION));\n", 
            "+        AxisMessage outOnlyMsg = new AxisMessage();\n", 
            "+        outOnlyMsg.setName(\"out-message\");\n", 
            "+        outOnlyMsg.setParent(outOnlyAxisOperation);\n", 
            "+        outOnlyAxisOperation.addMessage(outMsg, WSDLConstants.MESSAGE_LABEL_OUT_VALUE);\n", 
            "+\n", 
            "+        AxisService axisAnonymousService = new AxisService(serviceKey);\n", 
            "+        axisAnonymousService.addOperation(outInAxisOperation);\n", 
            "+        axisAnonymousService.addOperation(outOnlyAxisOperation);\n", 
            "+        AxisServiceGroup axisAnonSvcGroup = new AxisServiceGroup(axisCfg);\n", 
            "+        axisAnonSvcGroup.setServiceGroupName(serviceKey);\n", 
            "+        axisAnonSvcGroup.addParameter(SynapseConstants.HIDDEN_SERVICE_PARAM, \"true\");\n", 
            "+        axisAnonymousService.setClientSide(true);\n", 
            "+        axisAnonSvcGroup.addService(axisAnonymousService);\n", 
            "+        axisCfg.addServiceGroup(axisAnonSvcGroup);\n", 
            "+        axisCfg.getPhasesInfo().setOperationPhases(outInAxisOperation);\n", 
            "+        return axisAnonymousService;\n", 
            "     }\n", 
            "+\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/core/axis2/AnonymousServiceFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/core/axis2/AnonymousServiceFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-408,8 +408,14", 
          "lines": [
            "     // callout operation failed\n", 
            "     public static final int CALLOUT_OPERATION_FAILED    = 401000;\n", 
            " \n", 
            "+    // - Axis2 Blocking Client Constants\n", 
            "+    /**The Synapse MC property that marks to Exception to be thrown on SOAPFault(Retry on SOAPFault) */\n", 
            "+    public static final String THROW_EXCEPTION_ON_SOAPFAULT = \"THROW_EXCEPTION_ON_SOAPFAULT\";\n", 
            " \n", 
            "+    public static final String BLOCKING_CLIENT_ERROR = \"blocking.client.error\";\n", 
            " \n", 
            "+    public static final String HTTP_SENDER_STATUSCODE = \"transport.http.statusCode\";\n", 
            "+\n", 
            "     // Fail-safe mode properties\n", 
            "     public static final String FAIL_SAFE_MODE_STATUS = \"failsafe.mode.enable\";\n", 
            "     public static final String FAIL_SAFE_MODE_ALL = \"all\";\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/SynapseConstants.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/SynapseConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-48,7 +48,10", 
          "lines": [
            " \n", 
            "         if (mediator.getServiceURL() != null) {\n", 
            "             callout.addAttribute(fac.createOMAttribute(\"serviceURL\", nullNS, mediator.getServiceURL()));\n", 
            "+        } else if (mediator.getEndpointKey() != null) {\n", 
            "+            callout.addAttribute(fac.createOMAttribute(\"endpointKey\", nullNS, mediator.getEndpointKey()));\n", 
            "         }\n", 
            "+\n", 
            "         if (mediator.getAction() != null) {\n", 
            "             callout.addAttribute(fac.createOMAttribute(\"action\", nullNS, mediator.getAction()));\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-70,20 +73,24", 
          "lines": [
            "             callout.addAttribute(fac.createOMAttribute(\"passHeaders\", nullNS, \"true\"));\n", 
            "         }\n", 
            " \n", 
            "-        OMElement source = fac.createOMElement(\"source\", synNS, callout);\n", 
            "-        if (mediator.getRequestXPath() != null) {\n", 
            "-            SynapseXPathSerializer.serializeXPath(mediator.getRequestXPath(), source, \"xpath\");\n", 
            "-        } else if (mediator.getRequestKey() != null) {\n", 
            "-            source.addAttribute(fac.createOMAttribute(\n", 
            "-                \"key\", nullNS, mediator.getRequestKey()));\n", 
            "+        if (mediator.getRequestXPath() != null || mediator.getRequestKey() != null) {\n", 
            "+            OMElement source = fac.createOMElement(\"source\", synNS, callout);\n", 
            "+            if (mediator.getRequestXPath() != null) {\n", 
            "+                SynapseXPathSerializer.serializeXPath(mediator.getRequestXPath(), source, \"xpath\");\n", 
            "+            } else if (mediator.getRequestKey() != null) {\n", 
            "+                source.addAttribute(fac.createOMAttribute(\n", 
            "+                        \"key\", nullNS, mediator.getRequestKey()));\n", 
            "+            }\n", 
            "         }\n", 
            " \n", 
            "-        OMElement target = fac.createOMElement(\"target\", synNS, callout);\n", 
            "-        if (mediator.getTargetXPath() != null) {\n", 
            "-            SynapseXPathSerializer.serializeXPath(mediator.getTargetXPath(), target, \"xpath\");\n", 
            "-        } else if (mediator.getTargetKey() != null) {\n", 
            "-            target.addAttribute(fac.createOMAttribute(\n", 
            "-                \"key\", nullNS, mediator.getTargetKey()));\n", 
            "+        if (mediator.getTargetXPath() != null || mediator.getTargetKey() != null) {\n", 
            "+            OMElement target = fac.createOMElement(\"target\", synNS, callout);\n", 
            "+            if (mediator.getTargetXPath() != null) {\n", 
            "+                SynapseXPathSerializer.serializeXPath(mediator.getTargetXPath(), target, \"xpath\");\n", 
            "+            } else if (mediator.getTargetKey() != null) {\n", 
            "+                target.addAttribute(fac.createOMAttribute(\n", 
            "+                        \"key\", nullNS, mediator.getTargetKey()));\n", 
            "+            }\n", 
            "         }\n", 
            " \n", 
            "         if (mediator.isSecurityOn()) {\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorSerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorSerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-65,6 +65,7", 
          "lines": [
            "                 = new QName(XMLConfigConstants.NULL_NAMESPACE, \"outboundPolicy\");\n", 
            "     private static final QName ATT_INBOUND_SEC_POLICY\n", 
            "                 = new QName(XMLConfigConstants.NULL_NAMESPACE, \"inboundPolicy\");\n", 
            "+    private static final QName ATT_ENDPOINT = new QName(\"endpointKey\");\n", 
            " \n", 
            "     public Mediator createSpecificMediator(OMElement elem, Properties properties) {\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-71,6 +72,7", 
          "lines": [
            "         CalloutMediator callout = new CalloutMediator();\n", 
            " \n", 
            "         OMAttribute attServiceURL = elem.getAttribute(ATT_URL);\n", 
            "+        OMAttribute attEndpoint = elem.getAttribute(ATT_ENDPOINT);\n", 
            "         OMAttribute attAction     = elem.getAttribute(ATT_ACTION);\n", 
            "         OMAttribute attPassHeaders = elem.getAttribute(ATT_PASS_HEADERS);\n", 
            "         OMElement   configElt     = elem.getFirstChildWithName(Q_CONFIG);\n"
          ]
        }, 
        {
          "locn": "-80,6 +82,8", 
          "lines": [
            " \n", 
            "         if (attServiceURL != null) {\n", 
            "             callout.setServiceURL(attServiceURL.getAttributeValue());\n", 
            "+        } else if (attEndpoint != null) {\n", 
            "+            callout.setEndpointKey(attEndpoint.getAttributeValue());\n", 
            "         }\n", 
            " \n", 
            "         if (attAction != null) {\n"
          ]
        }, 
        {
          "locn": "-130,8 +134,6", 
          "lines": [
            "                 handleException(\"A 'xpath' or 'key' attribute \" +\n", 
            "                     \"is required for the Callout 'source'\");\n", 
            "             }\n", 
            "-        } else {\n", 
            "-            handleException(\"The message 'source' must be specified for a Callout mediator\");\n", 
            "         }\n", 
            " \n", 
            "         if (targetElt != null) {\n"
          ]
        }, 
        {
          "locn": "-149,8 +151,6", 
          "lines": [
            "                 handleException(\"A 'xpath' or 'key' attribute \" +\n", 
            "                     \"is required for the Callout 'target'\");\n", 
            "             }\n", 
            "-        } else {\n", 
            "-            handleException(\"The message 'target' must be specified for a Callout mediator\");\n", 
            "         }\n", 
            " \n", 
            "         if (wsSec != null) {\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-200,6 +200,7", 
          "lines": [
            "                         <li><a href=\"samples/sample430.html\">Sample 430: Callout mediator for synchronous web service invocations</a></li>\n", 
            "                         <li><a href=\"samples/sample431.html\">Sample 431: Callout Mediator with WS-Security for Outgoing Messages</a></li>\n", 
            "                         <li><a href=\"samples/sample432.html\">Sample 432: Callout Mediator - Invoke a secured service which has different policies for inbound and outbound flows</a></li>\n", 
            "+                        <li><a href=\"samples/sample433.html\">Sample 433: Callout Mediator - Invoke a service using a defined Endpoint</a></li>\n", 
            "                     </ul>\n", 
            "                 </p>\n", 
            "                 <h4>URL Rewrite Mediator</h4>\n"
          ]
        }
      ], 
      "to": "java/modules/documentation/src/site/xdoc/userguide/samples.xml", 
      "from": "java/modules/documentation/src/site/xdoc/userguide/samples.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,85", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<document>\n", 
            "+    <properties>\n", 
            "+        <title>Apache Synapse - Sample 433</title>\n", 
            "+    </properties>\n", 
            "+    <body>\n", 
            "+        <section name=\"Sample 433: Callout Mediator - Invoke a service using a defined Endpoint\">\n", 
            "+            <div class=\"xmlConf\">&lt;definitions xmlns=\"http://ws.apache.org/ns/synapse\"&gt;\n", 
            "+\n", 
            "+    &lt;sequence name=\"main\"&gt;\n", 
            "+        &lt;callout endpointKey=\"StockQuoteServiceEndpoint\"&gt;\n", 
            "+            &lt;source xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\"\n", 
            "+                    xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+                    xpath=\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\"/&gt;\n", 
            "+            &lt;target xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\"\n", 
            "+                    xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+                    xpath=\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\"/&gt;\n", 
            "+        &lt;/callout&gt;\n", 
            "+        &lt;property name=\"RESPONSE\" value=\"true\"/&gt;\n", 
            "+        &lt;header name=\"To\" action=\"remove\"/&gt;\n", 
            "+        &lt;send/&gt;\n", 
            "+        &lt;drop/&gt;\n", 
            "+    &lt;/sequence&gt;\n", 
            "+\n", 
            "+    &lt;endpoint name=\"StockQuoteServiceEndpoint\"&gt;\n", 
            "+       &lt;address uri=\"http://localhost:9000/services/SimpleStockQuoteService\"/&gt;\n", 
            "+    &lt;/endpoint&gt;\n", 
            "+\n", 
            "+&lt;/definitions&gt;</div>\n", 
            "+            <subsection name=\"Objective\">\n", 
            "+                <p>\n", 
            "+                    Demonstrate how to invoke a service from Callout Mediator using a defined endpoint.\n", 
            "+                </p>\n", 
            "+            </subsection>\n", 
            "+            <subsection name=\"Pre-requisites\">\n", 
            "+                <p>\n", 
            "+                    <ul>\n", 
            "+                        <li>\n", 
            "+                            Deploy the SimpleStockQuoteService in the sample Axis2 server and start Axis2\n", 
            "+                        </li>\n", 
            "+                        <li>\n", 
            "+                            Start Synapse using the configuration numbered 433 (repository/conf/sample/synapse_sample_433.xml)\n", 
            "+                            <div class=\"command\">\n", 
            "+                                Unix/Linux: sh synapse.sh -sample 433<br/>\n", 
            "+                                Windows: synapse.bat -sample 433\n", 
            "+                            </div>\n", 
            "+                        </li>\n", 
            "+                    </ul>\n", 
            "+                </p>\n", 
            "+            </subsection>\n", 
            "+            <subsection name=\"Executing the Client\">\n", 
            "+                <p>\n", 
            "+                    In this sample, the Callout mediator does the direct service invocation to the\n", 
            "+                    StockQuoteService using the client request, gets the response and sets it as the\n", 
            "+                    first child of the SOAP message body. Callout Mediator uses the defined endpoint\n", 
            "+                    named 'StockQuoteServiceEndpoint' to send the message to the StockQuoteService.\n", 
            "+                </p>\n", 
            "+                <p>\n", 
            "+                    Invoke the client as follows.\n", 
            "+                </p>\n", 
            "+                <div class=\"command\">ant stockquote -Daddurl=http://localhost:8280/</div>\n", 
            "+            </subsection>\n", 
            "+        </section>\n", 
            "+        <p><a href=\"../samples.html\">Back to Catalog</a></p>        \n", 
            "+    </body>\n", 
            "+</document>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/documentation/src/site/xdoc/userguide/samples/sample433.xml", 
      "from": "java/modules/documentation/src/site/xdoc/userguide/samples/sample433.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,375", 
          "lines": [
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<axisconfig name=\"AxisJava2.0\">\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Parameters -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <parameter name=\"hotdeployment\">true</parameter>\n", 
            "+    <parameter name=\"hotupdate\">false</parameter>\n", 
            "+    <parameter name=\"enableMTOM\">false</parameter>\n", 
            "+    <parameter name=\"enableSwA\">false</parameter>\n", 
            "+\n", 
            "+    <!--Uncomment if you want to enable file caching for attachments -->\n", 
            "+    <!--parameter name=\"cacheAttachments\">true</parameter>\n", 
            "+    <parameter name=\"attachmentDIR\"></parameter>\n", 
            "+    <parameter name=\"sizeThreshold\">4000</parameter-->\n", 
            "+\n", 
            "+    <!--This will give out the timout of the configuration contexts, in milliseconds-->\n", 
            "+    <parameter name=\"ConfigContextTimeoutInterval\">30000</parameter>\n", 
            "+\n", 
            "+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->\n", 
            "+    <!--that behavior.-->\n", 
            "+    <parameter name=\"sendStacktraceDetailsWithFaults\">false</parameter>\n", 
            "+\n", 
            "+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->\n", 
            "+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->\n", 
            "+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->\n", 
            "+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->\n", 
            "+    <parameter name=\"DrillDownToRootCauseForFaultReason\">false</parameter>\n", 
            "+\n", 
            "+    <parameter name=\"userName\">admin</parameter>\n", 
            "+    <parameter name=\"password\">axis2</parameter>\n", 
            "+\n", 
            "+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->\n", 
            "+    <!--ServicesDirectory only works on the following cases-->\n", 
            "+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->\n", 
            "+    <!---When creating URL Based configurator with URL \"file://\"  -->\n", 
            "+    <!--- War based configurator with expanded case , -->\n", 
            "+\n", 
            "+    <!--All the other scenarios it will be ignored.-->\n", 
            "+    <!--<parameter name=\"ServicesDirectory\">service</parameter>-->\n", 
            "+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->\n", 
            "+    <!--<parameter name=\"ModulesDirectory\">modules</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+\n", 
            "+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->\n", 
            "+    <!--root which can configured using the following contextRoot parameter-->\n", 
            "+    <!--<parameter name=\"contextRoot\">axis2</parameter>-->\n", 
            "+\n", 
            "+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->\n", 
            "+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->\n", 
            "+    <!--context path to proper Axis2 servlets-->\n", 
            "+    <parameter name=\"servicePath\" locked=\"false\">services</parameter>\n", 
            "+    <parameter name=\"restPath\" locked=\"false\">rest</parameter>\n", 
            "+\n", 
            "+    <!-- Following parameter will completely disable REST handling in Axis2-->\n", 
            "+    <parameter name=\"disableREST\" locked=\"true\">false</parameter>\n", 
            "+\n", 
            "+    <!--POJO deployer , this will alow users to drop .class file and make that into a service-->\n", 
            "+    <deployer extension=\".class\" directory=\"pojo\" class=\"org.apache.axis2.deployment.POJODeployer\"/>\n", 
            "+\n", 
            "+    <!-- Following parameter will set the host name for the epr-->\n", 
            "+    <!--<parameter name=\"hostname\" locked=\"true\">myhost.com</parameter>-->\n", 
            "+\n", 
            "+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->\n", 
            "+    <!-- use this parameter to override autodetected url -->\n", 
            "+    <!--<parameter name=\"httpFrontendHostUrl\">https://someotherhost/context</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+    <!--    The way of adding listener to the system-->\n", 
            "+    <!--    <listener class=\"org.apache.axis2.ObserverIMPL\">-->\n", 
            "+    <!--        <parameter name=\"RSS_URL\">http://127.0.0.1/rss</parameter>-->\n", 
            "+    <!--    </listener>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Receivers -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->\n", 
            "+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->\n", 
            "+    <!--any operation -->\n", 
            "+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->\n", 
            "+    <messageReceivers>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/ns/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/ns/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+    </messageReceivers>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Formatter -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to message formatter mapping can be used to implement support for different message -->\n", 
            "+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageFormatters>\n", 
            "+\n", 
            "+        <messageFormatter contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                          class=\"org.apache.axis2.transport.http.XFormURLEncodedFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"multipart/form-data\"\n", 
            "+                          class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"application/xml\"\n", 
            "+                          class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/>\n", 
            "+        <!--<messageFormatter contentType=\"x-application/hessian\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageFormatter\"/>-->\n", 
            "+        <!--<messageFormatter contentType=\"\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageFormatter\"/>-->\n", 
            "+        <!--<messageFormatter contentType=\"application/json\"\n", 
            "+                         class=\"org.apache.axis2.json.JSONMessageFormatter\"/>-->\n", 
            "+\n", 
            "+    </messageFormatters>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Builders -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to builder mapping can be used to implement support for different message -->\n", 
            "+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageBuilders>\n", 
            "+        <messageBuilder contentType=\"application/xml\"\n", 
            "+                        class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                        class=\"org.apache.axis2.builder.XFormURLEncodedBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"multipart/form-data\"\n", 
            "+                        class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/>\n", 
            "+        <!--<messageBuilder contentType=\"x-application/hessian\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageBuilder\"/>-->\n", 
            "+        <!--<messageBuilder contentType=\"\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageBuilder\"/>-->\n", 
            "+        <!--<messageBuilder contentType=\"application/json\"\n", 
            "+                         class=\"org.apache.axis2.json.JSONOMBuilder\"/>-->\n", 
            "+    </messageBuilders>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Ins -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\t<transportReceiver name=\"http\"\n", 
            "+                       class=\"org.apache.axis2.transport.http.SimpleHTTPServer\">\n", 
            "+        <parameter name=\"port\">8200</parameter>\n", 
            "+        <!-- Here is the complete list of supported parameters (see example settings further below):\n", 
            "+            port: the port to listen on (default 6060)\n", 
            "+            hostname:  if non-null, url prefix used in reply-to endpoint references                                 (default null)\n", 
            "+            originServer:  value of http Server header in outgoing messages                                         (default \"Simple-Server/1.1\")\n", 
            "+            requestTimeout:  value in millis of time that requests can wait for data                                (default 20000)\n", 
            "+            requestTcpNoDelay:  true to maximize performance and minimize latency                                   (default true)\n", 
            "+                                false to minimize bandwidth consumption by combining segments\n", 
            "+            requestCoreThreadPoolSize:  number of threads available for request processing (unless queue fills up)  (default 25)\n", 
            "+            requestMaxThreadPoolSize:  number of threads available for request processing if queue fills up         (default 150)\n", 
            "+                                       note that default queue never fills up:  see HttpFactory\n", 
            "+            threadKeepAliveTime:  time to keep threads in excess of core size alive while inactive                  (default 180)\n", 
            "+                                  note that no such threads can exist with default unbounded request queue\n", 
            "+            threadKeepAliveTimeUnit:  TimeUnit of value in threadKeepAliveTime (default SECONDS)                    (default SECONDS)\n", 
            "+        -->\n", 
            "+        <!-- <parameter name=\"hostname\">http://www.myApp.com/ws</parameter> -->\n", 
            "+        <!-- <parameter name=\"originServer\">My-Server/1.1</parameter>           -->\n", 
            "+        <!-- <parameter name=\"requestTimeout\">10000</parameter>                   -->\n", 
            "+        <!-- <parameter name=\"requestTcpNoDelay\">false</parameter>                   -->\n", 
            "+        <!-- <parameter name=\"requestCoreThreadPoolSize\">50</parameter>                      -->\n", 
            "+        <!-- <parameter name=\"RequestMaxThreadPoolSize\">100</parameter>                     -->\n", 
            "+        <!-- <parameter name=\"threadKeepAliveTime\">240000</parameter>                  -->\n", 
            "+        <!-- <parameter name=\"threadKeepAliveTimeUnit\">MILLISECONDS</parameter>            -->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)\n", 
            "+    <transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\">\n", 
            "+        <parameter name=\"myTopicConnectionFactory\">\n", 
            "+        \t<parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+        \t<parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+        \t<parameter name=\"transport.jms.ConnectionFactoryJNDIName\">TopicConnectionFactory</parameter>\n", 
            "+\t\t<parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\">topic</parameter>\n", 
            "+        </parameter>\n", 
            "+\n", 
            "+        <parameter name=\"myQueueConnectionFactory\">\n", 
            "+        \t<parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+        \t<parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+        \t<parameter name=\"transport.jms.ConnectionFactoryJNDIName\">QueueConnectionFactory</parameter>\n", 
            "+\t\t<parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\">queue</parameter>\n", 
            "+        </parameter>\n", 
            "+\n", 
            "+        <parameter name=\"default\">\n", 
            "+        \t<parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+        \t<parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+        \t<parameter name=\"transport.jms.ConnectionFactoryJNDIName\">QueueConnectionFactory</parameter>\n", 
            "+\t\t<parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\">queue</parameter>\n", 
            "+        </parameter>\n", 
            "+    </transportReceiver>-->\n", 
            "+\n", 
            "+    <transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\">\n", 
            "+        <!-- configure any optional POP3/IMAP properties\n", 
            "+        check com.sun.mail.pop3 and com.sun.mail.imap package documentation for more details-->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+\t<!--Uncomment if you want to have TCP transport support-->\n", 
            "+    <!--transportReceiver name=\"tcp\"\n", 
            "+                       class=\"org.apache.axis2.transport.tcp.TCPServer\">\n", 
            "+        <parameter name=\"port\">6060</parameter-->>\n", 
            "+        <!--If you want to give your own host address for EPR generation-->\n", 
            "+        <!--uncomment the following paramter , and set it as you required.-->\n", 
            "+        <!--<parameter name=\"hostname\">tcp://myApp.com/ws</parameter>-->\n", 
            "+    <!-- /transportReceiver -->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Outs -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <!-- transportSender name=\"tcp\"\n", 
            "+                     class=\"org.apache.axis2.transport.tcp.TCPTransportSender\"/>\n", 
            "+    <transportSender name=\"udp\"\n", 
            "+                     class=\"org.apache.axis2.transport.udp.UDPSender\"/>\n", 
            "+    <transportSender name=\"local\"\n", 
            "+                     class=\"org.apache.axis2.transport.local.LocalTransportSender\"/ -->\n", 
            "+\t<transportSender name=\"http\"\n", 
            "+                     class=\"org.apache.axis2.transport.http.CommonsHTTPTransportSender\">\n", 
            "+        <parameter name=\"PROTOCOL\">HTTP/1.1</parameter>\n", 
            "+        <parameter name=\"Transfer-Encoding\">chunked</parameter>\n", 
            "+        <parameter name=\"cacheHttpClient\">true</parameter>\n", 
            "+        <parameter name=\"defaultMaxConnectionsPerHost\">200</parameter>\n", 
            "+        <!-- If following is set to 'true', optional action part of the Content-Type will not be added to the SOAP 1.2 messages -->\n", 
            "+        <!--  <parameter name=\"OmitSOAP12Action\">true</parameter>  -->\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <transportSender name=\"https\"\n", 
            "+                     class=\"org.apache.axis2.transport.http.CommonsHTTPTransportSender\">\n", 
            "+        <parameter name=\"PROTOCOL\">HTTP/1.1</parameter>\n", 
            "+        <parameter name=\"Transfer-Encoding\">chunked</parameter>\n", 
            "+        <parameter name=\"cacheHttpClient\">true</parameter>\n", 
            "+        <parameter name=\"defaultMaxConnectionsPerHost\">200</parameter>\n", 
            "+    </transportSender>\n", 
            "+    <transportSender name=\"jms\"\n", 
            "+                     class=\"org.apache.axis2.transport.jms.JMSSender\"/>\n", 
            "+\n", 
            "+    <!-- configure the SMTP server information\n", 
            "+    check com.sun.mail.smtp package documentation for descriptions of properties-->\n", 
            "+    <transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\">\n", 
            "+        <parameter name=\"mail.smtp.host\">smtp.gmail.com</parameter>\n", 
            "+        <parameter name=\"mail.smtp.port\">587</parameter>\n", 
            "+        <parameter name=\"mail.smtp.starttls.enable\">true</parameter>\n", 
            "+        <parameter name=\"mail.smtp.auth\">true</parameter>\n", 
            "+        <parameter name=\"mail.smtp.user\">synapse.demo.0</parameter>\n", 
            "+        <parameter name=\"mail.smtp.password\">mailpassword</parameter>\n", 
            "+        <parameter name=\"mail.smtp.from\">synapse.demo.0@gmail.com</parameter>\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Global Modules  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Comment this to disable Addressing -->\n", 
            "+    <module ref=\"addressing\"/>\n", 
            "+\n", 
            "+    <!--Configuring module , providing parameters for modules whether they refer or not-->\n", 
            "+    <!--<moduleConfig name=\"addressing\">-->\n", 
            "+    <!--<parameter name=\"addressingPara\">N/A</parameter>-->\n", 
            "+    <!--</moduleConfig>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Clustering  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Configure and uncomment following for preparing Axis2 to a clustered environment -->\n", 
            "+    <!--\n", 
            "+    <clustering class=\"org.apache.axis2.cluster.tribes.TribesClusteringAgent\">\n", 
            "+        <parameter name=\"param1\">value1</parameter>\n", 
            "+        <parameter name=\"domain\">apache.axis2.domain</parameter>\n", 
            "+    \t<configurationManager class=\"org.apache.axis2.cluster.configuration.TribesConfigurationManager\">\n", 
            "+    \t    <listener class=\"org.apache.axis2.cluster.configuration.DefaultConfigurationManagerListener\"/>\n", 
            "+    \t</configurationManager>\n", 
            "+    \t<contextManager class=\"org.apache.axis2.cluster.context.TribesContextManager\">\n", 
            "+    \t    <listener class=\"org.apache.axis2.cluster.context.DefaultContextManagerListener\"/>\n", 
            "+    \t</contextManager>\n", 
            "+    </clustering>\n", 
            "+     -->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Phases  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <phaseOrder type=\"InFlow\">\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <phase name=\"Transport\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--  System predefined phases       -->\n", 
            "+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->\n", 
            "+        <phase name=\"OperationInPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutPhase\"/>\n", 
            "+        <!--system predefined phase-->\n", 
            "+        <!--these phase will run irrespective of the service-->\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"InFaultFlow\">\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"OperationInFaultPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFaultFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutFaultPhase\"/>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+</axisconfig>\n"
          ]
        }
      ], 
      "to": "java/repository/conf/axis2_blocking_client.xml", 
      "from": "java/repository/conf/axis2_blocking_client.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,43", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Callout  mediator Endpoint Sample-->\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+\n", 
            "+    <sequence name=\"main\">\n", 
            "+        <callout endpointKey=\"StockQuoteServiceEndpoint\">\n", 
            "+            <source xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\"\n", 
            "+                    xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+                    xpath=\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\"/>\n", 
            "+            <target xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\"\n", 
            "+                    xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+                    xpath=\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\"/>\n", 
            "+        </callout>\n", 
            "+        <property name=\"RESPONSE\" value=\"true\"/>\n", 
            "+        <header name=\"To\" action=\"remove\"/>\n", 
            "+        <send/>\n", 
            "+        <drop/>\n", 
            "+    </sequence>\n", 
            "+\n", 
            "+    <endpoint name=\"StockQuoteServiceEndpoint\">\n", 
            "+       <address uri=\"http://localhost:9000/services/SimpleStockQuoteService\"/>\n", 
            "+    </endpoint>\n", 
            "+\n", 
            "+</definitions>\n"
          ]
        }
      ], 
      "to": "java/repository/conf/sample/synapse_sample_433.xml", 
      "from": "java/repository/conf/sample/synapse_sample_433.xml"
    }
  ], 
  "id": "1515263"
}