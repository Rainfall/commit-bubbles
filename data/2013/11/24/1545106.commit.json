{
  "when": "2013-11-24T18:14:04-05:00", 
  "message": "* Not setting the http.socket.rcv-buffer-size and http.socket.snd-buffer-size properties unless the user has specified them explicitly. This will cause Synapse to use platform defaults when appropriate. (see the thread: HTTP Core Performance and Reactor Buffer Size)\n* Updated the relevant documentation and test cases.\n* Changed the EchoHttpServerController to reuse server sockets when appopriate.\n\n", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-33,6 +33,7", 
          "lines": [
            " \n", 
            " import java.io.IOException;\n", 
            " import java.io.InterruptedIOException;\n", 
            "+import java.net.InetSocketAddress;\n", 
            " import java.net.ServerSocket;\n", 
            " import java.net.Socket;\n", 
            " import java.util.concurrent.atomic.AtomicInteger;\n"
          ]
        }, 
        {
          "locn": "-98,7 +99,9", 
          "lines": [
            " \n", 
            "         public RequestListenerThread(final int port) throws IOException {\n", 
            "             this.connFactory = DefaultBHttpServerConnectionFactory.INSTANCE;\n", 
            "-            this.serversocket = new ServerSocket(port);\n", 
            "+            this.serversocket = new ServerSocket();\n", 
            "+            this.serversocket.setReuseAddress(true);\n", 
            "+            this.serversocket.bind(new InetSocketAddress(port));\n", 
            " \n", 
            "             // Set up the HTTP protocol processor\n", 
            "             HttpProcessor httpProcessor = HttpProcessorBuilder.create()\n"
          ]
        }, 
        {
          "locn": "-146,6 +149,12", 
          "lines": [
            "             try {\n", 
            "                 this.interrupt();\n", 
            "                 this.serversocket.close();\n", 
            "+                while (this.isAlive() || !this.serversocket.isClosed()) {\n", 
            "+                    try {\n", 
            "+                        Thread.sleep(100);\n", 
            "+                    } catch (InterruptedException ignored) {\n", 
            "+                    }\n", 
            "+                }\n", 
            "             } catch (IOException e) {\n", 
            "                 log.warn(\"Error while shutting down echo server\", e);\n", 
            "             }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/EchoHttpServerController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/EchoHttpServerController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-838,10 +838,11", 
          "lines": [
            "                             suggestion to the OS kernel from Synapse about the size of buffers to\n", 
            "                             use for the data to be received over the socket\n", 
            "                             (See <a href=\"http://docs.oracle.com/javase/1.5.0/docs/api/java/net/SocketOptions.html#SO_RCVBUF\">SO_RCVBUF</a>).\n", 
            "-                            <div class=\"xmlConf\">http.socket.rcv-buffer-size=4096</div>\n", 
            "+                            If no value is specified, Synapse will use the platform (OS) default.\n", 
            "+                            <div class=\"xmlConf\">http.socket.rcv-buffer-size=8192</div>\n", 
            "                         </td>\n", 
            "                         <td>No</td>\n", 
            "-                        <td>8192</td>\n", 
            "+                        <td>Platform default</td>\n", 
            "                     </tr>\n", 
            "                     <tr>\n", 
            "                         <td>http.socket.snd-buffer-size</td>\n"
          ]
        }, 
        {
          "locn": "-851,10 +852,11", 
          "lines": [
            "                             suggestion to the OS kernel from Synapse about the size of buffers to\n", 
            "                             use for the data to be sent over the socket\n", 
            "                             (See <a href=\"http://docs.oracle.com/javase/1.5.0/docs/api/java/net/SocketOptions.html#SO_SNDBUF\">SO_SNDBUF</a>).\n", 
            "-                            <div class=\"xmlConf\">http.socket.snd-buffer-size=4096</div>\n", 
            "+                            If no value is specified, Synapse will use the platform (OS) default.\n", 
            "+                            <div class=\"xmlConf\">http.socket.snd-buffer-size=8192</div>\n", 
            "                         </td>\n", 
            "                         <td>No</td>\n", 
            "-                        <td>8192</td>\n", 
            "+                        <td>Platform default</td>\n", 
            "                     </tr>\n", 
            "                     <tr>\n", 
            "                         <td>http.socket.linger</td>\n"
          ]
        }
      ], 
      "to": "java/modules/documentation/src/site/xdoc/userguide/transports/pass_through.xml", 
      "from": "java/modules/documentation/src/site/xdoc/userguide/transports/pass_through.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-7,3 +7,7", 
          "lines": [
            " http.socket.buffer-size=8192\n", 
            " http.tcp.nodelay=true\n", 
            " http.nio.interest-ops-queueing=false\n", 
            "+\n", 
            "+http.socket.rcv-buffer-size=8192\n", 
            "+http.socket.snd-buffer-size=8192\n", 
            "+\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/test/resources/test-http.properties", 
      "from": "java/modules/transports/core/nhttp/src/test/resources/test-http.properties"
    }, 
    {
      "chunks": [
        {
          "locn": "-36,8 +36,6", 
          "lines": [
            "         IOReactorConfig reactorConfig = config.getListeningReactorConfig();\n", 
            "         assertEquals(2, reactorConfig.getIoThreadCount());\n", 
            "         assertEquals(0, reactorConfig.getConnectTimeout());\n", 
            "-        assertEquals(1024 * 8, reactorConfig.getRcvBufSize());\n", 
            "-        assertEquals(1024 * 8, reactorConfig.getSndBufSize());\n", 
            "         assertEquals(60000, reactorConfig.getSoTimeout());\n", 
            "         assertEquals(true, reactorConfig.isTcpNoDelay());\n", 
            "         assertEquals(false, reactorConfig.isInterestOpQueued());\n"
          ]
        }, 
        {
          "locn": "-45,8 +43,6", 
          "lines": [
            "         reactorConfig = config.getConnectingReactorConfig();\n", 
            "         assertEquals(2, reactorConfig.getIoThreadCount());\n", 
            "         assertEquals(0, reactorConfig.getConnectTimeout());\n", 
            "-        assertEquals(1024 * 8, reactorConfig.getRcvBufSize());\n", 
            "-        assertEquals(1024 * 8, reactorConfig.getSndBufSize());\n", 
            "         assertEquals(60000, reactorConfig.getSoTimeout());\n", 
            "         assertEquals(true, reactorConfig.isTcpNoDelay());\n", 
            "         assertEquals(false, reactorConfig.isInterestOpQueued());\n"
          ]
        }, 
        {
          "locn": "-67,8 +63,6", 
          "lines": [
            "         assertEquals(true, reactorConfig.isSoReuseAddress());\n", 
            "         assertEquals(2, reactorConfig.getIoThreadCount());\n", 
            "         assertEquals(0, reactorConfig.getConnectTimeout());\n", 
            "-        assertEquals(1024 * 8, reactorConfig.getRcvBufSize());\n", 
            "-        assertEquals(1024 * 8, reactorConfig.getSndBufSize());\n", 
            "         assertEquals(60000, reactorConfig.getSoTimeout());\n", 
            "         assertEquals(true, reactorConfig.isTcpNoDelay());\n", 
            "         assertEquals(false, reactorConfig.isInterestOpQueued());\n"
          ]
        }, 
        {
          "locn": "-79,7 +73,7", 
          "lines": [
            "         assertEquals(CodingErrorAction.REPORT, connConfig.getUnmappableInputAction());\n", 
            "     }\n", 
            " \n", 
            "-    public void testTimeoutConfig() {\n", 
            "+    public void testTimeoutAndBufferSizeConfig() {\n", 
            "         HttpTransportConfiguration config = new SimpleHttpTransportConfiguration(\"test-http\");\n", 
            " \n", 
            "         IOReactorConfig reactorConfig = config.getListeningReactorConfig();\n"
          ]
        }, 
        {
          "locn": "-86,6 +80,7", 
          "lines": [
            "         assertEquals(30000, reactorConfig.getSoTimeout());\n", 
            "         assertEquals(2, reactorConfig.getIoThreadCount());\n", 
            "         assertEquals(0, reactorConfig.getConnectTimeout());\n", 
            "+        // Should be able to override platform default buffer sizes if needed\n", 
            "         assertEquals(1024 * 8, reactorConfig.getRcvBufSize());\n", 
            "         assertEquals(1024 * 8, reactorConfig.getSndBufSize());\n", 
            "         assertEquals(true, reactorConfig.isTcpNoDelay());\n"
          ]
        }, 
        {
          "locn": "-95,6 +90,7", 
          "lines": [
            "         assertEquals(20000, reactorConfig.getSoTimeout());\n", 
            "         assertEquals(2, reactorConfig.getIoThreadCount());\n", 
            "         assertEquals(0, reactorConfig.getConnectTimeout());\n", 
            "+        // Should be able to override platform default buffer sizes if needed\n", 
            "         assertEquals(1024 * 8, reactorConfig.getRcvBufSize());\n", 
            "         assertEquals(1024 * 8, reactorConfig.getSndBufSize());\n", 
            "         assertEquals(true, reactorConfig.isTcpNoDelay());\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/test/java/org/apache/synapse/transport/utils/config/HttpTransportConfigurationTest.java", 
      "from": "java/modules/transports/core/nhttp/src/test/java/org/apache/synapse/transport/utils/config/HttpTransportConfigurationTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-69,10 +69,16", 
          "lines": [
            "                         getIntProperty(HttpConfigConstants.SO_TIMEOUT, 60000)))\n", 
            "                 .setConnectTimeout(getIntProperty(HttpConfigConstants.CONNECTION_TIMEOUT, 0))\n", 
            "                 .setInterestOpQueued(getBooleanProperty(HttpConfigConstants.INTEREST_OPS_QUEUEING, false))\n", 
            "-                .setTcpNoDelay(getBooleanProperty(HttpConfigConstants.TCP_NODELAY, true))\n", 
            "-                .setRcvBufSize(getIntProperty(HttpConfigConstants.SOCKET_RCV_BUFFER_SIZE, 8 * 1024))\n", 
            "-                .setSndBufSize(getIntProperty(HttpConfigConstants.SOCKET_SND_BUFFER_SIZE, 8 * 1024));\n", 
            "+                .setTcpNoDelay(getBooleanProperty(HttpConfigConstants.TCP_NODELAY, true));\n", 
            " \n", 
            "+        if (getIntProperty(HttpConfigConstants.SOCKET_RCV_BUFFER_SIZE) != null) {\n", 
            "+            builder.setRcvBufSize(getIntProperty(HttpConfigConstants.SOCKET_RCV_BUFFER_SIZE));\n", 
            "+        }\n", 
            "+\n", 
            "+        if (getIntProperty(HttpConfigConstants.SOCKET_SND_BUFFER_SIZE) != null) {\n", 
            "+            builder.setSndBufSize(getIntProperty(HttpConfigConstants.SOCKET_SND_BUFFER_SIZE));\n", 
            "+        }\n", 
            "+\n", 
            "         if (getIntProperty(HttpConfigConstants.SO_LINGER) != null) {\n", 
            "             builder.setSoLinger(getIntProperty(HttpConfigConstants.SO_LINGER));\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-99,10 +105,16", 
          "lines": [
            "                         getIntProperty(HttpConfigConstants.SO_TIMEOUT, 60000)))\n", 
            "                 .setConnectTimeout(getIntProperty(HttpConfigConstants.CONNECTION_TIMEOUT, 0))\n", 
            "                 .setInterestOpQueued(getBooleanProperty(HttpConfigConstants.INTEREST_OPS_QUEUEING, false))\n", 
            "-                .setTcpNoDelay(getBooleanProperty(HttpConfigConstants.TCP_NODELAY, true))\n", 
            "-                .setRcvBufSize(getIntProperty(HttpConfigConstants.SOCKET_RCV_BUFFER_SIZE, 8 * 1024))\n", 
            "-                .setSndBufSize(getIntProperty(HttpConfigConstants.SOCKET_SND_BUFFER_SIZE, 8 * 1024));\n", 
            "+                .setTcpNoDelay(getBooleanProperty(HttpConfigConstants.TCP_NODELAY, true));\n", 
            " \n", 
            "+        if (getIntProperty(HttpConfigConstants.SOCKET_RCV_BUFFER_SIZE) != null) {\n", 
            "+            builder.setRcvBufSize(getIntProperty(HttpConfigConstants.SOCKET_RCV_BUFFER_SIZE));\n", 
            "+        }\n", 
            "+\n", 
            "+        if (getIntProperty(HttpConfigConstants.SOCKET_SND_BUFFER_SIZE) != null) {\n", 
            "+            builder.setSndBufSize(getIntProperty(HttpConfigConstants.SOCKET_SND_BUFFER_SIZE));\n", 
            "+        }\n", 
            "+\n", 
            "         if (getIntProperty(HttpConfigConstants.SO_LINGER) != null) {\n", 
            "             builder.setSoLinger(getIntProperty(HttpConfigConstants.SO_LINGER));\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/config/HttpTransportConfiguration.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/config/HttpTransportConfiguration.java"
    }
  ], 
  "id": "1545106"
}