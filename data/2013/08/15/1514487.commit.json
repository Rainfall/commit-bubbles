{
  "when": "2013-08-15T16:53:20-04:00", 
  "message": "Refactored the code related to closing/releasing http connections in the PT transport", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-707,7 +707,7", 
          "lines": [
            "                                     and updated with new values. Default value is 50.\n", 
            "                                 </li>\n", 
            "                                 <li>\n", 
            "-                                    CacheDurationMins: Set the time duration (in minutes) between\n", 
            "+                                    CacheDurationMins: Sets the time duration (in minutes) between\n", 
            "                                     two consecutive runs of the CacheManager task which periodically\n", 
            "                                     performs housekeeping work in each cache. Default value is 15.\n", 
            "                                 </li>\n"
          ]
        }, 
        {
          "locn": "-751,7 +751,7", 
          "lines": [
            "                     <tr>\n", 
            "                         <td>http.socket.timeout</td>\n", 
            "                         <td>\n", 
            "-                            Set the TCP socket timeout in milliseconds\n", 
            "+                            Sets the TCP socket timeout in milliseconds\n", 
            "                             (See <a href=\"http://docs.oracle.com/javase/1.5.0/docs/api/java/net/SocketOptions.html#SO_TIMEOUT\">SO_TIMEOUT</a>).\n", 
            "                             <div class=\"xmlConf\">http.socket.timeout=20000</div>\n", 
            "                         </td>\n"
          ]
        }, 
        {
          "locn": "-761,7 +761,7", 
          "lines": [
            "                     <tr>\n", 
            "                         <td>http.connection.timeout</td>\n", 
            "                         <td>\n", 
            "-                            Set the TCP connection timeout in milliseconds. This determines the timeout\n", 
            "+                            Sets the TCP connection timeout in milliseconds. This determines the timeout\n", 
            "                             value for non-blocking connection requests. Setting this property to\n", 
            "                             0 disables connection timeout (i.e. no timeout).\n", 
            "                             <div class=\"xmlConf\">http.connection.timeout=30000</div>\n"
          ]
        }, 
        {
          "locn": "-798,7 +798,7", 
          "lines": [
            "                     <tr>\n", 
            "                         <td>http.socket.buffer-size</td>\n", 
            "                         <td>\n", 
            "-                            Set the size of the I/O session buffers (in bytes) used by the transport\n", 
            "+                            Sets the size of the I/O session buffers (in bytes) used by the transport\n", 
            "                             for reading incoming data and writing outgoing data.\n", 
            "                             <div class=\"xmlConf\">http.socket.buffer-size=4096</div>\n", 
            "                         </td>\n"
          ]
        }, 
        {
          "locn": "-808,7 +808,7", 
          "lines": [
            "                     <tr>\n", 
            "                         <td>http.socket.rcv-buffer-size</td>\n", 
            "                         <td>\n", 
            "-                            Set the size of the buffers (in bytes) used by the underlying platform\n", 
            "+                            Sets the size of the buffers (in bytes) used by the underlying platform\n", 
            "                             for incoming network I/O. This value is only a hint. When set, this is a\n", 
            "                             suggestion to the OS kernel from Synapse about the size of buffers to\n", 
            "                             use for the data to be received over the socket\n"
          ]
        }, 
        {
          "locn": "-821,7 +821,7", 
          "lines": [
            "                     <tr>\n", 
            "                         <td>http.socket.snd-buffer-size</td>\n", 
            "                         <td>\n", 
            "-                            Set the size of the buffers (in bytes) used by the underlying platform\n", 
            "+                            Sets the size of the buffers (in bytes) used by the underlying platform\n", 
            "                             for outgoing network I/O. This value is only a hint. When set, this is a\n", 
            "                             suggestion to the OS kernel from Synapse about the size of buffers to\n", 
            "                             use for the data to be sent over the socket\n"
          ]
        }, 
        {
          "locn": "-846,7 +846,7", 
          "lines": [
            "                     <tr>\n", 
            "                         <td>http.socket.reuseaddr</td>\n", 
            "                         <td>\n", 
            "-                            Set the <a href=\"http://docs.oracle.com/javase/1.5.0/docs/api/java/net/SocketOptions.html#SO_REUSEADDR\">SO_REUSEADDR</a>\n", 
            "+                            Sets the <a href=\"http://docs.oracle.com/javase/1.5.0/docs/api/java/net/SocketOptions.html#SO_REUSEADDR\">SO_REUSEADDR</a>\n", 
            "                             socket option for the sockets created by the HTTP transport. Accepted\n", 
            "                             values are either 'true' or 'false'.\n", 
            "                             <div class=\"xmlConf\">http.socket.reuseaddr=true</div>\n"
          ]
        }, 
        {
          "locn": "-857,7 +857,7", 
          "lines": [
            "                     <tr>\n", 
            "                         <td>http.nio.select-interval</td>\n", 
            "                         <td>\n", 
            "-                            Set the time interval in milliseconds at which the I/O reactor wakes up\n", 
            "+                            Sets the time interval in milliseconds at which the I/O reactor wakes up\n", 
            "                             to check for timed out sessions and session requests.\n", 
            "                             <div class=\"xmlConf\">http.nio.select-interval=2500</div>\n", 
            "                         </td>\n"
          ]
        }, 
        {
          "locn": "-867,7 +867,7", 
          "lines": [
            "                     <tr>\n", 
            "                         <td>io_threads_per_reactor <a name=\"io_threads_per_reactor\"/></td>\n", 
            "                         <td>\n", 
            "-                            Set the number of I/O dispatcher threads to be used by each I/O reactor.\n", 
            "+                            Sets the number of I/O dispatcher threads to be used by each I/O reactor.\n", 
            "                             Typically, this property controls the ability of the HTTP transport\n", 
            "                             to handle concurrent I/O events.\n", 
            "                             It is recommended that this property is set to the number of CPU cores\n"
          ]
        }, 
        {
          "locn": "-920,7 +920,7", 
          "lines": [
            "                     <tr>\n", 
            "                         <td>io_buffer_size</td>\n", 
            "                         <td>\n", 
            "-                            Set the size of the I/O buffers (in bytes) used as the pipes between HTTP\n", 
            "+                            Sets the size of the I/O buffers (in bytes) used as the pipes between HTTP\n", 
            "                             listener and sender. Typically, the HTTP listener would write the incoming\n", 
            "                             message data to one of these buffers, and the sender would read from it to\n", 
            "                             send the message out.\n"
          ]
        }
      ], 
      "to": "java/modules/documentation/src/site/xdoc/userguide/transports/pass_through.xml", 
      "from": "java/modules/documentation/src/site/xdoc/userguide/transports/pass_through.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-24,11 +24,21", 
          "lines": [
            " import org.apache.axis2.context.MessageContext;\n", 
            " import org.apache.axis2.Constants;\n", 
            " import org.apache.axis2.transport.TransportUtils;\n", 
            "+import org.apache.http.ConnectionReuseStrategy;\n", 
            "+import org.apache.http.HttpResponse;\n", 
            "+import org.apache.http.impl.DefaultConnectionReuseStrategy;\n", 
            "+import org.apache.http.nio.NHttpClientConnection;\n", 
            "+import org.apache.http.nio.NHttpServerConnection;\n", 
            " import org.apache.http.protocol.HTTP;\n", 
            " import org.apache.http.HttpStatus;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.synapse.transport.passthru.PassThroughConstants;\n", 
            "+import org.apache.synapse.transport.passthru.ProtocolState;\n", 
            "+import org.apache.synapse.transport.passthru.SourceContext;\n", 
            "+import org.apache.synapse.transport.passthru.TargetContext;\n", 
            "+import org.apache.synapse.transport.passthru.connections.SourceConnections;\n", 
            "+import org.apache.synapse.transport.passthru.connections.TargetConnections;\n", 
            " \n", 
            " import java.net.InetAddress;\n", 
            " import java.util.Map;\n"
          ]
        }, 
        {
          "locn": "-41,6 +51,8", 
          "lines": [
            " \n", 
            "     private static final Log log = LogFactory.getLog(PassThroughTransportUtils.class);\n", 
            " \n", 
            "+    private static final ConnectionReuseStrategy connStrategy = new DefaultConnectionReuseStrategy();\n", 
            "+\n", 
            "     /**\n", 
            "      * This method tries to determine the hostname of the given InetAddress without\n", 
            "      * triggering a reverse DNS lookup.  {@link java.net.InetAddress#getHostName()}\n"
          ]
        }, 
        {
          "locn": "-212,4 +224,31", 
          "lines": [
            "                 PassThroughConstants.MESSAGE_BUILDER_INVOKED));\n", 
            "     }\n", 
            " \n", 
            "+    public static void finishUsingSourceConnection(HttpResponse response,\n", 
            "+                                                   NHttpServerConnection conn,\n", 
            "+                                                   SourceConnections connections) {\n", 
            "+        if (!connStrategy.keepAlive(response, conn.getContext()) ||\n", 
            "+                SourceContext.get(conn).isShutDown()) {\n", 
            "+            SourceContext.updateState(conn, ProtocolState.CLOSING);\n", 
            "+            connections.closeConnection(conn);\n", 
            "+        } else {\n", 
            "+            // Reset connection state\n", 
            "+            connections.releaseConnection(conn);\n", 
            "+            // Ready to deal with a new request\n", 
            "+            conn.requestInput();\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public static void finishUsingTargetConnection(HttpResponse response,\n", 
            "+                                                   NHttpClientConnection conn,\n", 
            "+                                                   TargetConnections connections) {\n", 
            "+        if (!connStrategy.keepAlive(response, conn.getContext())) {\n", 
            "+            // this is a connection we should not re-use\n", 
            "+            TargetContext.updateState(conn, ProtocolState.CLOSING);\n", 
            "+            connections.closeConnection(conn);\n", 
            "+        } else {\n", 
            "+            connections.releaseConnection(conn);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/PassThroughTransportUtils.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/PassThroughTransportUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-32,6 +32,7", 
          "lines": [
            " import org.apache.synapse.transport.passthru.config.SourceConfiguration;\n", 
            " import org.apache.synapse.transport.passthru.jmx.LatencyView;\n", 
            " import org.apache.synapse.transport.passthru.jmx.PassThroughTransportMetricsCollector;\n", 
            "+import org.apache.synapse.transport.passthru.util.PassThroughTransportUtils;\n", 
            " \n", 
            " import java.io.IOException;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-202,7 +203,8", 
          "lines": [
            "                     if (!outBuf.hasData() && encoder.isCompleted()) {\n", 
            "                         // We are done - At this point the entire response payload has been\n", 
            "                         // written out to the SimpleOutputBuffer\n", 
            "-                        sourceConfiguration.getSourceConnections().releaseConnection(conn);\n", 
            "+                        PassThroughTransportUtils.finishUsingSourceConnection(conn.getHttpResponse(),\n", 
            "+                                conn, sourceConfiguration.getSourceConnections());\n", 
            "                     }\n", 
            "                 }\n", 
            "                 return;\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-104,10 +104,34", 
          "lines": [
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     * This connection is no longer valid. So we need to shutdownConnection connection.\n", 
            "+     * This connection is no longer needed. So we need to close connection.\n", 
            "      *\n", 
            "      * @param conn connection to shutdownConnection\n", 
            "      */\n", 
            "+    public void closeConnection(NHttpClientConnection conn) {\n", 
            "+        HostConnections pool = (HostConnections) conn.getContext().getAttribute(\n", 
            "+                PassThroughConstants.CONNECTION_POOL);\n", 
            "+\n", 
            "+        TargetContext.get(conn).reset();\n", 
            "+\n", 
            "+        if (pool != null) {\n", 
            "+            pool.forget(conn);\n", 
            "+        } else {\n", 
            "+            // we shouldn't get here\n", 
            "+            log.fatal(\"Connection without a pool. Something wrong. Need to fix.\");\n", 
            "+        }\n", 
            "+\n", 
            "+        try {\n", 
            "+            conn.close();\n", 
            "+        } catch (IOException ignored) {\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * This connection is no longer valid. So we need to shutdown connection.\n", 
            "+     *\n", 
            "+     * @param conn connection to shutdownConnection\n", 
            "+     */\n", 
            "     public void shutdownConnection(NHttpClientConnection conn) {\n", 
            "         HostConnections pool = (HostConnections) conn.getContext().getAttribute(\n", 
            "                 PassThroughConstants.CONNECTION_POOL);\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/connections/TargetConnections.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/connections/TargetConnections.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-21,10 +21,10", 
          "lines": [
            " \n", 
            " import org.apache.http.*;\n", 
            " import org.apache.http.entity.BasicHttpEntity;\n", 
            "-import org.apache.http.impl.DefaultConnectionReuseStrategy;\n", 
            " import org.apache.http.nio.ContentDecoder;\n", 
            " import org.apache.http.nio.NHttpClientConnection;\n", 
            " import org.apache.synapse.transport.passthru.config.TargetConfiguration;\n", 
            "+import org.apache.synapse.transport.passthru.util.PassThroughTransportUtils;\n", 
            " \n", 
            " import java.io.IOException;\n", 
            " import java.util.HashMap;\n"
          ]
        }, 
        {
          "locn": "-56,10 +56,6", 
          "lines": [
            "     /** Protocol version */\n", 
            "     private ProtocolVersion version = HttpVersion.HTTP_1_1;\n", 
            " \n", 
            "-    /** This utility class is used for determining weather we need to close the connection\n", 
            "-     * after submitting the response */\n", 
            "-    private ConnectionReuseStrategy connStrategy = new DefaultConnectionReuseStrategy();\n", 
            "-\n", 
            "     /** The connection */\n", 
            "     private NHttpClientConnection connection;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-104,19 +100,9", 
          "lines": [
            "                 entity.setChunked(true);\n", 
            "             }\n", 
            "             response.setEntity(entity);\n", 
            "-        } else {            \n", 
            "-            if (!connStrategy.keepAlive(response, conn.getContext())) {\n", 
            "-                try {\n", 
            "-                    // this is a connection we should not re-use\n", 
            "-                    TargetContext.updateState(conn, ProtocolState.CLOSING);\n", 
            "-                    targetConfiguration.getConnections().shutdownConnection(conn);\n", 
            "-                                       \n", 
            "-                } catch (Exception ignore) {\n", 
            "-\n", 
            "-                }\n", 
            "-            } else {\n", 
            "-                targetConfiguration.getConnections().releaseConnection(conn);\n", 
            "-            }\n", 
            "+        } else {\n", 
            "+            PassThroughTransportUtils.finishUsingTargetConnection(response, conn,\n", 
            "+                    targetConfiguration.getConnections());\n", 
            "         }\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-140,13 +126,8", 
          "lines": [
            "             TargetContext.updateState(conn, ProtocolState.RESPONSE_DONE);\n", 
            "             targetConfiguration.getMetrics().notifyReceivedMessageSize(\n", 
            "                     conn.getMetrics().getReceivedBytesCount());\n", 
            "-\n", 
            "-            if (!this.connStrategy.keepAlive(response, conn.getContext())) {\n", 
            "-                TargetContext.updateState(conn, ProtocolState.CLOSED);\n", 
            "-                targetConfiguration.getConnections().shutdownConnection(conn);\n", 
            "-            } else {\n", 
            "-                targetConfiguration.getConnections().releaseConnection(conn);\n", 
            "-            }\n", 
            "+            PassThroughTransportUtils.finishUsingTargetConnection(response, conn,\n", 
            "+                    targetConfiguration.getConnections());\n", 
            "         }\n", 
            "         return bytes;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetResponse.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetResponse.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-21,7 +21,6", 
          "lines": [
            " \n", 
            " import org.apache.http.*;\n", 
            " import org.apache.http.entity.BasicHttpEntity;\n", 
            "-import org.apache.http.impl.DefaultConnectionReuseStrategy;\n", 
            " import org.apache.http.nio.ContentEncoder;\n", 
            " import org.apache.http.nio.NHttpServerConnection;\n", 
            " import org.apache.http.protocol.HTTP;\n"
          ]
        }, 
        {
          "locn": "-28,6 +27,7", 
          "lines": [
            " import org.apache.http.protocol.HttpContext;\n", 
            " import org.apache.http.protocol.HttpCoreContext;\n", 
            " import org.apache.synapse.transport.passthru.config.SourceConfiguration;\n", 
            "+import org.apache.synapse.transport.passthru.util.PassThroughTransportUtils;\n", 
            " \n", 
            " import java.io.IOException;\n", 
            " import java.util.HashMap;\n"
          ]
        }, 
        {
          "locn": "-56,9 +56,6", 
          "lines": [
            "     /** Version of the response */\n", 
            "     private ProtocolVersion version = HttpVersion.HTTP_1_1;\n", 
            " \n", 
            "-    /** Connection strategy */\n", 
            "-    private ConnectionReuseStrategy connStrategy = new DefaultConnectionReuseStrategy();\n", 
            "-\n", 
            "     private SourceRequest request = null;\n", 
            " \n", 
            "     public SourceResponse(SourceConfiguration config, int status, SourceRequest request) {\n"
          ]
        }, 
        {
          "locn": "-157,23 +154,10", 
          "lines": [
            "         // Update connection state\n", 
            "         if (encoder.isCompleted()) {\n", 
            "             SourceContext.updateState(conn, ProtocolState.RESPONSE_DONE);\n", 
            "-\n", 
            "-            sourceConfiguration.getMetrics().\n", 
            "-                    notifySentMessageSize(conn.getMetrics().getSentBytesCount());\n", 
            "-\n", 
            "-            if (!this.connStrategy.keepAlive(response, conn.getContext())) {\n", 
            "-                SourceContext.updateState(conn, ProtocolState.CLOSING);\n", 
            "-                sourceConfiguration.getSourceConnections().closeConnection(conn);\n", 
            "-            } else if (SourceContext.get(conn).isShutDown()) {\n", 
            "-                // we need to shut down if the shutdown flag is set\n", 
            "-                SourceContext.updateState(conn, ProtocolState.CLOSING);\n", 
            "-                sourceConfiguration.getSourceConnections().closeConnection(conn);\n", 
            "-            } else {\n", 
            "-                // Reset connection state\n", 
            "-                sourceConfiguration.getSourceConnections().releaseConnection(conn);\n", 
            "-                // Ready to deal with a new request                \n", 
            "-                conn.requestInput();\n", 
            "-            }\n", 
            "+            sourceConfiguration.getMetrics().notifySentMessageSize(\n", 
            "+                    conn.getMetrics().getSentBytesCount());\n", 
            "+            PassThroughTransportUtils.finishUsingSourceConnection(response, conn,\n", 
            "+                    sourceConfiguration.getSourceConnections());\n", 
            "         }\n", 
            "         return bytes;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceResponse.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceResponse.java"
    }
  ], 
  "id": "1514487"
}