{
  "when": "2013-07-30T05:09:39-04:00", 
  "who": "uswick", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-25,7 +25,7", 
          "lines": [
            " public class GroovyScriptMediatorTest extends TestCase {\n", 
            " \n", 
            "     public void testXMLMediator2() throws Exception {\n", 
            "-       ScriptMediator mediator = new ScriptMediator(\"groovy\", \"mc.setPayloadXML(mc.getPayloadXML())\");\n", 
            "+       ScriptMediator mediator = new ScriptMediator(\"groovy\", \"mc.setPayloadXML(mc.getPayloadXML())\",null);\n", 
            "        mediator.initInlineScript();\n", 
            "        assertTrue(mediator.mediate(TestUtils.getTestContext(\"<a><b>petra</b></a>\")));\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/extensions/src/test/java/org/apache/synapse/mediators/bsf/GroovyScriptMediatorTest.java", 
      "from": "java/modules/extensions/src/test/java/org/apache/synapse/mediators/bsf/GroovyScriptMediatorTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-28,7 +28,7", 
          "lines": [
            " public class JavaScriptMediatorTest extends TestCase {\n", 
            " \n", 
            "     public void testInlineMediator() throws Exception {\n", 
            "-        ScriptMediator mediator = new ScriptMediator(\"js\", \"mc.getPayloadXML().b == 'petra';\");\n", 
            "+        ScriptMediator mediator = new ScriptMediator(\"js\", \"mc.getPayloadXML().b == 'petra';\",null);\n", 
            " \n", 
            "         MessageContext mc = TestUtils.getTestContext(\"<a><b>petra</b></a>\", null);\n", 
            "         assertTrue(mediator.mediate(mc));\n"
          ]
        }, 
        {
          "locn": "-41,7 +41,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     public void testInlineMediator2() throws Exception {\n", 
            "-        ScriptMediator mediator = new ScriptMediator(\"js\", \"mc.getPayloadXML().b == 'petra';\");\n", 
            "+        ScriptMediator mediator = new ScriptMediator(\"js\", \"mc.getPayloadXML().b == 'petra';\",null);\n", 
            " \n", 
            "         MessageContext mc = TestUtils.getTestContext(\"<a><b>petra</b></a>\", null);\n", 
            "         assertTrue(mediator.mediate(mc));\n"
          ]
        }
      ], 
      "to": "java/modules/extensions/src/test/java/org/apache/synapse/mediators/bsf/javascript/JavaScriptMediatorTest.java", 
      "from": "java/modules/extensions/src/test/java/org/apache/synapse/mediators/bsf/javascript/JavaScriptMediatorTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-38,7 +38,7", 
          "lines": [
            " \n", 
            "     public void testInlineMediator() throws Exception {\n", 
            "         MessageContext mc = TestUtils.getTestContext(\"<foo/>\", null);\n", 
            "-        ScriptMediator mediator = new ScriptMediator(\"js\", inlinescript);\n", 
            "+        ScriptMediator mediator = new ScriptMediator(\"js\", inlinescript,null);\n", 
            "         assertTrue(mediator.mediate(mc));\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-47,7 +47,7", 
          "lines": [
            "         Random rand = new Random();\n", 
            "         String randomno = Integer.toString(rand.nextInt(200));\n", 
            "         mc.getEnvelope().getBody().getFirstElement().setText(randomno);\n", 
            "-        ScriptMediator mediator = new ScriptMediator(\"js\", threadsafetyscript);\n", 
            "+        ScriptMediator mediator = new ScriptMediator(\"js\", threadsafetyscript,null);\n", 
            "         mediator.mediate(mc);\n", 
            "         assertEquals(Integer.parseInt(mc.getEnvelope().getBody().getFirstElement().getText()),\n", 
            "                 Integer.parseInt(randomno) * 2);\n"
          ]
        }
      ], 
      "to": "java/modules/extensions/src/test/java/org/apache/synapse/mediators/bsf/ScriptMediatorTest.java", 
      "from": "java/modules/extensions/src/test/java/org/apache/synapse/mediators/bsf/ScriptMediatorTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-27,7 +27,7", 
          "lines": [
            " import org.apache.synapse.config.xml.XMLConfigConstants;\n", 
            " import org.apache.synapse.mediators.Value;\n", 
            " import org.apache.synapse.config.xml.ValueFactory;\n", 
            "-\n", 
            "+import org.apache.synapse.SynapseConstants;\n", 
            " import javax.xml.namespace.QName;\n", 
            " import java.util.*;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-65,6 +65,7", 
          "lines": [
            "     public Mediator createSpecificMediator(OMElement elem, Properties properties) {\n", 
            " \n", 
            "         ScriptMediator mediator;\n", 
            "+        ClassLoader  classLoader = (ClassLoader) properties.get(SynapseConstants.SYNAPSE_LIB_LOADER);\n", 
            "         OMAttribute keyAtt = elem.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE,\n", 
            "                 \"key\"));\n", 
            "         OMAttribute langAtt = elem.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE,\n"
          ]
        }, 
        {
          "locn": "-93,9 +94,9", 
          "lines": [
            " \n", 
            "             String functionName = (functionAtt == null ? null : functionAtt.getAttributeValue());\n", 
            "             mediator = new ScriptMediator(langAtt.getAttributeValue(),\n", 
            "-                    includeKeysMap, generatedKey, functionName);\n", 
            "+                    includeKeysMap, generatedKey, functionName,classLoader);\n", 
            "         } else {\n", 
            "-            mediator = new ScriptMediator(langAtt.getAttributeValue(), elem.getText());\n", 
            "+            mediator = new ScriptMediator(langAtt.getAttributeValue(), elem.getText(),classLoader);\n", 
            "         }\n", 
            " \n", 
            "         processAuditStatus(mediator, elem);\n"
          ]
        }
      ], 
      "to": "java/modules/extensions/src/main/java/org/apache/synapse/mediators/bsf/ScriptMediatorFactory.java", 
      "from": "java/modules/extensions/src/main/java/org/apache/synapse/mediators/bsf/ScriptMediatorFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-31,6 +31,7", 
          "lines": [
            " import org.apache.synapse.config.Entry;\n", 
            " import org.apache.synapse.mediators.AbstractMediator;\n", 
            " import org.apache.synapse.mediators.Value;\n", 
            "+import org.mozilla.javascript.Context;\n", 
            " \n", 
            " import javax.activation.DataHandler;\n", 
            " import javax.script.*;\n"
          ]
        }, 
        {
          "locn": "-113,14 +114,20", 
          "lines": [
            "     private final Object resourceLock = new Object();\n", 
            " \n", 
            "     /**\n", 
            "+     * Store the class loader from properties\n", 
            "+     */\n", 
            "+    private ClassLoader loader;\n", 
            "+\n", 
            "+    /**\n", 
            "      * Create a script mediator for the given language and given script source\n", 
            "      *\n", 
            "      * @param language         the BSF language\n", 
            "      * @param scriptSourceCode the source code of the script\n", 
            "      */\n", 
            "-    public ScriptMediator(String language, String scriptSourceCode) {\n", 
            "+    public ScriptMediator(String language, String scriptSourceCode,ClassLoader classLoader) {\n", 
            "         this.language = language;\n", 
            "         this.scriptSourceCode = scriptSourceCode;\n", 
            "+        this.setLoader(classLoader);\n", 
            "         this.includes = new TreeMap<Value, Object>();\n", 
            "         initInlineScript();\n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-134,9 +141,10", 
          "lines": [
            "      * @param function       the function to be invoked\n", 
            "      */\n", 
            "     public ScriptMediator(String language, Map<Value, Object> includeKeysMap,\n", 
            "-                          Value key, String function) {\n", 
            "+                          Value key, String function,ClassLoader classLoader) {\n", 
            "         this.language = language;\n", 
            "         this.key = key;\n", 
            "+        this.setLoader(classLoader);\n", 
            "         this.includes = includeKeysMap;\n", 
            "         if (function != null) {\n", 
            "             this.function = function;\n"
          ]
        }, 
        {
          "locn": "-198,6 +206,12", 
          "lines": [
            "         boolean returnValue;\n", 
            "         try {\n", 
            " \n", 
            "+            //if the engine is Rhino then needs to set the class loader specifically\n", 
            "+            if(language.equals(\"js\")){\n", 
            "+                Context cx = Context.enter();\n", 
            "+                cx.setApplicationClassLoader(this.loader);\n", 
            "+            }\n", 
            "+\n", 
            "             Object returnObject;\n", 
            "             if (key != null) {\n", 
            "                 returnObject = mediateWithExternalScript(synCtx);\n"
          ]
        }, 
        {
          "locn": "-218,7 +232,12", 
          "lines": [
            "                     \"external \" + language + \" script\" + \" : \" + key +\n", 
            "                     (function != null ? \" function \" + function : \"\"), e, synCtx);\n", 
            "             returnValue = false;\n", 
            "-        }\n", 
            "+        }  finally {\n", 
            "+                if(language.equals(\"js\")){\n", 
            "+                          Context.exit();\n", 
            "+                     }\n", 
            "+    }\n", 
            "+\n", 
            "         return returnValue;\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-441,4 +460,12", 
          "lines": [
            "         return includes;\n", 
            "     }\n", 
            " \n", 
            "+    public ClassLoader getLoader() {\n", 
            "+        return loader;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setLoader(ClassLoader loader) {\n", 
            "+        this.loader = loader;\n", 
            "+    }\n", 
            "+\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/extensions/src/main/java/org/apache/synapse/mediators/bsf/ScriptMediator.java", 
      "from": "java/modules/extensions/src/main/java/org/apache/synapse/mediators/bsf/ScriptMediator.java"
    }
  ], 
  "id": "1508349"
}