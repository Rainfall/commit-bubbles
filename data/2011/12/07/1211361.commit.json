{
  "when": "2011-12-07T05:01:53-05:00", 
  "message": "Adding payload factory mediator. SYNAPSE-821. Thanks Sadeep for the patch", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-0,0 +1,132", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.config.xml;\n", 
            "+\n", 
            "+import org.apache.axiom.om.*;\n", 
            "+import org.apache.synapse.Mediator;\n", 
            "+import org.apache.synapse.mediators.transform.PayloadFactoryMediator;\n", 
            "+import org.jaxen.JaxenException;\n", 
            "+\n", 
            "+import javax.xml.namespace.QName;\n", 
            "+import java.util.ArrayList;\n", 
            "+import java.util.Iterator;\n", 
            "+import java.util.List;\n", 
            "+import java.util.Properties;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Creates a payloadFactory mediator from the provided XML configuration\n", 
            "+ * <p/>\n", 
            "+ * <pre>\n", 
            "+ * &lt;payloadFactory&gt;\n", 
            "+ *   &lt;format&gt;&quot;xmlstring&quot;&lt;/format&gt;\n", 
            "+ *   &lt;args&gt;\n", 
            "+ *     &lt;arg (value=&quot;literal&quot; | expression=&quot;xpath&quot;)/&gt;*\n", 
            "+ *   &lt;/args&gt;\n", 
            "+ * &lt;/payloadFactory&gt;\n", 
            "+ * </pre>\n", 
            "+ */\n", 
            "+public class PayloadFactoryMediatorFactory extends AbstractMediatorFactory {\n", 
            "+\n", 
            "+    private static final QName PAYLOAD_FACTORY_Q\n", 
            "+            = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, \"payloadFactory\");\n", 
            "+\n", 
            "+    private static final QName FORMAT_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, \"format\");\n", 
            "+    private static final QName ARGS_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, \"args\");\n", 
            "+\n", 
            "+    public Mediator createSpecificMediator(OMElement elem, Properties properties) {\n", 
            "+\n", 
            "+        PayloadFactoryMediator payloadFactoryMediator = new PayloadFactoryMediator();\n", 
            "+\n", 
            "+        OMElement formatElem = elem.getFirstChildWithName(FORMAT_Q);\n", 
            "+\n", 
            "+        if (formatElem != null) {\n", 
            "+            OMElement copy = formatElem.getFirstElement().cloneOMElement();\n", 
            "+            removeIndentations(copy);\n", 
            "+            payloadFactoryMediator.setFormat(copy.toString());\n", 
            "+        } else {\n", 
            "+            handleException(\"format element of payloadFactoryMediator is required\");\n", 
            "+        }\n", 
            "+\n", 
            "+        OMElement argumentsElem = elem.getFirstChildWithName(ARGS_Q);\n", 
            "+\n", 
            "+        if (argumentsElem != null) {\n", 
            "+\n", 
            "+            Iterator itr = argumentsElem.getChildElements();\n", 
            "+\n", 
            "+            while (itr.hasNext()) {\n", 
            "+                OMElement argElem = (OMElement) itr.next();\n", 
            "+                PayloadFactoryMediator.Argument arg = new PayloadFactoryMediator.Argument();\n", 
            "+                String value;\n", 
            "+\n", 
            "+                if ((value = argElem.getAttributeValue(ATT_VALUE)) != null) {\n", 
            "+                    arg.setValue(value);\n", 
            "+                } else if ((value = argElem.getAttributeValue(ATT_EXPRN)) != null) {\n", 
            "+\n", 
            "+                    if (value.trim().length() == 0) {\n", 
            "+                        handleException(\"Value of 'expression' attribute is required\");\n", 
            "+                    } else {\n", 
            "+                        try {\n", 
            "+                            arg.setExpression(SynapseXPathFactory.getSynapseXPath(argElem, ATT_EXPRN));\n", 
            "+                        } catch (JaxenException e) {\n", 
            "+                            handleException(\"Invalid XPath expression is provided for \" +\n", 
            "+                                    \"'expression' attribute: \" + value, e);\n", 
            "+                        }\n", 
            "+                    }\n", 
            "+\n", 
            "+                } else {\n", 
            "+                    handleException(\"Unsupported arg type. 'value' or 'expression' attribute is \" +\n", 
            "+                            \"required\");\n", 
            "+                }\n", 
            "+\n", 
            "+                payloadFactoryMediator.addArgument(arg);\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        return payloadFactoryMediator;\n", 
            "+    }\n", 
            "+\n", 
            "+    public QName getTagQName() {\n", 
            "+        return PAYLOAD_FACTORY_Q;\n", 
            "+    }\n", 
            "+\n", 
            "+    private void removeIndentations(OMElement element) {\n", 
            "+        List<OMText> removables = new ArrayList<OMText>();\n", 
            "+        removeIndentations(element, removables);\n", 
            "+        for (OMText node : removables) {\n", 
            "+            node.detach();\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    private void removeIndentations(OMElement element, List<OMText> removables) {\n", 
            "+        Iterator children = element.getChildren();\n", 
            "+        while (children.hasNext()) {\n", 
            "+            Object next = children.next();\n", 
            "+            if (next instanceof OMText) {\n", 
            "+                OMText text = (OMText) next;\n", 
            "+                if (text.getText().trim().equals(\"\")) {\n", 
            "+                    removables.add(text);\n", 
            "+                }\n", 
            "+            } else if (next instanceof OMElement) {\n", 
            "+                removeIndentations((OMElement) next, removables);\n", 
            "+            }\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/PayloadFactoryMediatorFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/PayloadFactoryMediatorFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-82,7 +82,8", 
          "lines": [
            "         EnrichMediatorFactory.class,\n", 
            "         MessageStoreMediatorFactory.class,\n", 
            "         TemplateMediatorFactory.class,\n", 
            "-        InvokeMediatorFactory.class\n", 
            "+        InvokeMediatorFactory.class,\n", 
            "+        PayloadFactoryMediatorFactory.class\n", 
            "     };\n", 
            " \n", 
            "     private final static MediatorFactoryFinder instance  = new MediatorFactoryFinder();\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/MediatorFactoryFinder.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/MediatorFactoryFinder.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-68,7 +68,8", 
          "lines": [
            "         TemplateMediatorSerializer.class,\n", 
            "         InvokeMediatorSerializer.class,\n", 
            "         MessageStoreMediatorSerializer.class,\n", 
            "-        URLRewriteMediatorSerializer.class\n", 
            "+        URLRewriteMediatorSerializer.class,\n", 
            "+        PayloadFactoryMediatorSerializer.class\n", 
            "     };\n", 
            " \n", 
            "     private final static MediatorSerializerFinder instance = new MediatorSerializerFinder();\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/MediatorSerializerFinder.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/MediatorSerializerFinder.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,97", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.config.xml;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axiom.om.util.AXIOMUtil;\n", 
            "+import org.apache.synapse.Mediator;\n", 
            "+import org.apache.synapse.mediators.transform.PayloadFactoryMediator;\n", 
            "+\n", 
            "+import javax.xml.stream.XMLStreamException;\n", 
            "+import java.util.List;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Serializer for {@link PayloadFactoryMediator} instances.\n", 
            "+ *\n", 
            "+ * @see PayloadFactoryMediatorFactory\n", 
            "+ */\n", 
            "+public class PayloadFactoryMediatorSerializer extends AbstractMediatorSerializer {\n", 
            "+\n", 
            "+    private static final String PAYLOAD_FACTORY = \"payloadFactory\";\n", 
            "+    private static final String FORMAT = \"format\";\n", 
            "+    private static final String ARGS = \"args\";\n", 
            "+    private static final String ARG = \"arg\";\n", 
            "+    private static final String VALUE = \"value\";\n", 
            "+    private static final String EXPRESSION = \"expression\";\n", 
            "+\n", 
            "+\n", 
            "+    public OMElement serializeSpecificMediator(Mediator m) {\n", 
            "+\n", 
            "+        if (!(m instanceof PayloadFactoryMediator)) {\n", 
            "+            handleException(\"Unsupported mediator was passed in for serialization: \" + m.getType());\n", 
            "+            return null;\n", 
            "+        }\n", 
            "+\n", 
            "+        PayloadFactoryMediator mediator = (PayloadFactoryMediator) m;\n", 
            "+\n", 
            "+        OMElement payloadFactoryElem = fac.createOMElement(PAYLOAD_FACTORY, synNS);\n", 
            "+        saveTracingState(payloadFactoryElem, mediator);\n", 
            "+\n", 
            "+        if (mediator.getFormat() != null) {\n", 
            "+\n", 
            "+            try {\n", 
            "+                OMElement formatElem = fac.createOMElement(FORMAT, synNS);\n", 
            "+                formatElem.addChild(AXIOMUtil.stringToOM(mediator.getFormat()));\n", 
            "+                payloadFactoryElem.addChild(formatElem);\n", 
            "+            } catch (XMLStreamException e) {\n", 
            "+                handleException(\"Error while serializing payloadFactory mediator\", e);\n", 
            "+            }\n", 
            "+        } else {\n", 
            "+            handleException(\"Invalid payloadFactory mediator, format is required\");\n", 
            "+        }\n", 
            "+\n", 
            "+        List<PayloadFactoryMediator.Argument> argList = mediator.getArgumentList();\n", 
            "+\n", 
            "+        if (argList != null && argList.size() > 0) {\n", 
            "+\n", 
            "+            OMElement argumentsElem = fac.createOMElement(ARGS, synNS);\n", 
            "+\n", 
            "+            for (PayloadFactoryMediator.Argument arg : argList) {\n", 
            "+\n", 
            "+                OMElement argElem = fac.createOMElement(ARG, synNS);\n", 
            "+\n", 
            "+                if (arg.getValue() != null) {\n", 
            "+                    argElem.addAttribute(fac.createOMAttribute(VALUE, nullNS, arg.getValue()));\n", 
            "+                } else if (arg.getExpression() != null) {\n", 
            "+                    SynapseXPathSerializer.serializeXPath(arg.getExpression(), argElem, EXPRESSION);\n", 
            "+                }\n", 
            "+                argumentsElem.addChild(argElem);\n", 
            "+            }\n", 
            "+            payloadFactoryElem.addChild(argumentsElem);\n", 
            "+        }\n", 
            "+\n", 
            "+        return payloadFactoryElem;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getMediatorClassName() {\n", 
            "+        return PayloadFactoryMediator.class.getName();\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/PayloadFactoryMediatorSerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/PayloadFactoryMediatorSerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,155", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.mediators.transform;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axiom.om.util.AXIOMUtil;\n", 
            "+import org.apache.axiom.soap.SOAPBody;\n", 
            "+import org.apache.synapse.MessageContext;\n", 
            "+import org.apache.synapse.mediators.AbstractMediator;\n", 
            "+import org.apache.synapse.util.xpath.SynapseXPath;\n", 
            "+\n", 
            "+import javax.xml.stream.XMLStreamException;\n", 
            "+import java.util.ArrayList;\n", 
            "+import java.util.Iterator;\n", 
            "+import java.util.List;\n", 
            "+import java.util.regex.Matcher;\n", 
            "+import java.util.regex.Pattern;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Payload-factory mediator creates a new SOAP payload for the message, replacing the existing one.\n", 
            "+ * <pre>printf()</pre> style formatting is used to configure the transformation performed by the\n", 
            "+ * mediator.<p/>\n", 
            "+ * Each argument in the mediator configuration could be a static value or an XPath expression.\n", 
            "+ * When an expression is used, argument value is fetched at runtime by evaluating the provided XPath\n", 
            "+ * expression against the existing SOAP message/message context.\n", 
            "+ */\n", 
            "+public class PayloadFactoryMediator extends AbstractMediator {\n", 
            "+\n", 
            "+    private String format;\n", 
            "+    private List<Argument> argumentList = new ArrayList<Argument>();\n", 
            "+\n", 
            "+    private Pattern pattern = Pattern.compile(\"\\\\$(\\\\d)+\");\n", 
            "+\n", 
            "+    public boolean mediate(MessageContext synCtx) {\n", 
            "+\n", 
            "+        SOAPBody soapBody = synCtx.getEnvelope().getBody();\n", 
            "+\n", 
            "+        StringBuffer result = new StringBuffer();\n", 
            "+        transformPayload(result, synCtx);\n", 
            "+\n", 
            "+        OMElement resultElement;\n", 
            "+        try {\n", 
            "+            resultElement = AXIOMUtil.stringToOM(result.toString());\n", 
            "+        } catch (XMLStreamException e) {\n", 
            "+            handleException(\"Unable to create a valid XML payload. Invalid format/arguments are \" +\n", 
            "+                    \"provided in the payloadFactory mediator configuration\", synCtx);\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+\n", 
            "+        // replace the existing payload with the new payload\n", 
            "+        for (Iterator itr = soapBody.getChildElements(); itr.hasNext();) {\n", 
            "+            OMElement child = (OMElement) itr.next();\n", 
            "+            child.detach();\n", 
            "+        }\n", 
            "+\n", 
            "+        for (Iterator itr = resultElement.getChildElements(); itr.hasNext();) {\n", 
            "+            OMElement child = (OMElement) itr.next();\n", 
            "+            soapBody.addChild(child);\n", 
            "+        }\n", 
            "+\n", 
            "+        return true;\n", 
            "+    }\n", 
            "+\n", 
            "+    private void transformPayload(StringBuffer result, MessageContext synCtx) {\n", 
            "+        Object[] argValues = getArgValues(synCtx);\n", 
            "+        Matcher matcher = pattern.matcher(\"<dummy>\" + format + \"</dummy>\");\n", 
            "+        while (matcher.find()) {\n", 
            "+            String matchSeq = matcher.group();\n", 
            "+            int argIndex = Integer.parseInt(matchSeq.substring(1));\n", 
            "+            matcher.appendReplacement(result, argValues[argIndex - 1].toString());\n", 
            "+        }\n", 
            "+        matcher.appendTail(result);\n", 
            "+    }\n", 
            "+\n", 
            "+    private Object[] getArgValues(MessageContext synCtx) {\n", 
            "+\n", 
            "+        Object[] argValues = new Object[argumentList.size()];\n", 
            "+        for (int i = 0; i < argumentList.size(); ++i) {\n", 
            "+            Argument arg = argumentList.get(i);\n", 
            "+            if (arg.getValue() != null) {\n", 
            "+                argValues[i] = arg.getValue();\n", 
            "+            } else if (arg.getExpression() != null) {\n", 
            "+                String value = arg.getExpression().stringValueOf(synCtx);\n", 
            "+                if (value != null) {\n", 
            "+                    argValues[i] = value;\n", 
            "+                } else {\n", 
            "+                    argValues[i] = \"\";\n", 
            "+                }\n", 
            "+            } else {\n", 
            "+                handleException(\"Unexpected argument type detected in the payloadFactory \" +\n", 
            "+                        \"mediator configuration\", synCtx);\n", 
            "+            }\n", 
            "+        }\n", 
            "+        return argValues;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getFormat() {\n", 
            "+        return format;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setFormat(String format) {\n", 
            "+        this.format = format;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void addArgument(Argument arg) {\n", 
            "+        argumentList.add(arg);\n", 
            "+    }\n", 
            "+\n", 
            "+    public List<Argument> getArgumentList() {\n", 
            "+        return argumentList;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Represents an argument provided in the payload factory mediator configuration.\n", 
            "+     */\n", 
            "+    public static class Argument {\n", 
            "+\n", 
            "+        private String value;\n", 
            "+        private SynapseXPath expression;\n", 
            "+\n", 
            "+        public String getValue() {\n", 
            "+            return value;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setValue(String value) {\n", 
            "+            this.value = value;\n", 
            "+        }\n", 
            "+\n", 
            "+        public SynapseXPath getExpression() {\n", 
            "+            return expression;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setExpression(SynapseXPath expression) {\n", 
            "+            this.expression = expression;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/transform/PayloadFactoryMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/transform/PayloadFactoryMediator.java"
    }
  ], 
  "id": "1211361"
}