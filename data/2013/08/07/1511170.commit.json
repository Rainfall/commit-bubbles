{
  "when": "2013-08-07T00:30:27-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-0,0 +1,44", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Callout  mediator Security Sample for different policies for inbound and outbound-->\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+\n", 
            "+    <localEntry key=\"sec_policy_inbound\" src=\"file:repository/conf/sample/resources/policy/policy_3.xml\"/>\n", 
            "+    <localEntry key=\"sec_policy_outbound\" src=\"file:repository/conf/sample/resources/policy/policy_3.xml\"/>\n", 
            "+\n", 
            "+    <sequence name=\"main\">\n", 
            "+        <callout serviceURL=\"http://localhost:9000/services/SecureStockQuoteService\"\n", 
            "+                 action=\"urn:getQuote\">\n", 
            "+            <source xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\"\n", 
            "+                    xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+                    xpath=\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\"/>\n", 
            "+            <target xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\"\n", 
            "+                    xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+                    xpath=\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\"/>\n", 
            "+            <enableSec outboundPolicy=\"sec_policy_outbound\" inboundPolicy=\"sec_policy_inbound\"/>\n", 
            "+        </callout>\n", 
            "+        <property name=\"RESPONSE\" value=\"true\"/>\n", 
            "+        <header name=\"To\" action=\"remove\"/>\n", 
            "+        <send/>\n", 
            "+        <drop/>\n", 
            "+    </sequence>\n", 
            "+\n", 
            "+</definitions>\n"
          ]
        }
      ], 
      "to": "java/repository/conf/sample/synapse_sample_432.xml", 
      "from": "java/repository/conf/sample/synapse_sample_432.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,45", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<!-- Callout  mediator Security Sample for different policies for inbound and outbound-->\n", 
            "+<definitions xmlns=\"http://ws.apache.org/ns/synapse\">\n", 
            "+\n", 
            "+    <localEntry key=\"sec_policy_inbound\" src=\"file:repository/conf/sample/resources/policy/policy_3.xml\"/>\n", 
            "+    <localEntry key=\"sec_policy_outbound\" src=\"file:repository/conf/sample/resources/policy/policy_3.xml\"/>\n", 
            "+\n", 
            "+    <sequence name=\"main\">\n", 
            "+        <callout serviceURL=\"http://localhost:9000/services/SecureStockQuoteService\"\n", 
            "+                 action=\"urn:getQuote\">\n", 
            "+            <configuration axis2xml=\"modules/integration/target/test_repos/axis2Client/conf/axis2_def.xml\" repository=\"modules/integration/target/test_repos/axis2Client\"/>\n", 
            "+            <source xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\"\n", 
            "+                    xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+                    xpath=\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\"/>\n", 
            "+            <target xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\"\n", 
            "+                    xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+                    xpath=\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\"/>\n", 
            "+            <enableSec outboundPolicy=\"sec_policy_outbound\" inboundPolicy=\"sec_policy_inbound\"/>\n", 
            "+        </callout>\n", 
            "+        <property name=\"RESPONSE\" value=\"true\"/>\n", 
            "+        <header name=\"To\" action=\"remove\"/>\n", 
            "+        <send/>\n", 
            "+        <drop/>\n", 
            "+    </sequence>\n", 
            "+\n", 
            "+</definitions>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/extras/synapse_sample_432_altered.xml", 
      "from": "java/modules/integration/src/test/resources/extras/synapse_sample_432_altered.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>432</sampleID>\n", 
            "+    <sampleName>Callout mediator Security Sample for different policies for inbound and outbound</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>modules/integration/src/test/resources/extras/synapse_sample_432_altered.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample432.xml", 
      "from": "java/modules/integration/src/test/resources/sample432.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-31,7 +31,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     public void testCallOutSecurity() {\n", 
            "-        log.info(\"Running test: Callout Mediator with security\");\n", 
            "+        log.info(\"Running test: Callout mediator with security\");\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "         StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         result = client.requestStandardQuote(null, trpUrl, null, \"IBM\" ,null);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample431.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample431.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,43", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework.tests.advanced;\n", 
            "+\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample432 extends SynapseTestCase {\n", 
            "+\n", 
            "+    SampleClientResult result;\n", 
            "+\n", 
            "+    public Sample432() {\n", 
            "+        super(432);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testCallOutSecurityWithDifferentPoliciesForInboundAndOutbound() {\n", 
            "+        log.info(\"Running test: Callout mediator security sample with different policies \" +\n", 
            "+                \"for inbound and outbound flows\");\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "+        result = client.requestStandardQuote(null, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample432.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample432.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-233,6 +233,7", 
          "lines": [
            "         sampleClassRepo.put(\"420\", Sample420.class);\n", 
            "         sampleClassRepo.put(\"430\", Sample430.class);\n", 
            "         sampleClassRepo.put(\"431\", Sample431.class);\n", 
            "+        sampleClassRepo.put(\"432\", Sample432.class);\n", 
            "         sampleClassRepo.put(\"450\", Sample450.class);\n", 
            "         sampleClassRepo.put(\"451\", Sample451.class);\n", 
            "         sampleClassRepo.put(\"452\", Sample452.class);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-75,5 +75,20", 
          "lines": [
            "         assertTrue(serialization(inputXml, calloutMediatorFactory, calloutMediatorSerializer));\n", 
            "         assertTrue(serialization(inputXml, calloutMediatorSerializer));\n", 
            "     }\n", 
            "+\n", 
            "+    public void testCalloutMediatorSerializationScenarioFour() {\n", 
            "+            String inputXml = \"<callout xmlns=\\\"http://ws.apache.org/ns/synapse\\\" \" +\n", 
            "+                    \"serviceURL=\\\"http://localhost:9000/soap/SimpleStockQuoteService\\\" \" +\n", 
            "+                    \"action=\\\"urn:getQuote\\\"><source xmlns:s11=\\\"http://schemas.xmlsoap.org/\" +\n", 
            "+                    \"soap/envelope/\\\" xmlns:s12=\\\"http://www.w3.org/2003/05/soap-envelope\\\" \" +\n", 
            "+                    \"xpath=\\\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\\\"/>\" +\n", 
            "+                    \"<target xmlns:s11=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" \" +\n", 
            "+                    \"xmlns:s12=\\\"http://www.w3.org/2003/05/soap-envelope\\\" xpath=\\\"s11:Body/\" +\n", 
            "+                    \"child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\\\"/>\" +\n", 
            "+                    \"<enableSec outboundPolicy=\\\"out_sec_policy\\\" inboundPolicy=\\\"in_sec_policy\\\"/></callout>\";\n", 
            "+            assertTrue(serialization(inputXml, calloutMediatorFactory, calloutMediatorSerializer));\n", 
            "+            assertTrue(serialization(inputXml, calloutMediatorSerializer));\n", 
            "+    }\n", 
            "+\n", 
            " }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/config/xml/CalloutMediatorSerializationTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/config/xml/CalloutMediatorSerializationTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-38,6 +38,7", 
          "lines": [
            "  *      &lt;configuration [axis2xml=\"string\"] [repository=\"string\"]/&gt;?\n", 
            "  *      &lt;source xpath=\"expression\" | key=\"string\"&gt;\n", 
            "  *      &lt;target xpath=\"expression\" | key=\"string\"/&gt;\n", 
            "+ *      &lt;enableSec policy=\"string\" | outboundPolicy=\"String\" | inboundPolicy=\"String\" /&gt;?\n", 
            "  *      &lt;enableSec policy=\"string\" /&gt;?\n", 
            "  * &lt;/callout&gt;\n", 
            "  * </pre>\n"
          ]
        }, 
        {
          "locn": "-60,7 +61,11", 
          "lines": [
            "     private static final QName Q_SEC\n", 
            "                 = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, \"enableSec\");\n", 
            "     private static final QName ATT_POLICY\n", 
            "-                = new QName(XMLConfigConstants.NULL_NAMESPACE, \"policy\");\n", 
            "+            = new QName(XMLConfigConstants.NULL_NAMESPACE, \"policy\");\n", 
            "+    private static final QName ATT_OUTBOUND_SEC_POLICY\n", 
            "+                = new QName(XMLConfigConstants.NULL_NAMESPACE, \"outboundPolicy\");\n", 
            "+    private static final QName ATT_INBOUND_SEC_POLICY\n", 
            "+                = new QName(XMLConfigConstants.NULL_NAMESPACE, \"inboundPolicy\");\n", 
            " \n", 
            "     public Mediator createSpecificMediator(OMElement elem, Properties properties) {\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-152,11 +157,21", 
          "lines": [
            "         }\n", 
            " \n", 
            "         if (wsSec != null) {\n", 
            "+            callout.setSecurityOn(true);\n", 
            "             OMAttribute policyKey = wsSec.getAttribute(ATT_POLICY);\n", 
            "+            OMAttribute outboundPolicyKey = wsSec.getAttribute(ATT_OUTBOUND_SEC_POLICY);\n", 
            "+            OMAttribute inboundPolicyKey = wsSec.getAttribute(ATT_INBOUND_SEC_POLICY);\n", 
            "             if (policyKey != null) {\n", 
            "-                callout.setSecurityOn(true);\n", 
            "                 callout.setWsSecPolicyKey(policyKey.getAttributeValue());\n", 
            "+            } else if (outboundPolicyKey != null || inboundPolicyKey != null) {\n", 
            "+                if (outboundPolicyKey != null) {\n", 
            "+                    callout.setOutboundWsSecPolicyKey(outboundPolicyKey.getAttributeValue());\n", 
            "+                }\n", 
            "+                if (inboundPolicyKey != null) {\n", 
            "+                    callout.setInboundWsSecPolicyKey(inboundPolicyKey.getAttributeValue());\n", 
            "+                }\n", 
            "             } else {\n", 
            "+                callout.setSecurityOn(false);\n", 
            "                 handleException(\"A policy key is required to enable security\");\n", 
            "             }\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-29,7 +29,7", 
          "lines": [
            "  *      &lt;configuration [axis2xml=\"string\"] [repository=\"string\"]/&gt;?\n", 
            "  *      &lt;source xpath=\"expression\" | key=\"string\"&gt;\n", 
            "  *      &lt;target xpath=\"expression\" | key=\"string\"/&gt;\n", 
            "- *      &lt;enableSec policy=\"string\"/&gt;?\n", 
            "+ *      &lt;enableSec policy=\"string\" | outboundPolicy=\"String\" | inboundPolicy=\"String\" /&gt;?\n", 
            "  * &lt;/callout&gt;\n", 
            "  * </pre>\n", 
            "  */\n"
          ]
        }, 
        {
          "locn": "-84,10 +84,23", 
          "lines": [
            "                 \"key\", nullNS, mediator.getTargetKey()));\n", 
            "         }\n", 
            " \n", 
            "-        if (mediator.isSecurityOn() && mediator.getWsSecPolicyKey() != null) {\n", 
            "-            OMElement security = fac.createOMElement(\"enableSec\", synNS, callout);\n", 
            "-            security.addAttribute(fac.createOMAttribute(\n", 
            "-                    \"policy\", nullNS, mediator.getWsSecPolicyKey()));\n", 
            "+        if (mediator.isSecurityOn()) {\n", 
            "+            OMElement security = fac.createOMElement(\"enableSec\", synNS);\n", 
            "+            if (mediator.getWsSecPolicyKey() != null) {\n", 
            "+                security.addAttribute(fac.createOMAttribute(\n", 
            "+                        \"policy\", nullNS, mediator.getWsSecPolicyKey()));\n", 
            "+                callout.addChild(security);\n", 
            "+            } else if (mediator.getOutboundWsSecPolicyKey() != null || mediator.getInboundWsSecPolicyKey() != null) {\n", 
            "+                if (mediator.getOutboundWsSecPolicyKey() != null) {\n", 
            "+                    security.addAttribute(fac.createOMAttribute(\n", 
            "+                            \"outboundPolicy\", nullNS, mediator.getOutboundWsSecPolicyKey()));\n", 
            "+                }\n", 
            "+                if (mediator.getInboundWsSecPolicyKey() != null) {\n", 
            "+                    security.addAttribute(fac.createOMAttribute(\n", 
            "+                            \"inboundPolicy\", nullNS, mediator.getInboundWsSecPolicyKey()));\n", 
            "+                }\n", 
            "+                callout.addChild(security);\n", 
            "+            }\n", 
            "         }\n", 
            " \n", 
            "         return callout;\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorSerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/CalloutMediatorSerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-48,7 +48,7", 
          "lines": [
            "  *      <configuration [axis2xml=\"string\"] [repository=\"string\"]/>?\n", 
            "  *      <source xpath=\"expression\" | key=\"string\"> <!-- key can be a MC property or entry key -->\n", 
            "  *      <target xpath=\"expression\" | key=\"string\"/>\n", 
            "- *      <enableSec policy=\"string\"/>?\n", 
            "+ *      <enableSec policy=\"string\" | outboundPolicy=\"String\" | inboundPolicy=\"String\"/>?\n", 
            "  * </callout>\n", 
            "  */\n", 
            " public class CalloutMediator extends AbstractMediator implements ManagedLifecycle {\n"
          ]
        }, 
        {
          "locn": "-67,6 +67,8", 
          "lines": [
            "     public final static String DEFAULT_AXIS2_XML = \"./samples/axis2Client/client_repo/conf/axis2.xml\";\n", 
            "     private boolean securityOn = false;  //Should messages be sent using WS-Security?\n", 
            "     private String wsSecPolicyKey = null;\n", 
            "+    private String inboundWsSecPolicyKey = null;\n", 
            "+    private String outboundWsSecPolicyKey = null;\n", 
            " \n", 
            "     public boolean mediate(MessageContext synCtx) {\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-92,11 +94,19", 
          "lines": [
            "                     options.setProperty(\n", 
            "                             SynapseConstants.RAMPART_POLICY,\n", 
            "                             MessageHelper.getPolicy(synCtx, wsSecPolicyKey));\n", 
            "-                    sc.engageModule(SynapseConstants.SECURITY_MODULE_NAME);\n", 
            "                 } else {\n", 
            "-                    handleException(\"Security policy not found\", synCtx);\n", 
            "+                    if (inboundWsSecPolicyKey != null) {\n", 
            "+                        options.setProperty(SynapseConstants.RAMPART_IN_POLICY,\n", 
            "+                                            MessageHelper.getPolicy(\n", 
            "+                                                    synCtx, inboundWsSecPolicyKey));\n", 
            "+                    }\n", 
            "+                    if (outboundWsSecPolicyKey != null) {\n", 
            "+                        options.setProperty(SynapseConstants.RAMPART_OUT_POLICY,\n", 
            "+                                            MessageHelper.getPolicy(\n", 
            "+                                                    synCtx, outboundWsSecPolicyKey));\n", 
            "+                    }\n", 
            "                 }\n", 
            "-\n", 
            "+                sc.engageModule(SynapseConstants.SECURITY_MODULE_NAME);\n", 
            "             }\n", 
            " \n", 
            "             options.setTo(new EndpointReference(serviceURL));\n"
          ]
        }, 
        {
          "locn": "-375,4 +385,45", 
          "lines": [
            "     public void setWsSecPolicyKey(String wsSecPolicyKey) {\n", 
            "         this.wsSecPolicyKey = wsSecPolicyKey;\n", 
            "     }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Get the outbound security policy key. This is used when we specify different policies for\n", 
            "+     * inbound and outbound.\n", 
            "+     *\n", 
            "+     * @return outbound security policy key\n", 
            "+     */\n", 
            "+    public String getOutboundWsSecPolicyKey() {\n", 
            "+        return outboundWsSecPolicyKey;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Set the outbound security policy key.This is used when we specify different policies for\n", 
            "+     * inbound and outbound.\n", 
            "+     *\n", 
            "+     * @param outboundWsSecPolicyKey outbound security policy key.\n", 
            "+     */\n", 
            "+    public void setOutboundWsSecPolicyKey(String outboundWsSecPolicyKey) {\n", 
            "+        this.outboundWsSecPolicyKey = outboundWsSecPolicyKey;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Get the inbound security policy key. This is used when we specify different policies for\n", 
            "+     * inbound and outbound.\n", 
            "+     *\n", 
            "+     * @return inbound security policy key\n", 
            "+     */\n", 
            "+    public String getInboundWsSecPolicyKey() {\n", 
            "+        return inboundWsSecPolicyKey;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Set the inbound security policy key. This is used when we specify different policies for\n", 
            "+     * inbound and outbound.\n", 
            "+     *\n", 
            "+     * @param inboundWsSecPolicyKey inbound security policy key.\n", 
            "+     */\n", 
            "+    public void setInboundWsSecPolicyKey(String inboundWsSecPolicyKey) {\n", 
            "+        this.inboundWsSecPolicyKey = inboundWsSecPolicyKey;\n", 
            "+    }\n", 
            "+\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/CalloutMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/builtin/CalloutMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-199,6 +199,7", 
          "lines": [
            "                     <ul>\n", 
            "                         <li><a href=\"samples/sample430.html\">Sample 430: Callout mediator for synchronous web service invocations</a></li>\n", 
            "                         <li><a href=\"samples/sample431.html\">Sample 431: Callout Mediator with WS-Security for Outgoing Messages</a></li>\n", 
            "+                        <li><a href=\"samples/sample432.html\">Sample 432: Callout Mediator - Invoke a secured service which has different policies for inbound and outbound flows</a></li>\n", 
            "                     </ul>\n", 
            "                 </p>\n", 
            "                 <h4>URL Rewrite Mediator</h4>\n"
          ]
        }
      ], 
      "to": "java/modules/documentation/src/site/xdoc/userguide/samples.xml", 
      "from": "java/modules/documentation/src/site/xdoc/userguide/samples.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,93", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<document>\n", 
            "+    <properties>\n", 
            "+        <title>Apache Synapse - Sample 432</title>\n", 
            "+    </properties>\n", 
            "+    <body>\n", 
            "+        <section name=\"Sample 432: Callout Mediator - Invoke a secured service which has different policies for inbound and outbound flows\">\n", 
            "+            <div class=\"xmlConf\">&lt;definitions xmlns=\"http://ws.apache.org/ns/synapse\"&gt;\n", 
            "+\n", 
            "+    &lt;localEntry key=\"sec_policy_inbound\" src=\"file:repository/conf/sample/resources/policy/policy_3.xml\"/&gt;\n", 
            "+    &lt;localEntry key=\"sec_policy_outbound\" src=\"file:repository/conf/sample/resources/policy/policy_3.xml\"/&gt;\n", 
            "+\n", 
            "+    &lt;sequence name=\"main\"&gt;\n", 
            "+        &lt;callout serviceURL=\"http://localhost:9000/services/SecureStockQuoteService\"\n", 
            "+                 action=\"urn:getQuote\"&gt;\n", 
            "+            &lt;source xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\"\n", 
            "+                    xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+                    xpath=\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\"/&gt;\n", 
            "+            &lt;target xmlns:s11=\"http://schemas.xmlsoap.org/soap/envelope/\"\n", 
            "+                    xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+                    xpath=\"s11:Body/child::*[fn:position()=1] | s12:Body/child::*[fn:position()=1]\"/&gt;\n", 
            "+            &lt;enableSec outboundPolicy=\"sec_policy_outbound\" inboundPolicy=\"sec_policy_inbound\"/&gt;\n", 
            "+        &lt;/callout&gt;\n", 
            "+        &lt;property name=\"RESPONSE\" value=\"true\"/&gt;\n", 
            "+        &lt;header name=\"To\" action=\"remove\"/&gt;\n", 
            "+        &lt;send/&gt;\n", 
            "+        &lt;drop/&gt;\n", 
            "+    &lt;/sequence&gt;\n", 
            "+\n", 
            "+&lt;/definitions&gt;</div>\n", 
            "+            <subsection name=\"Objective\">\n", 
            "+                <p>\n", 
            "+                    Demonstrate the usage of the Callout mediator for making synchronous (blocking)\n", 
            "+                    Web service calls to invoke secured services, which has different security policies\n", 
            "+                   for inbound and outbound flows.\n", 
            "+\n", 
            "+                </p>\n", 
            "+            </subsection>\n", 
            "+            <subsection name=\"Pre-requisites\">\n", 
            "+                <p>\n", 
            "+                    <ul>\n", 
            "+                        <li>\n", 
            "+                            Download and install the Java Cryptography Extension (JCE) unlimited\n", 
            "+                            strength policy files for your JDK\n", 
            "+                        </li>\n", 
            "+                        <li>\n", 
            "+                            Deploy the SecureStockQuoteService in the sample Axis2 server and start Axis2\n", 
            "+                        </li>\n", 
            "+                        <li>\n", 
            "+                            Start Synapse using the configuration numbered 432 (repository/conf/sample/synapse_sample_432.xml)\n", 
            "+                            <div class=\"command\">\n", 
            "+                                Unix/Linux: sh synapse.sh -sample 432<br/>\n", 
            "+                                Windows: synapse.bat -sample 432\n", 
            "+                            </div>\n", 
            "+                        </li>\n", 
            "+                    </ul>\n", 
            "+                </p>\n", 
            "+            </subsection>\n", 
            "+            <subsection name=\"Executing the Client\">\n", 
            "+                <p>\n", 
            "+                    In this sample, the Callout mediator is configured with different security policies\n", 
            "+                    for inbound and outbound message flows. Messages sent out from synapse is encrypted\n", 
            "+                    using the outboundPolicy and response received from the secured service is decrypted\n", 
            "+                    using the inboundPolicy.\n", 
            "+                </p>\n", 
            "+                <p>\n", 
            "+                    Invoke the client as follows.\n", 
            "+                </p>\n", 
            "+                <div class=\"command\">ant stockquote -Dtrpurl=http://localhost:8280/</div>\n", 
            "+            </subsection>\n", 
            "+        </section>\n", 
            "+        <p><a href=\"../samples.html\">Back to Catalog</a></p>        \n", 
            "+    </body>\n", 
            "+</document>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/documentation/src/site/xdoc/userguide/samples/sample432.xml", 
      "from": "java/modules/documentation/src/site/xdoc/userguide/samples/sample432.xml"
    }
  ], 
  "id": "1511170"
}