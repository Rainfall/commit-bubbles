{
  "when": "2016-05-28T14:43:42-04:00", 
  "message": "Use the proper Axiom API to resolve QNames.", 
  "who": "veithen", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-31,7 +31,7", 
          "lines": [
            " \n", 
            "     public void testNamespaceUnqualifiedScenarioOne() {\n", 
            "         try {\n", 
            "-            String inputXml = \"<header xmlns=\\\"http://ws.apache.org/ns/synapse\\\" name=\\\"MyHeader\\\" value=\\\"MyValue\\\"/>\";\n", 
            "+            String inputXml = \"<s:header xmlns:s=\\\"http://ws.apache.org/ns/synapse\\\" name=\\\"MyHeader\\\" value=\\\"MyValue\\\"/>\";\n", 
            "             HeaderMediatorFactory fac = new HeaderMediatorFactory();\n", 
            "             fac.createMediator(AXIOMUtil.stringToOM(inputXml), new Properties());\n", 
            "             fail(\"HeaderMediator created with namespace unqualified SOAP header\");\n"
          ]
        }, 
        {
          "locn": "-42,7 +42,7", 
          "lines": [
            "         }\n", 
            " \n", 
            "         try {\n", 
            "-            String inputXml = \"<header xmlns=\\\"http://ws.apache.org/ns/synapse\\\" name=\\\"MyHeader\\\" action=\\\"remove\\\"/>\";\n", 
            "+            String inputXml = \"<s:header xmlns:s=\\\"http://ws.apache.org/ns/synapse\\\" name=\\\"MyHeader\\\" action=\\\"remove\\\"/>\";\n", 
            "             HeaderMediatorFactory fac = new HeaderMediatorFactory();\n", 
            "             fac.createMediator(AXIOMUtil.stringToOM(inputXml), new Properties());\n", 
            "             fail(\"HeaderMediator created with namespace unqualified SOAP header\");\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/config/xml/HeaderMediatorConfigurationTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/config/xml/HeaderMediatorConfigurationTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-139,20 +139,14", 
          "lines": [
            " \n", 
            "     private void setSOAPHeader(HeaderMediator headerMediator, OMElement elem, OMAttribute name) {\n", 
            "         String nameAtt = name.getAttributeValue();\n", 
            "-        int colonPos = nameAtt.indexOf(\":\");\n", 
            "-        if (colonPos != -1) {\n", 
            "-            // has a NS prefix.. find it and the NS it maps into\n", 
            "-            String prefix = nameAtt.substring(0, colonPos);\n", 
            "-            String namespaceURI = OMElementUtils.getNameSpaceWithPrefix(prefix, elem);\n", 
            "-            if (namespaceURI == null) {\n", 
            "-                handleException(\"Invalid namespace prefix '\" + prefix + \"' in name attribute\");\n", 
            "-            } else {\n", 
            "-                headerMediator.setQName(new QName(namespaceURI, nameAtt.substring(colonPos+1),\n", 
            "-                                                  prefix));\n", 
            "-            }\n", 
            "+        QName qname = elem.resolveQName(nameAtt);\n", 
            "+        if (qname == null) {\n", 
            "+            handleException(\"Invalid QName '\" + nameAtt + \"' in name attribute\");\n", 
            "+        } else if (qname.getNamespaceURI().isEmpty()) {\n", 
            "+            handleException(\"Invalid SOAP header: \" + nameAtt + \" specified at the \" +\n", 
            "+                    \"header mediator. All SOAP headers must be namespace qualified.\");\n", 
            "         } else {\n", 
            "-            handleException(\"Invalid SOAP header: \" + nameAtt + \" specified at the \" +\n", 
            "-                            \"header mediator. All SOAP headers must be namespace qualified.\");\n", 
            "+            headerMediator.setQName(qname);\n", 
            "         }\n", 
            "     }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/HeaderMediatorFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/HeaderMediatorFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-19,11 +19,9", 
          "lines": [
            " \n", 
            " package org.apache.synapse.config.xml;\n", 
            " \n", 
            "-import org.apache.axiom.om.OMContainer;\n", 
            " import org.apache.axiom.om.OMElement;\n", 
            " import org.apache.axiom.om.OMNamespace;\n", 
            " import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.synapse.SynapseException;\n", 
            " import org.jaxen.JaxenException;\n", 
            " import org.jaxen.XPath;\n"
          ]
        }, 
        {
          "locn": "-34,40 +32,7", 
          "lines": [
            "  * Holds Axiom utility methods used by Synapse\n", 
            "  */\n", 
            " public class OMElementUtils {\n", 
            "-\n", 
            "-    private static final Log log = LogFactory.getLog(OMElementUtils.class);\n", 
            "-\n", 
            "     /**\n", 
            "-     * Return the namespace with the given prefix, using the given element\n", 
            "-     * @param prefix the prefix looked up\n", 
            "-     * @param elem the source element to use\n", 
            "-     * @return the namespace which maps to the prefix or null\n", 
            "-     */\n", 
            "-    public static String getNameSpaceWithPrefix(String prefix, OMElement elem) {\n", 
            "-        if (prefix == null || elem == null) {\n", 
            "-            log.warn(\"Searching for null NS prefix and/or using null OMElement\");\n", 
            "-            return null;\n", 
            "-        }\n", 
            "-        \n", 
            "-        OMElement currentElem = elem;\n", 
            "-        while (true) {\n", 
            "-            Iterator iter = currentElem.getAllDeclaredNamespaces();\n", 
            "-            while (iter.hasNext()) {\n", 
            "-                OMNamespace ns = (OMNamespace) iter.next();\n", 
            "-                if (prefix.equals(ns.getPrefix())) {\n", 
            "-                    return ns.getNamespaceURI();     \n", 
            "-                }\n", 
            "-            }\n", 
            "-            OMContainer parent = currentElem.getParent();\n", 
            "-            if (parent != null && parent instanceof OMElement) {\n", 
            "-                currentElem = (OMElement)parent;\n", 
            "-            } else {\n", 
            "-                return null;\n", 
            "-            }\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "      * Add the namespace declarations of a given {@link OMElement} to the namespace\n", 
            "      * context of an XPath expression. Typically this method is used with an XPath\n", 
            "      * expression appearing in an attribute of the given element.\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/OMElementUtils.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/OMElementUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-106,19 +106,14", 
          "lines": [
            " \n", 
            "             if (value != null) {\n", 
            "                 String strValue = value.getAttributeValue();\n", 
            "-                String prefix = null;\n", 
            "-                String name = null;\n", 
            "-                if (strValue.indexOf(\":\") != -1) {\n", 
            "-                    prefix = strValue.substring(0, strValue.indexOf(\":\"));\n", 
            "-                    name = strValue.substring(strValue.indexOf(\":\")+1);\n", 
            "+                QName qname = code.resolveQName(strValue);\n", 
            "+                if (qname == null) {\n", 
            "+                    handleException(\"Invalid QName '\" + strValue + \"' in code attribute\");\n", 
            "+                } else if (qname.getNamespaceURI().isEmpty()) {\n", 
            "+                    handleException(\"A QName is expected for fault code as prefix:name\");\n", 
            "                 } else {\n", 
            "-                    handleException(\"A QName is expected for fault code as prefix:name\");\n", 
            "+                    faultMediator.setFaultCodeValue(qname);\n", 
            "                 }\n", 
            "-                String namespaceURI = OMElementUtils.getNameSpaceWithPrefix(prefix, code);\n", 
            "-                if (namespaceURI == null) {\n", 
            "-                    handleException(\"Invalid namespace prefix '\" + prefix + \"' in code attribute\");\n", 
            "-                }\n", 
            "-                faultMediator.setFaultCodeValue(new QName(namespaceURI, name, prefix));\n", 
            "             } else if (expression != null) {\n", 
            "                 try {\n", 
            "                     faultMediator.setFaultCodeExpr(\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/FaultMediatorFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/FaultMediatorFactory.java"
    }
  ], 
  "id": "1745919"
}