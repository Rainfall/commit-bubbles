{
  "when": "2013-08-05T21:04:23-04:00", 
  "message": "Adding test cases for default endpoint serialization and message store observers", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-107,6 +107,22", 
          "lines": [
            "         msg = store.peek();\n", 
            "         assertEquals(\"BAR\", msg.getMessageID());\n", 
            "     }\n", 
            "+\n", 
            "+    public void testStoreObserver() throws Exception {\n", 
            "+        MessageStore store = new InMemoryMessageStore();\n", 
            "+        TestObserver observer = new TestObserver();\n", 
            "+        store.registerObserver(observer);\n", 
            "+\n", 
            "+        for (int i = 0; i < 100; i++) {\n", 
            "+            store.offer(createMessageContext(\"ID\" + i));\n", 
            "+        }\n", 
            "+        assertEquals(100, observer.getCount());\n", 
            "+\n", 
            "+        for (int i = 0; i < 100; i++) {\n", 
            "+            store.poll();\n", 
            "+        }\n", 
            "+        assertEquals(0, observer.getCount());\n", 
            "+    }\n", 
            "     \n", 
            "     private MessageContext createMessageContext(String identifier) throws Exception {\n", 
            "         MessageContext msg = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n"
          ]
        }, 
        {
          "locn": "-119,4 +135,20", 
          "lines": [
            "             store.offer(createMessageContext(\"ID\" + i));\n", 
            "         }\n", 
            "     }\n", 
            "+\n", 
            "+    private static class TestObserver implements MessageStoreObserver {\n", 
            "+        int counter = 0;\n", 
            "+\n", 
            "+        public void messageAdded(String messageId) {\n", 
            "+            counter++;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void messageRemoved(String messageId) {\n", 
            "+            counter--;\n", 
            "+        }\n", 
            "+\n", 
            "+        public int getCount() {\n", 
            "+            return counter;\n", 
            "+        }\n", 
            "+    }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/message/store/InMemoryMessageStoreTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/message/store/InMemoryMessageStoreTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,94", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.config.xml.endpoints;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.synapse.config.xml.AbstractTestCase;\n", 
            "+import org.apache.synapse.endpoints.DefaultEndpoint;\n", 
            "+\n", 
            "+public class DefaultEndpointSerializationTest extends AbstractTestCase {\n", 
            "+\n", 
            "+    public void testDefaultEndpointScenarioOne() throws Exception {\n", 
            "+        String inputXML = \"<endpoint name=\\\"ep\\\" xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\" +\n", 
            "+                \"<default/>\" +\n", 
            "+                \"</endpoint>\" ;\n", 
            "+\n", 
            "+        OMElement inputElement = createOMElement(inputXML);\n", 
            "+        DefaultEndpoint endpoint = (DefaultEndpoint) DefaultEndpointFactory.getEndpointFromElement(\n", 
            "+                inputElement,true,null);\n", 
            "+\n", 
            "+        OMElement serializedOut = DefaultEndpointSerializer.getElementFromEndpoint(endpoint);\n", 
            "+        assertTrue(compare(serializedOut,inputElement));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testDefaultEndpointScenarioTwo() throws Exception {\n", 
            "+        String inputXML = \"<endpoint name=\\\"ep\\\" xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\" +\n", 
            "+                \"<default format=\\\"soap11\\\"/>\" +\n", 
            "+                \"</endpoint>\" ;\n", 
            "+\n", 
            "+        OMElement inputElement = createOMElement(inputXML);\n", 
            "+        DefaultEndpoint endpoint = (DefaultEndpoint) DefaultEndpointFactory.getEndpointFromElement(\n", 
            "+                inputElement,true,null);\n", 
            "+\n", 
            "+        OMElement serializedOut = DefaultEndpointSerializer.getElementFromEndpoint(endpoint);\n", 
            "+        assertTrue(compare(serializedOut,inputElement));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testDefaultEndpointScenarioThree() throws Exception {\n", 
            "+        String inputXML = \"<endpoint name=\\\"ep\\\" xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\" +\n", 
            "+                \"<default><enableSec policy=\\\"foo\\\"/></default>\" +\n", 
            "+                \"</endpoint>\" ;\n", 
            "+\n", 
            "+        OMElement inputElement = createOMElement(inputXML);\n", 
            "+        DefaultEndpoint endpoint = (DefaultEndpoint) DefaultEndpointFactory.getEndpointFromElement(\n", 
            "+                inputElement,true,null);\n", 
            "+\n", 
            "+        OMElement serializedOut = DefaultEndpointSerializer.getElementFromEndpoint(endpoint);\n", 
            "+        assertTrue(compare(serializedOut,inputElement));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testDefaultEndpointScenarioFour() throws Exception {\n", 
            "+        String inputXML = \"<endpoint name=\\\"ep\\\" xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\" +\n", 
            "+                \"<default><timeout><duration>10000</duration></timeout></default>\" +\n", 
            "+                \"</endpoint>\" ;\n", 
            "+\n", 
            "+        OMElement inputElement = createOMElement(inputXML);\n", 
            "+        DefaultEndpoint endpoint = (DefaultEndpoint) DefaultEndpointFactory.getEndpointFromElement(\n", 
            "+                inputElement,true,null);\n", 
            "+\n", 
            "+        OMElement serializedOut = DefaultEndpointSerializer.getElementFromEndpoint(endpoint);\n", 
            "+        assertTrue(compare(serializedOut,inputElement));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testDefaultEndpointScenarioFive() throws Exception {\n", 
            "+        String inputXML = \"<endpoint name=\\\"ep\\\" xmlns=\\\"http://ws.apache.org/ns/synapse\\\">\" +\n", 
            "+                \"<default><timeout><duration>10000</duration></timeout>\" +\n", 
            "+                \"<suspendOnFailure><initialDuration>60000</initialDuration>\" +\n", 
            "+                \"<progressionFactor>1.0</progressionFactor></suspendOnFailure></default>\" +\n", 
            "+                \"</endpoint>\" ;\n", 
            "+\n", 
            "+        OMElement inputElement = createOMElement(inputXML);\n", 
            "+        DefaultEndpoint endpoint = (DefaultEndpoint) DefaultEndpointFactory.getEndpointFromElement(\n", 
            "+                inputElement,true,null);\n", 
            "+\n", 
            "+        OMElement serializedOut = DefaultEndpointSerializer.getElementFromEndpoint(endpoint);\n", 
            "+        assertTrue(compare(serializedOut, inputElement));\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/config/xml/endpoints/DefaultEndpointSerializationTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/config/xml/endpoints/DefaultEndpointSerializationTest.java"
    }
  ], 
  "id": "1510835"
}