{
  "when": "2011-12-14T08:24:09-05:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-24,6 +24,7", 
          "lines": [
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.synapse.samples.framework.tests.endpoint.*;\n", 
            " import org.apache.synapse.samples.framework.tests.message.*;\n", 
            "+import org.apache.synapse.samples.framework.tests.proxy.*;\n", 
            " import org.apache.synapse.samples.framework.tests.qos.Sample100;\n", 
            " import org.apache.synapse.samples.framework.tests.qos.Sample101;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-181,7 +182,7", 
          "lines": [
            "         sampleClassRepo.put(\"54\", Sample54.class);\n", 
            "         sampleClassRepo.put(\"55\", Sample55.class);\n", 
            "         sampleClassRepo.put(\"56\", Sample56.class);\n", 
            "-        //sampleClassRepo.put(\"57\", Sample57.class);  //intermittently fail\n", 
            "+        //sampleClassRepo.put(\"57\", Sample57.class);  // intermittently fail\n", 
            "         sampleClassRepo.put(\"58\", Sample58.class);\n", 
            "         sampleClassRepo.put(\"59\", Sample59.class);\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-188,5 +189,15", 
          "lines": [
            "         //QoS\n", 
            "         sampleClassRepo.put(\"100\", Sample100.class);\n", 
            "         sampleClassRepo.put(\"101\", Sample101.class);\n", 
            "+\n", 
            "+        //Proxy Service\n", 
            "+        sampleClassRepo.put(\"150\", Sample150.class);\n", 
            "+        sampleClassRepo.put(\"151\", Sample151.class);\n", 
            "+        sampleClassRepo.put(\"152\", Sample152.class);\n", 
            "+        //sampleClassRepo.put(\"153\", Sample153.class); // unable to load the JKS files\n", 
            "+        sampleClassRepo.put(\"154\", Sample154.class);\n", 
            "+        sampleClassRepo.put(\"155\", Sample155.class);\n", 
            "+        sampleClassRepo.put(\"156\", Sample156.class);\n", 
            "+        sampleClassRepo.put(\"157\", Sample157.class);\n", 
            "     }\n", 
            " }\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,46", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.proxy;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample150 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample150.class);\n", 
            "+\n", 
            "+    private StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample150() {\n", 
            "+        super(150);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testBasicProxy() {\n", 
            "+        String addUrl = \"http://localhost:8280/services/StockQuoteProxy\";\n", 
            "+        log.info(\"Running test: Introduction to proxy services\");\n", 
            "+        SampleClientResult result = client.requestStandardQuote(addUrl, null, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample150.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample150.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,50", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.proxy;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample151 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample151.class);\n", 
            "+\n", 
            "+    private StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample151() {\n", 
            "+        super(151);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testCustomSequencesEndpointsWithProxy() {\n", 
            "+        String addUrl = \"http://localhost:8280/services/StockQuoteProxy1\";\n", 
            "+        String addUrl2 = \"http://localhost:8280/services/StockQuoteProxy2\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Custom sequences and endpoints with proxy services\");\n", 
            "+        SampleClientResult result1 = client.requestStandardQuote(addUrl, null, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result1.responseReceived());\n", 
            "+        SampleClientResult result2 = client.requestStandardQuote(addUrl2, null, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result2.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample151.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample151.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,50", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.proxy;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample152 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample152.class);\n", 
            "+\n", 
            "+    private StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample152() {\n", 
            "+        super(152);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testTransportAndFormatSwitching() {\n", 
            "+        String url2 = \"https://localhost:8243/services/StockQuoteProxy\";\n", 
            "+        System.setProperty(\"javax.net.ssl.trustStore\", System.getProperty(\"user.dir\") +\n", 
            "+                \"/modules/integration/src/test/resources/trust.jks\");\n", 
            "+\n", 
            "+        log.info(\"Running test: Switching transports and message format from SOAP to REST/POX\");\n", 
            "+\n", 
            "+        SampleClientResult result2 = client.requestStandardQuote(null, url2, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not a response with https \", result2.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample152.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample152.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,48", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.proxy;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample153 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample153.class);\n", 
            "+\n", 
            "+    private StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample153() {\n", 
            "+        super(153);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testsRoutingWithoutProcessingSecurityHeaders() {\n", 
            "+        String url = \"http://localhost:8280/services/StockQuoteProxy\";\n", 
            "+        String policy = \"./repository/conf/sample/resources/policy/client_policy_3.xml\";\n", 
            "+        log.info(\"Running test: Routing the messages arrived to a proxy service without \" +\n", 
            "+                \"processing the security headers\");\n", 
            "+        SampleClientResult  result = client.requestStandardQuote(null, url, null, \"IBM\", policy);\n", 
            "+        assertTrue(\"Client did not a response with https \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample153.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample153.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,48", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.proxy;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+import java.util.concurrent.CountDownLatch;\n", 
            "+\n", 
            "+public class Sample154 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample154.class);\n", 
            "+\n", 
            "+    private StockQuoteSampleClient client;\n", 
            "+    CountDownLatch latch;\n", 
            "+\n", 
            "+    public Sample154() {\n", 
            "+        super(154);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testSessionFullLB() {\n", 
            "+        String trpUrl = \"http://localhost:8280/services/LBProxy\";\n", 
            "+        log.info(\"Running test: Load Balancing with Proxy Services \");\n", 
            "+        SampleClientResult result = client.statefulClient(null, trpUrl, 100);\n", 
            "+        assertTrue(\"Client did not run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample154.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample154.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,48", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.proxy;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample155 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample155.class);\n", 
            "+\n", 
            "+    private StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample155() {\n", 
            "+        super(155);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testDualQuote() {\n", 
            "+        String addUrl = \"http://localhost:8280/services/StockQuoteProxy\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Dual channel invocation on both client side and server \" +\n", 
            "+                \"side of Synapse with Proxy Services\");\n", 
            "+        SampleClientResult result = client.requestDualQuote(addUrl, null, null, \"IBM\");\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample155.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample155.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,46", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.proxy;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample156 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample156.class);\n", 
            "+\n", 
            "+    private StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample156() {\n", 
            "+        super(156);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testServiceIntegration() {\n", 
            "+        String addUrl = \"http://localhost:8280/services/StockQuoteProxy\";\n", 
            "+        log.info(\"Running test: Service Integration with specifying the receiving sequence\");\n", 
            "+        SampleClientResult result = client.requestStandardQuote(addUrl, null, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample156.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample156.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,151", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.proxy;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.HttpEntity;\n", 
            "+import org.apache.http.HttpHeaders;\n", 
            "+import org.apache.http.HttpResponse;\n", 
            "+import org.apache.http.client.HttpClient;\n", 
            "+import org.apache.http.client.methods.HttpPost;\n", 
            "+import org.apache.http.entity.StringEntity;\n", 
            "+import org.apache.http.impl.client.DefaultHttpClient;\n", 
            "+import org.apache.http.protocol.HTTP;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+\n", 
            "+import java.io.BufferedReader;\n", 
            "+import java.io.InputStreamReader;\n", 
            "+\n", 
            "+public class Sample157 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample157.class);\n", 
            "+\n", 
            "+    private String requestXml;\n", 
            "+    private HttpClient httpclient;\n", 
            "+\n", 
            "+    public Sample157() {\n", 
            "+        super(157);\n", 
            "+        httpclient = new DefaultHttpClient();\n", 
            "+\n", 
            "+        requestXml = \"<soap:Envelope xmlns:soap=\\\"http://www.w3.org/2003/05/soap-envelope\\\" xmlns:ser=\\\"http://services.samples\\\" xmlns:xsd=\\\"http://services.samples/xsd\\\">\\n\" +\n", 
            "+                \"       <soap:Header/>\\n\" +\n", 
            "+                \"       <soap:Body>\\n\" +\n", 
            "+                \"          <ser:getQuote>\\n\" +\n", 
            "+                \"             <ser:request>\\n\" +\n", 
            "+                \"                <xsd:symbol>IBM</xsd:symbol>\\n\" +\n", 
            "+                \"             </ser:request>\\n\" +\n", 
            "+                \"          </ser:getQuote>\\n\" +\n", 
            "+                \"       </soap:Body>\\n\" +\n", 
            "+                \"    </soap:Envelope>\";\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testRoutingOnHttpHeader() {\n", 
            "+        String url = \"http://localhost:8280/services/StockQuoteProxy\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Routing Messages based on HTTP URL, HTTP Headers and Query \" +\n", 
            "+                \"Parameters\");\n", 
            "+\n", 
            "+        // Create a new HttpClient and Post Header\n", 
            "+        HttpPost httpPost = new HttpPost(url);//new HttpPost(availabilityUrl + VERSION_TEXT);\n", 
            "+\n", 
            "+        httpPost.setHeader(HttpHeaders.CONTENT_TYPE, \"application/soap+xml;charset=UTF-8\");\n", 
            "+        httpPost.setHeader(\"foo\", \"bar\");\n", 
            "+        HttpResponse response;\n", 
            "+        HttpEntity entity;\n", 
            "+        try {\n", 
            "+            entity = new StringEntity(requestXml, \"application/xml\", HTTP.UTF_8);\n", 
            "+            httpPost.setEntity(entity);\n", 
            "+            response = httpclient.execute(httpPost);\n", 
            "+            assertNotNull(\"Did not get a response \", response);\n", 
            "+            HttpEntity resEntity = response.getEntity();\n", 
            "+            assertNotNull(\"Response is empty\", resEntity);\n", 
            "+            BufferedReader rd = new BufferedReader(new InputStreamReader(resEntity.getContent()));\n", 
            "+            String result = \"\";\n", 
            "+            String line;\n", 
            "+            while ((line = rd.readLine()) != null) {\n", 
            "+                result += line;\n", 
            "+            }\n", 
            "+            System.out.println(result);\n", 
            "+            assertTrue(\"Response is empty\", !\"\".equals(result));\n", 
            "+        } catch (Exception e) {\n", 
            "+            fail(\"Errors occurred while sending POST request: \" + e.getMessage());\n", 
            "+        }\n", 
            "+\n", 
            "+        url = \"http://localhost:8280/services/StockQuoteProxy\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Routing Messages based on HTTP URL, HTTP Headers and Query Parameters\");\n", 
            "+\n", 
            "+        // Create a new HttpClient and Post Header\n", 
            "+        httpPost = new HttpPost(url);//new HttpPost(availabilityUrl + VERSION_TEXT);\n", 
            "+\n", 
            "+        httpPost.setHeader(HttpHeaders.CONTENT_TYPE, \"application/soap+xml;charset=UTF-8\");\n", 
            "+        httpPost.setHeader(\"my_custom_header1\", \"foo1\");\n", 
            "+\n", 
            "+        try {\n", 
            "+            entity = new StringEntity(requestXml, \"application/xml\", HTTP.UTF_8);\n", 
            "+            httpPost.setEntity(entity);\n", 
            "+            response = httpclient.execute(httpPost);\n", 
            "+            assertNotNull(\"Did not get a response \", response);\n", 
            "+            HttpEntity resEntity = response.getEntity();\n", 
            "+            assertNotNull(\"Response is empty\", resEntity);\n", 
            "+            BufferedReader rd = new BufferedReader(new InputStreamReader(resEntity.getContent()));\n", 
            "+            String result = \"\";\n", 
            "+            String line;\n", 
            "+            while ((line = rd.readLine()) != null) {\n", 
            "+                result += line;\n", 
            "+            }\n", 
            "+            System.out.println(result);\n", 
            "+            assertTrue(\"Response is empty\", !\"\".equals(result));\n", 
            "+        } catch (Exception e) {\n", 
            "+            fail(\"Errors occurred while sending POST request: \" + e.getMessage());\n", 
            "+        }\n", 
            "+\n", 
            "+        url = \"http://localhost:8280/services/StockQuoteProxy?qparam1=qpv_foo&qparam2=qpv_foo2\";\n", 
            "+        log.info(\"Running test: Routing Messages based on HTTP URL, HTTP Headers and Query Parameters\");\n", 
            "+\n", 
            "+        // Create a new HttpClient and Post Header\n", 
            "+        httpPost = new HttpPost(url);//new HttpPost(availabilityUrl + VERSION_TEXT);\n", 
            "+\n", 
            "+        httpPost.setHeader(HttpHeaders.CONTENT_TYPE, \"application/soap+xml;charset=UTF-8\");\n", 
            "+        httpPost.setHeader(\"my_custom_header2\", \"bar\");\n", 
            "+        httpPost.setHeader(\"my_custom_header3\", \"foo\");\n", 
            "+\n", 
            "+        try {\n", 
            "+            entity = new StringEntity(requestXml, \"application/xml\", HTTP.UTF_8);\n", 
            "+            httpPost.setEntity(entity);\n", 
            "+            response = httpclient.execute(httpPost);\n", 
            "+            assertNotNull(\"Did not get a response \", response);\n", 
            "+            HttpEntity resEntity = response.getEntity();\n", 
            "+            assertNotNull(\"Response is empty\", resEntity);\n", 
            "+            BufferedReader rd = new BufferedReader(new InputStreamReader(resEntity.getContent()));\n", 
            "+            String result = \"\";\n", 
            "+            String line;\n", 
            "+            while ((line = rd.readLine()) != null) {\n", 
            "+                result += line;\n", 
            "+            }\n", 
            "+            System.out.println(result);\n", 
            "+            assertTrue(\"Response is empty\", !\"\".equals(result));\n", 
            "+        } catch (Exception e) {\n", 
            "+            fail(\"Errors occurred while sending POST request: \" + e.getMessage());\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample157.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample157.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>150</sampleID>\n", 
            "+    <sampleName>Introduction to proxy services</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_150.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample150.xml", 
      "from": "java/modules/integration/src/test/resources/sample150.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>151</sampleID>\n", 
            "+    <sampleName>Custom sequences and endpoints with proxy services</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_151.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample151.xml", 
      "from": "java/modules/integration/src/test/resources/sample151.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>152</sampleID>\n", 
            "+    <sampleName>Switching transports and message format from SOAP to REST/POX</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_152.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample152.xml", 
      "from": "java/modules/integration/src/test/resources/sample152.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>153</sampleID>\n", 
            "+    <sampleName>Routing the messages arrived to a proxy service without processing the security headers</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_153.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample153.xml", 
      "from": "java/modules/integration/src/test/resources/sample153.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,32", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>154</sampleID>\n", 
            "+    <sampleName>Load Balancing with Proxy Services</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_154.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='1'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+\t    <httpPort>9001</httpPort>\n", 
            "+\t    <httpsPort>9005</httpsPort>\n", 
            "+        </axis2Server>\n", 
            "+        <axis2Server id='2'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+\t    <httpPort>9002</httpPort>\n", 
            "+\t    <httpsPort>9006</httpsPort>\n", 
            "+        </axis2Server>\n", 
            "+        <axis2Server id='3'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+\t    <httpPort>9003</httpPort>\n", 
            "+\t    <httpsPort>9007</httpsPort>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample154.xml", 
      "from": "java/modules/integration/src/test/resources/sample154.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>155</sampleID>\n", 
            "+    <sampleName>Dual channel invocation on both client side and serverside of Synapse with Proxy Services</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_155.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample155.xml", 
      "from": "java/modules/integration/src/test/resources/sample155.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>156</sampleID>\n", 
            "+    <sampleName>Service Integration with specifying the receiving sequence</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_156.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample156.xml", 
      "from": "java/modules/integration/src/test/resources/sample156.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>157</sampleID>\n", 
            "+    <sampleName>Conditional Router for Routing Messages based on HTTP URL, HTTP Headers and Query Parameters</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_157.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample157.xml", 
      "from": "java/modules/integration/src/test/resources/sample157.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-90,127 +90,112", 
          "lines": [
            " \n", 
            "                                 <property name=\"temp.dir\" value=\"target/temp\"/>\n", 
            "                                 <property name=\"classes\" value=\"${temp.dir}/classes\"/>\n", 
            "-                                <property name=\"services\"\n", 
            "-                                value=\"target/test_repos/axis2Server/services\"/>\n", 
            "+                                <property name=\"services\" value=\"target/test_repos/axis2Server/services\"/>\n", 
            " \n", 
            "-                                <property name=\"src\"\n", 
            "-                                value=\"../samples/services/SimpleStockQuoteService/src\"/>\n", 
            "+                                <property name=\"src\" value=\"../samples/services/SimpleStockQuoteService/src\"/>\n", 
            " \n", 
            "                                 <mkdir dir=\"${temp.dir}\"/>\n", 
            "                                 <mkdir dir=\"${classes}\"/>\n", 
            " \n", 
            "                                 <javac debug=\"on\" destdir=\"${classes}\" fork=\"true\" includeantruntime=\"false\">\n", 
            "-                                <src path=\"${src}\"/>\n", 
            "-                                <classpath refid=\"maven.compile.classpath\"/>\n", 
            "+                                    <src path=\"${src}\"/>\n", 
            "+                                    <classpath refid=\"maven.compile.classpath\"/>\n", 
            "                                 </javac>\n", 
            " \n", 
            "-                                <property name=\"SSQ.dir\"\n", 
            "-                                value=\"${temp.dir}/SimpleStockQuote\"/>\n", 
            "+                                <property name=\"SSQ.dir\" value=\"${temp.dir}/SimpleStockQuote\"/>\n", 
            "                                 <mkdir dir=\"${SSQ.dir}\"/>\n", 
            " \n", 
            "                                 <mkdir dir=\"${SSQ.dir}/META-INF\"/>\n", 
            "-                                <copy file=\"${src}/../conf/services.xml\"\n", 
            "-                                tofile=\"${SSQ.dir}/META-INF/services.xml\"/>\n", 
            "+                                <copy file=\"${src}/../conf/services.xml\" tofile=\"${SSQ.dir}/META-INF/services.xml\"/>\n", 
            "                                 <!--<copy file=\"${src}/../wsdl/SimpleStockQuoteService.wsdl\"-->\n", 
            "                                 <!--tofile=\"${SSQ.dir}/META-INF/service.wsdl\"/>-->\n", 
            "                                 <copy toDir=\"${SSQ.dir}\">\n", 
            "-                                <fileset dir=\"${classes}\">\n", 
            "-                                <include name=\"**/*.class\"/>\n", 
            "-                                </fileset>\n", 
            "+                                    <fileset dir=\"${classes}\">\n", 
            "+                                        <include name=\"**/*.class\"/>\n", 
            "+                                    </fileset>\n", 
            "                                 </copy>\n", 
            " \n", 
            "                                 <jar destfile=\"${services}/SimpleStockQuoteService.aar\">\n", 
            "-                                <fileset dir=\"${SSQ.dir}\"/>\n", 
            "+                                    <fileset dir=\"${SSQ.dir}\"/>\n", 
            "                                 </jar>\n", 
            " \n", 
            "-                                <property name=\"src2\"\n", 
            "-                                value=\"../samples/services/SecureStockQuoteService/src\"/>\n", 
            "+                                <property name=\"src2\" value=\"../samples/services/SecureStockQuoteService/src\"/>\n", 
            "                                 <delete dir=\"${temp.dir}\"/>\n", 
            "                                 <mkdir dir=\"${temp.dir}\"/>\n", 
            "                                 <mkdir dir=\"${classes}\"/>\n", 
            "                                 <javac debug=\"on\" destdir=\"${classes}\" fork=\"true\" includeantruntime=\"false\">\n", 
            "-                                <src path=\"${src2}\"/>\n", 
            "-                                <classpath refid=\"maven.compile.classpath\"/>\n", 
            "+                                    <src path=\"${src2}\"/>\n", 
            "+                                    <classpath refid=\"maven.compile.classpath\"/>\n", 
            "                                 </javac>\n", 
            "-                                <property name=\"SSQ2.dir\"\n", 
            "-                                value=\"${temp.dir}/SecureStockQuoteService\"/>\n", 
            "+                                <property name=\"SSQ2.dir\" value=\"${temp.dir}/SecureStockQuoteService\"/>\n", 
            "                                 <mkdir dir=\"${SSQ2.dir}\"/>\n", 
            "                                 <mkdir dir=\"${SSQ2.dir}/META-INF\"/>\n", 
            "-                                <copy file=\"${src2}/../conf/services.xml\"\n", 
            "-                                tofile=\"${SSQ2.dir}/META-INF/services.xml\"/>\n", 
            "+                                <copy file=\"${src2}/../conf/services.xml\" tofile=\"${SSQ2.dir}/META-INF/services.xml\"/>\n", 
            "                                 <!--<copy file=\"${src2}/../wsdl/SimpleStockQuoteService.wsdl\"-->\n", 
            "                                 <!--tofile=\"${SSQ2.dir}/META-INF/service.wsdl\"/>-->\n", 
            "-                                <copy file=\"${src2}/../store.jks\"\n", 
            "-                                tofile=\"${SSQ2.dir}/store.jks\"/>\n", 
            "+                                <copy file=\"${src2}/../store.jks\" tofile=\"${SSQ2.dir}/store.jks\"/>\n", 
            "                                 <copy toDir=\"${SSQ2.dir}\">\n", 
            "-                                <fileset dir=\"${classes}\">\n", 
            "-                                <include name=\"**/*.class\"/>\n", 
            "-                                </fileset>\n", 
            "+                                    <fileset dir=\"${classes}\">\n", 
            "+                                        <include name=\"**/*.class\"/>\n", 
            "+                                    </fileset>\n", 
            "                                 </copy>\n", 
            "                                 <jar destfile=\"${services}/SecureStockQuoteService.aar\">\n", 
            "-                                <fileset dir=\"${SSQ2.dir}\"/>\n", 
            "+                                    <fileset dir=\"${SSQ2.dir}\"/>\n", 
            "                                 </jar>\n", 
            " \n", 
            "-                                <property name=\"src3\"\n", 
            "-                                value=\"../samples/services/MTOMSwASampleService/src\"/>\n", 
            "+                                <property name=\"src3\" value=\"../samples/services/MTOMSwASampleService/src\"/>\n", 
            "                                 <delete dir=\"${temp.dir}\"/>\n", 
            "                                 <mkdir dir=\"${temp.dir}\"/>\n", 
            "                                 <mkdir dir=\"${classes}\"/>\n", 
            "                                 <javac debug=\"on\" destdir=\"${classes}\" fork=\"true\" includeantruntime=\"false\">\n", 
            "-                                <src path=\"${src3}\"/>\n", 
            "-                                <classpath refid=\"maven.compile.classpath\"/>\n", 
            "+                                    <src path=\"${src3}\"/>\n", 
            "+                                    <classpath refid=\"maven.compile.classpath\"/>\n", 
            "                                 </javac>\n", 
            "-                                <property name=\"SSQ3.dir\"\n", 
            "-                                value=\"${temp.dir}/MTOMSwASampleService\"/>\n", 
            "+                                <property name=\"SSQ3.dir\" value=\"${temp.dir}/MTOMSwASampleService\"/>\n", 
            "                                 <mkdir dir=\"${SSQ3.dir}\"/>\n", 
            "                                 <mkdir dir=\"${SSQ3.dir}/META-INF\"/>\n", 
            "-                                <copy file=\"${src3}/../conf/services.xml\"\n", 
            "-                                tofile=\"${SSQ3.dir}/META-INF/services.xml\"/>\n", 
            "+                                <copy file=\"${src3}/../conf/services.xml\" tofile=\"${SSQ3.dir}/META-INF/services.xml\"/>\n", 
            "                                 <copy toDir=\"${SSQ3.dir}\">\n", 
            "-                                <fileset dir=\"${classes}\">\n", 
            "-                                <include name=\"**/*.class\"/>\n", 
            "-                                </fileset>\n", 
            "+                                    <fileset dir=\"${classes}\">\n", 
            "+                                        <include name=\"**/*.class\"/>\n", 
            "+                                    </fileset>\n", 
            "                                 </copy>\n", 
            "                                 <jar destfile=\"${services}/MTOMSwASampleService.aar\">\n", 
            "-                                <fileset dir=\"${SSQ3.dir}\"/>\n", 
            "+                                    <fileset dir=\"${SSQ3.dir}\"/>\n", 
            "                                 </jar>\n", 
            " \n", 
            "-                                <property name=\"src4\"\n", 
            "-                                value=\"../samples/services/ReliableStockQuoteService/src\"/>\n", 
            "+                                <property name=\"src4\" value=\"../samples/services/ReliableStockQuoteService/src\"/>\n", 
            "                                 <delete dir=\"${temp.dir}\"/>\n", 
            "                                 <mkdir dir=\"${temp.dir}\"/>\n", 
            "                                 <mkdir dir=\"${classes}\"/>\n", 
            "                                 <javac debug=\"on\" destdir=\"${classes}\" fork=\"true\" includeantruntime=\"false\">\n", 
            "-                                <src path=\"${src4}\"/>\n", 
            "-                                <classpath refid=\"maven.compile.classpath\"/>\n", 
            "+                                    <src path=\"${src4}\"/>\n", 
            "+                                    <classpath refid=\"maven.compile.classpath\"/>\n", 
            "                                 </javac>\n", 
            "-                                <property name=\"RSQ.dir\"\n", 
            "-                                value=\"${temp.dir}/ReliableStockQuoteService\"/>\n", 
            "+                                <property name=\"RSQ.dir\" value=\"${temp.dir}/ReliableStockQuoteService\"/>\n", 
            "                                 <mkdir dir=\"${RSQ.dir}\"/>\n", 
            " \n", 
            "                                 <mkdir dir=\"${RSQ.dir}/META-INF\"/>\n", 
            "-                                <copy file=\"${src4}/../conf/services.xml\"\n", 
            "-                                tofile=\"${RSQ.dir}/META-INF/services.xml\"/>\n", 
            "+                                <copy file=\"${src4}/../conf/services.xml\" tofile=\"${RSQ.dir}/META-INF/services.xml\"/>\n", 
            "                                 <!--<copy file=\"${src4}/../wsdl/ReliableStockQuoteService.wsdl\"-->\n", 
            "                                 <!--tofile=\"${RSQ.dir}/META-INF/service.wsdl\"/>-->\n", 
            "                                 <copy toDir=\"${RSQ.dir}\">\n", 
            "-                                <fileset dir=\"${classes}\">\n", 
            "-                                <include name=\"**/*.class\"/>\n", 
            "-                                </fileset>\n", 
            "+                                    <fileset dir=\"${classes}\">\n", 
            "+                                        <include name=\"**/*.class\"/>\n", 
            "+                                    </fileset>\n", 
            "                                 </copy>\n", 
            " \n", 
            "                                 <jar destfile=\"${services}/ReliableStockQuoteService.aar\">\n", 
            "-                                <fileset dir=\"${RSQ.dir}\"/>\n", 
            "+                                    <fileset dir=\"${RSQ.dir}\"/>\n", 
            "                                 </jar>\n", 
            " \n", 
            "-                                <property name=\"src5\"\n", 
            "-                                value=\"../samples/services/LoadbalanceFailoverService/src\"/>\n", 
            "+                                <property name=\"src5\" value=\"../samples/services/LoadbalanceFailoverService/src\"/>\n", 
            "                                 <delete dir=\"${temp.dir}\"/>\n", 
            "                                 <mkdir dir=\"${temp.dir}\"/>\n", 
            "                                 <mkdir dir=\"${classes}\"/>\n", 
            "                                 <javac debug=\"on\" destdir=\"${classes}\" fork=\"true\" includeantruntime=\"false\">\n", 
            "-                                <src path=\"${src5}\"/>\n", 
            "-                                <classpath refid=\"maven.compile.classpath\"/>\n", 
            "+                                    <src path=\"${src5}\"/>\n", 
            "+                                    <classpath refid=\"maven.compile.classpath\"/>\n", 
            "                                 </javac>\n", 
            " \n", 
            "                                 <property name=\"LBFA1.dir\" value=\"${temp.dir}/LBService1\"/>\n"
          ]
        }, 
        {
          "locn": "-217,16 +202,15", 
          "lines": [
            "                                 <mkdir dir=\"${LBFA1.dir}\"/>\n", 
            " \n", 
            "                                 <mkdir dir=\"${LBFA1.dir}/META-INF\"/>\n", 
            "-                                <copy file=\"${src5}/../conf/service1/services.xml\"\n", 
            "-                                tofile=\"${LBFA1.dir}/META-INF/services.xml\"/>\n", 
            "+                                <copy file=\"${src5}/../conf/service1/services.xml\" tofile=\"${LBFA1.dir}/META-INF/services.xml\"/>\n", 
            "                                 <copy toDir=\"${LBFA1.dir}\">\n", 
            "-                                <fileset dir=\"${classes}\">\n", 
            "-                                <include name=\"**/LBService1.class\"/>\n", 
            "-                                </fileset>\n", 
            "+                                    <fileset dir=\"${classes}\">\n", 
            "+                                        <include name=\"**/LBService1.class\"/>\n", 
            "+                                    </fileset>\n", 
            "                                 </copy>\n", 
            " \n", 
            "                                 <jar destfile=\"${services}/LBService1.aar\">\n", 
            "-                                <fileset dir=\"${LBFA1.dir}\"/>\n", 
            "+                                    <fileset dir=\"${LBFA1.dir}\"/>\n", 
            "                                 </jar>\n", 
            " \n", 
            "                                 <property name=\"LBFA2.dir\" value=\"${temp.dir}/LBService2\"/>\n"
          ]
        }, 
        {
          "locn": "-233,16 +217,15", 
          "lines": [
            "                                 <mkdir dir=\"${LBFA2.dir}\"/>\n", 
            " \n", 
            "                                 <mkdir dir=\"${LBFA2.dir}/META-INF\"/>\n", 
            "-                                <copy file=\"${src5}/../conf/service2/services.xml\"\n", 
            "-                                tofile=\"${LBFA2.dir}/META-INF/services.xml\"/>\n", 
            "+                                <copy file=\"${src5}/../conf/service2/services.xml\" tofile=\"${LBFA2.dir}/META-INF/services.xml\"/>\n", 
            "                                 <copy toDir=\"${LBFA2.dir}\">\n", 
            "-                                <fileset dir=\"${classes}\">\n", 
            "-                                <include name=\"**/LBService2.class\"/>\n", 
            "-                                </fileset>\n", 
            "+                                    <fileset dir=\"${classes}\">\n", 
            "+                                        <include name=\"**/LBService2.class\"/>\n", 
            "+                                    </fileset>\n", 
            "                                 </copy>\n", 
            " \n", 
            "                                 <jar destfile=\"${services}/LBService2.aar\">\n", 
            "-                                <fileset dir=\"${LBFA2.dir}\"/>\n", 
            "+                                    <fileset dir=\"${LBFA2.dir}\"/>\n", 
            "                                 </jar>\n", 
            " \n", 
            "                             </tasks>\n"
          ]
        }, 
        {
          "locn": "-479,12 +462,6", 
          "lines": [
            "             <version>1.6.1</version>\n", 
            "             <scope>test</scope>\n", 
            "         </dependency>\n", 
            "-        <!--<dependency>-->\n", 
            "-        <!--<groupId>org.slf4j</groupId>-->\n", 
            "-        <!--<artifactId>slf4j-jdk14</artifactId>-->\n", 
            "-        <!--<version>1.6.1</version>-->\n", 
            "-        <!--<scope>test</scope>-->\n", 
            "-        <!--</dependency>-->\n", 
            "         <dependency>\n", 
            "             <groupId>org.apache.derby</groupId>\n", 
            "             <artifactId>derby</artifactId>\n"
          ]
        }, 
        {
          "locn": "-497,24 +474,6", 
          "lines": [
            "             <version>3.0.1</version>\n", 
            "             <scope>test</scope>\n", 
            "         </dependency>\n", 
            "-        <dependency>\n", 
            "-            <groupId>org.apache.mina</groupId>\n", 
            "-            <artifactId>mina-core</artifactId>\n", 
            "-            <version>1.1.7</version>\n", 
            "-            <scope>test</scope>\n", 
            "-        </dependency>\n", 
            "-        <dependency>\n", 
            "-            <groupId>quickfixj</groupId>\n", 
            "-            <artifactId>quickfixj-all</artifactId>\n", 
            "-            <version>1.4.0</version>\n", 
            "-            <scope>test</scope>\n", 
            "-        </dependency>\n", 
            "-        <!--dependency>\n", 
            "-            <groupId>quickfixj</groupId>\n", 
            "-            <artifactId>quickfixj-examples</artifactId>\n", 
            "-            <version>1.5.0</version>\n", 
            "-            <scope>test</scope>\n", 
            "-        </dependency-->\n", 
            "     </dependencies>\n", 
            " \n", 
            " </project>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/pom.xml", 
      "from": "java/modules/integration/pom.xml"
    }
  ], 
  "id": "1214233"
}