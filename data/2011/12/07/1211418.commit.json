{
  "when": "2011-12-07T07:47:28-05:00", 
  "message": "Minor code cleanup", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-58,11 +58,13", 
          "lines": [
            "     protected SynapseTestCase(int sampleId) {\n", 
            "         this.sampleId = sampleId;\n", 
            "         log.info(\"Creating Synapse TestCase for test \" + sampleId);\n", 
            "-        currentLocation = System.getProperty(\"user.dir\") + \"/\";\n", 
            "-        sampleDescriptor = \"/sample\" + sampleId + \".xml\";\n", 
            "+        currentLocation = System.getProperty(\"user.dir\") + File.separator;\n", 
            "+        sampleDescriptor = File.separator + \"sample\" + sampleId + \".xml\";\n", 
            "         configuration = new SampleConfiguration();\n", 
            "         backendServerControllers = new ArrayList<BackEndServerController>();\n", 
            "-        System.setProperty(\"java.io.tmpdir\", currentLocation + \"modules/integration/target/temp\");\n", 
            "+        System.setProperty(\"java.io.tmpdir\", currentLocation + \"modules\" + File.separator +\n", 
            "+                \"integration\" + File.separator + \"target\" + File.separator + \"temp\");\n", 
            "+\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-70,8 +72,6", 
          "lines": [
            "      * Loads all configuration info. and starts the servers.\n", 
            "      */\n", 
            "     public void setUp() {\n", 
            "-        log.info(\"SynapseTestCase: Performing necessary steps to run test \" + sampleId);\n", 
            "-\n", 
            "         assertTrue(\"Could not load the global descriptor file for sample \" + sampleId,\n", 
            "                 loadDescriptorInfoFile());\n", 
            "         assertTrue(\"There are errors in global descriptor file for sample \" + sampleId,\n"
          ]
        }, 
        {
          "locn": "-90,13 +90,13", 
          "lines": [
            "         for (BackEndServerController bsc : backendServerControllers) {\n", 
            "             if (!bsc.start()) {\n", 
            "                 doCleanup();\n", 
            "-                fail(\"There was an error starting the server: \" + bsc.getServerName());\n", 
            "+                fail(\"Error starting the server: \" + bsc.getServerName());\n", 
            "             }\n", 
            "         }\n", 
            " \n", 
            "         if (!pc.startProcess()) {\n", 
            "             doCleanup();\n", 
            "-            fail(\"There was an error starting synapse server\");\n", 
            "+            fail(\"Error starting synapse server\");\n", 
            "         }\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-152,7 +152,7", 
          "lines": [
            "         try {\n", 
            "             InputStream in = this.getClass().getResourceAsStream(sampleDescriptor);\n", 
            "             if (in == null) {\n", 
            "-                fail(\"Cannot read sample descriptor file. Verify that it exists in the resource dir\");\n", 
            "+                fail(\"Cannot read sample descriptor file\");\n", 
            "             }\n", 
            "             StAXOMBuilder builder = new StAXOMBuilder(in);\n", 
            "             sampleConfigElement = builder.getDocumentElement();\n"
          ]
        }, 
        {
          "locn": "-169,10 +169,11", 
          "lines": [
            "      * @return true If the sample ID matches\n", 
            "      */\n", 
            "     private boolean processDescriptorFile() {\n", 
            "-        int fileID = -1;\n", 
            "-        Iterator itr = sampleConfigElement.getChildrenWithLocalName(SampleConfigConstants.TAG_SAMPLE_ID);\n", 
            "+        int fileId = -1;\n", 
            "+        Iterator itr = sampleConfigElement.getChildrenWithLocalName(\n", 
            "+                SampleConfigConstants.TAG_SAMPLE_ID);\n", 
            "         while (itr.hasNext()) {\n", 
            "-            fileID = Integer.parseInt(((OMElement) itr.next()).getText());\n", 
            "+            fileId = Integer.parseInt(((OMElement) itr.next()).getText());\n", 
            "         }\n", 
            "         itr = sampleConfigElement.getChildrenWithLocalName(SampleConfigConstants.TAG_SAMPLE_NAME);\n", 
            "         while (itr.hasNext()) {\n"
          ]
        }, 
        {
          "locn": "-180,7 +181,7", 
          "lines": [
            "             configuration.setSampleName(sampleName);\n", 
            "         }\n", 
            " \n", 
            "-        return sampleId == fileID;\n", 
            "+        return sampleId == fileId;\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-191,7 +192,8", 
          "lines": [
            "     private boolean initSynapseConfigInfo() {\n", 
            "         Properties synapseProperties = new Properties();\n", 
            "         OMElement synEle = null;\n", 
            "-        Iterator itr = sampleConfigElement.getChildrenWithLocalName(SampleConfigConstants.TAG_SYNAPSE_CONF);\n", 
            "+        Iterator itr = sampleConfigElement.getChildrenWithLocalName(\n", 
            "+                SampleConfigConstants.TAG_SYNAPSE_CONF);\n", 
            "         while (itr.hasNext()) {\n", 
            "             synEle = (OMElement) itr.next();\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-222,18 +224,20", 
          "lines": [
            "         } else {\n", 
            "             configuration.getSynapseConfig().setSynapseXml(synapseHome + synapseXml);\n", 
            "         }\n", 
            "+\n", 
            "         if (axis2Repo == null) {\n", 
            "-            log.info(\"synapse repository is not specified in the descriptor. using default value...\");\n", 
            "             configuration.getSynapseConfig().setAxis2Repo(synapseHome +\n", 
            "                     SampleConfigConstants.DEFAULT_SYNAPSE_CONF_AXIS2_REPO);\n", 
            "         } else {\n", 
            "+            log.info(\"Using Synapse Axis2 repository: \" + axis2Repo);\n", 
            "             configuration.getSynapseConfig().setAxis2Repo(synapseHome + axis2Repo);\n", 
            "         }\n", 
            "+\n", 
            "         if (axis2Xml == null) {\n", 
            "-            log.info(\"synapse axis2.xml is not specified in the descriptor. using default value...\");\n", 
            "             configuration.getSynapseConfig().setAxis2Xml(synapseHome +\n", 
            "                     SampleConfigConstants.DEFAULT_SYNAPSE_CONF_AXIS2_XML);\n", 
            "         } else {\n", 
            "+            log.info(\"Using Synapse Axis2 XML: \" + axis2Xml);\n", 
            "             configuration.getSynapseConfig().setAxis2Xml(synapseHome + axis2Xml);\n", 
            "         }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-264,10 +268,10", 
          "lines": [
            " \n", 
            "         // Processing JMS servers\n", 
            "         Properties jmsProperties = new Properties();\n", 
            "-        Iterator itr_JMS_Servers = bESConfigEle.getChildrenWithLocalName(\n", 
            "+        Iterator itrJmsServers = bESConfigEle.getChildrenWithLocalName(\n", 
            "                 SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_BROKER);\n", 
            "-        while (itr_JMS_Servers.hasNext()) {\n", 
            "-            OMElement jmsServer = (OMElement) itr_JMS_Servers.next();\n", 
            "+        while (itrJmsServers.hasNext()) {\n", 
            "+            OMElement jmsServer = (OMElement) itrJmsServers.next();\n", 
            "             String serverID = jmsServer.getAttributeValue(new QName(\"id\"));\n", 
            "             String serverName = \"SampleJMSServer\" + serverID;\n", 
            "             configuration.addNewJMSBroker(serverName);\n"
          ]
        }, 
        {
          "locn": "-284,17 +288,18", 
          "lines": [
            "                     SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY);\n", 
            " \n", 
            "             if (providerURL == null) {\n", 
            "-                log.info(\"Using default provider url\");\n", 
            "                 configuration.getJMSConfig(serverName).setProviderURL(\n", 
            "                         SampleConfigConstants.DEFAULT_BE_SERVER_CONF_JMS_PROVIDER_URL);\n", 
            "             } else {\n", 
            "+                log.info(\"Using provider URL: \" + providerURL);\n", 
            "                 configuration.getJMSConfig(serverName).setProviderURL(providerURL);\n", 
            "             }\n", 
            "+\n", 
            "             if (initialNF == null) {\n", 
            "-                log.info(\"Using default initial naming factory\");\n", 
            "                 configuration.getJMSConfig(serverName).setInitialNamingFactory(\n", 
            "                         SampleConfigConstants.DEFAULT_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY);\n", 
            "             } else {\n", 
            "+                log.info(\"Using initial context factory: \" + initialNF);\n", 
            "                 configuration.getJMSConfig(serverName).setInitialNamingFactory(initialNF);\n", 
            "             }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-328,10 +333,10", 
          "lines": [
            " \n", 
            "         // Processing axis2 servers\n", 
            "         Properties axis2Properties = new Properties();\n", 
            "-        Iterator itr_Axis2_Servers = bESConfigEle.getChildrenWithLocalName(\n", 
            "+        Iterator itrAxis2Servers = bESConfigEle.getChildrenWithLocalName(\n", 
            "                 SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_SERVER);\n", 
            "-        while (itr_Axis2_Servers.hasNext()) {\n", 
            "-            OMElement axis2Server = (OMElement) itr_Axis2_Servers.next();\n", 
            "+        while (itrAxis2Servers.hasNext()) {\n", 
            "+            OMElement axis2Server = (OMElement) itrAxis2Servers.next();\n", 
            "             String serverID = axis2Server.getAttributeValue(new QName(\"id\"));\n", 
            "             String serverName = \"SampleAxis2Server\" + serverID;\n", 
            "             configuration.addNewAxis2Server(serverName);\n"
          ]
        }, 
        {
          "locn": "-354,17 +359,18", 
          "lines": [
            "             configuration.getAxis2Config(serverName).setServerName(serverName);\n", 
            " \n", 
            "             if (relAxis2Repo == null) {\n", 
            "-                log.info(\"axis2 repository is not specified in the descriptor. using default value...\");\n", 
            "                 configuration.getAxis2Config(serverName).setAxis2Repo(axis2Home +\n", 
            "                         SampleConfigConstants.DEFAULT_BE_SERVER_CONF_AXIS2_REPO);\n", 
            "             } else {\n", 
            "+                log.info(\"Using Axis2 repository: \" + relAxis2Repo);\n", 
            "                 configuration.getAxis2Config(serverName).setAxis2Repo(axis2Home + relAxis2Repo);\n", 
            "             }\n", 
            "+\n", 
            "             if (relAxis2Xml == null) {\n", 
            "-                log.info(\"axis2.xml is not specified in the descriptor. using default value...\");\n", 
            "                 configuration.getAxis2Config(serverName).setAxis2Xml(axis2Home +\n", 
            "                         SampleConfigConstants.DEFAULT_BE_SERVER_CONF_AXIS2_XML);\n", 
            "             } else {\n", 
            "+                log.info(\"Using Axis2 XML: \" + relAxis2Xml);\n", 
            "                 configuration.getAxis2Config(serverName).setAxis2Xml(axis2Home + relAxis2Xml);\n", 
            "             }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-406,20 +412,18", 
          "lines": [
            "                 SampleConfigConstants.TAG_CLIENT_CONF_AXIS2_XML);\n", 
            " \n", 
            "         if (clientRepo == null) {\n", 
            "-            log.info(\"client repository location is not specified in the descriptor. using default value...\");\n", 
            "             configuration.getClientConfig().setClientRepo(currentLocation +\n", 
            "                     SampleConfigConstants.DEFAULT_CLIENT_CONF_REPO);\n", 
            "-\n", 
            "         } else {\n", 
            "+            log.info(\"Using client Axis2 repository location: \" + clientRepo);\n", 
            "             configuration.getClientConfig().setClientRepo(currentLocation + clientRepo);\n", 
            "         }\n", 
            " \n", 
            "         if (clientAxis2Xml == null) {\n", 
            "-            log.info(\"client axis2.xml is not specified in the descriptor. using default value...\");\n", 
            "             configuration.getClientConfig().setAxis2Xml(currentLocation +\n", 
            "                     SampleConfigConstants.DEFAULT_CLIENT_CONF_AXIS2_XML);\n", 
            "-\n", 
            "         } else {\n", 
            "+            log.info(\"Using client Axis2 XML: \" + clientAxis2Xml);\n", 
            "             configuration.getClientConfig().setAxis2Xml(currentLocation + clientAxis2Xml);\n", 
            "         }\n", 
            "         return true;\n"
          ]
        }, 
        {
          "locn": "-443,8 +447,8", 
          "lines": [
            "             FileUtils.writeStringToFile(tempSynapseAxis2, modifiedSynapseAxis2);\n", 
            "             configuration.getSynapseConfig().setAxis2Xml(tempSynapseAxis2.getAbsolutePath());\n", 
            " \n", 
            "-            for (BackEndServerController besc : backendServerControllers) {\n", 
            "-                String serverName = besc.getServerName();\n", 
            "+            for (BackEndServerController controller : backendServerControllers) {\n", 
            "+                String serverName = controller.getServerName();\n", 
            "                 String beAxis2Xml = configuration.getAxis2Config(serverName).getAxis2Xml();\n", 
            "                 String beAxis2Config = FileUtils.readFileToString(new File(beAxis2Xml));\n", 
            "                 String modifiedBEAxis2 = SynapseTestUtils.replace(beAxis2Config, \"${replace.me}\", ip);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestCase.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestCase.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-249,10 +249,12", 
          "lines": [
            "         org.apache.axis2.context.MessageContext axis2MsgCtx =\n", 
            "                 ((Axis2MessageContext) synCtx).getAxis2MessageContext();\n", 
            " \n", 
            "-        //Removing the REST_URL_POSTFIX - this is a hack.\n", 
            "-        //In this loadbalance endpoint we create an endpoint per request by setting the complete url as the adress.\n", 
            "-        //If a REST message comes Axis2FlexibleMEPClient append the REST_URL_POSTFIX to the adress. Hence endpoint fails\n", 
            "-        //do send the request. e.g.  http://localhost:8080/example/index.html/example/index.html\n", 
            "+        // Removing the REST_URL_POSTFIX - this is a hack.\n", 
            "+        // In this loadbalance endpoint we create an endpoint per request by setting the complete\n", 
            "+        // url as the address.\n", 
            "+        // If a REST message comes Axis2FlexibleMEPClient append the REST_URL_POSTFIX to the address.\n", 
            "+        // Hence endpoint fails to send the request.\n", 
            "+        // e.g.  http://localhost:8080/example/index.html/example/index.html\n", 
            "         axis2MsgCtx.removeProperty(NhttpConstants.REST_URL_POSTFIX);\n", 
            " \n", 
            "         String transport = axis2MsgCtx.getTransportIn().getName();\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/endpoints/DynamicLoadbalanceEndpoint.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/endpoints/DynamicLoadbalanceEndpoint.java"
    }
  ], 
  "id": "1211418"
}