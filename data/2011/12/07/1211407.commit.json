{
  "when": "2011-12-07T07:17:10-05:00", 
  "message": "Starting to add the Synapse sample automation framework SYNAPSE-746", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-0,0 +1,24", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>10</sampleID>\n", 
            "+    <sampleName>Introduction to dynamic endpoints with the Registry</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_10.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+         <axis2Server id='1'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+\t    <httpPort>9001</httpPort>\n", 
            "+\t    <httpsPort>9003</httpsPort>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample10.xml", 
      "from": "java/modules/integration/src/test/resources/sample10.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>12</sampleID>\n", 
            "+    <sampleName>One way messaging / fireAndForget through Synapse</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_12.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample12.xml", 
      "from": "java/modules/integration/src/test/resources/sample12.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>15</sampleID>\n", 
            "+    <sampleName>Message Enrichment through Synapse</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_15.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample15.xml", 
      "from": "java/modules/integration/src/test/resources/sample15.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,49", 
          "lines": [
            "+#\n", 
            "+#  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+#  or more contributor license agreements.  See the NOTICE file\n", 
            "+#  distributed with this work for additional information\n", 
            "+#  regarding copyright ownership.  The ASF licenses this file\n", 
            "+#  to you under the Apache License, Version 2.0 (the\n", 
            "+#  \"License\"); you may not use this file except in compliance\n", 
            "+#  with the License.  You may obtain a copy of the License at\n", 
            "+#\n", 
            "+#   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+#\n", 
            "+#  Unless required by applicable law or agreed to in writing,\n", 
            "+#  software distributed under the License is distributed on an\n", 
            "+#   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+#  KIND, either express or implied.  See the License for the\n", 
            "+#  specific language governing permissions and limitations\n", 
            "+#  under the License.\n", 
            "+#\n", 
            "+\n", 
            "+##\n", 
            "+# Sample Automation Framework specific logs\n", 
            "+##\n", 
            "+\n", 
            "+# the root category is ERROR (applies for all 3rd party JARs etc) and will be logged to the\n", 
            "+# LOG_APPENDER and the CONSOLE_APPENDER\n", 
            "+log4j.rootCategory=ERROR, LOG_APPENDER, CONSOLE_APPENDER\n", 
            "+\n", 
            "+# Synapse log level is info, so are transports\n", 
            "+log4j.category.org.apache.synapse=INFO\n", 
            "+log4j.category.org.apache.synapse.transport=INFO\n", 
            "+log4j.category.org.apache.axis2.transport=INFO\n", 
            "+log4j.category.samples.util=INFO\n", 
            "+#log4j.category.org.apache.synapse.transport.nhttp.util=DEBUG\n", 
            "+#log4j.category.org.apache.http.impl.nio.reactor=DEBUG\n", 
            "+#log4j.category.samples.userguide=INFO\n", 
            "+\n", 
            "+# The console appender is used to display general information at console\n", 
            "+log4j.appender.CONSOLE_APPENDER=org.apache.log4j.ConsoleAppender\n", 
            "+log4j.appender.CONSOLE_APPENDER.layout=org.apache.log4j.PatternLayout\n", 
            "+log4j.appender.CONSOLE_APPENDER.layout.ConversionPattern=%d{ISO8601} [%X{ip}-%X{host}] [%t] %5p %c{1} %m%n\n", 
            "+\n", 
            "+# The standard log file that may be set upto DEBUG/TRACE for general purpose logging\n", 
            "+# Logs information at startup/initialization etc. and also could be used as the developer log\n", 
            "+log4j.appender.LOG_APPENDER=org.apache.log4j.RollingFileAppender\n", 
            "+log4j.appender.LOG_APPENDER.File=sampleAutomationLogs/synapse-${timeStamp}.log\n", 
            "+log4j.appender.LOG_APPENDER.MaxFileSize=1000KB\n", 
            "+log4j.appender.LOG_APPENDER.MaxBackupIndex=10\n", 
            "+log4j.appender.LOG_APPENDER.layout=org.apache.log4j.PatternLayout\n", 
            "+log4j.appender.LOG_APPENDER.layout.ConversionPattern=%d{ISO8601} [%X{ip}-%X{host}] [%t] %5p %c{1} %m%n\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/test-log4j.properties", 
      "from": "java/modules/integration/src/test/resources/test-log4j.properties"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,64", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework;\n", 
            "+\n", 
            "+import java.util.Properties;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Stores the results after executing a client\n", 
            "+ */\n", 
            "+public class SampleClientResult {\n", 
            "+\n", 
            "+    private boolean gotResponse;\n", 
            "+    private boolean isFinished;\n", 
            "+    private Exception exception;\n", 
            "+    private Properties clientProperties = new Properties();\n", 
            "+\n", 
            "+    public void setGotResponse(boolean gotResponse) {\n", 
            "+        this.gotResponse = gotResponse;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setException(Exception exception) {\n", 
            "+        this.exception = exception;\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean gotResponse() {\n", 
            "+        return gotResponse;\n", 
            "+    }\n", 
            "+\n", 
            "+    public Exception getException() {\n", 
            "+        return exception;\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean isFinished() {\n", 
            "+        return isFinished;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setFinished(boolean finished) {\n", 
            "+        isFinished = finished;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void addProperty(String pName, String pValue){\n", 
            "+        clientProperties.setProperty(pName,pValue);\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getProperty(String pName){\n", 
            "+        return clientProperties.getProperty(pName);\n", 
            "+    }\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleClientResult.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleClientResult.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,118", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework.clients;\n", 
            "+\n", 
            "+import javax.jms.*;\n", 
            "+import javax.naming.InitialContext;\n", 
            "+import java.io.File;\n", 
            "+import java.io.FileInputStream;\n", 
            "+import java.io.IOException;\n", 
            "+import java.io.InputStream;\n", 
            "+import java.util.Properties;\n", 
            "+\n", 
            "+public class JMSSampleClient {\n", 
            "+\n", 
            "+    private QueueConnection connection;\n", 
            "+    private QueueSession session;\n", 
            "+    private QueueSender sender;\n", 
            "+\n", 
            "+    public void connect(String destName) throws Exception {\n", 
            "+\n", 
            "+        Properties env = new Properties();\n", 
            "+        //String factoryURL = System.getProperty(\"java.naming.factory.url.pkgs\");\n", 
            "+        String connectionFactoryName = \"ConnectionFactory\";\n", 
            "+\n", 
            "+        if (System.getProperty(\"java.naming.provider.url\") == null) {\n", 
            "+            env.put(\"java.naming.provider.url\", \"tcp://localhost:61616\");\n", 
            "+        }\n", 
            "+        if (System.getProperty(\"java.naming.factory.initial\") == null) {\n", 
            "+            env.put(\"java.naming.factory.initial\",\n", 
            "+                \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\");\n", 
            "+        }\n", 
            "+        if (connectionFactoryName != null) {\n", 
            "+            env.put(\"transport.jms.ConnectionFactoryJNDIName\", connectionFactoryName);\n", 
            "+        }\n", 
            "+        \n", 
            "+        InitialContext ic = new InitialContext(env);\n", 
            "+        QueueConnectionFactory confac = (QueueConnectionFactory) ic.lookup(\"ConnectionFactory\");\n", 
            "+        connection = confac.createQueueConnection();\n", 
            "+        session = connection.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);\n", 
            "+        sender = session.createSender((Queue)ic.lookup(destName));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void shutdown() throws Exception {\n", 
            "+        sender.close();\n", 
            "+        session.close();\n", 
            "+        connection.close();\n", 
            "+    }\n", 
            "+\n", 
            "+    private void sendBytesMessage(byte[] payload) throws Exception {\n", 
            "+        BytesMessage bm = session.createBytesMessage();\n", 
            "+        bm.writeBytes(payload);\n", 
            "+        sender.send(bm);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void sendTextMessage(String payload) throws Exception {\n", 
            "+        TextMessage tm = session.createTextMessage(payload);\n", 
            "+        sender.send(tm);\n", 
            "+    }\n", 
            "+\n", 
            "+    public static byte[] getBytesFromFile(String fileName) throws IOException {\n", 
            "+\n", 
            "+        File file = new File(fileName);\n", 
            "+        InputStream is = new FileInputStream(file);\n", 
            "+        long length = file.length();\n", 
            "+\n", 
            "+        byte[] bytes = new byte[(int) length];\n", 
            "+\n", 
            "+        int offset = 0;\n", 
            "+        int numRead = 0;\n", 
            "+        while (offset < bytes.length\n", 
            "+            && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {\n", 
            "+            offset += numRead;\n", 
            "+        }\n", 
            "+\n", 
            "+        // Ensure all the bytes have been read in\n", 
            "+        if (offset < bytes.length) {\n", 
            "+            throw new IOException(\"Could not completely read file \" + file.getName());\n", 
            "+        }\n", 
            "+\n", 
            "+        is.close();\n", 
            "+        return bytes;\n", 
            "+    }\n", 
            "+\n", 
            "+    public static double getRandom(double base, double variance, boolean positiveOnly) {\n", 
            "+        double rand = Math.random();\n", 
            "+        return (base + ((rand > 0.5 ? 1 : -1) * variance * base * rand))\n", 
            "+            * (positiveOnly ? 1 : (rand > 0.5 ? 1 : -1));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void sendAsPox(String param) throws Exception{\n", 
            "+                 sendTextMessage(\n", 
            "+                    \"<m:placeOrder xmlns:m=\\\"http://services.samples\\\">\\n\" +\n", 
            "+                    \"    <m:order>\\n\" +\n", 
            "+                    \"        <m:price>\" + getRandom(100, 0.9, true) + \"</m:price>\\n\" +\n", 
            "+                    \"        <m:quantity>\" + (int) getRandom(10000, 1.0, true) + \"</m:quantity>\\n\" +\n", 
            "+                    \"        <m:symbol>\" + param + \"</m:symbol>\\n\" +\n", 
            "+                    \"    </m:order>\\n\" +\n", 
            "+                    \"</m:placeOrder>\");\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/JMSSampleClient.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/JMSSampleClient.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,103", 
          "lines": [
            "+package org.apache.synapse.samples.framework;\n", 
            "+\n", 
            "+import org.apache.commons.io.FileUtils;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.derby.drda.NetworkServerControl;\n", 
            "+\n", 
            "+import java.io.File;\n", 
            "+import java.net.InetAddress;\n", 
            "+import java.sql.Connection;\n", 
            "+import java.sql.DriverManager;\n", 
            "+import java.sql.SQLException;\n", 
            "+import java.sql.Statement;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Responsible for starting up and shutting down\n", 
            "+ * a derby server instance in order to run a sample test.\n", 
            "+ */\n", 
            "+public class DerbyServerController implements BackEndServerController {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(DerbyServerController.class);\n", 
            "+\n", 
            "+    private String serverName;\n", 
            "+    private SampleConfiguration.DerbyServerSampleConfiguration configuration;\n", 
            "+    private NetworkServerControl server;\n", 
            "+\n", 
            "+    public DerbyServerController(String serverName,\n", 
            "+                                 SampleConfiguration.DerbyServerSampleConfiguration configuration) {\n", 
            "+        this.serverName = serverName;\n", 
            "+        this.configuration = configuration;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getServerName() {\n", 
            "+        return serverName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean start() {\n", 
            "+        log.info(\"Preparing to start Derby server: \" + serverName);\n", 
            "+        try {\n", 
            "+            //server\n", 
            "+            Class.forName(\"org.apache.derby.jdbc.ClientDriver\").newInstance();\n", 
            "+            server = new NetworkServerControl\n", 
            "+                    (InetAddress.getByName(\"localhost\"), 1527);\n", 
            "+            server.start(null);\n", 
            "+            log.info(\"Derby is successfully started.\");\n", 
            "+\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.warn(\"There was an error starting Derby server: \" + serverName, e);\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+\n", 
            "+        //client\n", 
            "+        String dbName = \"synapsedb\";\n", 
            "+        String createTableQuery = \"CREATE table company(name varchar(10), id varchar(10), price double)\";\n", 
            "+        String connectionURL = \"jdbc:derby://localhost:1527/\" + dbName + \";create=true\";\n", 
            "+\n", 
            "+        java.util.Properties props = new java.util.Properties();\n", 
            "+        props.put(\"user\", \"synapse\");\n", 
            "+        props.put(\"password\", \"synapse\");\n", 
            "+        props.put(\"create\", \"true\");\n", 
            "+\n", 
            "+        try {\n", 
            "+            // on JDK 1.6 or higher, EmbeddedDriver get loaded automatically.\n", 
            "+            Class.forName(\"org.apache.derby.jdbc.ClientDriver\").newInstance();\n", 
            "+\n", 
            "+            log.info(\"Creating the sample database and connecting to server\");\n", 
            "+            Connection conn = DriverManager.getConnection(connectionURL, props);\n", 
            "+\n", 
            "+            Statement s = conn.createStatement();\n", 
            "+            log.info(\"Creating the sample table and inserting values\");\n", 
            "+            s.execute(createTableQuery);\n", 
            "+            s.execute(\"INSERT into company values ('IBM','c1',0.0)\");\n", 
            "+            s.execute(\" INSERT into company values ('SUN','c2',0.0)\");\n", 
            "+            s.execute(\" INSERT into company values ('MSFT','c3',0.0)\");\n", 
            "+            conn.commit();\n", 
            "+            return true;\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Error executing SQL queries\", e);\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean stop() {\n", 
            "+        log.info(\"Shutting down Derby server...\");\n", 
            "+        try {\n", 
            "+            try {\n", 
            "+                DriverManager.getConnection(\"jdbc:derby:;shutdown=true\");\n", 
            "+            } catch (SQLException se) {\n", 
            "+                if (se.getErrorCode() == 50000 && \"XJ015\".equals(se.getSQLState())) {\n", 
            "+                    // we got the expected exception\n", 
            "+                    log.info(\"Derby shut down normally\");\n", 
            "+                }\n", 
            "+            }\n", 
            "+            server.shutdown();\n", 
            "+            FileUtils.deleteDirectory(new File(\"./synapsedb\"));\n", 
            "+            return true;\n", 
            "+\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.warn(\"Error while trying to delete database directory\", e);\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+    }\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/DerbyServerController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/DerbyServerController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,43", 
          "lines": [
            "+package org.apache.synapse.samples.framework.clients;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axis2.client.async.AxisCallback;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+\n", 
            "+/**\n", 
            "+ * \n", 
            "+ */\n", 
            "+public class StockQuoteCallback implements AxisCallback {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(StockQuoteCallback.class);\n", 
            "+\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public StockQuoteCallback(StockQuoteSampleClient client) {\n", 
            "+        this.client=client;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void onMessage(org.apache.axis2.context.MessageContext messageContext) {\n", 
            "+        log.info(\"Response received to the callback\");\n", 
            "+        OMElement result\n", 
            "+                = messageContext.getEnvelope().getBody().getFirstElement();\n", 
            "+        // Detach the result to make sure that the element we return to the sample client\n", 
            "+        // is completely built\n", 
            "+        result.detach();\n", 
            "+        client.setResponse(result);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void onFault(org.apache.axis2.context.MessageContext messageContext) {\n", 
            "+        log.warn(\"Fault received to the callback : \" + messageContext.getEnvelope().\n", 
            "+                getBody().getFault());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void onError(Exception e) {\n", 
            "+        log.warn(\"Error inside callback : \" + e);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void onComplete() {\n", 
            "+        client.setCompleted(true);\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteCallback.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteCallback.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,491", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.clients;\n", 
            "+\n", 
            "+import org.apache.axiom.om.*;\n", 
            "+import org.apache.axiom.om.impl.builder.StAXOMBuilder;\n", 
            "+import org.apache.axiom.soap.SOAPBody;\n", 
            "+import org.apache.axiom.soap.SOAPEnvelope;\n", 
            "+import org.apache.axiom.soap.SOAPFactory;\n", 
            "+import org.apache.axiom.soap.SOAPHeader;\n", 
            "+import org.apache.axis2.AxisFault;\n", 
            "+import org.apache.axis2.Constants;\n", 
            "+import org.apache.axis2.addressing.EndpointReference;\n", 
            "+import org.apache.axis2.client.OperationClient;\n", 
            "+import org.apache.axis2.client.Options;\n", 
            "+import org.apache.axis2.client.ServiceClient;\n", 
            "+import org.apache.axis2.context.ConfigurationContext;\n", 
            "+import org.apache.axis2.context.ConfigurationContextFactory;\n", 
            "+import org.apache.axis2.context.MessageContext;\n", 
            "+import org.apache.axis2.transport.http.HTTPConstants;\n", 
            "+import org.apache.axis2.transport.http.HttpTransportProperties;\n", 
            "+import org.apache.axis2.wsdl.WSDLConstants;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.neethi.Policy;\n", 
            "+import org.apache.neethi.PolicyEngine;\n", 
            "+import org.apache.rampart.RampartMessageData;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SampleConfiguration;\n", 
            "+\n", 
            "+import javax.xml.namespace.QName;\n", 
            "+import java.net.URL;\n", 
            "+import java.util.HashMap;\n", 
            "+import java.util.Map;\n", 
            "+import java.util.Random;\n", 
            "+\n", 
            "+public class StockQuoteSampleClient {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(StockQuoteSampleClient.class);\n", 
            "+\n", 
            "+    private final static String COOKIE = \"Cookie\";\n", 
            "+    private final static String SET_COOKIE = \"Set-Cookie\";\n", 
            "+    private ConfigurationContext configContext = null;\n", 
            "+\n", 
            "+    private Options options;\n", 
            "+    private ServiceClient serviceClient;\n", 
            "+    private SampleClientResult clientResult;\n", 
            "+    private OMElement payload;\n", 
            "+    private OMElement response;\n", 
            "+    private boolean completed;\n", 
            "+    private SampleConfiguration.ClientSampleConfiguration configuration;\n", 
            "+\n", 
            "+    public StockQuoteSampleClient(SampleConfiguration.ClientSampleConfiguration configuration) {\n", 
            "+        this.configuration = configuration;\n", 
            "+    }\n", 
            "+\n", 
            "+    private void initializeClient(String addUrl, String trpUrl, String prxUrl,\n", 
            "+                                  String svcPolicy, long timeout) throws Exception {\n", 
            "+        log.info(\"initialing client config...\");\n", 
            "+        options = new Options();\n", 
            "+        clientResult = new SampleClientResult();\n", 
            "+        clientResult.setGotResponse(false);\n", 
            "+        payload = null;\n", 
            "+\n", 
            "+        log.info(\"creating axis2 configuration context using the repo: \" + configuration.getClientRepo());\n", 
            "+\n", 
            "+        configContext = ConfigurationContextFactory.\n", 
            "+                createConfigurationContextFromFileSystem(configuration.getClientRepo(),\n", 
            "+                        configuration.getAxis2Xml());\n", 
            "+        serviceClient = new ServiceClient(configContext, null);\n", 
            "+\n", 
            "+        log.info(\"setting address, transport, proxy urls where applicable\");\n", 
            "+        if (addUrl != null && !\"null\".equals(addUrl)) {\n", 
            "+            serviceClient.engageModule(\"addressing\");\n", 
            "+            options.setTo(new EndpointReference(addUrl));\n", 
            "+        }\n", 
            "+        if (trpUrl != null && !\"null\".equals(trpUrl)) {\n", 
            "+            options.setProperty(Constants.Configuration.TRANSPORT_URL, trpUrl);\n", 
            "+        }\n", 
            "+\n", 
            "+        if (prxUrl != null && !\"null\".equals(prxUrl)) {\n", 
            "+            HttpTransportProperties.ProxyProperties proxyProperties =\n", 
            "+                    new HttpTransportProperties.ProxyProperties();\n", 
            "+            URL url = new URL(prxUrl);\n", 
            "+            proxyProperties.setProxyName(url.getHost());\n", 
            "+            proxyProperties.setProxyPort(url.getPort());\n", 
            "+            proxyProperties.setUserName(\"\");\n", 
            "+            proxyProperties.setPassWord(\"\");\n", 
            "+            proxyProperties.setDomain(\"\");\n", 
            "+            options.setProperty(HTTPConstants.PROXY, proxyProperties);\n", 
            "+        }\n", 
            "+\n", 
            "+        // apply any service policies if any\n", 
            "+        if (svcPolicy != null && !\"null\".equals(svcPolicy) && svcPolicy.length() > 0) {\n", 
            "+            log.info(\"Using WS-Security\");\n", 
            "+            serviceClient.engageModule(\"addressing\");\n", 
            "+            serviceClient.engageModule(\"rampart\");\n", 
            "+            StAXOMBuilder builder = new StAXOMBuilder(svcPolicy);\n", 
            "+            Policy policy = PolicyEngine.getPolicy(builder.getDocumentElement());\n", 
            "+            options.setProperty(\n", 
            "+                    RampartMessageData.KEY_RAMPART_POLICY, policy);\n", 
            "+        }\n", 
            "+\n", 
            "+        if (timeout > 0) {\n", 
            "+            log.info(\"setting client timeout to: \" + timeout);\n", 
            "+            options.setTimeOutInMilliSeconds(timeout);\n", 
            "+        }\n", 
            "+\n", 
            "+        serviceClient.setOptions(options);\n", 
            "+    }\n", 
            "+\n", 
            "+    private void deInitializeClient() {\n", 
            "+        if (serviceClient != null) {\n", 
            "+            try {\n", 
            "+                log.info(\"cleaning up client\");\n", 
            "+                serviceClient.cleanup();\n", 
            "+                configContext.terminate();\n", 
            "+            } catch (AxisFault axisFault) {\n", 
            "+                log.error(\"Error terminating client\", axisFault);\n", 
            "+            }\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public SampleClientResult requestStandardQuote(String addUrl, String trpUrl, String prxUrl,\n", 
            "+                                                   String symbol, String svcPolicy) {\n", 
            "+        log.info(\"sending standard quote request\");\n", 
            "+        try {\n", 
            "+            initializeClient(addUrl, trpUrl, prxUrl, svcPolicy, 10000);\n", 
            "+\n", 
            "+            payload = StockQuoteHandler.createStandardQuoteRequest(\n", 
            "+                    symbol, 1);\n", 
            "+            options.setAction(\"urn:getQuote\");\n", 
            "+            OMElement resultElement = serviceClient.sendReceive(payload);\n", 
            "+            log.info(\"Standard :: Stock price = $\" +\n", 
            "+                    StockQuoteHandler.parseStandardQuoteResponse(resultElement));\n", 
            "+            clientResult.setGotResponse(true);\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Error invoking service\", e);\n", 
            "+            clientResult.setGotResponse(false);\n", 
            "+            clientResult.setException(e);\n", 
            "+        }\n", 
            "+        deInitializeClient();\n", 
            "+\n", 
            "+        return clientResult;\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+    public SampleClientResult requestDualQuote(String addUrl, String trpUrl,\n", 
            "+                                               String prxUrl, String symbol) {\n", 
            "+        log.info(\"sending dual quote request\");\n", 
            "+\n", 
            "+        try {\n", 
            "+            initializeClient(addUrl, trpUrl, prxUrl, null, 10000);\n", 
            "+\n", 
            "+            payload = StockQuoteHandler.createStandardQuoteRequest(\n", 
            "+                    symbol, 1);\n", 
            "+            options.setAction(\"urn:getQuote\");\n", 
            "+            //serviceClient.engageModule(\"addressing\");\n", 
            "+            setCompleted(false);\n", 
            "+            serviceClient.sendReceiveNonBlocking(payload, new StockQuoteCallback(this));\n", 
            "+\n", 
            "+            while (true) {\n", 
            "+                if (isCompleted()) {\n", 
            "+                    log.info(\"Standard dual channel :: Stock price = $\" +\n", 
            "+                            StockQuoteHandler.parseStandardQuoteResponse(getResponse()));\n", 
            "+                    clientResult.setGotResponse(true);\n", 
            "+                    break;\n", 
            "+                } else {\n", 
            "+                    Thread.sleep(100);\n", 
            "+                }\n", 
            "+            }\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Error invoking service\", e);\n", 
            "+            clientResult.setGotResponse(false);\n", 
            "+            clientResult.setException(e);\n", 
            "+        }\n", 
            "+        deInitializeClient();\n", 
            "+\n", 
            "+        return clientResult;\n", 
            "+    }\n", 
            "+\n", 
            "+    public SampleClientResult requestCustomQuote(String addUrl, String trpUrl,\n", 
            "+                                                 String prxUrl, String symbol) {\n", 
            "+        log.info(\"sending custom quote request\");\n", 
            "+\n", 
            "+        try {\n", 
            "+            initializeClient(addUrl, trpUrl, prxUrl, null, 10000);\n", 
            "+\n", 
            "+            payload = StockQuoteHandler.createCustomQuoteRequest(symbol);\n", 
            "+            options.setAction(\"urn:getQuote\");\n", 
            "+            OMElement resultElement = serviceClient.sendReceive(payload);\n", 
            "+            log.info(\"Custom :: Stock price = $\" +\n", 
            "+                    StockQuoteHandler.parseCustomQuoteResponse(resultElement));\n", 
            "+            clientResult.setGotResponse(true);\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Error invoking service\", e);\n", 
            "+            clientResult.setGotResponse(false);\n", 
            "+            clientResult.setException(e);\n", 
            "+        }\n", 
            "+        deInitializeClient();\n", 
            "+\n", 
            "+        return clientResult;\n", 
            "+    }\n", 
            "+\n", 
            "+    public SampleClientResult placeOrder(String addUrl, String trpUrl, String prxUrl, String symbol) {\n", 
            "+        log.info(\"sending fire and forget (place order) request\");\n", 
            "+\n", 
            "+        try {\n", 
            "+\n", 
            "+            initializeClient(addUrl, trpUrl, prxUrl, null, 10000);\n", 
            "+            double price = getRandom(100, 0.9, true);\n", 
            "+            int quantity = (int) getRandom(10000, 1.0, true);\n", 
            "+            payload = StockQuoteHandler.createPlaceOrderRequest(price, quantity, symbol);\n", 
            "+            options.setAction(\"urn:placeOrder\");\n", 
            "+\n", 
            "+            serviceClient.fireAndForget(payload);\n", 
            "+            Thread.sleep(5000);\n", 
            "+\n", 
            "+            log.info(\"Order placed for \" + quantity\n", 
            "+                    + \" shares of stock \" + symbol\n", 
            "+                    + \" at a price of $ \" + price);\n", 
            "+            clientResult.setGotResponse(true);\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Error invoking service\", e);\n", 
            "+            clientResult.setGotResponse(false);\n", 
            "+            clientResult.setException(e);\n", 
            "+        }\n", 
            "+        deInitializeClient();\n", 
            "+\n", 
            "+        return clientResult;\n", 
            "+    }\n", 
            "+\n", 
            "+    public SampleClientResult requestRestQuote(String addUrl, String trpUrl,\n", 
            "+                                               String prxUrl, String symbol) {\n", 
            "+        log.info(\"sending rest request\");\n", 
            "+\n", 
            "+        try {\n", 
            "+            initializeClient(addUrl, trpUrl, prxUrl, null, 10000);\n", 
            "+\n", 
            "+            payload = StockQuoteHandler.createStandardQuoteRequest(\n", 
            "+                    symbol, 1);\n", 
            "+            options.setAction(\"urn:getQuote\");\n", 
            "+            options.setProperty(Constants.Configuration.ENABLE_REST, Constants.VALUE_TRUE);\n", 
            "+            OMElement resultElement = serviceClient.sendReceive(payload);\n", 
            "+            log.info(\"Standard :: Stock price = $\" +\n", 
            "+                    StockQuoteHandler.parseStandardQuoteResponse(resultElement));\n", 
            "+            clientResult.setGotResponse(true);\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Error invoking service\", e);\n", 
            "+            clientResult.setGotResponse(false);\n", 
            "+            clientResult.setException(e);\n", 
            "+        }\n", 
            "+        deInitializeClient();\n", 
            "+\n", 
            "+        return clientResult;\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public SampleClientResult sessionlessClient(String addUrl, String trpUrl, int iterations) {\n", 
            "+        try {\n", 
            "+            boolean infinite = iterations <= 0;\n", 
            "+            OMFactory fac = OMAbstractFactory.getOMFactory();\n", 
            "+            OMElement value = fac.createOMElement(\"Value\", null);\n", 
            "+            value.setText(\"Sample string\");\n", 
            "+\n", 
            "+            initializeClient(addUrl, trpUrl, null, null, 10000);\n", 
            "+\n", 
            "+            options.setAction(\"urn:sampleOperation\");\n", 
            "+\n", 
            "+\n", 
            "+            String testString = \"\";\n", 
            "+\n", 
            "+            long i = 0;\n", 
            "+            while (i < iterations || infinite) {\n", 
            "+                serviceClient.getOptions().setManageSession(true);\n", 
            "+                OMElement responseElement = serviceClient.sendReceive(value);\n", 
            "+                String response = responseElement.getText();\n", 
            "+\n", 
            "+                if (!clientResult.gotResponse()) {\n", 
            "+                    clientResult.setGotResponse(true);\n", 
            "+                }\n", 
            "+\n", 
            "+                i++;\n", 
            "+                log.info(\"Request: \" + i + \" ==> \" + response);\n", 
            "+                testString = testString.concat(\":\" + i + \">\" + response + \":\");\n", 
            "+            }\n", 
            "+\n", 
            "+            clientResult.setFinished(true);\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Error invoking service\", e);\n", 
            "+            clientResult.setFinished(true);\n", 
            "+            clientResult.setException(e);\n", 
            "+        }\n", 
            "+        deInitializeClient();\n", 
            "+\n", 
            "+        return clientResult;\n", 
            "+    }\n", 
            "+\n", 
            "+    public SampleClientResult statefulClient(String addUrl, String trpUrl, int iterations) {\n", 
            "+        boolean infinite = false;\n", 
            "+        String session = null;\n", 
            "+\n", 
            "+        clientResult = new SampleClientResult();\n", 
            "+        clientResult.setGotResponse(false);\n", 
            "+\n", 
            "+        try {\n", 
            "+\n", 
            "+            SOAPEnvelope env1 = buildSoapEnvelope(\"c1\", \"v1\");\n", 
            "+            SOAPEnvelope env2 = buildSoapEnvelope(\"c2\", \"v1\");\n", 
            "+            SOAPEnvelope env3 = buildSoapEnvelope(\"c3\", \"v1\");\n", 
            "+            SOAPEnvelope[] envelopes = {env1, env2, env3};\n", 
            "+\n", 
            "+            initializeClient(addUrl, trpUrl, null, null, 10000);\n", 
            "+\n", 
            "+            options.setAction(\"urn:sampleOperation\");\n", 
            "+\n", 
            "+            int i = 0;\n", 
            "+            int sessionNumber;\n", 
            "+            String[] cookies = new String[3];\n", 
            "+            boolean httpSession = session != null && \"http\".equals(session);\n", 
            "+            int cookieNumber;\n", 
            "+            while (i < iterations || infinite) {\n", 
            "+                i++;\n", 
            "+                MessageContext messageContext = new MessageContext();\n", 
            "+                sessionNumber = getSessionTurn(envelopes.length);\n", 
            "+\n", 
            "+                messageContext.setEnvelope(envelopes[sessionNumber]);\n", 
            "+                cookieNumber = getSessionTurn(cookies.length);\n", 
            "+                String cookie = cookies[cookieNumber];\n", 
            "+                if (httpSession) {\n", 
            "+                    setSessionID(messageContext, cookie);\n", 
            "+                }\n", 
            "+                try {\n", 
            "+                    OperationClient op = serviceClient.createClient(ServiceClient.ANON_OUT_IN_OP);\n", 
            "+                    op.addMessageContext(messageContext);\n", 
            "+                    op.execute(true);\n", 
            "+\n", 
            "+                    MessageContext responseContext =\n", 
            "+                            op.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE);\n", 
            "+                    String receivedCookie = extractSessionID(responseContext);\n", 
            "+                    String receivedSetCookie = getSetCookieHeader(responseContext);\n", 
            "+                    if (httpSession) {\n", 
            "+\n", 
            "+                        if (receivedSetCookie != null && !\"\".equals(receivedSetCookie)) {\n", 
            "+                            cookies[cookieNumber] = receivedCookie;\n", 
            "+                        }\n", 
            "+                    }\n", 
            "+\n", 
            "+                    SOAPEnvelope responseEnvelope = responseContext.getEnvelope();\n", 
            "+\n", 
            "+                    OMElement vElement =\n", 
            "+                            responseEnvelope.getBody().getFirstChildWithName(new QName(\"Value\"));\n", 
            "+\n", 
            "+                    if (!clientResult.gotResponse()) {\n", 
            "+                        clientResult.setGotResponse(true);\n", 
            "+                    }\n", 
            "+\n", 
            "+                    log.info(\"Request: \" + i + \" with Session ID: \" +\n", 
            "+                                    (httpSession ? cookie : sessionNumber) + \" ---- \" +\n", 
            "+                                    \"Response : with  \" + (httpSession && receivedCookie != null ?\n", 
            "+                                    (receivedSetCookie != null ? receivedSetCookie :\n", 
            "+                                            receivedCookie) : \" \") + \" \" + vElement.getText());\n", 
            "+                } catch (AxisFault axisFault) {\n", 
            "+                    log.error(\"Request with session id \" +\n", 
            "+                            (httpSession ? cookie : sessionNumber) + \" \" +\n", 
            "+                            \"- Get a Fault : \" + axisFault.getMessage(), axisFault);\n", 
            "+                }\n", 
            "+            }\n", 
            "+\n", 
            "+            clientResult.setFinished(true);\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Error invoking service\", e);\n", 
            "+            clientResult.setFinished(true);\n", 
            "+            clientResult.setException(e);\n", 
            "+        }\n", 
            "+        deInitializeClient();\n", 
            "+\n", 
            "+        return clientResult;\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    private int getSessionTurn(int max) {\n", 
            "+        Random random = new Random();\n", 
            "+        return random.nextInt(max);\n", 
            "+    }\n", 
            "+\n", 
            "+    protected String getSetCookieHeader(MessageContext axis2MessageContext) {\n", 
            "+\n", 
            "+        Object o = axis2MessageContext.getProperty(MessageContext.TRANSPORT_HEADERS);\n", 
            "+\n", 
            "+        if (o != null && o instanceof Map) {\n", 
            "+            Map headerMap = (Map) o;\n", 
            "+            return (String) headerMap.get(SET_COOKIE);\n", 
            "+        }\n", 
            "+        return null;\n", 
            "+    }\n", 
            "+\n", 
            "+    protected void setSessionID(MessageContext axis2MessageContext, String value) {\n", 
            "+\n", 
            "+        if (value == null) {\n", 
            "+            return;\n", 
            "+        }\n", 
            "+        Map map = (Map) axis2MessageContext.getProperty(HTTPConstants.HTTP_HEADERS);\n", 
            "+        if (map == null) {\n", 
            "+            map = new HashMap();\n", 
            "+            axis2MessageContext.setProperty(HTTPConstants.HTTP_HEADERS, map);\n", 
            "+        }\n", 
            "+        map.put(COOKIE, value);\n", 
            "+    }\n", 
            "+\n", 
            "+    protected String extractSessionID(MessageContext axis2MessageContext) {\n", 
            "+\n", 
            "+        Object o = axis2MessageContext.getProperty(MessageContext.TRANSPORT_HEADERS);\n", 
            "+\n", 
            "+        if (o != null && o instanceof Map) {\n", 
            "+            Map headerMap = (Map) o;\n", 
            "+            String cookie = (String) headerMap.get(SET_COOKIE);\n", 
            "+            if (cookie == null) {\n", 
            "+                cookie = (String) headerMap.get(COOKIE);\n", 
            "+            } else {\n", 
            "+                cookie = cookie.split(\";\")[0];\n", 
            "+            }\n", 
            "+            return cookie;\n", 
            "+        }\n", 
            "+        return null;\n", 
            "+    }\n", 
            "+\n", 
            "+    private SOAPEnvelope buildSoapEnvelope(String clientID, String value) {\n", 
            "+        SOAPFactory soapFactory = OMAbstractFactory.getSOAP12Factory();\n", 
            "+\n", 
            "+        SOAPEnvelope envelope = soapFactory.createSOAPEnvelope();\n", 
            "+\n", 
            "+        SOAPHeader header = soapFactory.createSOAPHeader();\n", 
            "+        envelope.addChild(header);\n", 
            "+\n", 
            "+        OMNamespace synNamespace = soapFactory.\n", 
            "+                createOMNamespace(\"http://ws.apache.org/ns/synapse\", \"syn\");\n", 
            "+        OMElement clientIDElement = soapFactory.createOMElement(\"ClientID\", synNamespace);\n", 
            "+        clientIDElement.setText(clientID);\n", 
            "+        header.addChild(clientIDElement);\n", 
            "+\n", 
            "+        SOAPBody body = soapFactory.createSOAPBody();\n", 
            "+        envelope.addChild(body);\n", 
            "+\n", 
            "+        OMElement valueElement = soapFactory.createOMElement(\"Value\", null);\n", 
            "+        valueElement.setText(value);\n", 
            "+        body.addChild(valueElement);\n", 
            "+\n", 
            "+        return envelope;\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    private double getRandom(double base, double varience, boolean onlypositive) {\n", 
            "+        double rand = Math.random();\n", 
            "+        return (base + ((rand > 0.5 ? 1 : -1) * varience * base * rand))\n", 
            "+                * (onlypositive ? 1 : (rand > 0.5 ? 1 : -1));\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean isCompleted() {\n", 
            "+        return completed;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setCompleted(boolean completed) {\n", 
            "+        this.completed = completed;\n", 
            "+    }\n", 
            "+\n", 
            "+    public OMElement getResponse() {\n", 
            "+        return response;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setResponse(OMElement response) {\n", 
            "+        this.response = response;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteSampleClient.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteSampleClient.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,32", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Specifies the operations associated with controlling\n", 
            "+ * the mediation engine - starting up and shutting down.\n", 
            "+ */\n", 
            "+public interface ProcessController {\n", 
            "+\n", 
            "+    public boolean startProcess();\n", 
            "+\n", 
            "+    public boolean stopProcess();\n", 
            "+\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/ProcessController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/ProcessController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,19", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>0</sampleID>\n", 
            "+    <sampleName>Introduction to Synapse</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+\t<!--if we don't specify the optional values, framework will use defaults-->\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_0.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample0.xml", 
      "from": "java/modules/integration/src/test/resources/sample0.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>1</sampleID>\n", 
            "+    <sampleName>Simple content based routing (CBR) of messages</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_1.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample1.xml", 
      "from": "java/modules/integration/src/test/resources/sample1.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>2</sampleID>\n", 
            "+    <sampleName>CBR with the Switch-case mediator, using message properties</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_2.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample2.xml", 
      "from": "java/modules/integration/src/test/resources/sample2.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>3</sampleID>\n", 
            "+    <sampleName>Local Registry entry definitions, reusable endpoints and sequences</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_3.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample3.xml", 
      "from": "java/modules/integration/src/test/resources/sample3.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>4</sampleID>\n", 
            "+    <sampleName>Introduction to error handling</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_4.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample4.xml", 
      "from": "java/modules/integration/src/test/resources/sample4.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>5</sampleID>\n", 
            "+    <sampleName>Creating SOAP fault messages and changing the direction of a message</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_5.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample5.xml", 
      "from": "java/modules/integration/src/test/resources/sample5.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>6</sampleID>\n", 
            "+    <sampleName>Manipulating SOAP headers, and filtering incoming and outgoing messages</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_6.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample6.xml", 
      "from": "java/modules/integration/src/test/resources/sample6.xml"
    }, 
    {
      "chunks": [], 
      "to": "java/modules/integration/src/test/resources/trust.jks", 
      "from": "java/modules/integration/src/test/resources/trust.jks"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,378", 
          "lines": [
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<axisconfig name=\"AxisJava2.0\">\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Parameters -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <parameter name=\"hotdeployment\">true</parameter>\n", 
            "+    <parameter name=\"hotupdate\">false</parameter>\n", 
            "+    <parameter name=\"enableMTOM\">false</parameter>\n", 
            "+    <parameter name=\"enableSwA\">false</parameter>\n", 
            "+\n", 
            "+    <!--Uncomment if you want to enable file caching for attachments -->\n", 
            "+    <!--parameter name=\"cacheAttachments\">true</parameter>\n", 
            "+    <parameter name=\"attachmentDIR\"></parameter>\n", 
            "+    <parameter name=\"sizeThreshold\">4000</parameter-->\n", 
            "+\n", 
            "+    <!--This will give out the timout of the configuration contexts, in milliseconds-->\n", 
            "+    <parameter name=\"ConfigContextTimeoutInterval\">30000</parameter>\n", 
            "+\n", 
            "+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->\n", 
            "+    <!--that behavior.-->\n", 
            "+    <parameter name=\"sendStacktraceDetailsWithFaults\">false</parameter>\n", 
            "+\n", 
            "+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->\n", 
            "+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->\n", 
            "+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->\n", 
            "+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->\n", 
            "+    <parameter name=\"DrillDownToRootCauseForFaultReason\">false</parameter>\n", 
            "+\n", 
            "+    <parameter name=\"userName\">admin</parameter>\n", 
            "+    <parameter name=\"password\">axis2</parameter>\n", 
            "+\n", 
            "+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->\n", 
            "+    <!--ServicesDirectory only works on the following cases-->\n", 
            "+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->\n", 
            "+    <!---When creating URL Based configurator with URL \"file://\"  -->\n", 
            "+    <!--- War based configurator with expanded case , -->\n", 
            "+\n", 
            "+    <!--All the other scenarios it will be ignored.-->\n", 
            "+    <!--<parameter name=\"ServicesDirectory\">service</parameter>-->\n", 
            "+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->\n", 
            "+    <!--<parameter name=\"ModulesDirectory\">modules</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+\n", 
            "+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->\n", 
            "+    <!--root which can configured using the following contextRoot parameter-->\n", 
            "+    <parameter name=\"contextRoot\">/</parameter>\n", 
            "+\n", 
            "+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->\n", 
            "+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->\n", 
            "+    <!--context path to proper Axis2 servlets-->\n", 
            "+    <parameter name=\"servicePath\">services</parameter>\n", 
            "+    <parameter name=\"restPath\">rest</parameter>\n", 
            "+\n", 
            "+    <!-- Following parameter will completely disable REST handling in Axis2-->\n", 
            "+    <parameter name=\"disableREST\" locked=\"true\">false</parameter>\n", 
            "+\n", 
            "+    <!--POJO deployer , this will alow users to drop .class file and make that into a service-->\n", 
            "+    <deployer extension=\".class\" directory=\"pojo\" class=\"org.apache.axis2.deployment.POJODeployer\"/>\n", 
            "+\n", 
            "+    <!-- Following parameter will set the host name for the epr-->\n", 
            "+    <!--<parameter name=\"hostname\" locked=\"true\">myhost.com</parameter>-->\n", 
            "+\n", 
            "+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->\n", 
            "+    <!-- use this parameter to override autodetected url -->\n", 
            "+    <!--<parameter name=\"httpFrontendHostUrl\">https://someotherhost/context</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+    <!--    The way of adding listener to the system-->\n", 
            "+    <!--    <listener class=\"org.apache.axis2.ObserverIMPL\">-->\n", 
            "+    <!--        <parameter name=\"RSS_URL\">http://127.0.0.1/rss</parameter>-->\n", 
            "+    <!--    </listener>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Receivers -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->\n", 
            "+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->\n", 
            "+    <!--any operation -->\n", 
            "+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->\n", 
            "+    <messageReceivers>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+    </messageReceivers>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Formatter -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to message formatter mapping can be used to implement support for different message -->\n", 
            "+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageFormatters>\n", 
            "+        <messageFormatter contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.XFormURLEncodedFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/>\n", 
            "+    </messageFormatters>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Builders -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to builder mapping can be used to implement support for different message -->\n", 
            "+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageBuilders>\n", 
            "+        <messageBuilder contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.builder.XFormURLEncodedBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/>\n", 
            "+    </messageBuilders>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Ins -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <transportReceiver name=\"http\"\n", 
            "+                       class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOListener\">\n", 
            "+        <parameter name=\"port\">9000</parameter>\n", 
            "+    \t<parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->\n", 
            "+    <transportReceiver name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener\">\n", 
            "+    \t<parameter name=\"port\" locked=\"false\">9002</parameter>\n", 
            "+    \t<parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)-->\n", 
            "+    <transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\">\n", 
            "+        <parameter name=\"myTopicConnectionFactory\">\n", 
            "+        \t<parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+        \t<parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+        \t<parameter name=\"transport.jms.ConnectionFactoryJNDIName\">TopicConnectionFactory</parameter>\n", 
            "+\t\t<parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\">topic</parameter>\n", 
            "+        </parameter>\n", 
            "+\n", 
            "+        <parameter name=\"myQueueConnectionFactory\">\n", 
            "+        \t<parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+        \t<parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+        \t<parameter name=\"transport.jms.ConnectionFactoryJNDIName\">QueueConnectionFactory</parameter>\n", 
            "+\t\t<parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\">queue</parameter>\n", 
            "+        </parameter>\n", 
            "+\n", 
            "+        <parameter name=\"default\">\n", 
            "+        \t<parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+        \t<parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+        \t<parameter name=\"transport.jms.ConnectionFactoryJNDIName\">QueueConnectionFactory</parameter>\n", 
            "+\t\t<parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\">queue</parameter>\n", 
            "+        </parameter>\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!--transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"-->\n", 
            "+        <!-- configure any optional POP3/IMAP properties\n", 
            "+        check com.sun.mail.pop3 and com.sun.mail.imap package documentation for more details\n", 
            "+    </transportReceiver-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Outs -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <transportSender name=\"http\"\n", 
            "+                     class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSender\">\n", 
            "+        <parameter name=\"PROTOCOL\">HTTP/1.1</parameter>\n", 
            "+        <parameter name=\"Transfer-Encoding\">chunked</parameter>\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <transportSender name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender\">\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <transportSender name=\"jms\"\n", 
            "+                     class=\"org.apache.axis2.transport.jms.JMSSender\"/>\n", 
            "+\n", 
            "+    <!-- Uncomment and configure the SMTP server information\n", 
            "+    check com.sun.mail.smtp package documentation for descriptions of properties\n", 
            "+    <transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\">\n", 
            "+        <parameter name=\"mail.smtp.host\">smtp.gmail.com</parameter>\n", 
            "+        <parameter name=\"mail.smtp.port\">587</parameter>\n", 
            "+        <parameter name=\"mail.smtp.starttls.enable\">true</parameter>\n", 
            "+        <parameter name=\"mail.smtp.user\">synapse.test.0</parameter>\n", 
            "+        <parameter name=\"mail.smtp.password\">mailpassword</parameter>\n", 
            "+        <parameter name=\"mail.smtp.auth\">true</parameter>\n", 
            "+    </transportSender>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Global Modules  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Comment this to disable Addressing -->\n", 
            "+    <module ref=\"addressing\"/>\n", 
            "+\n", 
            "+    <!--Configuring module , providing parameters for modules whether they refer or not-->\n", 
            "+    <!--<moduleConfig name=\"addressing\">-->\n", 
            "+    <!--<parameter name=\"addressingPara\">N/A</parameter>-->\n", 
            "+    <!--</moduleConfig>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Clustering  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Configure the following for preparing Axis2 to a clustered environment -->\n", 
            "+    <cluster class=\"org.apache.axis2.clustering.tribes.TribesClusterManager\" enable=\"false\">\n", 
            "+        <parameter name=\"AvoidInitiation\">true</parameter>\n", 
            "+        <parameter name=\"membershipScheme\">multicast</parameter>\n", 
            "+        <parameter name=\"domain\">apache.axis2.app.domain</parameter>\n", 
            "+        <parameter name=\"synchronizeAll\">true</parameter>\n", 
            "+        <parameter name=\"maxRetries\">10</parameter>\n", 
            "+        <parameter name=\"mcastAddress\">228.0.0.4</parameter>\n", 
            "+        <parameter name=\"mcastPort\">45564</parameter>\n", 
            "+        <parameter name=\"mcastFrequency\">500</parameter>\n", 
            "+        <parameter name=\"memberDropTime\">3000</parameter>\n", 
            "+        <parameter name=\"mcastBindAddress\">127.0.0.1</parameter>\n", 
            "+        <parameter name=\"localMemberHost\">127.0.0.1</parameter>\n", 
            "+        <contextManager class=\"org.apache.axis2.clustering.context.DefaultContextManager\"\n", 
            "+                         enable=\"false\">\n", 
            "+            <listener class=\"org.apache.axis2.clustering.context.DefaultContextManagerListener\"/>\n", 
            "+            <replication>\n", 
            "+                <defaults>\n", 
            "+                    <exclude name=\"local_*\"/>\n", 
            "+                    <exclude name=\"LOCAL_*\"/>\n", 
            "+                </defaults>\n", 
            "+                <context class=\"org.apache.axis2.context.ConfigurationContext\">\n", 
            "+                    <exclude name=\"UseAsyncOperations\"/>\n", 
            "+                    <exclude name=\"SequencePropertyBeanMap\"/>\n", 
            "+                </context>\n", 
            "+                <context class=\"org.apache.axis2.context.ServiceGroupContext\">\n", 
            "+                    <exclude name=\"my.sandesha.*\"/>\n", 
            "+                </context>\n", 
            "+                <context class=\"org.apache.axis2.context.ServiceContext\">\n", 
            "+                    <exclude name=\"my.sandesha.*\"/>\n", 
            "+                </context>\n", 
            "+            </replication>\n", 
            "+        </contextManager>\n", 
            "+    </cluster>\n", 
            "+     \n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Phases  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <phaseOrder type=\"InFlow\">\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <phase name=\"Transport\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->\n", 
            "+        <phase name=\"OperationInPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutPhase\"/>\n", 
            "+        <!--system predefined phase-->\n", 
            "+        <!--these phase will run irrespective of the service-->\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"InFaultFlow\">\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"OperationInFaultPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFaultFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutFaultPhase\"/>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+</axisconfig>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/axis2Xml/axis2Server/axis2_jms.xml", 
      "from": "java/modules/integration/src/test/resources/axis2Xml/axis2Server/axis2_jms.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,339", 
          "lines": [
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<axisconfig name=\"AxisJava2.0\">\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Parameters -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <parameter name=\"hotdeployment\">true</parameter>\n", 
            "+    <parameter name=\"hotupdate\">false</parameter>\n", 
            "+    <parameter name=\"enableMTOM\">false</parameter>\n", 
            "+    <parameter name=\"enableSwA\">false</parameter>\n", 
            "+\n", 
            "+    <!--Uncomment if you want to enable file caching for attachments -->\n", 
            "+    <!--parameter name=\"cacheAttachments\">true</parameter>\n", 
            "+    <parameter name=\"attachmentDIR\"></parameter>\n", 
            "+    <parameter name=\"sizeThreshold\">4000</parameter-->\n", 
            "+\n", 
            "+    <!--This will give out the timout of the configuration contexts, in milliseconds-->\n", 
            "+    <parameter name=\"ConfigContextTimeoutInterval\">30000</parameter>\n", 
            "+\n", 
            "+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->\n", 
            "+    <!--that behavior.-->\n", 
            "+    <parameter name=\"sendStacktraceDetailsWithFaults\">false</parameter>\n", 
            "+\n", 
            "+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->\n", 
            "+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->\n", 
            "+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->\n", 
            "+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->\n", 
            "+    <parameter name=\"DrillDownToRootCauseForFaultReason\">false</parameter>\n", 
            "+\n", 
            "+    <parameter name=\"userName\">admin</parameter>\n", 
            "+    <parameter name=\"password\">axis2</parameter>\n", 
            "+\n", 
            "+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->\n", 
            "+    <!--ServicesDirectory only works on the following cases-->\n", 
            "+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->\n", 
            "+    <!---When creating URL Based configurator with URL \"file://\"  -->\n", 
            "+    <!--- War based configurator with expanded case , -->\n", 
            "+\n", 
            "+    <!--All the other scenarios it will be ignored.-->\n", 
            "+    <!--<parameter name=\"ServicesDirectory\">service</parameter>-->\n", 
            "+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->\n", 
            "+    <!--<parameter name=\"ModulesDirectory\">modules</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+\n", 
            "+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->\n", 
            "+    <!--root which can configured using the following contextRoot parameter-->\n", 
            "+    <parameter name=\"contextRoot\">/</parameter>\n", 
            "+\n", 
            "+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->\n", 
            "+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->\n", 
            "+    <!--context path to proper Axis2 servlets-->\n", 
            "+    <parameter name=\"servicePath\">services</parameter>\n", 
            "+    <parameter name=\"restPath\">rest</parameter>\n", 
            "+\n", 
            "+    <!-- Following parameter will completely disable REST handling in Axis2-->\n", 
            "+    <parameter name=\"disableREST\" locked=\"true\">false</parameter>\n", 
            "+\n", 
            "+    <!--POJO deployer , this will alow users to drop .class file and make that into a service-->\n", 
            "+    <deployer extension=\".class\" directory=\"pojo\" class=\"org.apache.axis2.deployment.POJODeployer\"/>\n", 
            "+\n", 
            "+    <!-- Following parameter will set the host name for the epr-->\n", 
            "+    <!--<parameter name=\"hostname\" locked=\"true\">myhost.com</parameter>-->\n", 
            "+\n", 
            "+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->\n", 
            "+    <!-- use this parameter to override autodetected url -->\n", 
            "+    <!--<parameter name=\"httpFrontendHostUrl\">https://someotherhost/context</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+    <!--    The way of adding listener to the system-->\n", 
            "+    <!--    <listener class=\"org.apache.axis2.ObserverIMPL\">-->\n", 
            "+    <!--        <parameter name=\"RSS_URL\">http://127.0.0.1/rss</parameter>-->\n", 
            "+    <!--    </listener>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Receivers -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->\n", 
            "+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->\n", 
            "+    <!--any operation -->\n", 
            "+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->\n", 
            "+    <messageReceivers>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+    </messageReceivers>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Formatter -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to message formatter mapping can be used to implement support for different message -->\n", 
            "+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageFormatters>\n", 
            "+        <messageFormatter contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.XFormURLEncodedFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/>\n", 
            "+    </messageFormatters>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Builders -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to builder mapping can be used to implement support for different message -->\n", 
            "+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageBuilders>\n", 
            "+        <messageBuilder contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.builder.XFormURLEncodedBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/>\n", 
            "+    </messageBuilders>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Ins -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <transportReceiver name=\"http\"\n", 
            "+                       class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOListener\">\n", 
            "+        <parameter name=\"port\">9000</parameter>\n", 
            "+    \t<parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->\n", 
            "+    <transportReceiver name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener\">\n", 
            "+    \t<parameter name=\"port\" locked=\"false\">9002</parameter>\n", 
            "+    \t<parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+        <!--<parameter name=\"SSLVerifyClient\">require</parameter>\n", 
            "+            supports optional|require or defaults to none -->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Outs -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <transportSender name=\"http\"\n", 
            "+                     class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSender\">\n", 
            "+        <parameter name=\"PROTOCOL\">HTTP/1.1</parameter>\n", 
            "+        <parameter name=\"Transfer-Encoding\">chunked</parameter>\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <transportSender name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender\">\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+        <!--<parameter name=\"HostnameVerifier\">DefaultAndLocalhost</parameter>\n", 
            "+            supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Global Modules  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Comment this to disable Addressing -->\n", 
            "+    <module ref=\"addressing\"/>\n", 
            "+\n", 
            "+    <!--Configuring module , providing parameters for modules whether they refer or not-->\n", 
            "+    <!--<moduleConfig name=\"addressing\">-->\n", 
            "+    <!--<parameter name=\"addressingPara\">N/A</parameter>-->\n", 
            "+    <!--</moduleConfig>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Clustering  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Configure the following for preparing Axis2 to a clustered environment -->\n", 
            "+    <cluster class=\"org.apache.axis2.clustering.tribes.TribesClusterManager\" enable=\"false\">\n", 
            "+        <parameter name=\"AvoidInitiation\">true</parameter>\n", 
            "+        <parameter name=\"membershipScheme\">multicast</parameter>\n", 
            "+        <parameter name=\"domain\">apache.axis2.app.domain</parameter>\n", 
            "+        <parameter name=\"synchronizeAll\">true</parameter>\n", 
            "+        <parameter name=\"maxRetries\">10</parameter>\n", 
            "+        <parameter name=\"mcastAddress\">228.0.0.4</parameter>\n", 
            "+        <parameter name=\"mcastPort\">45564</parameter>\n", 
            "+        <parameter name=\"mcastFrequency\">500</parameter>\n", 
            "+        <parameter name=\"memberDropTime\">3000</parameter>\n", 
            "+        <parameter name=\"mcastBindAddress\">127.0.0.1</parameter>\n", 
            "+        <parameter name=\"localMemberHost\">127.0.0.1</parameter>\n", 
            "+        <contextManager class=\"org.apache.axis2.clustering.context.DefaultContextManager\"\n", 
            "+                         enable=\"false\">\n", 
            "+            <listener class=\"org.apache.axis2.clustering.context.DefaultContextManagerListener\"/>\n", 
            "+            <replication>\n", 
            "+                <defaults>\n", 
            "+                    <exclude name=\"local_*\"/>\n", 
            "+                    <exclude name=\"LOCAL_*\"/>\n", 
            "+                </defaults>\n", 
            "+                <context class=\"org.apache.axis2.context.ConfigurationContext\">\n", 
            "+                    <exclude name=\"UseAsyncOperations\"/>\n", 
            "+                    <exclude name=\"SequencePropertyBeanMap\"/>\n", 
            "+                </context>\n", 
            "+                <context class=\"org.apache.axis2.context.ServiceGroupContext\">\n", 
            "+                    <exclude name=\"my.sandesha.*\"/>\n", 
            "+                </context>\n", 
            "+                <context class=\"org.apache.axis2.context.ServiceContext\">\n", 
            "+                    <exclude name=\"my.sandesha.*\"/>\n", 
            "+                </context>\n", 
            "+            </replication>\n", 
            "+        </contextManager>\n", 
            "+    </cluster>\n", 
            "+     \n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Phases  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <phaseOrder type=\"InFlow\">\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <phase name=\"Transport\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->\n", 
            "+        <phase name=\"OperationInPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutPhase\"/>\n", 
            "+        <!--system predefined phase-->\n", 
            "+        <!--these phase will run irrespective of the service-->\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"InFaultFlow\">\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"OperationInFaultPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFaultFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutFaultPhase\"/>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+</axisconfig>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/axis2Xml/axis2Server/axis2_def.xml", 
      "from": "java/modules/integration/src/test/resources/axis2Xml/axis2Server/axis2_def.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,339", 
          "lines": [
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<axisconfig name=\"AxisJava2.0\">\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Parameters -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <parameter name=\"hotdeployment\">true</parameter>\n", 
            "+    <parameter name=\"hotupdate\">false</parameter>\n", 
            "+    <parameter name=\"enableMTOM\">false</parameter>\n", 
            "+    <parameter name=\"enableSwA\">false</parameter>\n", 
            "+\n", 
            "+    <!--Uncomment if you want to enable file caching for attachments -->\n", 
            "+    <!--parameter name=\"cacheAttachments\">true</parameter>\n", 
            "+    <parameter name=\"attachmentDIR\"></parameter>\n", 
            "+    <parameter name=\"sizeThreshold\">4000</parameter-->\n", 
            "+\n", 
            "+    <!--This will give out the timout of the configuration contexts, in milliseconds-->\n", 
            "+    <parameter name=\"ConfigContextTimeoutInterval\">30000</parameter>\n", 
            "+\n", 
            "+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->\n", 
            "+    <!--that behavior.-->\n", 
            "+    <parameter name=\"sendStacktraceDetailsWithFaults\">false</parameter>\n", 
            "+\n", 
            "+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->\n", 
            "+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->\n", 
            "+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->\n", 
            "+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->\n", 
            "+    <parameter name=\"DrillDownToRootCauseForFaultReason\">false</parameter>\n", 
            "+\n", 
            "+    <parameter name=\"userName\">admin</parameter>\n", 
            "+    <parameter name=\"password\">axis2</parameter>\n", 
            "+\n", 
            "+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->\n", 
            "+    <!--ServicesDirectory only works on the following cases-->\n", 
            "+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->\n", 
            "+    <!---When creating URL Based configurator with URL \"file://\"  -->\n", 
            "+    <!--- War based configurator with expanded case , -->\n", 
            "+\n", 
            "+    <!--All the other scenarios it will be ignored.-->\n", 
            "+    <!--<parameter name=\"ServicesDirectory\">service</parameter>-->\n", 
            "+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->\n", 
            "+    <!--<parameter name=\"ModulesDirectory\">modules</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+\n", 
            "+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->\n", 
            "+    <!--root which can configured using the following contextRoot parameter-->\n", 
            "+    <parameter name=\"contextRoot\">/</parameter>\n", 
            "+\n", 
            "+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->\n", 
            "+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->\n", 
            "+    <!--context path to proper Axis2 servlets-->\n", 
            "+    <parameter name=\"servicePath\">services</parameter>\n", 
            "+    <parameter name=\"restPath\">rest</parameter>\n", 
            "+\n", 
            "+    <!-- Following parameter will completely disable REST handling in Axis2-->\n", 
            "+    <parameter name=\"disableREST\" locked=\"true\">false</parameter>\n", 
            "+\n", 
            "+    <!--POJO deployer , this will alow users to drop .class file and make that into a service-->\n", 
            "+    <deployer extension=\".class\" directory=\"pojo\" class=\"org.apache.axis2.deployment.POJODeployer\"/>\n", 
            "+\n", 
            "+    <!-- Following parameter will set the host name for the epr-->\n", 
            "+    <!--<parameter name=\"hostname\" locked=\"true\">myhost.com</parameter>-->\n", 
            "+\n", 
            "+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->\n", 
            "+    <!-- use this parameter to override autodetected url -->\n", 
            "+    <!--<parameter name=\"httpFrontendHostUrl\">https://someotherhost/context</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+    <!--    The way of adding listener to the system-->\n", 
            "+    <!--    <listener class=\"org.apache.axis2.ObserverIMPL\">-->\n", 
            "+    <!--        <parameter name=\"RSS_URL\">http://127.0.0.1/rss</parameter>-->\n", 
            "+    <!--    </listener>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Receivers -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->\n", 
            "+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->\n", 
            "+    <!--any operation -->\n", 
            "+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->\n", 
            "+    <messageReceivers>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+    </messageReceivers>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Formatter -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to message formatter mapping can be used to implement support for different message -->\n", 
            "+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageFormatters>\n", 
            "+        <messageFormatter contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.XFormURLEncodedFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/>\n", 
            "+    </messageFormatters>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Builders -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to builder mapping can be used to implement support for different message -->\n", 
            "+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageBuilders>\n", 
            "+        <messageBuilder contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.builder.XFormURLEncodedBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/>\n", 
            "+    </messageBuilders>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Ins -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <transportReceiver name=\"http\"\n", 
            "+                       class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOListener\">\n", 
            "+        <parameter name=\"port\">9000</parameter>\n", 
            "+    \t<parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->\n", 
            "+    <transportReceiver name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener\">\n", 
            "+    \t<parameter name=\"port\" locked=\"false\">9002</parameter>\n", 
            "+    \t<parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+        <!--<parameter name=\"SSLVerifyClient\">require</parameter>\n", 
            "+            supports optional|require or defaults to none -->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Outs -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <transportSender name=\"http\"\n", 
            "+                     class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSender\">\n", 
            "+        <parameter name=\"PROTOCOL\">HTTP/1.1</parameter>\n", 
            "+        <parameter name=\"Transfer-Encoding\">chunked</parameter>\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <transportSender name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender\">\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+        <!--<parameter name=\"HostnameVerifier\">DefaultAndLocalhost</parameter>\n", 
            "+            supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Global Modules  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Comment this to disable Addressing -->\n", 
            "+    <module ref=\"addressing\"/>\n", 
            "+\n", 
            "+    <!--Configuring module , providing parameters for modules whether they refer or not-->\n", 
            "+    <!--<moduleConfig name=\"addressing\">-->\n", 
            "+    <!--<parameter name=\"addressingPara\">N/A</parameter>-->\n", 
            "+    <!--</moduleConfig>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Clustering  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Configure the following for preparing Axis2 to a clustered environment -->\n", 
            "+    <clustering class=\"org.apache.axis2.clustering.tribes.TribesClusteringAgent\" enable=\"true\">\n", 
            "+        <parameter name=\"AvoidInitiation\">true</parameter>\n", 
            "+        <parameter name=\"membershipScheme\">multicast</parameter>\n", 
            "+        <parameter name=\"domain\">apache.axis2.app.domain</parameter>\n", 
            "+        <parameter name=\"synchronizeAll\">true</parameter>\n", 
            "+        <parameter name=\"maxRetries\">10</parameter>\n", 
            "+        <parameter name=\"mcastAddress\">228.0.0.4</parameter>\n", 
            "+        <parameter name=\"mcastPort\">45564</parameter>\n", 
            "+        <parameter name=\"mcastFrequency\">500</parameter>\n", 
            "+        <parameter name=\"memberDropTime\">3000</parameter>\n", 
            "+        <parameter name=\"mcastBindAddress\">${replace.me}</parameter>\n", 
            "+        <parameter name=\"localMemberHost\">${replace.me}</parameter>\n", 
            "+        <contextManager class=\"org.apache.axis2.clustering.context.DefaultContextManager\"\n", 
            "+                         enable=\"false\">\n", 
            "+            <listener class=\"org.apache.axis2.clustering.context.DefaultContextManagerListener\"/>\n", 
            "+            <replication>\n", 
            "+                <defaults>\n", 
            "+                    <exclude name=\"local_*\"/>\n", 
            "+                    <exclude name=\"LOCAL_*\"/>\n", 
            "+                </defaults>\n", 
            "+                <context class=\"org.apache.axis2.context.ConfigurationContext\">\n", 
            "+                    <exclude name=\"UseAsyncOperations\"/>\n", 
            "+                    <exclude name=\"SequencePropertyBeanMap\"/>\n", 
            "+                </context>\n", 
            "+                <context class=\"org.apache.axis2.context.ServiceGroupContext\">\n", 
            "+                    <exclude name=\"my.sandesha.*\"/>\n", 
            "+                </context>\n", 
            "+                <context class=\"org.apache.axis2.context.ServiceContext\">\n", 
            "+                    <exclude name=\"my.sandesha.*\"/>\n", 
            "+                </context>\n", 
            "+            </replication>\n", 
            "+        </contextManager>\n", 
            "+    </clustering>\n", 
            "+     \n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Phases  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <phaseOrder type=\"InFlow\">\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <phase name=\"Transport\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->\n", 
            "+        <phase name=\"OperationInPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutPhase\"/>\n", 
            "+        <!--system predefined phase-->\n", 
            "+        <!--these phase will run irrespective of the service-->\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"InFaultFlow\">\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"OperationInFaultPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFaultFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutFaultPhase\"/>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+</axisconfig>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/axis2Xml/axis2Server/axis2_clustering.xml", 
      "from": "java/modules/integration/src/test/resources/axis2Xml/axis2Server/axis2_clustering.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,342", 
          "lines": [
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<axisconfig name=\"AxisJava2.0\">\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Parameters -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <!-- WARNING: Hot deployment is turned on by default, but it is highly recommended to set this to false\n", 
            "+            on production environments, unless you really want to use hot deployment in production -->\n", 
            "+    <parameter name=\"hotdeployment\">true</parameter>\n", 
            "+    <parameter name=\"hotupdate\">true</parameter>\n", 
            "+    <parameter name=\"enableMTOM\">false</parameter>\n", 
            "+    <parameter name=\"enableSwA\">false</parameter>\n", 
            "+\n", 
            "+    <!--Uncomment if you want to enable file caching for attachments -->\n", 
            "+    <!--parameter name=\"cacheAttachments\">true</parameter>\n", 
            "+    <parameter name=\"attachmentDIR\"></parameter>\n", 
            "+    <parameter name=\"sizeThreshold\">4000</parameter-->\n", 
            "+\n", 
            "+    <!--This will give out the timout of the configuration contexts, in milliseconds-->\n", 
            "+    <parameter name=\"ConfigContextTimeoutInterval\">30000</parameter>\n", 
            "+\n", 
            "+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->\n", 
            "+    <!--that behavior.-->\n", 
            "+    <parameter name=\"sendStacktraceDetailsWithFaults\">false</parameter>\n", 
            "+\n", 
            "+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->\n", 
            "+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->\n", 
            "+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->\n", 
            "+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->\n", 
            "+    <parameter name=\"DrillDownToRootCauseForFaultReason\">false</parameter>\n", 
            "+\n", 
            "+    <parameter name=\"userName\">admin</parameter>\n", 
            "+    <parameter name=\"password\">axis2</parameter>\n", 
            "+\n", 
            "+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->\n", 
            "+    <!--ServicesDirectory only works on the following cases-->\n", 
            "+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->\n", 
            "+    <!---When creating URL Based configurator with URL \"file://\"  -->\n", 
            "+    <!--- War based configurator with expanded case , -->\n", 
            "+\n", 
            "+    <!--All the other scenarios it will be ignored.-->\n", 
            "+    <!--<parameter name=\"ServicesDirectory\">service</parameter>-->\n", 
            "+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->\n", 
            "+    <!--<parameter name=\"ModulesDirectory\">modules</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+\n", 
            "+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->\n", 
            "+    <!--root which can configured using the following contextRoot parameter-->\n", 
            "+    <parameter name=\"contextRoot\">/</parameter>\n", 
            "+\n", 
            "+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->\n", 
            "+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->\n", 
            "+    <!--context path to proper Axis2 servlets-->\n", 
            "+    <parameter name=\"servicePath\">services</parameter>\n", 
            "+    <parameter name=\"restPath\">rest</parameter>\n", 
            "+\n", 
            "+    <!-- Following parameter will completely disable REST handling in Axis2-->\n", 
            "+    <parameter name=\"disableREST\" locked=\"true\">false</parameter>\n", 
            "+\n", 
            "+    <!-- Extension deployer\n", 
            "+         ***** Uncomment the following line to enable (hot) deployment of Synapse extensions (mediators and startups) ***** -->\n", 
            "+    <!--<deployer extension=\"xar\" directory=\"extensions\" class=\"org.apache.synapse.deployers.ExtensionDeployer\"/>-->\n", 
            "+\n", 
            "+    <!-- WARNING: Synapse Artifact Deployers, it is highly recommended to comment out these deployers in production\n", 
            "+                unless you really want to use hot deployment/update -->\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/sequences\" class=\"org.apache.synapse.deployers.SequenceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/endpoints\" class=\"org.apache.synapse.deployers.EndpointDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/local-entries\" class=\"org.apache.synapse.deployers.LocalEntryDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/proxy-services\" class=\"org.apache.synapse.deployers.ProxyServiceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/event-sources\" class=\"org.apache.synapse.deployers.EventSourceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/tasks\" class=\"org.apache.synapse.deployers.TaskDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/priority-executors\" class=\"org.apache.synapse.deployers.PriorityExecutorDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/templates\" class=\"org.apache.synapse.deployers.TemplateDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/message-stores\" class=\"org.apache.synapse.deployers.MessageStoreDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/message-processors\" class=\"org.apache.synapse.deployers.MessageProcessorDeployer\"/>\n", 
            "+\n", 
            "+    <!-- Following parameter will set the host name for the epr-->\n", 
            "+    <!--<parameter name=\"hostname\" locked=\"true\">myhost.com</parameter>-->\n", 
            "+\n", 
            "+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->\n", 
            "+    <!-- use this parameter to override autodetected url -->\n", 
            "+    <!--<parameter name=\"httpFrontendHostUrl\">https://someotherhost/context</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+    <!--    The way of adding listener to the system-->\n", 
            "+    <!--    <listener class=\"org.apache.axis2.ObserverIMPL\">-->\n", 
            "+    <!--        <parameter name=\"RSS_URL\">http://127.0.0.1/rss</parameter>-->\n", 
            "+    <!--    </listener>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Receivers -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->\n", 
            "+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->\n", 
            "+    <!--any operation -->\n", 
            "+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->\n", 
            "+    <messageReceivers>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+    </messageReceivers>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Formatter -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to message formatter mapping can be used to implement support for different message -->\n", 
            "+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageFormatters>\n", 
            "+        <messageFormatter contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.XFormURLEncodedFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/>\n", 
            "+        <!--<messageFormatter contentType=\"x-application/hessian\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageFormatter\"/>-->\n", 
            "+        <!--<messageFormatter contentType=\"\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageFormatter\"/>-->\n", 
            "+        <!--<messageFormatter contentType=\"application/json\"\n", 
            "+                         class=\"org.apache.axis2.json.JSONMessageFormatter\"/>-->\n", 
            "+\n", 
            "+    </messageFormatters>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Builders -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to builder mapping can be used to implement support for different message -->\n", 
            "+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageBuilders>\n", 
            "+        <messageBuilder contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.builder.XFormURLEncodedBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/>\n", 
            "+    </messageBuilders>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Ins -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- the non blocking http transport based on HttpCore + NIO extensions -->\n", 
            "+    <transportReceiver name=\"http\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOListener\">\n", 
            "+    \t<parameter name=\"port\">8280</parameter>\n", 
            "+    \t<parameter name=\"non-blocking\">true</parameter>\n", 
            "+        <!--parameter name=\"bind-address\" locked=\"false\">hostname or IP address</parameter-->\n", 
            "+        <!--parameter name=\"WSDLEPRPrefix\" locked=\"false\">https://apachehost:port/somepath</parameter-->\n", 
            "+        <!-- paramter name=\"priorityConfigFile\" locked=\"false\">location of priority configuration file<parameter-->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->\n", 
            "+    <transportReceiver name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener\">\n", 
            "+    \t<parameter name=\"port\" locked=\"false\">8243</parameter>\n", 
            "+        <!--parameter name=\"bind-address\" locked=\"false\">hostname or IP address</parameter-->\n", 
            "+        <!--parameter name=\"WSDLEPRPrefix\" locked=\"false\">http://apachehost:port/somepath</parameter-->\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+        <!--<parameter name=\"SSLVerifyClient\">require</parameter>\n", 
            "+            supports optional|require or defaults to none -->\n", 
            "+    </transportReceiver>     \n", 
            "+\n", 
            "+    <transportReceiver name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportListener\">\n", 
            "+        <parameter name=\"non-blocking\">true</parameter>\n", 
            "+    </transportReceiver>  \n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Outs -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <transportSender name=\"http\"  class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSender\">\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"warnOnHTTP500\" locked=\"false\">*</parameter>\n", 
            "+        <!--parameter name=\"http.proxyHost\" locked=\"false\">localhost</parameter>\n", 
            "+        <parameter name=\"http.proxyPort\" locked=\"false\">3128</parameter>\n", 
            "+        <parameter name=\"http.nonProxyHosts\" locked=\"false\">localhost|moon|sun</parameter-->\n", 
            "+    </transportSender>\n", 
            "+    <transportSender name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender\">\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"warnOnHTTP500\" locked=\"false\">*</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+        <!--<parameter name=\"HostnameVerifier\">DefaultAndLocalhost</parameter>\n", 
            "+            supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <transportSender name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportSender\">\n", 
            "+\t    <parameter name=\"non-blocking\">true</parameter>\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Global Modules  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Comment this to disable Addressing -->\n", 
            "+    <module ref=\"addressing\"/>\n", 
            "+\n", 
            "+    <!--Configuring module , providing parameters for modules whether they refer or not-->\n", 
            "+    <!--<moduleConfig name=\"addressing\">-->\n", 
            "+    <!--<parameter name=\"addressingPara\">N/A</parameter>-->\n", 
            "+    <!--</moduleConfig>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Phases  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <phaseOrder type=\"InFlow\">\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <phase name=\"Transport\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"CustomURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.synapse.core.axis2.CustomURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--  System predefined phases       -->\n", 
            "+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->\n", 
            "+        <phase name=\"OperationInPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutPhase\"/>\n", 
            "+        <!--system predefined phase-->\n", 
            "+        <!--these phase will run irrespective of the service-->\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"InFaultFlow\">\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"OperationInFaultPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFaultFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutFaultPhase\"/>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+</axisconfig>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_fix.xml", 
      "from": "java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_fix.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,484", 
          "lines": [
            "+<!--\n", 
            "+  ~ Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~ or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~ distributed with this work for additional information\n", 
            "+  ~ regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~ to you under the Apache License, Version 2.0 (the\n", 
            "+  ~ \"License\"); you may not use this file except in compliance\n", 
            "+  ~ with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~ http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~ Unless required by applicable law or agreed to in writing,\n", 
            "+  ~ software distributed under the License is distributed on an\n", 
            "+  ~  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~ KIND, either express or implied.  See the License for the\n", 
            "+  ~ specific language governing permissions and limitations\n", 
            "+  ~ under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<axisconfig name=\"AxisJava2.0\">\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Parameters -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <!-- WARNING: Hot deployment is turned on by default, but it is highly recommended to set this to false\n", 
            "+            on production environments, unless you really want to use hot deployment in production -->\n", 
            "+    <parameter name=\"hotdeployment\">true</parameter>\n", 
            "+    <parameter name=\"hotupdate\">true</parameter>\n", 
            "+    <parameter name=\"enableMTOM\">false</parameter>\n", 
            "+    <parameter name=\"enableSwA\">false</parameter>\n", 
            "+\n", 
            "+    <!--Uncomment if you want to enable file caching for attachments -->\n", 
            "+    <!--parameter name=\"cacheAttachments\">true</parameter>\n", 
            "+    <parameter name=\"attachmentDIR\"></parameter>\n", 
            "+    <parameter name=\"sizeThreshold\">4000</parameter-->\n", 
            "+\n", 
            "+    <!--This will give out the timout of the configuration contexts, in milliseconds-->\n", 
            "+    <parameter name=\"ConfigContextTimeoutInterval\">30000</parameter>\n", 
            "+\n", 
            "+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->\n", 
            "+    <!--that behavior.-->\n", 
            "+    <parameter name=\"sendStacktraceDetailsWithFaults\">false</parameter>\n", 
            "+\n", 
            "+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->\n", 
            "+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->\n", 
            "+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->\n", 
            "+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->\n", 
            "+    <parameter name=\"DrillDownToRootCauseForFaultReason\">false</parameter>\n", 
            "+\n", 
            "+    <parameter name=\"userName\">admin</parameter>\n", 
            "+    <parameter name=\"password\">axis2</parameter>\n", 
            "+\n", 
            "+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->\n", 
            "+    <!--ServicesDirectory only works on the following cases-->\n", 
            "+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->\n", 
            "+    <!---When creating URL Based configurator with URL \"file://\"  -->\n", 
            "+    <!--- War based configurator with expanded case , -->\n", 
            "+\n", 
            "+    <!--All the other scenarios it will be ignored.-->\n", 
            "+    <!--<parameter name=\"ServicesDirectory\">service</parameter>-->\n", 
            "+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->\n", 
            "+    <!--<parameter name=\"ModulesDirectory\">modules</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+\n", 
            "+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->\n", 
            "+    <!--root which can configured using the following contextRoot parameter-->\n", 
            "+    <parameter name=\"contextRoot\">/</parameter>\n", 
            "+\n", 
            "+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->\n", 
            "+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->\n", 
            "+    <!--context path to proper Axis2 servlets-->\n", 
            "+    <parameter name=\"servicePath\">services</parameter>\n", 
            "+    <parameter name=\"restPath\">rest</parameter>\n", 
            "+\n", 
            "+    <!-- Following parameter will completely disable REST handling in Axis2-->\n", 
            "+    <parameter name=\"disableREST\" locked=\"true\">false</parameter>\n", 
            "+\n", 
            "+    <!-- Extension deployer\n", 
            "+         ***** Uncomment the following line to enable (hot) deployment of Synapse extensions (mediators and startups) ***** -->\n", 
            "+    <!--<deployer extension=\"xar\" directory=\"extensions\" class=\"org.apache.synapse.deployers.ExtensionDeployer\"/>-->\n", 
            "+\n", 
            "+    <!-- WARNING: Synapse Artifact Deployers, it is highly recommended to comment out these deployers in production\n", 
            "+                unless you really want to use hot deployment/update -->\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/sequences\" class=\"org.apache.synapse.deployers.SequenceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/endpoints\" class=\"org.apache.synapse.deployers.EndpointDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/local-entries\" class=\"org.apache.synapse.deployers.LocalEntryDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/proxy-services\" class=\"org.apache.synapse.deployers.ProxyServiceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/event-sources\" class=\"org.apache.synapse.deployers.EventSourceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/tasks\" class=\"org.apache.synapse.deployers.TaskDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/priority-executors\" class=\"org.apache.synapse.deployers.PriorityExecutorDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/templates\" class=\"org.apache.synapse.deployers.TemplateDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/message-stores\" class=\"org.apache.synapse.deployers.MessageStoreDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/message-processors\" class=\"org.apache.synapse.deployers.MessageProcessorDeployer\"/>\n", 
            "+\n", 
            "+    <!-- Following parameter will set the host name for the epr-->\n", 
            "+    <!--<parameter name=\"hostname\" locked=\"true\">myhost.com</parameter>-->\n", 
            "+\n", 
            "+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->\n", 
            "+    <!-- use this parameter to override autodetected url -->\n", 
            "+    <!--<parameter name=\"httpFrontendHostUrl\">https://someotherhost/context</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+    <!--    The way of adding listener to the system-->\n", 
            "+    <!--    <listener class=\"org.apache.axis2.ObserverIMPL\">-->\n", 
            "+    <!--        <parameter name=\"RSS_URL\">http://127.0.0.1/rss</parameter>-->\n", 
            "+    <!--    </listener>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Receivers -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->\n", 
            "+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->\n", 
            "+    <!--any operation -->\n", 
            "+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->\n", 
            "+    <messageReceivers>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+    </messageReceivers>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Formatter -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to message formatter mapping can be used to implement support for different message -->\n", 
            "+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageFormatters>\n", 
            "+        <messageFormatter contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.XFormURLEncodedFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/>\n", 
            "+        <!--<messageFormatter contentType=\"x-application/hessian\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageFormatter\"/>-->\n", 
            "+        <!--<messageFormatter contentType=\"\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageFormatter\"/>-->\n", 
            "+        <!--<messageFormatter contentType=\"application/json\"\n", 
            "+                         class=\"org.apache.axis2.json.JSONMessageFormatter\"/>-->\n", 
            "+\n", 
            "+    </messageFormatters>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Builders -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to builder mapping can be used to implement support for different message -->\n", 
            "+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageBuilders>\n", 
            "+        <messageBuilder contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.builder.XFormURLEncodedBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/>\n", 
            "+        <!--<messageBuilder contentType=\"x-application/hessian\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageBuilder\"/>-->\n", 
            "+        <!--<messageBuilder contentType=\"\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageBuilder\"/>-->\n", 
            "+        <!--<messageBuilder contentType=\"application/json\"\n", 
            "+                         class=\"org.apache.axis2.json.JSONOMBuilder\"/>-->\n", 
            "+    </messageBuilders>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Ins -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- the non blocking http transport based on HttpCore + NIO extensions -->\n", 
            "+    <transportReceiver name=\"http\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOListener\">\n", 
            "+    \t<parameter name=\"port\">8280</parameter>\n", 
            "+    \t<parameter name=\"non-blocking\">true</parameter>\n", 
            "+        <!--parameter name=\"bind-address\" locked=\"false\">hostname or IP address</parameter-->\n", 
            "+        <!--parameter name=\"WSDLEPRPrefix\" locked=\"false\">https://apachehost:port/somepath</parameter-->\n", 
            "+        <!-- paramter name=\"priorityConfigFile\" locked=\"false\">location of priority configuration file<parameter-->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->\n", 
            "+    <transportReceiver name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener\">\n", 
            "+    \t<parameter name=\"port\" locked=\"false\">8243</parameter>\n", 
            "+        <!--parameter name=\"bind-address\" locked=\"false\">hostname or IP address</parameter-->\n", 
            "+        <!--parameter name=\"WSDLEPRPrefix\" locked=\"false\">http://apachehost:port/somepath</parameter-->\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+        <!--<parameter name=\"SSLVerifyClient\">require</parameter>\n", 
            "+            supports optional|require or defaults to none -->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <transportReceiver name=\"tcp\" class=\"org.apache.axis2.transport.tcp.TCPServer\">\n", 
            "+        <parameter name=\"port\">6060</parameter>\n", 
            "+    </transportReceiver>\n", 
            "+ \n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Outs -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <transportSender name=\"http\"  class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSender\">\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"warnOnHTTP500\" locked=\"false\">*</parameter>\n", 
            "+        <!--parameter name=\"http.proxyHost\" locked=\"false\">localhost</parameter>\n", 
            "+        <parameter name=\"http.proxyPort\" locked=\"false\">3128</parameter>\n", 
            "+        <parameter name=\"http.nonProxyHosts\" locked=\"false\">localhost|moon|sun</parameter-->\n", 
            "+    </transportSender>\n", 
            "+    <transportSender name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender\">\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"warnOnHTTP500\" locked=\"false\">*</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+        <!--<parameter name=\"HostnameVerifier\">DefaultAndLocalhost</parameter>\n", 
            "+            supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->\n", 
            "+    </transportSender>\n", 
            "+   \n", 
            "+    <transportSender name=\"tcp\" class=\"org.apache.axis2.transport.tcp.TCPTransportSender\"/>\n", 
            "+\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Global Modules  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Comment this to disable Addressing -->\n", 
            "+    <module ref=\"addressing\"/>\n", 
            "+\n", 
            "+    <!--Configuring module , providing parameters for modules whether they refer or not-->\n", 
            "+    <!--<moduleConfig name=\"addressing\">-->\n", 
            "+    <!--<parameter name=\"addressingPara\">N/A</parameter>-->\n", 
            "+    <!--</moduleConfig>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--                  Clustering                       -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Configure the following for preparing Synapse to a clustered environment -->\n", 
            "+    <cluster class=\"org.apache.axis2.clustering.tribes.TribesClusterManager\" enable=\"false\">\n", 
            "+\n", 
            "+        <!--\n", 
            "+           This parameter indicates whther the cluster has to be automatically initalized\n", 
            "+           when the AxisConfiguration is built. If set to \"true\" the initialization will not be\n", 
            "+           done at that stage, and some other party will have to explictly initialize the cluster.\n", 
            "+        -->\n", 
            "+        <parameter name=\"AvoidInitiation\">false</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+           The membership scheme used in this setup. The only values supported at the moment are\n", 
            "+           \"multicast\" and \"wka\"\n", 
            "+\n", 
            "+           1. multicast - membership is automatically discovered using multicasting\n", 
            "+           2. wka - Well-Known Address based multicasting. Membership is discovered with the help\n", 
            "+                    of one or more nodes running at a Well-Known Address. New members joining a\n", 
            "+                    cluster will first connect to a well-known node, register with the well-known node\n", 
            "+                    and get the membership list from it. When new members join, one of the well-known\n", 
            "+                    nodes will notify the others in the group. When a member leaves the cluster or\n", 
            "+                    is deemed to have left the cluster, it will be detected by the Group Membership\n", 
            "+                    Service (GMS) using a TCP ping mechanism.\n", 
            "+        -->\n", 
            "+        <parameter name=\"membershipScheme\">multicast</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+         The clustering domain/group. Nodes in the same group will belong to the same multicast\n", 
            "+         domain. There will not be interference between nodes in different groups.\n", 
            "+        -->\n", 
            "+        <parameter name=\"domain\">apache.synapse.domain</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+           When a Web service request is received, and processed, before the response is sent to the\n", 
            "+           client, should we update the states of all members in the cluster? If the value of\n", 
            "+           this parameter is set to \"true\", the response to the client will be sent only after\n", 
            "+           all the members have been updated. Obviously, this can be time consuming. In some cases,\n", 
            "+           such this overhead may not be acceptable, in which case the value of this parameter\n", 
            "+           should be set to \"false\"\n", 
            "+        -->\n", 
            "+        <parameter name=\"synchronizeAll\">true</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+          The maximum number of times we need to retry to send a message to a particular node\n", 
            "+          before giving up and considering that node to be faulty\n", 
            "+        -->\n", 
            "+        <parameter name=\"maxRetries\">10</parameter>\n", 
            "+\n", 
            "+        <!-- The multicast address to be used -->\n", 
            "+        <parameter name=\"mcastAddress\">228.0.0.4</parameter>\n", 
            "+\n", 
            "+        <!-- The multicast port to be used -->\n", 
            "+        <parameter name=\"mcastPort\">45564</parameter>\n", 
            "+\n", 
            "+        <!-- The frequency of sending membership multicast messages (in ms) -->\n", 
            "+        <parameter name=\"mcastFrequency\">500</parameter>\n", 
            "+\n", 
            "+        <!-- The time interval within which if a member does not respond, the member will be\n", 
            "+         deemed to have left the group (in ms)\n", 
            "+         -->\n", 
            "+        <parameter name=\"memberDropTime\">3000</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+           The IP address of the network interface to which the multicasting has to be bound to.\n", 
            "+           Multicasting would be done using this interface.\n", 
            "+        -->\n", 
            "+        <parameter name=\"mcastBindAddress\">127.0.0.1</parameter>\n", 
            "+\n", 
            "+        <!-- The host name or IP address of this member -->\n", 
            "+        <parameter name=\"localMemberHost\">127.0.0.1</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+        The TCP port used by this member. This is the port through which other nodes will\n", 
            "+        contact this member\n", 
            "+         -->\n", 
            "+        <parameter name=\"localMemberPort\">4000</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+           The list of static or well-known members. These entries will only be valid if the\n", 
            "+           \"membershipScheme\" above is set to \"wka\"\n", 
            "+        -->\n", 
            "+        <members>\n", 
            "+            <member>\n", 
            "+                <hostName>127.0.0.1</hostName>\n", 
            "+                <port>4000</port>\n", 
            "+            </member>\n", 
            "+            <member>\n", 
            "+                <hostName>127.0.0.1</hostName>\n", 
            "+                <port>4001</port>\n", 
            "+            </member>\n", 
            "+        </members>\n", 
            "+\n", 
            "+        <!--\n", 
            "+        Enable the load balancer entry if you need to run this node as a load balancer.\n", 
            "+        Multiple application domains with different LoadBalanceEventHandler implementations\n", 
            "+        can be defined in this section.\n", 
            "+        -->\n", 
            "+        <loadBalancer enable=\"false\">\n", 
            "+            <applicationDomain name=\"apache.axis2.app.domain\"\n", 
            "+                               handler=\"org.apache.axis2.clustering.DefaultLoadBalanceEventHandler\"/>\n", 
            "+        </loadBalancer>\n", 
            "+            \n", 
            "+        <!--\n", 
            "+           This interface is responsible for handling context replication. The property changes in\n", 
            "+           the Axis2 context hierarchy in this node, are propagated to all other nodes in the cluster.\n", 
            "+\n", 
            "+           The \"excludes\" patterns can be used to specify the prefixes (e.g. local_*) or\n", 
            "+           suffixes (e.g. *_local) of the properties to be excluded from replication. The pattern\n", 
            "+           \"*\" indicates that all properties in a particular context should not be replicated.\n", 
            "+\n", 
            "+            The \"enable\" attribute indicates whether context replication has been enabled\n", 
            "+        -->\n", 
            "+        <contextManager class=\"org.apache.axis2.clustering.context.DefaultContextManager\"\n", 
            "+                         enable=\"false\">\n", 
            "+            <listener class=\"org.apache.axis2.clustering.context.DefaultContextManagerListener\"/>\n", 
            "+            <replication>\n", 
            "+                <defaults>\n", 
            "+                    <exclude name=\"local_*\"/>\n", 
            "+                    <exclude name=\"LOCAL_*\"/>\n", 
            "+                </defaults>\n", 
            "+                <context class=\"org.apache.axis2.context.ConfigurationContext\">\n", 
            "+                    <exclude name=\"UseAsyncOperations\"/>\n", 
            "+                    <exclude name=\"SequencePropertyBeanMap\"/>\n", 
            "+                </context>\n", 
            "+                <context class=\"org.apache.axis2.context.ServiceGroupContext\">\n", 
            "+                    <exclude name=\"my.sandesha.*\"/>\n", 
            "+                </context>\n", 
            "+                <context class=\"org.apache.axis2.context.ServiceContext\">\n", 
            "+                    <exclude name=\"my.sandesha.*\"/>\n", 
            "+                </context>\n", 
            "+            </replication>\n", 
            "+        </contextManager>\n", 
            "+    </cluster>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Phases  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <phaseOrder type=\"InFlow\">\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <phase name=\"Transport\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"CustomURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.synapse.core.axis2.CustomURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--  System predefined phases       -->\n", 
            "+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->\n", 
            "+        <phase name=\"OperationInPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutPhase\"/>\n", 
            "+        <!--system predefined phase-->\n", 
            "+        <!--these phase will run irrespective of the service-->\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"InFaultFlow\">\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"OperationInFaultPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFaultFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutFaultPhase\"/>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+</axisconfig>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_tcp.xml", 
      "from": "java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_tcp.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,352", 
          "lines": [
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<axisconfig name=\"AxisJava2.0\">\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Parameters -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <!-- WARNING: Hot deployment is turned on by default, but it is highly recommended to set this to false\n", 
            "+            on production environments, unless you really want to use hot deployment in production -->\n", 
            "+    <parameter name=\"hotdeployment\">true</parameter>\n", 
            "+    <parameter name=\"hotupdate\">true</parameter>\n", 
            "+    <parameter name=\"enableMTOM\">false</parameter>\n", 
            "+    <parameter name=\"enableSwA\">false</parameter>\n", 
            "+\n", 
            "+    <!--Uncomment if you want to enable file caching for attachments -->\n", 
            "+    <!--parameter name=\"cacheAttachments\">true</parameter>\n", 
            "+    <parameter name=\"attachmentDIR\"></parameter>\n", 
            "+    <parameter name=\"sizeThreshold\">4000</parameter-->\n", 
            "+\n", 
            "+    <!--This will give out the timout of the configuration contexts, in milliseconds-->\n", 
            "+    <parameter name=\"ConfigContextTimeoutInterval\">30000</parameter>\n", 
            "+\n", 
            "+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->\n", 
            "+    <!--that behavior.-->\n", 
            "+    <parameter name=\"sendStacktraceDetailsWithFaults\">false</parameter>\n", 
            "+\n", 
            "+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->\n", 
            "+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->\n", 
            "+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->\n", 
            "+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->\n", 
            "+    <parameter name=\"DrillDownToRootCauseForFaultReason\">false</parameter>\n", 
            "+\n", 
            "+    <parameter name=\"userName\">admin</parameter>\n", 
            "+    <parameter name=\"password\">axis2</parameter>\n", 
            "+\n", 
            "+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->\n", 
            "+    <!--ServicesDirectory only works on the following cases-->\n", 
            "+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->\n", 
            "+    <!---When creating URL Based configurator with URL \"file://\"  -->\n", 
            "+    <!--- War based configurator with expanded case , -->\n", 
            "+\n", 
            "+    <!--All the other scenarios it will be ignored.-->\n", 
            "+    <!--<parameter name=\"ServicesDirectory\">service</parameter>-->\n", 
            "+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->\n", 
            "+    <!--<parameter name=\"ModulesDirectory\">modules</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+\n", 
            "+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->\n", 
            "+    <!--root which can configured using the following contextRoot parameter-->\n", 
            "+    <parameter name=\"contextRoot\">/</parameter>\n", 
            "+\n", 
            "+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->\n", 
            "+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->\n", 
            "+    <!--context path to proper Axis2 servlets-->\n", 
            "+    <parameter name=\"servicePath\">services</parameter>\n", 
            "+    <parameter name=\"restPath\">rest</parameter>\n", 
            "+\n", 
            "+    <!-- Following parameter will completely disable REST handling in Axis2-->\n", 
            "+    <parameter name=\"disableREST\" locked=\"true\">false</parameter>\n", 
            "+\n", 
            "+    <!-- Extension deployer\n", 
            "+         ***** Uncomment the following line to enable (hot) deployment of Synapse extensions (mediators and startups) ***** -->\n", 
            "+    <!--<deployer extension=\"xar\" directory=\"extensions\" class=\"org.apache.synapse.deployers.ExtensionDeployer\"/>-->\n", 
            "+\n", 
            "+    <!-- WARNING: Synapse Artifact Deployers, it is highly recommended to comment out these deployers in production\n", 
            "+                unless you really want to use hot deployment/update -->\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/sequences\" class=\"org.apache.synapse.deployers.SequenceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/endpoints\" class=\"org.apache.synapse.deployers.EndpointDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/local-entries\" class=\"org.apache.synapse.deployers.LocalEntryDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/proxy-services\" class=\"org.apache.synapse.deployers.ProxyServiceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/event-sources\" class=\"org.apache.synapse.deployers.EventSourceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/tasks\" class=\"org.apache.synapse.deployers.TaskDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/priority-executors\" class=\"org.apache.synapse.deployers.PriorityExecutorDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/templates\" class=\"org.apache.synapse.deployers.TemplateDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/message-stores\" class=\"org.apache.synapse.deployers.MessageStoreDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/message-processors\" class=\"org.apache.synapse.deployers.MessageProcessorDeployer\"/>\n", 
            "+\n", 
            "+    <!-- Following parameter will set the host name for the epr-->\n", 
            "+    <!--<parameter name=\"hostname\" locked=\"true\">myhost.com</parameter>-->\n", 
            "+\n", 
            "+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->\n", 
            "+    <!-- use this parameter to override autodetected url -->\n", 
            "+    <!--<parameter name=\"httpFrontendHostUrl\">https://someotherhost/context</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+    <!--    The way of adding listener to the system-->\n", 
            "+    <!--    <listener class=\"org.apache.axis2.ObserverIMPL\">-->\n", 
            "+    <!--        <parameter name=\"RSS_URL\">http://127.0.0.1/rss</parameter>-->\n", 
            "+    <!--    </listener>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Receivers -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->\n", 
            "+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->\n", 
            "+    <!--any operation -->\n", 
            "+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->\n", 
            "+    <messageReceivers>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+    </messageReceivers>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Formatter -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to message formatter mapping can be used to implement support for different message -->\n", 
            "+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageFormatters>\n", 
            "+        <messageFormatter contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.XFormURLEncodedFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/>\n", 
            "+        <!--<messageFormatter contentType=\"x-application/hessian\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageFormatter\"/>-->\n", 
            "+        <!--<messageFormatter contentType=\"\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageFormatter\"/>-->\n", 
            "+        <!--<messageFormatter contentType=\"application/json\"\n", 
            "+                         class=\"org.apache.axis2.json.JSONMessageFormatter\"/>-->\n", 
            "+\n", 
            "+    </messageFormatters>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Builders -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to builder mapping can be used to implement support for different message -->\n", 
            "+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageBuilders>\n", 
            "+        <messageBuilder contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.builder.XFormURLEncodedBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/>\n", 
            "+        <!--<messageBuilder contentType=\"x-application/hessian\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageBuilder\"/>-->\n", 
            "+        <!--<messageBuilder contentType=\"\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageBuilder\"/>-->\n", 
            "+        <!--<messageBuilder contentType=\"application/json\"\n", 
            "+                         class=\"org.apache.axis2.json.JSONOMBuilder\"/>-->\n", 
            "+    </messageBuilders>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Ins -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- the non blocking http transport based on HttpCore + NIO extensions -->\n", 
            "+    <transportReceiver name=\"http\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOListener\">\n", 
            "+    \t<parameter name=\"port\">8280</parameter>\n", 
            "+    \t<parameter name=\"non-blocking\">true</parameter>\n", 
            "+        <!--parameter name=\"bind-address\" locked=\"false\">hostname or IP address</parameter-->\n", 
            "+        <!--parameter name=\"WSDLEPRPrefix\" locked=\"false\">https://apachehost:port/somepath</parameter-->\n", 
            "+        <!-- paramter name=\"priorityConfigFile\" locked=\"false\">location of priority configuration file<parameter-->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->\n", 
            "+    <transportReceiver name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener\">\n", 
            "+    \t<parameter name=\"port\" locked=\"false\">8243</parameter>\n", 
            "+        <!--parameter name=\"bind-address\" locked=\"false\">hostname or IP address</parameter-->\n", 
            "+        <!--parameter name=\"WSDLEPRPrefix\" locked=\"false\">http://apachehost:port/somepath</parameter-->\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+        <!--<parameter name=\"SSLVerifyClient\">require</parameter>\n", 
            "+            supports optional|require or defaults to none -->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    \n", 
            "+    <!--transportReceiver name=\"tcp\" class=\"org.apache.axis2.transport.tcp.TCPServer\">\n", 
            "+        <parameter name=\"port\">6060</parameter>\n", 
            "+    </transportReceiver-->\n", 
            "+\n", 
            "+    <transportReceiver name=\"udp\" class=\"org.apache.axis2.transport.udp.UDPListener\"/>     \n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Outs -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <transportSender name=\"http\"  class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSender\">\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"warnOnHTTP500\" locked=\"false\">*</parameter>\n", 
            "+        <!--parameter name=\"http.proxyHost\" locked=\"false\">localhost</parameter>\n", 
            "+        <parameter name=\"http.proxyPort\" locked=\"false\">3128</parameter>\n", 
            "+        <parameter name=\"http.nonProxyHosts\" locked=\"false\">localhost|moon|sun</parameter-->\n", 
            "+    </transportSender>\n", 
            "+    <transportSender name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender\">\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"warnOnHTTP500\" locked=\"false\">*</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+        <!--<parameter name=\"HostnameVerifier\">DefaultAndLocalhost</parameter>\n", 
            "+            supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->\n", 
            "+    </transportSender>\n", 
            "+  \n", 
            "+      <transportSender name=\"udp\" class=\"org.apache.axis2.transport.udp.UDPSender\"/>\n", 
            "+\n", 
            "+\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Global Modules  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Comment this to disable Addressing -->\n", 
            "+    <module ref=\"addressing\"/>\n", 
            "+\n", 
            "+    <!--Configuring module , providing parameters for modules whether they refer or not-->\n", 
            "+    <!--<moduleConfig name=\"addressing\">-->\n", 
            "+    <!--<parameter name=\"addressingPara\">N/A</parameter>-->\n", 
            "+    <!--</moduleConfig>-->\n", 
            "+\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Phases  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <phaseOrder type=\"InFlow\">\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <phase name=\"Transport\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"CustomURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.synapse.core.axis2.CustomURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--  System predefined phases       -->\n", 
            "+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->\n", 
            "+        <phase name=\"OperationInPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutPhase\"/>\n", 
            "+        <!--system predefined phase-->\n", 
            "+        <!--these phase will run irrespective of the service-->\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"InFaultFlow\">\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"OperationInFaultPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFaultFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutFaultPhase\"/>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+</axisconfig>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_udp.xml", 
      "from": "java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_udp.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,48", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.message;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample12 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample12.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample12() {\n", 
            "+        super(12);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testFireAndForget() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: One way messaging / fireAndForget through Synapse\");\n", 
            "+        result = client.placeOrder(addUrl, trpUrl, null, \"IBM\");\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.gotResponse());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample12.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample12.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,363", 
          "lines": [
            "+/*\n", 
            "+*  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+*  or more contributor license agreements.  See the NOTICE file\n", 
            "+*  distributed with this work for additional information\n", 
            "+*  regarding copyright ownership.  The ASF licenses this file\n", 
            "+*  to you under the Apache License, Version 2.0 (the\n", 
            "+*  \"License\"); you may not use this file except in compliance\n", 
            "+*  with the License.  You may obtain a copy of the License at\n", 
            "+*\n", 
            "+*   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+*\n", 
            "+*  Unless required by applicable law or agreed to in writing,\n", 
            "+*  software distributed under the License is distributed on an\n", 
            "+*   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+*  KIND, either express or implied.  See the License for the\n", 
            "+*  specific language governing permissions and limitations\n", 
            "+*  under the License.\n", 
            "+*/\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework.clients;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMAbstractFactory;\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axiom.om.OMFactory;\n", 
            "+import org.apache.axiom.om.OMNamespace;\n", 
            "+import org.apache.axiom.om.util.AXIOMUtil;\n", 
            "+import org.apache.axis2.addressing.EndpointReference;\n", 
            "+import org.apache.axis2.client.Options;\n", 
            "+import org.apache.axis2.client.ServiceClient;\n", 
            "+import org.apache.axis2.context.ConfigurationContext;\n", 
            "+import org.apache.axis2.context.ConfigurationContextFactory;\n", 
            "+import org.apache.axis2.context.MessageContext;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SampleConfiguration;\n", 
            "+\n", 
            "+import javax.xml.namespace.QName;\n", 
            "+\n", 
            "+\n", 
            "+public class EventSampleClient {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(EventSampleClient.class);\n", 
            "+\n", 
            "+    private Options options;\n", 
            "+    private ServiceClient serviceClient;\n", 
            "+    private SampleClientResult clientResult;\n", 
            "+    private SampleConfiguration.ClientSampleConfiguration configuration;\n", 
            "+    private OMFactory factory;\n", 
            "+    private OMElement message;\n", 
            "+    private OMNamespace schemaNamespace;\n", 
            "+    private OMNamespace nss11;\n", 
            "+    private OMNamespace addressingNamespace;\n", 
            "+    private OMNamespace eventingNamespace;\n", 
            "+\n", 
            "+    public EventSampleClient(SampleConfiguration.ClientSampleConfiguration configuration) {\n", 
            "+        this.configuration = configuration;\n", 
            "+        factory = OMAbstractFactory.getOMFactory();\n", 
            "+        schemaNamespace = factory.createOMNamespace(\"http://www.w3.org/2001/XMLSchema\", \"xmlns\");\n", 
            "+        nss11 =\n", 
            "+                factory.createOMNamespace(\"http://schemas.xmlsoap.org/soap/envelope\", \"s11\");\n", 
            "+        addressingNamespace = factory.createOMNamespace(\n", 
            "+                \"http://schemas.xmlsoap.org/ws/2004/08/addressing\", \"wsa\");\n", 
            "+        eventingNamespace =\n", 
            "+                factory.createOMNamespace(\"http://schemas.xmlsoap.org/ws/2004/08/eventing\", \"wse\");\n", 
            "+    }\n", 
            "+\n", 
            "+    private void initializeClient(String addUrl) throws Exception {\n", 
            "+        options = new Options();\n", 
            "+        clientResult = new SampleClientResult();\n", 
            "+        clientResult.setGotResponse(false);\n", 
            "+\n", 
            "+        ConfigurationContext configContext;\n", 
            "+        configContext = ConfigurationContextFactory.\n", 
            "+                createConfigurationContextFromFileSystem(configuration.getClientRepo(),\n", 
            "+                        configuration.getAxis2Xml());\n", 
            "+        serviceClient = new ServiceClient(configContext, null);\n", 
            "+\n", 
            "+        if (addUrl != null && !\"null\".equals(addUrl)) {\n", 
            "+            serviceClient.engageModule(\"addressing\");\n", 
            "+            options.setTo(new EndpointReference(addUrl));\n", 
            "+        }\n", 
            "+        serviceClient.setOptions(options);\n", 
            "+\n", 
            "+        message = factory.createOMElement(\"message\", null);\n", 
            "+    }\n", 
            "+\n", 
            "+    private void deInitializeClient() {\n", 
            "+        try {\n", 
            "+            if (serviceClient != null) {\n", 
            "+                serviceClient.cleanup();\n", 
            "+            }\n", 
            "+        } catch (Exception ignore) {\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public SampleClientResult subscribe(String addUrl, String address, String expires, String topic) {\n", 
            "+        OMElement subscribeOm = factory.createOMElement(\"Subscribe\", eventingNamespace);\n", 
            "+        OMElement deliveryOm = factory.createOMElement(\"Delivery\", eventingNamespace);\n", 
            "+        deliveryOm.addAttribute(factory.createOMAttribute(\"Mode\", null,\n", 
            "+                \"http://schemas.xmlsoap.org/ws/2004/08/eventing/DeliveryModes/Push\"));\n", 
            "+        OMElement notifyToOm = factory.createOMElement(\"NotifyTo\", eventingNamespace);\n", 
            "+        OMElement addressOm = factory.createOMElement(\"Address\", addressingNamespace);\n", 
            "+        factory.createOMText(addressOm, address);\n", 
            "+        OMElement expiresOm = factory.createOMElement(\"Expires\", eventingNamespace);\n", 
            "+        factory.createOMText(expiresOm, expires);\n", 
            "+        OMElement filterOm = factory.createOMElement(\"Filter\", eventingNamespace);\n", 
            "+        filterOm.addAttribute(factory.createOMAttribute(\"Dialect\", null,\n", 
            "+                \"http://synapse.apache.org/eventing/dialect/topicFilter\"));\n", 
            "+        factory.createOMText(filterOm, topic);\n", 
            "+\n", 
            "+\n", 
            "+        notifyToOm.addChild(addressOm);\n", 
            "+        deliveryOm.addChild(notifyToOm);\n", 
            "+        subscribeOm.addChild(deliveryOm);\n", 
            "+        if (!(expires.equals(\"*\"))) {\n", 
            "+            subscribeOm.addChild(expiresOm); // Add only if the value provided\n", 
            "+        }\n", 
            "+        subscribeOm.addChild(filterOm);\n", 
            "+\n", 
            "+\n", 
            "+        log.info(\"Subscribing: \" + subscribeOm.toString());\n", 
            "+        try {\n", 
            "+            initializeClient(addUrl);\n", 
            "+            options.setAction(\"http://schemas.xmlsoap.org/ws/2004/08/eventing/Subscribe\");\n", 
            "+\n", 
            "+            OMElement response = serviceClient.sendReceive(subscribeOm);\n", 
            "+            log.info(\"Subscribed to topic \" + topic);\n", 
            "+            try {\n", 
            "+                Thread.sleep(1000);\n", 
            "+            } catch (InterruptedException e) {\n", 
            "+\n", 
            "+            }\n", 
            "+            log.info(\"Response Received: \" + response.toString());\n", 
            "+            String subId =\n", 
            "+                    response.getFirstChildWithName(\n", 
            "+                            new QName(eventingNamespace.getNamespaceURI(), \"SubscriptionManager\"))\n", 
            "+                            .getFirstChildWithName(\n", 
            "+                                    new QName(addressingNamespace.getNamespaceURI(), \"ReferenceParameters\"))\n", 
            "+                            .getFirstChildWithName(\n", 
            "+                                    new QName(eventingNamespace.getNamespaceURI(), \"Identifier\")).getText();\n", 
            "+            log.info(\"Subscription identifier: \" + subId);\n", 
            "+            clientResult.addProperty(\"subId\", subId);\n", 
            "+            clientResult.setGotResponse(true);\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Fault Received : \" + e.toString(), e);\n", 
            "+            clientResult.setGotResponse(false);\n", 
            "+            clientResult.setException(e);\n", 
            "+        }\n", 
            "+        deInitializeClient();\n", 
            "+        return clientResult;\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public SampleClientResult unsubscribe(String addUrl, String identifier) {\n", 
            "+        /** Send unsubscribe message\n", 
            "+         (01) <s12:Envelope\n", 
            "+         (02)     xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+         (03)     xmlns:wsa=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"\n", 
            "+         (04)     xmlns:wse=\"http://schemas.xmlsoap.org/ws/2004/08/eventing\"\n", 
            "+         (05)     xmlns:ow=\"http://www.example.org/oceanwatch\" >\n", 
            "+         (06)   <s12:Header>\n", 
            "+         (07)     <wsa:Action>\n", 
            "+         (08)       http://schemas.xmlsoap.org/ws/2004/08/eventing/Unsubscribe\n", 
            "+         (09)     </wsa:Action>\n", 
            "+         (10)     <wsa:MessageID>\n", 
            "+         (11)       uuid:2653f89f-25bc-4c2a-a7c4-620504f6b216\n", 
            "+         (12)     </wsa:MessageID>\n", 
            "+         (13)     <wsa:ReplyTo>\n", 
            "+         (14)      <wsa:Address>http://www.example.com/MyEventSink</wsa:Address>\n", 
            "+         (15)     </wsa:ReplyTo>\n", 
            "+         (16)     <wsa:To>\n", 
            "+         (17)       http://www.example.org/oceanwatch/SubscriptionManager\n", 
            "+         (18)     </wsa:To>\n", 
            "+         (19)     <wse:Identifier>\n", 
            "+         (20)       uuid:22e8a584-0d18-4228-b2a8-3716fa2097fa\n", 
            "+         (21)     </wse:Identifier>\n", 
            "+         (22)   </s12:Header>\n", 
            "+         (23)   <s12:Body>\n", 
            "+         (24)     <wse:Unsubscribe />\n", 
            "+         (25)   </s12:Body>\n", 
            "+         (26) </s12:Envelope>*/\n", 
            "+        OMElement subscribeOm = factory.createOMElement(\"Unsubscribe\", eventingNamespace);\n", 
            "+\n", 
            "+        log.info(\"UnSubscribing: \" + subscribeOm.toString());\n", 
            "+        try {\n", 
            "+            initializeClient(addUrl);\n", 
            "+            options.setAction(\"http://schemas.xmlsoap.org/ws/2004/08/eventing/Unsubscribe\");\n", 
            "+\n", 
            "+            OMElement identifierOm = factory.createOMElement(\"Identifier\", eventingNamespace);\n", 
            "+            factory.createOMText(identifierOm, identifier);\n", 
            "+            serviceClient.addHeader(identifierOm);\n", 
            "+            OMElement response = serviceClient.sendReceive(subscribeOm);\n", 
            "+            log.info(\"UnSubscribed to ID \" + identifier);\n", 
            "+            Thread.sleep(1000);\n", 
            "+            log.info(\"UnSubscribe Response Received: \" + response.toString());\n", 
            "+            clientResult.setGotResponse(true);\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Fault Received : \" + e.toString(), e);\n", 
            "+            clientResult.setGotResponse(false);\n", 
            "+            clientResult.setException(e);\n", 
            "+        }\n", 
            "+        deInitializeClient();\n", 
            "+        return clientResult;\n", 
            "+    }\n", 
            "+\n", 
            "+    public SampleClientResult renew(String addUrl, String expires, String identifier) {\n", 
            "+        /**\n", 
            "+         * (01) <s12:Envelope\n", 
            "+         (02)     xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+         (03)     xmlns:wsa=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"\n", 
            "+         (04)     xmlns:wse=\"http://schemas.xmlsoap.org/ws/2004/08/eventing\"\n", 
            "+         (05)     xmlns:ow=\"http://www.example.org/oceanwatch\" >\n", 
            "+         (06)   <s12:Header>\n", 
            "+         (07)     <wsa:Action>\n", 
            "+         (08)       http://schemas.xmlsoap.org/ws/2004/08/eventing/Renew\n", 
            "+         (09)     </wsa:Action>\n", 
            "+         (10)     <wsa:MessageID>\n", 
            "+         (11)       uuid:bd88b3df-5db4-4392-9621-aee9160721f6\n", 
            "+         (12)     </wsa:MessageID>\n", 
            "+         (13)     <wsa:ReplyTo>\n", 
            "+         (14)      <wsa:Address>http://www.example.com/MyEventSink</wsa:Address>\n", 
            "+         (15)     </wsa:ReplyTo>\n", 
            "+         (16)     <wsa:To>\n", 
            "+         (17)       http://www.example.org/oceanwatch/SubscriptionManager\n", 
            "+         (18)     </wsa:To>\n", 
            "+         (19)     <wse:Identifier>\n", 
            "+         (20)       uuid:22e8a584-0d18-4228-b2a8-3716fa2097fa\n", 
            "+         (21)     </wse:Identifier>\n", 
            "+         (22)   </s12:Header>\n", 
            "+         (23)   <s12:Body>\n", 
            "+         (24)     <wse:Renew>\n", 
            "+         (25)       <wse:Expires>2004-06-26T21:07:00.000-08:00</wse:Expires>\n", 
            "+         (26)     </wse:Renew>\n", 
            "+         (27)   </s12:Body>\n", 
            "+         (28) </s12:Envelope>\n", 
            "+         */\n", 
            "+\n", 
            "+        OMElement subscribeOm = factory.createOMElement(\"Renew\", eventingNamespace);\n", 
            "+        OMElement expiresOm = factory.createOMElement(\"Expires\", eventingNamespace);\n", 
            "+        factory.createOMText(expiresOm, expires);\n", 
            "+        subscribeOm.addChild(expiresOm);\n", 
            "+\n", 
            "+\n", 
            "+        log.info(\"SynapseSubscription Renew \\n\" + subscribeOm.toString());\n", 
            "+        try {\n", 
            "+            initializeClient(addUrl);\n", 
            "+            OMElement identifierOm = factory.createOMElement(\"Identifier\", eventingNamespace);\n", 
            "+            factory.createOMText(identifierOm, identifier);\n", 
            "+            serviceClient.addHeader(identifierOm);\n", 
            "+            options.setAction(\"http://schemas.xmlsoap.org/ws/2004/08/eventing/Renew\");\n", 
            "+            OMElement response = serviceClient.sendReceive(subscribeOm);\n", 
            "+            log.info(\"SynapseSubscription Renew to ID \" + identifier);\n", 
            "+            try {\n", 
            "+                Thread.sleep(1000);\n", 
            "+            } catch (InterruptedException e) {\n", 
            "+\n", 
            "+            }\n", 
            "+            log.info(\"SynapseSubscription Renew Response Received: \" + response.toString());\n", 
            "+            clientResult.setGotResponse(true);\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Fault Received : \" + e.toString(), e);\n", 
            "+            clientResult.setGotResponse(false);\n", 
            "+            clientResult.setException(e);\n", 
            "+        }\n", 
            "+        deInitializeClient();\n", 
            "+        return clientResult;\n", 
            "+    }\n", 
            "+\n", 
            "+    public SampleClientResult getStatus(String addUrl, String identifier) {\n", 
            "+        /**\n", 
            "+         * (01) <s12:Envelope\n", 
            "+         (02)     xmlns:s12=\"http://www.w3.org/2003/05/soap-envelope\"\n", 
            "+         (03)     xmlns:wsa=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"\n", 
            "+         (04)     xmlns:wse=\"http://schemas.xmlsoap.org/ws/2004/08/eventing\"\n", 
            "+         (05)     xmlns:ow=\"http://www.example.org/oceanwatch\" >\n", 
            "+         (06)   <s12:Header>\n", 
            "+         (07)     <wsa:Action>\n", 
            "+         (08)       http://schemas.xmlsoap.org/ws/2004/08/eventing/GetStatus\n", 
            "+         (09)     </wsa:Action>\n", 
            "+         (10)     <wsa:MessageID>\n", 
            "+         (11)       uuid:bd88b3df-5db4-4392-9621-aee9160721f6\n", 
            "+         (12)     </wsa:MessageID>\n", 
            "+         (13)     <wsa:ReplyTo>\n", 
            "+         (14)       <wsa:Address>http://www.example.com/MyEventSink</wsa:Address>\n", 
            "+         (15)     </wsa:ReplyTo>\n", 
            "+         (16)     <wsa:To>\n", 
            "+         (17)       http://www.example.org/oceanwatch/SubscriptionManager\n", 
            "+         (18)     </wsa:To>\n", 
            "+         (19)     <wse:Identifier>\n", 
            "+         (20)       uuid:22e8a584-0d18-4228-b2a8-3716fa2097fa\n", 
            "+         (21)     </wse:Identifier>\n", 
            "+         (22)   </s12:Header>\n", 
            "+         (23)   <s12:Body>\n", 
            "+         (24)     <wse:GetStatus />\n", 
            "+         (25)   </s12:Body>\n", 
            "+         (26) </s12:Envelope>\n", 
            "+         */\n", 
            "+        OMElement subscribeOm = factory.createOMElement(\"GetStatus\", eventingNamespace);\n", 
            "+\n", 
            "+        log.info(\"GetStatus using: \" + subscribeOm.toString());\n", 
            "+        try {\n", 
            "+            initializeClient(addUrl);\n", 
            "+            options.setAction(\"http://schemas.xmlsoap.org/ws/2004/08/eventing/GetStatus\");\n", 
            "+\n", 
            "+            OMElement identifierOm = factory.createOMElement(\"Identifier\", eventingNamespace);\n", 
            "+            factory.createOMText(identifierOm, identifier);\n", 
            "+            serviceClient.addHeader(identifierOm);\n", 
            "+            OMElement response = serviceClient.sendReceive(subscribeOm);\n", 
            "+            log.info(\"GetStatus to ID \" + identifier);\n", 
            "+            try {\n", 
            "+                Thread.sleep(1000);\n", 
            "+            } catch (InterruptedException e) {\n", 
            "+\n", 
            "+            }\n", 
            "+            log.info(\"GetStatus Response Received: \" + response.toString());\n", 
            "+            clientResult.setGotResponse(true);\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Fault Received : \" + e.toString(), e);\n", 
            "+            clientResult.setGotResponse(false);\n", 
            "+            clientResult.setException(e);\n", 
            "+        }\n", 
            "+        deInitializeClient();\n", 
            "+        return clientResult;\n", 
            "+    }\n", 
            "+\n", 
            "+    public SampleClientResult sendEvent(String addUrl, String symbol, String price, String qty,\n", 
            "+                                        String topic, String topicns) {\n", 
            "+        try {\n", 
            "+            initializeClient(addUrl);\n", 
            "+\n", 
            "+            OMNamespace aipNamespace = factory.createOMNamespace(topicns, \"aip\");\n", 
            "+            // set the target topic\n", 
            "+            OMElement topicOm = factory.createOMElement(\"Topic\", aipNamespace);\n", 
            "+            factory.createOMText(topicOm, topic);\n", 
            "+            serviceClient.addHeader(topicOm);\n", 
            "+            // set for fire and forget\n", 
            "+            options.setProperty(MessageContext.CLIENT_API_NON_BLOCKING, Boolean.FALSE);\n", 
            "+\n", 
            "+            OMElement payload =\n", 
            "+                    AXIOMUtil.stringToOM(\"<m:placeOrder xmlns:m=\\\"http://services.samples\\\">\\n\" +\n", 
            "+                            \"    <m:order>\\n\" +\n", 
            "+                            \"        <m:price>\" + price + \"</m:price>\\n\" +\n", 
            "+                            \"        <m:quantity>\" + qty + \"</m:quantity>\\n\" +\n", 
            "+                            \"        <m:symbol>\" + symbol + \"</m:symbol>\\n\" +\n", 
            "+                            \"    </m:order>\\n\" +\n", 
            "+                            \"</m:placeOrder>\");\n", 
            "+\n", 
            "+            log.info(\"Sending Event : \\n\" + payload.toString());\n", 
            "+            serviceClient.fireAndForget(payload);\n", 
            "+            log.info(\"Event sent to topic \" + topic);\n", 
            "+            Thread.sleep(1000);\n", 
            "+            clientResult.setGotResponse(true);\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Fault Received : \" + e.toString(), e);\n", 
            "+            clientResult.setGotResponse(false);\n", 
            "+            clientResult.setException(e);\n", 
            "+        }\n", 
            "+        deInitializeClient();\n", 
            "+        return clientResult;\n", 
            "+    }\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/EventSampleClient.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/EventSampleClient.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,76", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework;\n", 
            "+\n", 
            "+import org.apache.activemq.broker.BrokerService;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Responsible for starting up and shutting down\n", 
            "+ * a JMS broker instance in order to run a sample test.\n", 
            "+ */\n", 
            "+public class JMSBrokerController implements BackEndServerController {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(JMSBrokerController.class);\n", 
            "+\n", 
            "+    private String serverName;\n", 
            "+    private SampleConfiguration.JMSBrokerSampleConfiguration configuration;\n", 
            "+    private BrokerService broker;\n", 
            "+\n", 
            "+    public JMSBrokerController(String serverName,\n", 
            "+                               SampleConfiguration.JMSBrokerSampleConfiguration configuration) {\n", 
            "+        this.serverName = serverName;\n", 
            "+        this.configuration = configuration;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getServerName() {\n", 
            "+        return serverName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean start() {\n", 
            "+        try {\n", 
            "+            log.info(\"JMSServerController: Preparing to start JMS Broker: \" + serverName);\n", 
            "+            //using embedded jms broker\n", 
            "+            broker = new BrokerService();\n", 
            "+            // configure the broker\n", 
            "+            broker.setBrokerName(\"synapseSampleBroker\");\n", 
            "+            broker.addConnector(configuration.getProviderURL());\n", 
            "+            broker.start();\n", 
            "+            log.info(\"JMSServerController: Broker is Successfully started. continuing tests\");\n", 
            "+            return true;\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"JMSServerController: There was an error starting JMS broker: \" +\n", 
            "+                    serverName, e);\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean stop() {\n", 
            "+        try {\n", 
            "+            broker.stop();\n", 
            "+            return true;\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Error while shutting down the broker\", e);\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/JMSBrokerController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/JMSBrokerController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,48", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.message;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample11 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample11.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample11() {\n", 
            "+        super(11);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testFullRegistryBasedConfig() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Local Registry entry definitions, reusable endpoints and sequences\");\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\",null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.gotResponse());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample11.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample11.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,48", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.message;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample16 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample16.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample16() {\n", 
            "+        super(16);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testDynamicStaticKeys() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Introduction to dynamic and static keys \");\n", 
            "+        result = client.requestCustomQuote(addUrl, trpUrl, null, \"IBM\");\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.gotResponse());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample16.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample16.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,563", 
          "lines": [
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<axisconfig name=\"AxisJava2.0\">\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Parameters -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <!-- WARNING: Hot deployment is turned on by default, but it is highly recommended to set this to false\n", 
            "+            on production environments, unless you really want to use hot deployment in production -->\n", 
            "+    <parameter name=\"hotdeployment\">true</parameter>\n", 
            "+    <parameter name=\"hotupdate\">true</parameter>\n", 
            "+    <parameter name=\"enableMTOM\">false</parameter>\n", 
            "+    <parameter name=\"enableSwA\">false</parameter>\n", 
            "+\n", 
            "+    <!--Uncomment if you want to enable file caching for attachments -->\n", 
            "+    <!--parameter name=\"cacheAttachments\">true</parameter>\n", 
            "+    <parameter name=\"attachmentDIR\"></parameter>\n", 
            "+    <parameter name=\"sizeThreshold\">4000</parameter-->\n", 
            "+\n", 
            "+    <!--This will give out the timout of the configuration contexts, in milliseconds-->\n", 
            "+    <parameter name=\"ConfigContextTimeoutInterval\">30000</parameter>\n", 
            "+\n", 
            "+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->\n", 
            "+    <!--that behavior.-->\n", 
            "+    <parameter name=\"sendStacktraceDetailsWithFaults\">false</parameter>\n", 
            "+\n", 
            "+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->\n", 
            "+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->\n", 
            "+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->\n", 
            "+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->\n", 
            "+    <parameter name=\"DrillDownToRootCauseForFaultReason\">false</parameter>\n", 
            "+\n", 
            "+    <parameter name=\"userName\">admin</parameter>\n", 
            "+    <parameter name=\"password\">axis2</parameter>\n", 
            "+\n", 
            "+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->\n", 
            "+    <!--ServicesDirectory only works on the following cases-->\n", 
            "+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->\n", 
            "+    <!---When creating URL Based configurator with URL \"file://\"  -->\n", 
            "+    <!--- War based configurator with expanded case , -->\n", 
            "+\n", 
            "+    <!--All the other scenarios it will be ignored.-->\n", 
            "+    <!--<parameter name=\"ServicesDirectory\">service</parameter>-->\n", 
            "+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->\n", 
            "+    <!--<parameter name=\"ModulesDirectory\">modules</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+\n", 
            "+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->\n", 
            "+    <!--root which can configured using the following contextRoot parameter-->\n", 
            "+    <parameter name=\"contextRoot\">/</parameter>\n", 
            "+\n", 
            "+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->\n", 
            "+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->\n", 
            "+    <!--context path to proper Axis2 servlets-->\n", 
            "+    <parameter name=\"servicePath\">services</parameter>\n", 
            "+    <parameter name=\"restPath\">rest</parameter>\n", 
            "+\n", 
            "+    <!-- Following parameter will completely disable REST handling in Axis2-->\n", 
            "+    <parameter name=\"disableREST\" locked=\"true\">false</parameter>\n", 
            "+\n", 
            "+    <!-- Extension deployer\n", 
            "+         ***** Uncomment the following line to enable (hot) deployment of Synapse extensions (mediators and startups) ***** -->\n", 
            "+    <!--<deployer extension=\"xar\" directory=\"extensions\" class=\"org.apache.synapse.deployers.ExtensionDeployer\"/>-->\n", 
            "+\n", 
            "+    <!-- WARNING: Synapse Artifact Deployers, it is highly recommended to comment out these deployers in production\n", 
            "+                unless you really want to use hot deployment/update -->\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/sequences\" class=\"org.apache.synapse.deployers.SequenceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/endpoints\" class=\"org.apache.synapse.deployers.EndpointDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/local-entries\" class=\"org.apache.synapse.deployers.LocalEntryDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/proxy-services\" class=\"org.apache.synapse.deployers.ProxyServiceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/event-sources\" class=\"org.apache.synapse.deployers.EventSourceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/tasks\" class=\"org.apache.synapse.deployers.TaskDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/priority-executors\" class=\"org.apache.synapse.deployers.PriorityExecutorDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/templates\" class=\"org.apache.synapse.deployers.TemplateDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/message-stores\" class=\"org.apache.synapse.deployers.MessageStoreDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/message-processors\" class=\"org.apache.synapse.deployers.MessageProcessorDeployer\"/>\n", 
            "+\n", 
            "+    <!-- Following parameter will set the host name for the epr-->\n", 
            "+    <!--<parameter name=\"hostname\" locked=\"true\">myhost.com</parameter>-->\n", 
            "+\n", 
            "+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->\n", 
            "+    <!-- use this parameter to override autodetected url -->\n", 
            "+    <!--<parameter name=\"httpFrontendHostUrl\">https://someotherhost/context</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+    <!--    The way of adding listener to the system-->\n", 
            "+    <!--    <listener class=\"org.apache.axis2.ObserverIMPL\">-->\n", 
            "+    <!--        <parameter name=\"RSS_URL\">http://127.0.0.1/rss</parameter>-->\n", 
            "+    <!--    </listener>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Receivers -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->\n", 
            "+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->\n", 
            "+    <!--any operation -->\n", 
            "+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->\n", 
            "+    <messageReceivers>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+    </messageReceivers>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Formatter -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to message formatter mapping can be used to implement support for different message -->\n", 
            "+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageFormatters>\n", 
            "+        <messageFormatter contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.XFormURLEncodedFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/>\n", 
            "+        <!--<messageFormatter contentType=\"x-application/hessian\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageFormatter\"/>-->\n", 
            "+        <!--<messageFormatter contentType=\"\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageFormatter\"/>-->\n", 
            "+        <!--<messageFormatter contentType=\"application/json\"\n", 
            "+                         class=\"org.apache.axis2.json.JSONMessageFormatter\"/>-->\n", 
            "+\n", 
            "+    </messageFormatters>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Builders -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to builder mapping can be used to implement support for different message -->\n", 
            "+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageBuilders>\n", 
            "+        <messageBuilder contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.builder.XFormURLEncodedBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/>\n", 
            "+        <!--<messageBuilder contentType=\"x-application/hessian\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageBuilder\"/>-->\n", 
            "+        <!--<messageBuilder contentType=\"\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageBuilder\"/>-->\n", 
            "+        <!--<messageBuilder contentType=\"application/json\"\n", 
            "+                         class=\"org.apache.axis2.json.JSONOMBuilder\"/>-->\n", 
            "+    </messageBuilders>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Ins -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- the non blocking http transport based on HttpCore + NIO extensions -->\n", 
            "+    <transportReceiver name=\"http\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOListener\">\n", 
            "+    \t<parameter name=\"port\">8280</parameter>\n", 
            "+    \t<parameter name=\"non-blocking\">true</parameter>\n", 
            "+        <!--parameter name=\"bind-address\" locked=\"false\">hostname or IP address</parameter-->\n", 
            "+        <!--parameter name=\"WSDLEPRPrefix\" locked=\"false\">https://apachehost:port/somepath</parameter-->\n", 
            "+        <!-- paramter name=\"priorityConfigFile\" locked=\"false\">location of priority configuration file<parameter-->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->\n", 
            "+    <!--transportReceiver name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener\">\n", 
            "+    \t<parameter name=\"port\" locked=\"false\">8243</parameter>\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>lib/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>lib/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+    </transportReceiver-->\n", 
            "+\n", 
            "+    <!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)-->\n", 
            "+    <transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\">\n", 
            "+        <parameter name=\"myTopicConnectionFactory\">\n", 
            "+        \t<parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+        \t<parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+        \t<parameter name=\"transport.jms.ConnectionFactoryJNDIName\">TopicConnectionFactory</parameter>\n", 
            "+\t\t<parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\">topic</parameter>\n", 
            "+        </parameter>\n", 
            "+\n", 
            "+        <parameter name=\"myQueueConnectionFactory\">\n", 
            "+        \t<parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+        \t<parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+        \t<parameter name=\"transport.jms.ConnectionFactoryJNDIName\">QueueConnectionFactory</parameter>\n", 
            "+\t\t<parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\">queue</parameter>\n", 
            "+        </parameter>\n", 
            "+\n", 
            "+        <parameter name=\"default\">\n", 
            "+        \t<parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+        \t<parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+        \t<parameter name=\"transport.jms.ConnectionFactoryJNDIName\">QueueConnectionFactory</parameter>\n", 
            "+\t\t<parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\">queue</parameter>\n", 
            "+        </parameter>\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!--transportReceiver name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportListener\"/-->\n", 
            "+\n", 
            "+    <!--transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\">\n", 
            "+        <configure any optional POP3/IMAP properties\n", 
            "+        check com.sun.mail.pop3 and com.sun.mail.imap package documentation for more details\n", 
            "+    </transportReceiver-->\n", 
            "+\n", 
            "+     <!--Uncomment this for FIX transport support\n", 
            "+    <transportReceiver name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportListener\">\n", 
            "+        <parameter name=\"non-blocking\">true</parameter>\n", 
            "+    </transportReceiver>-->\n", 
            "+\n", 
            "+    <!--Uncomment this for TCP transport support\n", 
            "+    <transportReceiver name=\"tcp\" class=\"org.apache.axis2.transport.tcp.TCPServer\">\n", 
            "+        <parameter name=\"port\">6060</parameter>\n", 
            "+    </transportReceiver>-->\n", 
            "+\n", 
            "+    <!--Uncomment this for UDP transport support\n", 
            "+    <transportReceiver name=\"udp\" class=\"org.apache.axis2.transport.udp.UDPListener\"/>-->        \n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Outs -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <transportSender name=\"http\"  class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSender\">\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"warnOnHTTP500\" locked=\"false\">*</parameter>\n", 
            "+        <!--parameter name=\"http.proxyHost\" locked=\"false\">localhost</parameter>\n", 
            "+        <parameter name=\"http.proxyPort\" locked=\"false\">3128</parameter>\n", 
            "+        <parameter name=\"http.nonProxyHosts\" locked=\"false\">localhost|moon|sun</parameter-->\n", 
            "+    </transportSender>\n", 
            "+    <!--transportSender name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender\">\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"warnOnHTTP500\" locked=\"false\">*</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>lib/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>lib/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+    </transportSender-->\n", 
            "+   \n", 
            "+    <!-- Uncomment Transport sender for the non blocking local transport-->\n", 
            "+    <!--transportSender name=\"local\" class=\"org.apache.axis2.transport.local.NonBlockingLocalTransportSender\"/-->\n", 
            "+ \n", 
            "+    <transportSender name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSSender\">\n", 
            "+        <!-- uncomment this and configure to use connection pools for sending messages\n", 
            "+        <parameter name=\"myTopicConnectionFactory\">\n", 
            "+            <parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+            <parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+            <parameter name=\"transport.jms.ConnectionFactoryJNDIName\">TopicConnectionFactory</parameter>\n", 
            "+        </parameter>\n", 
            "+    \n", 
            "+        <parameter name=\"myQueueConnectionFactory\">\n", 
            "+            <parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+            <parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+            <parameter name=\"transport.jms.ConnectionFactoryJNDIName\">QueueConnectionFactory</parameter>\n", 
            "+        </parameter>\n", 
            "+    \n", 
            "+        <parameter name=\"default\">\n", 
            "+            <parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+            <parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+            <parameter name=\"transport.jms.ConnectionFactoryJNDIName\">QueueConnectionFactory</parameter> \n", 
            "+        </parameter> -->\n", 
            "+    </transportSender>\n", 
            "+    \n", 
            "+    <!--transportSender name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportSender\"/-->\n", 
            "+\n", 
            "+    <!-- Uncomment and configure the SMTP server information\n", 
            "+    check com.sun.mail.smtp package documentation for descriptions of properties\n", 
            "+    <transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\">\n", 
            "+        <parameter name=\"mail.smtp.host\">smtp.gmail.com</parameter>\n", 
            "+        <parameter name=\"mail.smtp.port\">587</parameter>\n", 
            "+        <parameter name=\"mail.smtp.starttls.enable\">true</parameter>\n", 
            "+        <parameter name=\"mail.smtp.auth\">true</parameter>\n", 
            "+        <parameter name=\"mail.smtp.user\">synapse.demo.0</parameter>\n", 
            "+        <parameter name=\"mail.smtp.password\">mailpassword</parameter>\n", 
            "+        <parameter name=\"mail.smtp.from\">synapse.demo.0@gmail.com</parameter>\n", 
            "+    </transportSender>-->\n", 
            "+\n", 
            "+    <!--Uncomment this for FIX transport support\n", 
            "+    <transportSender name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportSender\">\n", 
            "+\t    <parameter name=\"non-blocking\">true</parameter>\n", 
            "+    </transportSender>-->\n", 
            "+\n", 
            "+    <!--Uncomment this for TCP transport support\n", 
            "+    <transportSender name=\"tcp\" class=\"org.apache.axis2.transport.tcp.TCPTransportSender\"/>-->\n", 
            "+\n", 
            "+    <!--Uncomment this for UDP transport support\n", 
            "+    <transportSender name=\"udp\" class=\"org.apache.axis2.transport.udp.UDPSender\"/>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Global Modules  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Comment this to disable Addressing -->\n", 
            "+    <module ref=\"addressing\"/>\n", 
            "+\n", 
            "+    <!--Configuring module , providing parameters for modules whether they refer or not-->\n", 
            "+    <!--<moduleConfig name=\"addressing\">-->\n", 
            "+    <!--<parameter name=\"addressingPara\">N/A</parameter>-->\n", 
            "+    <!--</moduleConfig>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--                  Clustering                       -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Configure the following for preparing Synapse to a clustered environment -->\n", 
            "+    <cluster class=\"org.apache.axis2.clustering.tribes.TribesClusterManager\" enable=\"false\">\n", 
            "+\n", 
            "+        <!--\n", 
            "+           This parameter indicates whther the cluster has to be automatically initalized\n", 
            "+           when the AxisConfiguration is built. If set to \"true\" the initialization will not be\n", 
            "+           done at that stage, and some other party will have to explictly initialize the cluster.\n", 
            "+        -->\n", 
            "+        <parameter name=\"AvoidInitiation\">false</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+           The membership scheme used in this setup. The only values supported at the moment are\n", 
            "+           \"multicast\" and \"wka\"\n", 
            "+\n", 
            "+           1. multicast - membership is automatically discovered using multicasting\n", 
            "+           2. wka - Well-Known Address based multicasting. Membership is discovered with the help\n", 
            "+                    of one or more nodes running at a Well-Known Address. New members joining a\n", 
            "+                    cluster will first connect to a well-known node, register with the well-known node\n", 
            "+                    and get the membership list from it. When new members join, one of the well-known\n", 
            "+                    nodes will notify the others in the group. When a member leaves the cluster or\n", 
            "+                    is deemed to have left the cluster, it will be detected by the Group Membership\n", 
            "+                    Service (GMS) using a TCP ping mechanism.\n", 
            "+        -->\n", 
            "+        <parameter name=\"membershipScheme\">multicast</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+         The clustering domain/group. Nodes in the same group will belong to the same multicast\n", 
            "+         domain. There will not be interference between nodes in different groups.\n", 
            "+        -->\n", 
            "+        <parameter name=\"domain\">apache.synapse.domain</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+           When a Web service request is received, and processed, before the response is sent to the\n", 
            "+           client, should we update the states of all members in the cluster? If the value of\n", 
            "+           this parameter is set to \"true\", the response to the client will be sent only after\n", 
            "+           all the members have been updated. Obviously, this can be time consuming. In some cases,\n", 
            "+           such this overhead may not be acceptable, in which case the value of this parameter\n", 
            "+           should be set to \"false\"\n", 
            "+        -->\n", 
            "+        <parameter name=\"synchronizeAll\">true</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+          The maximum number of times we need to retry to send a message to a particular node\n", 
            "+          before giving up and considering that node to be faulty\n", 
            "+        -->\n", 
            "+        <parameter name=\"maxRetries\">10</parameter>\n", 
            "+\n", 
            "+        <!-- The multicast address to be used -->\n", 
            "+        <parameter name=\"mcastAddress\">228.0.0.4</parameter>\n", 
            "+\n", 
            "+        <!-- The multicast port to be used -->\n", 
            "+        <parameter name=\"mcastPort\">45564</parameter>\n", 
            "+\n", 
            "+        <!-- The frequency of sending membership multicast messages (in ms) -->\n", 
            "+        <parameter name=\"mcastFrequency\">500</parameter>\n", 
            "+\n", 
            "+        <!-- The time interval within which if a member does not respond, the member will be\n", 
            "+         deemed to have left the group (in ms)\n", 
            "+         -->\n", 
            "+        <parameter name=\"memberDropTime\">3000</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+           The IP address of the network interface to which the multicasting has to be bound to.\n", 
            "+           Multicasting would be done using this interface.\n", 
            "+        -->\n", 
            "+        <parameter name=\"mcastBindAddress\">127.0.0.1</parameter>\n", 
            "+\n", 
            "+        <!-- The host name or IP address of this member -->\n", 
            "+        <parameter name=\"localMemberHost\">127.0.0.1</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+        The TCP port used by this member. This is the port through which other nodes will\n", 
            "+        contact this member\n", 
            "+         -->\n", 
            "+        <parameter name=\"localMemberPort\">4000</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+           The list of static or well-known members. These entries will only be valid if the\n", 
            "+           \"membershipScheme\" above is set to \"wka\"\n", 
            "+        -->\n", 
            "+        <members>\n", 
            "+            <member>\n", 
            "+                <hostName>127.0.0.1</hostName>\n", 
            "+                <port>4000</port>\n", 
            "+            </member>\n", 
            "+            <member>\n", 
            "+                <hostName>127.0.0.1</hostName>\n", 
            "+                <port>4001</port>\n", 
            "+            </member>\n", 
            "+        </members>\n", 
            "+\n", 
            "+        <!--\n", 
            "+        Enable the load balancer entry if you need to run this node as a load balancer.\n", 
            "+        Multiple application domains with different LoadBalanceEventHandler implementations\n", 
            "+        can be defined in this section.\n", 
            "+        -->\n", 
            "+        <loadBalancer enable=\"false\">\n", 
            "+            <applicationDomain name=\"apache.axis2.app.domain\"\n", 
            "+                               handler=\"org.apache.axis2.clustering.DefaultLoadBalanceEventHandler\"/>\n", 
            "+        </loadBalancer>\n", 
            "+            \n", 
            "+        <!--\n", 
            "+           This interface is responsible for handling context replication. The property changes in\n", 
            "+           the Axis2 context hierarchy in this node, are propagated to all other nodes in the cluster.\n", 
            "+\n", 
            "+           The \"excludes\" patterns can be used to specify the prefixes (e.g. local_*) or\n", 
            "+           suffixes (e.g. *_local) of the properties to be excluded from replication. The pattern\n", 
            "+           \"*\" indicates that all properties in a particular context should not be replicated.\n", 
            "+\n", 
            "+            The \"enable\" attribute indicates whether context replication has been enabled\n", 
            "+        -->\n", 
            "+        <contextManager class=\"org.apache.axis2.clustering.context.DefaultContextManager\"\n", 
            "+                         enable=\"false\">\n", 
            "+            <listener class=\"org.apache.axis2.clustering.context.DefaultContextManagerListener\"/>\n", 
            "+            <replication>\n", 
            "+                <defaults>\n", 
            "+                    <exclude name=\"local_*\"/>\n", 
            "+                    <exclude name=\"LOCAL_*\"/>\n", 
            "+                </defaults>\n", 
            "+                <context class=\"org.apache.axis2.context.ConfigurationContext\">\n", 
            "+                    <exclude name=\"UseAsyncOperations\"/>\n", 
            "+                    <exclude name=\"SequencePropertyBeanMap\"/>\n", 
            "+                </context>\n", 
            "+                <context class=\"org.apache.axis2.context.ServiceGroupContext\">\n", 
            "+                    <exclude name=\"my.sandesha.*\"/>\n", 
            "+                </context>\n", 
            "+                <context class=\"org.apache.axis2.context.ServiceContext\">\n", 
            "+                    <exclude name=\"my.sandesha.*\"/>\n", 
            "+                </context>\n", 
            "+            </replication>\n", 
            "+        </contextManager>\n", 
            "+    </cluster>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Phases  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <phaseOrder type=\"InFlow\">\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <phase name=\"Transport\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"CustomURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.synapse.core.axis2.CustomURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--  System predefined phases       -->\n", 
            "+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->\n", 
            "+        <phase name=\"OperationInPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutPhase\"/>\n", 
            "+        <!--system predefined phase-->\n", 
            "+        <!--these phase will run irrespective of the service-->\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"InFaultFlow\">\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"OperationInFaultPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFaultFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutFaultPhase\"/>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+</axisconfig>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_jms.xml", 
      "from": "java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_jms.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,334", 
          "lines": [
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<axisconfig name=\"AxisJava2.0\">\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Parameters -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <!-- WARNING: Hot deployment is turned on by default, but it is highly recommended to set this to false\n", 
            "+            on production environments, unless you really want to use hot deployment in production -->\n", 
            "+    <parameter name=\"hotdeployment\">true</parameter>\n", 
            "+    <parameter name=\"hotupdate\">true</parameter>\n", 
            "+    <parameter name=\"enableMTOM\">false</parameter>\n", 
            "+    <parameter name=\"enableSwA\">false</parameter>\n", 
            "+\n", 
            "+    <!--Uncomment if you want to enable file caching for attachments -->\n", 
            "+    <!--parameter name=\"cacheAttachments\">true</parameter>\n", 
            "+    <parameter name=\"attachmentDIR\"></parameter>\n", 
            "+    <parameter name=\"sizeThreshold\">4000</parameter-->\n", 
            "+\n", 
            "+    <!--This will give out the timout of the configuration contexts, in milliseconds-->\n", 
            "+    <parameter name=\"ConfigContextTimeoutInterval\">30000</parameter>\n", 
            "+\n", 
            "+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->\n", 
            "+    <!--that behavior.-->\n", 
            "+    <parameter name=\"sendStacktraceDetailsWithFaults\">false</parameter>\n", 
            "+\n", 
            "+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->\n", 
            "+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->\n", 
            "+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->\n", 
            "+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->\n", 
            "+    <parameter name=\"DrillDownToRootCauseForFaultReason\">false</parameter>\n", 
            "+\n", 
            "+    <parameter name=\"userName\">admin</parameter>\n", 
            "+    <parameter name=\"password\">axis2</parameter>\n", 
            "+\n", 
            "+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->\n", 
            "+    <!--ServicesDirectory only works on the following cases-->\n", 
            "+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->\n", 
            "+    <!---When creating URL Based configurator with URL \"file://\"  -->\n", 
            "+    <!--- War based configurator with expanded case , -->\n", 
            "+\n", 
            "+    <!--All the other scenarios it will be ignored.-->\n", 
            "+    <!--<parameter name=\"ServicesDirectory\">service</parameter>-->\n", 
            "+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->\n", 
            "+    <!--<parameter name=\"ModulesDirectory\">modules</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+\n", 
            "+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->\n", 
            "+    <!--root which can configured using the following contextRoot parameter-->\n", 
            "+    <parameter name=\"contextRoot\">/</parameter>\n", 
            "+\n", 
            "+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->\n", 
            "+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->\n", 
            "+    <!--context path to proper Axis2 servlets-->\n", 
            "+    <parameter name=\"servicePath\">services</parameter>\n", 
            "+    <parameter name=\"restPath\">rest</parameter>\n", 
            "+\n", 
            "+    <!-- Following parameter will completely disable REST handling in Axis2-->\n", 
            "+    <parameter name=\"disableREST\" locked=\"true\">false</parameter>\n", 
            "+\n", 
            "+    <!-- Extension deployer\n", 
            "+         ***** Uncomment the following line to enable (hot) deployment of Synapse extensions (mediators and startups) ***** -->\n", 
            "+    <!--<deployer extension=\"xar\" directory=\"extensions\" class=\"org.apache.synapse.deployers.ExtensionDeployer\"/>-->\n", 
            "+\n", 
            "+    <!-- WARNING: Synapse Artifact Deployers, it is highly recommended to comment out these deployers in production\n", 
            "+                unless you really want to use hot deployment/update -->\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/sequences\" class=\"org.apache.synapse.deployers.SequenceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/endpoints\" class=\"org.apache.synapse.deployers.EndpointDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/local-entries\" class=\"org.apache.synapse.deployers.LocalEntryDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/proxy-services\" class=\"org.apache.synapse.deployers.ProxyServiceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/event-sources\" class=\"org.apache.synapse.deployers.EventSourceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/tasks\" class=\"org.apache.synapse.deployers.TaskDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/priority-executors\" class=\"org.apache.synapse.deployers.PriorityExecutorDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/templates\" class=\"org.apache.synapse.deployers.TemplateDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/message-stores\" class=\"org.apache.synapse.deployers.MessageStoreDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/message-processors\" class=\"org.apache.synapse.deployers.MessageProcessorDeployer\"/>\n", 
            "+\n", 
            "+    <!-- Following parameter will set the host name for the epr-->\n", 
            "+    <!--<parameter name=\"hostname\" locked=\"true\">myhost.com</parameter>-->\n", 
            "+\n", 
            "+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->\n", 
            "+    <!-- use this parameter to override autodetected url -->\n", 
            "+    <!--<parameter name=\"httpFrontendHostUrl\">https://someotherhost/context</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+    <!--    The way of adding listener to the system-->\n", 
            "+    <!--    <listener class=\"org.apache.axis2.ObserverIMPL\">-->\n", 
            "+    <!--        <parameter name=\"RSS_URL\">http://127.0.0.1/rss</parameter>-->\n", 
            "+    <!--    </listener>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Receivers -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->\n", 
            "+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->\n", 
            "+    <!--any operation -->\n", 
            "+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->\n", 
            "+    <messageReceivers>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+    </messageReceivers>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Formatter -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to message formatter mapping can be used to implement support for different message -->\n", 
            "+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageFormatters>\n", 
            "+        <messageFormatter contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.XFormURLEncodedFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/>\n", 
            "+        <!--<messageFormatter contentType=\"x-application/hessian\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageFormatter\"/>-->\n", 
            "+        <!--<messageFormatter contentType=\"\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageFormatter\"/>-->\n", 
            "+        <!--<messageFormatter contentType=\"application/json\"\n", 
            "+                         class=\"org.apache.axis2.json.JSONMessageFormatter\"/>-->\n", 
            "+\n", 
            "+    </messageFormatters>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Builders -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to builder mapping can be used to implement support for different message -->\n", 
            "+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageBuilders>\n", 
            "+        <messageBuilder contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.builder.XFormURLEncodedBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/>\n", 
            "+    </messageBuilders>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Ins -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- the non blocking http transport based on HttpCore + NIO extensions -->\n", 
            "+    <transportReceiver name=\"http\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOListener\">\n", 
            "+    \t<parameter name=\"port\">8280</parameter>\n", 
            "+    \t<parameter name=\"non-blocking\">true</parameter>\n", 
            "+        <!--parameter name=\"bind-address\" locked=\"false\">hostname or IP address</parameter-->\n", 
            "+        <!--parameter name=\"WSDLEPRPrefix\" locked=\"false\">https://apachehost:port/somepath</parameter-->\n", 
            "+        <!-- paramter name=\"priorityConfigFile\" locked=\"false\">location of priority configuration file<parameter-->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->\n", 
            "+    <transportReceiver name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener\">\n", 
            "+    \t<parameter name=\"port\" locked=\"false\">8243</parameter>\n", 
            "+        <!--parameter name=\"bind-address\" locked=\"false\">hostname or IP address</parameter-->\n", 
            "+        <!--parameter name=\"WSDLEPRPrefix\" locked=\"false\">http://apachehost:port/somepath</parameter-->\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+        <!--<parameter name=\"SSLVerifyClient\">require</parameter>\n", 
            "+            supports optional|require or defaults to none -->\n", 
            "+    </transportReceiver>       \n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Outs -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <transportSender name=\"http\"  class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSender\">\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"warnOnHTTP500\" locked=\"false\">*</parameter>\n", 
            "+        <!--parameter name=\"http.proxyHost\" locked=\"false\">localhost</parameter>\n", 
            "+        <parameter name=\"http.proxyPort\" locked=\"false\">3128</parameter>\n", 
            "+        <parameter name=\"http.nonProxyHosts\" locked=\"false\">localhost|moon|sun</parameter-->\n", 
            "+    </transportSender>\n", 
            "+    <transportSender name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender\">\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"warnOnHTTP500\" locked=\"false\">*</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+        <!--<parameter name=\"HostnameVerifier\">DefaultAndLocalhost</parameter>\n", 
            "+            supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Global Modules  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Comment this to disable Addressing -->\n", 
            "+    <module ref=\"addressing\"/>\n", 
            "+\n", 
            "+    <!--Configuring module , providing parameters for modules whether they refer or not-->\n", 
            "+    <!--<moduleConfig name=\"addressing\">-->\n", 
            "+    <!--<parameter name=\"addressingPara\">N/A</parameter>-->\n", 
            "+    <!--</moduleConfig>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Phases  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <phaseOrder type=\"InFlow\">\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <phase name=\"Transport\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"CustomURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.synapse.core.axis2.CustomURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--  System predefined phases       -->\n", 
            "+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->\n", 
            "+        <phase name=\"OperationInPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutPhase\"/>\n", 
            "+        <!--system predefined phase-->\n", 
            "+        <!--these phase will run irrespective of the service-->\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"InFaultFlow\">\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"OperationInFaultPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFaultFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutFaultPhase\"/>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+</axisconfig>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_def.xml", 
      "from": "java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_def.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,483", 
          "lines": [
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<axisconfig name=\"AxisJava2.0\">\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Parameters -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <!-- WARNING: Hot deployment is turned on by default, but it is highly recommended to set this to false\n", 
            "+            on production environments, unless you really want to use hot deployment in production -->\n", 
            "+    <parameter name=\"hotdeployment\">true</parameter>\n", 
            "+    <parameter name=\"hotupdate\">true</parameter>\n", 
            "+    <parameter name=\"enableMTOM\">false</parameter>\n", 
            "+    <parameter name=\"enableSwA\">false</parameter>\n", 
            "+\n", 
            "+    <!--Uncomment if you want to enable file caching for attachments -->\n", 
            "+    <!--parameter name=\"cacheAttachments\">true</parameter>\n", 
            "+    <parameter name=\"attachmentDIR\"></parameter>\n", 
            "+    <parameter name=\"sizeThreshold\">4000</parameter-->\n", 
            "+\n", 
            "+    <!--This will give out the timout of the configuration contexts, in milliseconds-->\n", 
            "+    <parameter name=\"ConfigContextTimeoutInterval\">30000</parameter>\n", 
            "+\n", 
            "+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->\n", 
            "+    <!--that behavior.-->\n", 
            "+    <parameter name=\"sendStacktraceDetailsWithFaults\">false</parameter>\n", 
            "+\n", 
            "+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->\n", 
            "+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->\n", 
            "+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->\n", 
            "+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->\n", 
            "+    <parameter name=\"DrillDownToRootCauseForFaultReason\">false</parameter>\n", 
            "+\n", 
            "+    <parameter name=\"userName\">admin</parameter>\n", 
            "+    <parameter name=\"password\">axis2</parameter>\n", 
            "+\n", 
            "+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->\n", 
            "+    <!--ServicesDirectory only works on the following cases-->\n", 
            "+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->\n", 
            "+    <!---When creating URL Based configurator with URL \"file://\"  -->\n", 
            "+    <!--- War based configurator with expanded case , -->\n", 
            "+\n", 
            "+    <!--All the other scenarios it will be ignored.-->\n", 
            "+    <!--<parameter name=\"ServicesDirectory\">service</parameter>-->\n", 
            "+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->\n", 
            "+    <!--<parameter name=\"ModulesDirectory\">modules</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+\n", 
            "+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->\n", 
            "+    <!--root which can configured using the following contextRoot parameter-->\n", 
            "+    <parameter name=\"contextRoot\">/</parameter>\n", 
            "+\n", 
            "+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->\n", 
            "+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->\n", 
            "+    <!--context path to proper Axis2 servlets-->\n", 
            "+    <parameter name=\"servicePath\">services</parameter>\n", 
            "+    <parameter name=\"restPath\">rest</parameter>\n", 
            "+\n", 
            "+    <!-- Following parameter will completely disable REST handling in Axis2-->\n", 
            "+    <parameter name=\"disableREST\" locked=\"true\">false</parameter>\n", 
            "+\n", 
            "+    <!-- Extension deployer\n", 
            "+         ***** Uncomment the following line to enable (hot) deployment of Synapse extensions (mediators and startups) ***** -->\n", 
            "+    <!--<deployer extension=\"xar\" directory=\"extensions\" class=\"org.apache.synapse.deployers.ExtensionDeployer\"/>-->\n", 
            "+\n", 
            "+    <!-- WARNING: Synapse Artifact Deployers, it is highly recommended to comment out these deployers in production\n", 
            "+                unless you really want to use hot deployment/update -->\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/sequences\" class=\"org.apache.synapse.deployers.SequenceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/endpoints\" class=\"org.apache.synapse.deployers.EndpointDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/local-entries\" class=\"org.apache.synapse.deployers.LocalEntryDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/proxy-services\" class=\"org.apache.synapse.deployers.ProxyServiceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/event-sources\" class=\"org.apache.synapse.deployers.EventSourceDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/tasks\" class=\"org.apache.synapse.deployers.TaskDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/priority-executors\" class=\"org.apache.synapse.deployers.PriorityExecutorDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/templates\" class=\"org.apache.synapse.deployers.TemplateDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/message-stores\" class=\"org.apache.synapse.deployers.MessageStoreDeployer\"/>\n", 
            "+    <deployer extension=\"xml\" directory=\"conf/synapse-config/message-processors\" class=\"org.apache.synapse.deployers.MessageProcessorDeployer\"/>\n", 
            "+\n", 
            "+    <!-- Following parameter will set the host name for the epr-->\n", 
            "+    <!--<parameter name=\"hostname\" locked=\"true\">myhost.com</parameter>-->\n", 
            "+\n", 
            "+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->\n", 
            "+    <!-- use this parameter to override autodetected url -->\n", 
            "+    <!--<parameter name=\"httpFrontendHostUrl\">https://someotherhost/context</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+    <!--    The way of adding listener to the system-->\n", 
            "+    <!--    <listener class=\"org.apache.axis2.ObserverIMPL\">-->\n", 
            "+    <!--        <parameter name=\"RSS_URL\">http://127.0.0.1/rss</parameter>-->\n", 
            "+    <!--    </listener>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Receivers -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->\n", 
            "+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->\n", 
            "+    <!--any operation -->\n", 
            "+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->\n", 
            "+    <messageReceivers>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+    </messageReceivers>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Formatter -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to message formatter mapping can be used to implement support for different message -->\n", 
            "+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageFormatters>\n", 
            "+        <messageFormatter contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.XFormURLEncodedFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/>\n", 
            "+        <!--<messageFormatter contentType=\"x-application/hessian\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageFormatter\"/>-->\n", 
            "+        <!--<messageFormatter contentType=\"\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageFormatter\"/>-->\n", 
            "+        <!--<messageFormatter contentType=\"application/json\"\n", 
            "+                         class=\"org.apache.axis2.json.JSONMessageFormatter\"/>-->\n", 
            "+\n", 
            "+    </messageFormatters>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Builders -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to builder mapping can be used to implement support for different message -->\n", 
            "+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageBuilders>\n", 
            "+        <messageBuilder contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.builder.XFormURLEncodedBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/>\n", 
            "+        <!--<messageBuilder contentType=\"x-application/hessian\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageBuilder\"/>-->\n", 
            "+        <!--<messageBuilder contentType=\"\"\n", 
            "+                         class=\"org.apache.synapse.format.hessian.HessianMessageBuilder\"/>-->\n", 
            "+        <!--<messageBuilder contentType=\"application/json\"\n", 
            "+                         class=\"org.apache.axis2.json.JSONOMBuilder\"/>-->\n", 
            "+    </messageBuilders>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Ins -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- the non blocking http transport based on HttpCore + NIO extensions -->\n", 
            "+    <transportReceiver name=\"http\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOListener\">\n", 
            "+    \t<parameter name=\"port\">8280</parameter>\n", 
            "+    \t<parameter name=\"non-blocking\">true</parameter>\n", 
            "+        <!--parameter name=\"bind-address\" locked=\"false\">hostname or IP address</parameter-->\n", 
            "+        <!--parameter name=\"WSDLEPRPrefix\" locked=\"false\">https://apachehost:port/somepath</parameter-->\n", 
            "+        <!-- paramter name=\"priorityConfigFile\" locked=\"false\">location of priority configuration file<parameter-->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->\n", 
            "+    <transportReceiver name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener\">\n", 
            "+    \t<parameter name=\"port\" locked=\"false\">8243</parameter>\n", 
            "+        <!--parameter name=\"bind-address\" locked=\"false\">hostname or IP address</parameter-->\n", 
            "+        <!--parameter name=\"WSDLEPRPrefix\" locked=\"false\">http://apachehost:port/somepath</parameter-->\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+        <!--<parameter name=\"SSLVerifyClient\">require</parameter>\n", 
            "+            supports optional|require or defaults to none -->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Outs -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <transportSender name=\"http\"  class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSender\">\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"warnOnHTTP500\" locked=\"false\">*</parameter>\n", 
            "+        <!--parameter name=\"http.proxyHost\" locked=\"false\">localhost</parameter>\n", 
            "+        <parameter name=\"http.proxyPort\" locked=\"false\">3128</parameter>\n", 
            "+        <parameter name=\"http.nonProxyHosts\" locked=\"false\">localhost|moon|sun</parameter-->\n", 
            "+    </transportSender>\n", 
            "+    <transportSender name=\"https\" class=\"org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender\">\n", 
            "+        <parameter name=\"non-blocking\" locked=\"false\">true</parameter>\n", 
            "+        <parameter name=\"warnOnHTTP500\" locked=\"false\">*</parameter>\n", 
            "+        <parameter name=\"keystore\" locked=\"false\">\n", 
            "+            <KeyStore>\n", 
            "+                <Location>modules/integration/src/test/resources/identity.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+                <KeyPassword>password</KeyPassword>\n", 
            "+            </KeyStore>\n", 
            "+        </parameter>\n", 
            "+        <parameter name=\"truststore\" locked=\"false\">\n", 
            "+            <TrustStore>\n", 
            "+                <Location>modules/integration/src/test/resources/trust.jks</Location>\n", 
            "+                <Type>JKS</Type>\n", 
            "+                <Password>password</Password>\n", 
            "+            </TrustStore>\n", 
            "+        </parameter>\n", 
            "+        <!--<parameter name=\"HostnameVerifier\">DefaultAndLocalhost</parameter>\n", 
            "+            supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->\n", 
            "+    </transportSender>\n", 
            "+   \n", 
            "+    <!-- Uncomment Transport sender for the non blocking local transport-->\n", 
            "+    <!--transportSender name=\"local\" class=\"org.apache.axis2.transport.local.NonBlockingLocalTransportSender\"/-->\n", 
            "+ \n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Global Modules  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Comment this to disable Addressing -->\n", 
            "+    <module ref=\"addressing\"/>\n", 
            "+\n", 
            "+    <!--Configuring module , providing parameters for modules whether they refer or not-->\n", 
            "+    <!--<moduleConfig name=\"addressing\">-->\n", 
            "+    <!--<parameter name=\"addressingPara\">N/A</parameter>-->\n", 
            "+    <!--</moduleConfig>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--                  Clustering                       -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Configure the following for preparing Synapse to a clustered environment -->\n", 
            "+    <clustering class=\"org.apache.axis2.clustering.tribes.TribesClusteringAgent\" enable=\"true\">\n", 
            "+\n", 
            "+        <!--\n", 
            "+           This parameter indicates whther the cluster has to be automatically initalized\n", 
            "+           when the AxisConfiguration is built. If set to \"true\" the initialization will not be\n", 
            "+           done at that stage, and some other party will have to explictly initialize the cluster.\n", 
            "+        -->\n", 
            "+        <parameter name=\"AvoidInitiation\">false</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+           The membership scheme used in this setup. The only values supported at the moment are\n", 
            "+           \"multicast\" and \"wka\"\n", 
            "+\n", 
            "+           1. multicast - membership is automatically discovered using multicasting\n", 
            "+           2. wka - Well-Known Address based multicasting. Membership is discovered with the help\n", 
            "+                    of one or more nodes running at a Well-Known Address. New members joining a\n", 
            "+                    cluster will first connect to a well-known node, register with the well-known node\n", 
            "+                    and get the membership list from it. When new members join, one of the well-known\n", 
            "+                    nodes will notify the others in the group. When a member leaves the cluster or\n", 
            "+                    is deemed to have left the cluster, it will be detected by the Group Membership\n", 
            "+                    Service (GMS) using a TCP ping mechanism.\n", 
            "+        -->\n", 
            "+        <parameter name=\"membershipScheme\">multicast</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+         The clustering domain/group. Nodes in the same group will belong to the same multicast\n", 
            "+         domain. There will not be interference between nodes in different groups.\n", 
            "+        -->\n", 
            "+        <parameter name=\"domain\">apache.synapse.domain</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+           When a Web service request is received, and processed, before the response is sent to the\n", 
            "+           client, should we update the states of all members in the cluster? If the value of\n", 
            "+           this parameter is set to \"true\", the response to the client will be sent only after\n", 
            "+           all the members have been updated. Obviously, this can be time consuming. In some cases,\n", 
            "+           such this overhead may not be acceptable, in which case the value of this parameter\n", 
            "+           should be set to \"false\"\n", 
            "+        -->\n", 
            "+        <parameter name=\"synchronizeAll\">true</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+          The maximum number of times we need to retry to send a message to a particular node\n", 
            "+          before giving up and considering that node to be faulty\n", 
            "+        -->\n", 
            "+        <parameter name=\"maxRetries\">10</parameter>\n", 
            "+\n", 
            "+        <!-- The multicast address to be used -->\n", 
            "+        <parameter name=\"mcastAddress\">228.0.0.4</parameter>\n", 
            "+\n", 
            "+        <!-- The multicast port to be used -->\n", 
            "+        <parameter name=\"mcastPort\">45564</parameter>\n", 
            "+\n", 
            "+        <!-- The frequency of sending membership multicast messages (in ms) -->\n", 
            "+        <parameter name=\"mcastFrequency\">500</parameter>\n", 
            "+\n", 
            "+        <!-- The time interval within which if a member does not respond, the member will be\n", 
            "+         deemed to have left the group (in ms)\n", 
            "+         -->\n", 
            "+        <parameter name=\"memberDropTime\">3000</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+           The IP address of the network interface to which the multicasting has to be bound to.\n", 
            "+           Multicasting would be done using this interface.\n", 
            "+        -->\n", 
            "+        <parameter name=\"mcastBindAddress\">${replace.me}</parameter>\n", 
            "+\n", 
            "+        <!-- The host name or IP address of this member -->\n", 
            "+        <parameter name=\"localMemberHost\">${replace.me}</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+        The TCP port used by this member. This is the port through which other nodes will\n", 
            "+        contact this member\n", 
            "+         -->\n", 
            "+        <parameter name=\"localMemberPort\">4000</parameter>\n", 
            "+\n", 
            "+        <!--\n", 
            "+           The list of static or well-known members. These entries will only be valid if the\n", 
            "+           \"membershipScheme\" above is set to \"wka\"\n", 
            "+        -->\n", 
            "+        <members>\n", 
            "+            <member>\n", 
            "+                <hostName>127.0.0.1</hostName>\n", 
            "+                <port>4000</port>\n", 
            "+            </member>\n", 
            "+            <member>\n", 
            "+                <hostName>127.0.0.1</hostName>\n", 
            "+                <port>4001</port>\n", 
            "+            </member>\n", 
            "+        </members>\n", 
            "+\n", 
            "+        <!--\n", 
            "+        Enable the load balancer entry if you need to run this node as a load balancer.\n", 
            "+        Multiple application domains with different LoadBalanceEventHandler implementations\n", 
            "+        can be defined in this section.\n", 
            "+        -->\n", 
            "+        <!--loadBalancer enable=\"true\">\n", 
            "+            <applicationDomain name=\"apache.axis2.app.domain\"\n", 
            "+                               handler=\"org.apache.axis2.clustering.DefaultLoadBalanceEventHandler\"/>\n", 
            "+        </loadBalancer>-->\n", 
            "+\n", 
            "+        <groupManagement enable=\"true\">\n", 
            "+            <applicationDomain agent=\"org.apache.axis2.clustering.management.DefaultGroupManagementAgent\" description=\"Axis2 group\" name=\"apache.axis2.app.domain\"/>\n", 
            "+        </groupManagement>\n", 
            "+            \n", 
            "+        <!--\n", 
            "+           This interface is responsible for handling context replication. The property changes in\n", 
            "+           the Axis2 context hierarchy in this node, are propagated to all other nodes in the cluster.\n", 
            "+\n", 
            "+           The \"excludes\" patterns can be used to specify the prefixes (e.g. local_*) or\n", 
            "+           suffixes (e.g. *_local) of the properties to be excluded from replication. The pattern\n", 
            "+           \"*\" indicates that all properties in a particular context should not be replicated.\n", 
            "+\n", 
            "+            The \"enable\" attribute indicates whether context replication has been enabled\n", 
            "+        -->\n", 
            "+        <contextManager class=\"org.apache.axis2.clustering.context.DefaultContextManager\"\n", 
            "+                         enable=\"false\">\n", 
            "+            <listener class=\"org.apache.axis2.clustering.context.DefaultContextManagerListener\"/>\n", 
            "+            <replication>\n", 
            "+                <defaults>\n", 
            "+                    <exclude name=\"local_*\"/>\n", 
            "+                    <exclude name=\"LOCAL_*\"/>\n", 
            "+                </defaults>\n", 
            "+                <context class=\"org.apache.axis2.context.ConfigurationContext\">\n", 
            "+                    <exclude name=\"UseAsyncOperations\"/>\n", 
            "+                    <exclude name=\"SequencePropertyBeanMap\"/>\n", 
            "+                </context>\n", 
            "+                <context class=\"org.apache.axis2.context.ServiceGroupContext\">\n", 
            "+                    <exclude name=\"my.sandesha.*\"/>\n", 
            "+                </context>\n", 
            "+                <context class=\"org.apache.axis2.context.ServiceContext\">\n", 
            "+                    <exclude name=\"my.sandesha.*\"/>\n", 
            "+                </context>\n", 
            "+            </replication>\n", 
            "+        </contextManager>\n", 
            "+    </clustering>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Phases  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <phaseOrder type=\"InFlow\">\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <phase name=\"Transport\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"CustomURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.synapse.core.axis2.CustomURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--  System predefined phases       -->\n", 
            "+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->\n", 
            "+        <phase name=\"OperationInPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutPhase\"/>\n", 
            "+        <!--system predefined phase-->\n", 
            "+        <!--these phase will run irrespective of the service-->\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"InFaultFlow\">\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"OperationInFaultPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFaultFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutFaultPhase\"/>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+</axisconfig>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_clustering.xml", 
      "from": "java/modules/integration/src/test/resources/axis2Xml/synapse/axis2_clustering.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,356", 
          "lines": [
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<axisconfig name=\"AxisJava2.0\">\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Parameters -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <parameter name=\"hotdeployment\">true</parameter>\n", 
            "+    <parameter name=\"hotupdate\">false</parameter>\n", 
            "+    <parameter name=\"enableMTOM\">false</parameter>\n", 
            "+    <parameter name=\"enableSwA\">false</parameter>\n", 
            "+\n", 
            "+    <!--Uncomment if you want to enable file caching for attachments -->\n", 
            "+    <!--parameter name=\"cacheAttachments\">true</parameter>\n", 
            "+    <parameter name=\"attachmentDIR\"></parameter>\n", 
            "+    <parameter name=\"sizeThreshold\">4000</parameter-->\n", 
            "+\n", 
            "+    <!--This will give out the timout of the configuration contexts, in milliseconds-->\n", 
            "+    <parameter name=\"ConfigContextTimeoutInterval\">30000</parameter>\n", 
            "+\n", 
            "+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->\n", 
            "+    <!--that behavior.-->\n", 
            "+    <parameter name=\"sendStacktraceDetailsWithFaults\">false</parameter>\n", 
            "+\n", 
            "+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->\n", 
            "+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->\n", 
            "+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->\n", 
            "+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->\n", 
            "+    <parameter name=\"DrillDownToRootCauseForFaultReason\">false</parameter>\n", 
            "+\n", 
            "+    <parameter name=\"userName\">admin</parameter>\n", 
            "+    <parameter name=\"password\">axis2</parameter>\n", 
            "+\n", 
            "+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->\n", 
            "+    <!--ServicesDirectory only works on the following cases-->\n", 
            "+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->\n", 
            "+    <!---When creating URL Based configurator with URL \"file://\"  -->\n", 
            "+    <!--- War based configurator with expanded case , -->\n", 
            "+\n", 
            "+    <!--All the other scenarios it will be ignored.-->\n", 
            "+    <!--<parameter name=\"ServicesDirectory\">service</parameter>-->\n", 
            "+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->\n", 
            "+    <!--<parameter name=\"ModulesDirectory\">modules</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+\n", 
            "+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->\n", 
            "+    <!--root which can configured using the following contextRoot parameter-->\n", 
            "+    <!--<parameter name=\"contextRoot\">axis2</parameter>-->\n", 
            "+\n", 
            "+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->\n", 
            "+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->\n", 
            "+    <!--context path to proper Axis2 servlets-->\n", 
            "+    <parameter name=\"servicePath\" locked=\"false\">services</parameter>\n", 
            "+    <parameter name=\"restPath\" locked=\"false\">rest</parameter>\n", 
            "+\n", 
            "+    <!-- Following parameter will completely disable REST handling in Axis2-->\n", 
            "+    <parameter name=\"disableREST\" locked=\"true\">false</parameter>\n", 
            "+\n", 
            "+    <!--POJO deployer , this will alow users to drop .class file and make that into a service-->\n", 
            "+    <deployer extension=\".class\" directory=\"pojo\" class=\"org.apache.axis2.deployment.POJODeployer\"/>\n", 
            "+\n", 
            "+    <!-- Following parameter will set the host name for the epr-->\n", 
            "+    <!--<parameter name=\"hostname\" locked=\"true\">myhost.com</parameter>-->\n", 
            "+\n", 
            "+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->\n", 
            "+    <!-- use this parameter to override autodetected url -->\n", 
            "+    <!--<parameter name=\"httpFrontendHostUrl\">https://someotherhost/context</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+    <!--    The way of adding listener to the system-->\n", 
            "+    <!--    <listener class=\"org.apache.axis2.ObserverIMPL\">-->\n", 
            "+    <!--        <parameter name=\"RSS_URL\">http://127.0.0.1/rss</parameter>-->\n", 
            "+    <!--    </listener>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Receivers -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->\n", 
            "+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->\n", 
            "+    <!--any operation -->\n", 
            "+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->\n", 
            "+    <messageReceivers>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+    </messageReceivers>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Formatter -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to message formatter mapping can be used to implement support for different message -->\n", 
            "+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageFormatters>\n", 
            "+        <messageFormatter contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.XFormURLEncodedFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/>\n", 
            "+    </messageFormatters>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Builders -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to builder mapping can be used to implement support for different message -->\n", 
            "+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageBuilders>\n", 
            "+        <messageBuilder contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.builder.XFormURLEncodedBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/>\n", 
            "+    </messageBuilders>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Ins -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\t<transportReceiver name=\"http\"\n", 
            "+                       class=\"org.apache.axis2.transport.http.SimpleHTTPServer\">\n", 
            "+        <parameter name=\"port\">8200</parameter>\n", 
            "+        <!-- Here is the complete list of supported parameters (see example settings further below):\n", 
            "+            port: the port to listen on (default 6060)\n", 
            "+            hostname:  if non-null, url prefix used in reply-to endpoint references                                 (default null)\n", 
            "+            originServer:  value of http Server header in outgoing messages                                         (default \"Simple-Server/1.1\")\n", 
            "+            requestTimeout:  value in millis of time that requests can wait for data                                (default 20000)\n", 
            "+            requestTcpNoDelay:  true to maximize performance and minimize latency                                   (default true)\n", 
            "+                                false to minimize bandwidth consumption by combining segments\n", 
            "+            requestCoreThreadPoolSize:  number of threads available for request processing (unless queue fills up)  (default 25)\n", 
            "+            requestMaxThreadPoolSize:  number of threads available for request processing if queue fills up         (default 150)\n", 
            "+                                       note that default queue never fills up:  see HttpFactory\n", 
            "+            threadKeepAliveTime:  time to keep threads in excess of core size alive while inactive                  (default 180)\n", 
            "+                                  note that no such threads can exist with default unbounded request queue\n", 
            "+            threadKeepAliveTimeUnit:  TimeUnit of value in threadKeepAliveTime (default SECONDS)                    (default SECONDS)\n", 
            "+        -->\n", 
            "+        <!-- <parameter name=\"hostname\">http://www.myApp.com/ws</parameter> -->\n", 
            "+        <!-- <parameter name=\"originServer\">My-Server/1.1</parameter>           -->\n", 
            "+        <!-- <parameter name=\"requestTimeout\">10000</parameter>                   -->\n", 
            "+        <!-- <parameter name=\"requestTcpNoDelay\">false</parameter>                   -->\n", 
            "+        <!-- <parameter name=\"requestCoreThreadPoolSize\">50</parameter>                      -->\n", 
            "+        <!-- <parameter name=\"RequestMaxThreadPoolSize\">100</parameter>                     -->\n", 
            "+        <!-- <parameter name=\"threadKeepAliveTime\">240000</parameter>                  -->\n", 
            "+        <!-- <parameter name=\"threadKeepAliveTimeUnit\">MILLISECONDS</parameter>            -->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)\n", 
            "+    <transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\">\n", 
            "+        <parameter name=\"myTopicConnectionFactory\">\n", 
            "+        \t<parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+        \t<parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+        \t<parameter name=\"transport.jms.ConnectionFactoryJNDIName\">TopicConnectionFactory</parameter>\n", 
            "+\t\t<parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\">topic</parameter>\n", 
            "+        </parameter>\n", 
            "+\n", 
            "+        <parameter name=\"myQueueConnectionFactory\">\n", 
            "+        \t<parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+        \t<parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+        \t<parameter name=\"transport.jms.ConnectionFactoryJNDIName\">QueueConnectionFactory</parameter>\n", 
            "+\t\t<parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\">queue</parameter>\n", 
            "+        </parameter>\n", 
            "+\n", 
            "+        <parameter name=\"default\">\n", 
            "+        \t<parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+        \t<parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+        \t<parameter name=\"transport.jms.ConnectionFactoryJNDIName\">QueueConnectionFactory</parameter>\n", 
            "+\t\t<parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\">queue</parameter>\n", 
            "+        </parameter>\n", 
            "+    </transportReceiver>-->\n", 
            "+\n", 
            "+    <!--transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\">\n", 
            "+    </transportReceiver-->\n", 
            "+\n", 
            "+    <!--transportReceiver name=\"tcp\"\n", 
            "+                       class=\"org.apache.axis2.transport.tcp.TCPServer\">\n", 
            "+        <parameter name=\"port\">6060</parameter>\n", 
            "+    </transportReceiver-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Outs -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <!--transportSender name=\"tcp\"\n", 
            "+                     class=\"org.apache.axis2.transport.tcp.TCPTransportSender\"/>\n", 
            "+    <transportSender name=\"udp\"\n", 
            "+                     class=\"org.apache.axis2.transport.udp.UDPSender\"/-->\n", 
            "+    <!--transportSender name=\"local\"\n", 
            "+                     class=\"org.apache.axis2.transport.local.LocalTransportSender\"/ -->\n", 
            "+\t<transportSender name=\"http\"\n", 
            "+                     class=\"org.apache.axis2.transport.http.CommonsHTTPTransportSender\">\n", 
            "+        <parameter name=\"PROTOCOL\">HTTP/1.1</parameter>\n", 
            "+        <parameter name=\"Transfer-Encoding\">chunked</parameter>\n", 
            "+\n", 
            "+        <!-- If following is set to 'true', optional action part of the Content-Type will not be added to the SOAP 1.2 messages -->\n", 
            "+        <!--  <parameter name=\"OmitSOAP12Action\">true</parameter>  -->\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <transportSender name=\"https\"\n", 
            "+                     class=\"org.apache.axis2.transport.http.CommonsHTTPTransportSender\">\n", 
            "+        <parameter name=\"PROTOCOL\">HTTP/1.1</parameter>\n", 
            "+        <parameter name=\"Transfer-Encoding\">chunked</parameter>\n", 
            "+    </transportSender>\n", 
            "+    <!--transportSender name=\"jms\"\n", 
            "+                     class=\"org.apache.axis2.transport.jms.JMSSender\"/-->\n", 
            "+\n", 
            "+    <!-- configure the SMTP server information\n", 
            "+    check com.sun.mail.smtp package documentation for descriptions of properties-->\n", 
            "+    <!--transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\">\n", 
            "+        <parameter name=\"mail.smtp.host\">smtp.gmail.com</parameter>\n", 
            "+        <parameter name=\"mail.smtp.port\">587</parameter>\n", 
            "+        <parameter name=\"mail.smtp.starttls.enable\">true</parameter>\n", 
            "+        <parameter name=\"mail.smtp.auth\">true</parameter>\n", 
            "+        <parameter name=\"mail.smtp.user\">synapse.demo.0</parameter>\n", 
            "+        <parameter name=\"mail.smtp.password\">mailpassword</parameter>\n", 
            "+        <parameter name=\"mail.smtp.from\">synapse.demo.0@gmail.com</parameter>\n", 
            "+    </transportSender-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Global Modules  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Comment this to disable Addressing -->\n", 
            "+    <module ref=\"addressing\"/>\n", 
            "+\n", 
            "+    <!--Configuring module , providing parameters for modules whether they refer or not-->\n", 
            "+    <!--<moduleConfig name=\"addressing\">-->\n", 
            "+    <!--<parameter name=\"addressingPara\">N/A</parameter>-->\n", 
            "+    <!--</moduleConfig>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Clustering  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Configure and uncomment following for preparing Axis2 to a clustered environment -->\n", 
            "+    <!--\n", 
            "+    <cluster class=\"org.apache.axis2.cluster.tribes.TribesClusterManager\">\n", 
            "+        <parameter name=\"param1\">value1</parameter>\n", 
            "+        <parameter name=\"domain\">apache.axis2.domain</parameter>\n", 
            "+    \t<configurationManager class=\"org.apache.axis2.cluster.configuration.TribesConfigurationManager\">\n", 
            "+    \t    <listener class=\"org.apache.axis2.cluster.configuration.DefaultConfigurationManagerListener\"/>\n", 
            "+    \t</configurationManager>\n", 
            "+    \t<contextManager class=\"org.apache.axis2.cluster.context.TribesContextManager\">\n", 
            "+    \t    <listener class=\"org.apache.axis2.cluster.context.DefaultContextManagerListener\"/>\n", 
            "+    \t</contextManager>\n", 
            "+    </cluster>\n", 
            "+     -->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Phases  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <phaseOrder type=\"InFlow\">\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <phase name=\"Transport\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--  System predefined phases       -->\n", 
            "+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->\n", 
            "+        <phase name=\"OperationInPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutPhase\"/>\n", 
            "+        <!--system predefined phase-->\n", 
            "+        <!--these phase will run irrespective of the service-->\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"InFaultFlow\">\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"OperationInFaultPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFaultFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutFaultPhase\"/>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+</axisconfig>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_def.xml", 
      "from": "java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_def.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,315", 
          "lines": [
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<axisconfig name=\"AxisJava2.0\">\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Parameters -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <parameter name=\"hotdeployment\">true</parameter>\n", 
            "+    <parameter name=\"hotupdate\">false</parameter>\n", 
            "+    <parameter name=\"enableMTOM\">false</parameter>\n", 
            "+    <parameter name=\"enableSwA\">false</parameter>\n", 
            "+\n", 
            "+    <!--Uncomment if you want to enable file caching for attachments -->\n", 
            "+    <!--parameter name=\"cacheAttachments\">true</parameter>\n", 
            "+    <parameter name=\"attachmentDIR\"></parameter>\n", 
            "+    <parameter name=\"sizeThreshold\">4000</parameter-->\n", 
            "+\n", 
            "+    <!--This will give out the timout of the configuration contexts, in milliseconds-->\n", 
            "+    <parameter name=\"ConfigContextTimeoutInterval\">30000</parameter>\n", 
            "+\n", 
            "+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->\n", 
            "+    <!--that behavior.-->\n", 
            "+    <parameter name=\"sendStacktraceDetailsWithFaults\">false</parameter>\n", 
            "+\n", 
            "+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->\n", 
            "+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->\n", 
            "+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->\n", 
            "+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->\n", 
            "+    <parameter name=\"DrillDownToRootCauseForFaultReason\">false</parameter>\n", 
            "+\n", 
            "+    <parameter name=\"userName\">admin</parameter>\n", 
            "+    <parameter name=\"password\">axis2</parameter>\n", 
            "+\n", 
            "+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->\n", 
            "+    <!--ServicesDirectory only works on the following cases-->\n", 
            "+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->\n", 
            "+    <!---When creating URL Based configurator with URL \"file://\"  -->\n", 
            "+    <!--- War based configurator with expanded case , -->\n", 
            "+\n", 
            "+    <!--All the other scenarios it will be ignored.-->\n", 
            "+    <!--<parameter name=\"ServicesDirectory\">service</parameter>-->\n", 
            "+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->\n", 
            "+    <!--<parameter name=\"ModulesDirectory\">modules</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+\n", 
            "+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->\n", 
            "+    <!--root which can configured using the following contextRoot parameter-->\n", 
            "+    <!--<parameter name=\"contextRoot\">axis2</parameter>-->\n", 
            "+\n", 
            "+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->\n", 
            "+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->\n", 
            "+    <!--context path to proper Axis2 servlets-->\n", 
            "+    <parameter name=\"servicePath\" locked=\"false\">services</parameter>\n", 
            "+    <parameter name=\"restPath\" locked=\"false\">rest</parameter>\n", 
            "+\n", 
            "+    <!-- Following parameter will completely disable REST handling in Axis2-->\n", 
            "+    <parameter name=\"disableREST\" locked=\"true\">false</parameter>\n", 
            "+\n", 
            "+    <!--POJO deployer , this will alow users to drop .class file and make that into a service-->\n", 
            "+    <deployer extension=\".class\" directory=\"pojo\" class=\"org.apache.axis2.deployment.POJODeployer\"/>\n", 
            "+\n", 
            "+    <!-- Following parameter will set the host name for the epr-->\n", 
            "+    <!--<parameter name=\"hostname\" locked=\"true\">myhost.com</parameter>-->\n", 
            "+\n", 
            "+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->\n", 
            "+    <!-- use this parameter to override autodetected url -->\n", 
            "+    <!--<parameter name=\"httpFrontendHostUrl\">https://someotherhost/context</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+    <!--    The way of adding listener to the system-->\n", 
            "+    <!--    <listener class=\"org.apache.axis2.ObserverIMPL\">-->\n", 
            "+    <!--        <parameter name=\"RSS_URL\">http://127.0.0.1/rss</parameter>-->\n", 
            "+    <!--    </listener>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Receivers -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->\n", 
            "+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->\n", 
            "+    <!--any operation -->\n", 
            "+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->\n", 
            "+    <messageReceivers>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+    </messageReceivers>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Formatter -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to message formatter mapping can be used to implement support for different message -->\n", 
            "+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageFormatters>\n", 
            "+        <messageFormatter contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.XFormURLEncodedFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/>\n", 
            "+    </messageFormatters>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Builders -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to builder mapping can be used to implement support for different message -->\n", 
            "+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageBuilders>\n", 
            "+        <messageBuilder contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.builder.XFormURLEncodedBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/>\n", 
            "+    </messageBuilders>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Ins -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\t<transportReceiver name=\"http\"\n", 
            "+                       class=\"org.apache.axis2.transport.http.SimpleHTTPServer\">\n", 
            "+        <parameter name=\"port\">8200</parameter>\n", 
            "+        <!-- Here is the complete list of supported parameters (see example settings further below):\n", 
            "+            port: the port to listen on (default 6060)\n", 
            "+            hostname:  if non-null, url prefix used in reply-to endpoint references                                 (default null)\n", 
            "+            originServer:  value of http Server header in outgoing messages                                         (default \"Simple-Server/1.1\")\n", 
            "+            requestTimeout:  value in millis of time that requests can wait for data                                (default 20000)\n", 
            "+            requestTcpNoDelay:  true to maximize performance and minimize latency                                   (default true)\n", 
            "+                                false to minimize bandwidth consumption by combining segments\n", 
            "+            requestCoreThreadPoolSize:  number of threads available for request processing (unless queue fills up)  (default 25)\n", 
            "+            requestMaxThreadPoolSize:  number of threads available for request processing if queue fills up         (default 150)\n", 
            "+                                       note that default queue never fills up:  see HttpFactory\n", 
            "+            threadKeepAliveTime:  time to keep threads in excess of core size alive while inactive                  (default 180)\n", 
            "+                                  note that no such threads can exist with default unbounded request queue\n", 
            "+            threadKeepAliveTimeUnit:  TimeUnit of value in threadKeepAliveTime (default SECONDS)                    (default SECONDS)\n", 
            "+        -->\n", 
            "+        <!-- <parameter name=\"hostname\">http://www.myApp.com/ws</parameter> -->\n", 
            "+        <!-- <parameter name=\"originServer\">My-Server/1.1</parameter>           -->\n", 
            "+        <!-- <parameter name=\"requestTimeout\">10000</parameter>                   -->\n", 
            "+        <!-- <parameter name=\"requestTcpNoDelay\">false</parameter>                   -->\n", 
            "+        <!-- <parameter name=\"requestCoreThreadPoolSize\">50</parameter>                      -->\n", 
            "+        <!-- <parameter name=\"RequestMaxThreadPoolSize\">100</parameter>                     -->\n", 
            "+        <!-- <parameter name=\"threadKeepAliveTime\">240000</parameter>                  -->\n", 
            "+        <!-- <parameter name=\"threadKeepAliveTimeUnit\">MILLISECONDS</parameter>            -->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <transportReceiver name=\"tcp\"\n", 
            "+                       class=\"org.apache.axis2.transport.tcp.TCPServer\">\n", 
            "+        <parameter name=\"port\">6060</parameter>\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Outs -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <transportSender name=\"tcp\"\n", 
            "+                     class=\"org.apache.axis2.transport.tcp.TCPTransportSender\"/>\n", 
            "+    <!--transportSender name=\"udp\"\n", 
            "+                     class=\"org.apache.axis2.transport.udp.UDPSender\"/-->\n", 
            "+    <!--transportSender name=\"local\"\n", 
            "+                     class=\"org.apache.axis2.transport.local.LocalTransportSender\"/ -->\n", 
            "+\t<transportSender name=\"http\"\n", 
            "+                     class=\"org.apache.axis2.transport.http.CommonsHTTPTransportSender\">\n", 
            "+        <parameter name=\"PROTOCOL\">HTTP/1.1</parameter>\n", 
            "+        <parameter name=\"Transfer-Encoding\">chunked</parameter>\n", 
            "+\n", 
            "+        <!-- If following is set to 'true', optional action part of the Content-Type will not be added to the SOAP 1.2 messages -->\n", 
            "+        <!--  <parameter name=\"OmitSOAP12Action\">true</parameter>  -->\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <transportSender name=\"https\"\n", 
            "+                     class=\"org.apache.axis2.transport.http.CommonsHTTPTransportSender\">\n", 
            "+        <parameter name=\"PROTOCOL\">HTTP/1.1</parameter>\n", 
            "+        <parameter name=\"Transfer-Encoding\">chunked</parameter>\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Global Modules  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Comment this to disable Addressing -->\n", 
            "+    <module ref=\"addressing\"/>\n", 
            "+\n", 
            "+    <!--Configuring module , providing parameters for modules whether they refer or not-->\n", 
            "+    <!--<moduleConfig name=\"addressing\">-->\n", 
            "+    <!--<parameter name=\"addressingPara\">N/A</parameter>-->\n", 
            "+    <!--</moduleConfig>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Clustering  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Configure and uncomment following for preparing Axis2 to a clustered environment -->\n", 
            "+    <!--\n", 
            "+    <cluster class=\"org.apache.axis2.cluster.tribes.TribesClusterManager\">\n", 
            "+        <parameter name=\"param1\">value1</parameter>\n", 
            "+        <parameter name=\"domain\">apache.axis2.domain</parameter>\n", 
            "+    \t<configurationManager class=\"org.apache.axis2.cluster.configuration.TribesConfigurationManager\">\n", 
            "+    \t    <listener class=\"org.apache.axis2.cluster.configuration.DefaultConfigurationManagerListener\"/>\n", 
            "+    \t</configurationManager>\n", 
            "+    \t<contextManager class=\"org.apache.axis2.cluster.context.TribesContextManager\">\n", 
            "+    \t    <listener class=\"org.apache.axis2.cluster.context.DefaultContextManagerListener\"/>\n", 
            "+    \t</contextManager>\n", 
            "+    </cluster>\n", 
            "+     -->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Phases  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <phaseOrder type=\"InFlow\">\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <phase name=\"Transport\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--  System predefined phases       -->\n", 
            "+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->\n", 
            "+        <phase name=\"OperationInPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutPhase\"/>\n", 
            "+        <!--system predefined phase-->\n", 
            "+        <!--these phase will run irrespective of the service-->\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"InFaultFlow\">\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"OperationInFaultPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFaultFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutFaultPhase\"/>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+</axisconfig>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_tcp.xml", 
      "from": "java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_tcp.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,315", 
          "lines": [
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<axisconfig name=\"AxisJava2.0\">\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Parameters -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <parameter name=\"hotdeployment\">true</parameter>\n", 
            "+    <parameter name=\"hotupdate\">false</parameter>\n", 
            "+    <parameter name=\"enableMTOM\">false</parameter>\n", 
            "+    <parameter name=\"enableSwA\">false</parameter>\n", 
            "+\n", 
            "+    <!--Uncomment if you want to enable file caching for attachments -->\n", 
            "+    <!--parameter name=\"cacheAttachments\">true</parameter>\n", 
            "+    <parameter name=\"attachmentDIR\"></parameter>\n", 
            "+    <parameter name=\"sizeThreshold\">4000</parameter-->\n", 
            "+\n", 
            "+    <!--This will give out the timout of the configuration contexts, in milliseconds-->\n", 
            "+    <parameter name=\"ConfigContextTimeoutInterval\">30000</parameter>\n", 
            "+\n", 
            "+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->\n", 
            "+    <!--that behavior.-->\n", 
            "+    <parameter name=\"sendStacktraceDetailsWithFaults\">false</parameter>\n", 
            "+\n", 
            "+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->\n", 
            "+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->\n", 
            "+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->\n", 
            "+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->\n", 
            "+    <parameter name=\"DrillDownToRootCauseForFaultReason\">false</parameter>\n", 
            "+\n", 
            "+    <parameter name=\"userName\">admin</parameter>\n", 
            "+    <parameter name=\"password\">axis2</parameter>\n", 
            "+\n", 
            "+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->\n", 
            "+    <!--ServicesDirectory only works on the following cases-->\n", 
            "+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->\n", 
            "+    <!---When creating URL Based configurator with URL \"file://\"  -->\n", 
            "+    <!--- War based configurator with expanded case , -->\n", 
            "+\n", 
            "+    <!--All the other scenarios it will be ignored.-->\n", 
            "+    <!--<parameter name=\"ServicesDirectory\">service</parameter>-->\n", 
            "+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->\n", 
            "+    <!--<parameter name=\"ModulesDirectory\">modules</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+\n", 
            "+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->\n", 
            "+    <!--root which can configured using the following contextRoot parameter-->\n", 
            "+    <!--<parameter name=\"contextRoot\">axis2</parameter>-->\n", 
            "+\n", 
            "+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->\n", 
            "+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->\n", 
            "+    <!--context path to proper Axis2 servlets-->\n", 
            "+    <parameter name=\"servicePath\" locked=\"false\">services</parameter>\n", 
            "+    <parameter name=\"restPath\" locked=\"false\">rest</parameter>\n", 
            "+\n", 
            "+    <!-- Following parameter will completely disable REST handling in Axis2-->\n", 
            "+    <parameter name=\"disableREST\" locked=\"true\">false</parameter>\n", 
            "+\n", 
            "+    <!--POJO deployer , this will alow users to drop .class file and make that into a service-->\n", 
            "+    <deployer extension=\".class\" directory=\"pojo\" class=\"org.apache.axis2.deployment.POJODeployer\"/>\n", 
            "+\n", 
            "+    <!-- Following parameter will set the host name for the epr-->\n", 
            "+    <!--<parameter name=\"hostname\" locked=\"true\">myhost.com</parameter>-->\n", 
            "+\n", 
            "+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->\n", 
            "+    <!-- use this parameter to override autodetected url -->\n", 
            "+    <!--<parameter name=\"httpFrontendHostUrl\">https://someotherhost/context</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+    <!--    The way of adding listener to the system-->\n", 
            "+    <!--    <listener class=\"org.apache.axis2.ObserverIMPL\">-->\n", 
            "+    <!--        <parameter name=\"RSS_URL\">http://127.0.0.1/rss</parameter>-->\n", 
            "+    <!--    </listener>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Receivers -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->\n", 
            "+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->\n", 
            "+    <!--any operation -->\n", 
            "+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->\n", 
            "+    <messageReceivers>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+    </messageReceivers>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Formatter -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to message formatter mapping can be used to implement support for different message -->\n", 
            "+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageFormatters>\n", 
            "+        <messageFormatter contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.XFormURLEncodedFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/>\n", 
            "+    </messageFormatters>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Builders -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to builder mapping can be used to implement support for different message -->\n", 
            "+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageBuilders>\n", 
            "+        <messageBuilder contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.builder.XFormURLEncodedBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/>\n", 
            "+    </messageBuilders>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Ins -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\t<transportReceiver name=\"http\"\n", 
            "+                       class=\"org.apache.axis2.transport.http.SimpleHTTPServer\">\n", 
            "+        <parameter name=\"port\">8200</parameter>\n", 
            "+        <!-- Here is the complete list of supported parameters (see example settings further below):\n", 
            "+            port: the port to listen on (default 6060)\n", 
            "+            hostname:  if non-null, url prefix used in reply-to endpoint references                                 (default null)\n", 
            "+            originServer:  value of http Server header in outgoing messages                                         (default \"Simple-Server/1.1\")\n", 
            "+            requestTimeout:  value in millis of time that requests can wait for data                                (default 20000)\n", 
            "+            requestTcpNoDelay:  true to maximize performance and minimize latency                                   (default true)\n", 
            "+                                false to minimize bandwidth consumption by combining segments\n", 
            "+            requestCoreThreadPoolSize:  number of threads available for request processing (unless queue fills up)  (default 25)\n", 
            "+            requestMaxThreadPoolSize:  number of threads available for request processing if queue fills up         (default 150)\n", 
            "+                                       note that default queue never fills up:  see HttpFactory\n", 
            "+            threadKeepAliveTime:  time to keep threads in excess of core size alive while inactive                  (default 180)\n", 
            "+                                  note that no such threads can exist with default unbounded request queue\n", 
            "+            threadKeepAliveTimeUnit:  TimeUnit of value in threadKeepAliveTime (default SECONDS)                    (default SECONDS)\n", 
            "+        -->\n", 
            "+        <!-- <parameter name=\"hostname\">http://www.myApp.com/ws</parameter> -->\n", 
            "+        <!-- <parameter name=\"originServer\">My-Server/1.1</parameter>           -->\n", 
            "+        <!-- <parameter name=\"requestTimeout\">10000</parameter>                   -->\n", 
            "+        <!-- <parameter name=\"requestTcpNoDelay\">false</parameter>                   -->\n", 
            "+        <!-- <parameter name=\"requestCoreThreadPoolSize\">50</parameter>                      -->\n", 
            "+        <!-- <parameter name=\"RequestMaxThreadPoolSize\">100</parameter>                     -->\n", 
            "+        <!-- <parameter name=\"threadKeepAliveTime\">240000</parameter>                  -->\n", 
            "+        <!-- <parameter name=\"threadKeepAliveTimeUnit\">MILLISECONDS</parameter>            -->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!--transportReceiver name=\"tcp\"\n", 
            "+                       class=\"org.apache.axis2.transport.tcp.TCPServer\">\n", 
            "+        <parameter name=\"port\">6060</parameter>\n", 
            "+    </transportReceiver-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Outs -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <!--transportSender name=\"tcp\"\n", 
            "+                     class=\"org.apache.axis2.transport.tcp.TCPTransportSender\"/-->\n", 
            "+    <transportSender name=\"udp\"\n", 
            "+                     class=\"org.apache.axis2.transport.udp.UDPSender\"/>\n", 
            "+    <!--transportSender name=\"local\"\n", 
            "+                     class=\"org.apache.axis2.transport.local.LocalTransportSender\"/ -->\n", 
            "+\t<transportSender name=\"http\"\n", 
            "+                     class=\"org.apache.axis2.transport.http.CommonsHTTPTransportSender\">\n", 
            "+        <parameter name=\"PROTOCOL\">HTTP/1.1</parameter>\n", 
            "+        <parameter name=\"Transfer-Encoding\">chunked</parameter>\n", 
            "+\n", 
            "+        <!-- If following is set to 'true', optional action part of the Content-Type will not be added to the SOAP 1.2 messages -->\n", 
            "+        <!--  <parameter name=\"OmitSOAP12Action\">true</parameter>  -->\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <transportSender name=\"https\"\n", 
            "+                     class=\"org.apache.axis2.transport.http.CommonsHTTPTransportSender\">\n", 
            "+        <parameter name=\"PROTOCOL\">HTTP/1.1</parameter>\n", 
            "+        <parameter name=\"Transfer-Encoding\">chunked</parameter>\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Global Modules  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Comment this to disable Addressing -->\n", 
            "+    <module ref=\"addressing\"/>\n", 
            "+\n", 
            "+    <!--Configuring module , providing parameters for modules whether they refer or not-->\n", 
            "+    <!--<moduleConfig name=\"addressing\">-->\n", 
            "+    <!--<parameter name=\"addressingPara\">N/A</parameter>-->\n", 
            "+    <!--</moduleConfig>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Clustering  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Configure and uncomment following for preparing Axis2 to a clustered environment -->\n", 
            "+    <!--\n", 
            "+    <cluster class=\"org.apache.axis2.cluster.tribes.TribesClusterManager\">\n", 
            "+        <parameter name=\"param1\">value1</parameter>\n", 
            "+        <parameter name=\"domain\">apache.axis2.domain</parameter>\n", 
            "+    \t<configurationManager class=\"org.apache.axis2.cluster.configuration.TribesConfigurationManager\">\n", 
            "+    \t    <listener class=\"org.apache.axis2.cluster.configuration.DefaultConfigurationManagerListener\"/>\n", 
            "+    \t</configurationManager>\n", 
            "+    \t<contextManager class=\"org.apache.axis2.cluster.context.TribesContextManager\">\n", 
            "+    \t    <listener class=\"org.apache.axis2.cluster.context.DefaultContextManagerListener\"/>\n", 
            "+    \t</contextManager>\n", 
            "+    </cluster>\n", 
            "+     -->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Phases  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <phaseOrder type=\"InFlow\">\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <phase name=\"Transport\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--  System predefined phases       -->\n", 
            "+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->\n", 
            "+        <phase name=\"OperationInPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutPhase\"/>\n", 
            "+        <!--system predefined phase-->\n", 
            "+        <!--these phase will run irrespective of the service-->\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"InFaultFlow\">\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"OperationInFaultPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFaultFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutFaultPhase\"/>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+</axisconfig>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_udp.xml", 
      "from": "java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_udp.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,355", 
          "lines": [
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<axisconfig name=\"AxisJava2.0\">\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Parameters -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <parameter name=\"hotdeployment\">true</parameter>\n", 
            "+    <parameter name=\"hotupdate\">false</parameter>\n", 
            "+    <parameter name=\"enableMTOM\">false</parameter>\n", 
            "+    <parameter name=\"enableSwA\">false</parameter>\n", 
            "+\n", 
            "+    <!--Uncomment if you want to enable file caching for attachments -->\n", 
            "+    <!--parameter name=\"cacheAttachments\">true</parameter>\n", 
            "+    <parameter name=\"attachmentDIR\"></parameter>\n", 
            "+    <parameter name=\"sizeThreshold\">4000</parameter-->\n", 
            "+\n", 
            "+    <!--This will give out the timout of the configuration contexts, in milliseconds-->\n", 
            "+    <parameter name=\"ConfigContextTimeoutInterval\">30000</parameter>\n", 
            "+\n", 
            "+    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->\n", 
            "+    <!--that behavior.-->\n", 
            "+    <parameter name=\"sendStacktraceDetailsWithFaults\">false</parameter>\n", 
            "+\n", 
            "+    <!--If there aren't any information available to find out the fault reason, we set the message of the exception-->\n", 
            "+    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->\n", 
            "+    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->\n", 
            "+    <!--is set, then Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->\n", 
            "+    <parameter name=\"DrillDownToRootCauseForFaultReason\">false</parameter>\n", 
            "+\n", 
            "+    <parameter name=\"userName\">admin</parameter>\n", 
            "+    <parameter name=\"password\">axis2</parameter>\n", 
            "+\n", 
            "+    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->\n", 
            "+    <!--ServicesDirectory only works on the following cases-->\n", 
            "+    <!---File based configurator and in that case the value should be a file URL (http:// not allowed)-->\n", 
            "+    <!---When creating URL Based configurator with URL \"file://\"  -->\n", 
            "+    <!--- War based configurator with expanded case , -->\n", 
            "+\n", 
            "+    <!--All the other scenarios it will be ignored.-->\n", 
            "+    <!--<parameter name=\"ServicesDirectory\">service</parameter>-->\n", 
            "+    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->\n", 
            "+    <!--<parameter name=\"ModulesDirectory\">modules</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+\n", 
            "+    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->\n", 
            "+    <!--root which can configured using the following contextRoot parameter-->\n", 
            "+    <!--<parameter name=\"contextRoot\">axis2</parameter>-->\n", 
            "+\n", 
            "+    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distinguiush those endpoints-->\n", 
            "+    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->\n", 
            "+    <!--context path to proper Axis2 servlets-->\n", 
            "+    <parameter name=\"servicePath\" locked=\"false\">services</parameter>\n", 
            "+    <parameter name=\"restPath\" locked=\"false\">rest</parameter>\n", 
            "+\n", 
            "+    <!-- Following parameter will completely disable REST handling in Axis2-->\n", 
            "+    <parameter name=\"disableREST\" locked=\"true\">false</parameter>\n", 
            "+\n", 
            "+    <!--POJO deployer , this will alow users to drop .class file and make that into a service-->\n", 
            "+    <deployer extension=\".class\" directory=\"pojo\" class=\"org.apache.axis2.deployment.POJODeployer\"/>\n", 
            "+\n", 
            "+    <!-- Following parameter will set the host name for the epr-->\n", 
            "+    <!--<parameter name=\"hostname\" locked=\"true\">myhost.com</parameter>-->\n", 
            "+\n", 
            "+    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->\n", 
            "+    <!-- use this parameter to override autodetected url -->\n", 
            "+    <!--<parameter name=\"httpFrontendHostUrl\">https://someotherhost/context</parameter>-->\n", 
            "+\n", 
            "+\n", 
            "+    <!--    The way of adding listener to the system-->\n", 
            "+    <!--    <listener class=\"org.apache.axis2.ObserverIMPL\">-->\n", 
            "+    <!--        <parameter name=\"RSS_URL\">http://127.0.0.1/rss</parameter>-->\n", 
            "+    <!--    </listener>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Receivers -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--This is the deafult MessageReceiver for the system , if you want to have MessageReceivers for -->\n", 
            "+    <!--all the other MEP implement it and add the correct entry to here , so that you can refer from-->\n", 
            "+    <!--any operation -->\n", 
            "+    <!--Note : You can ovrride this for a particular service by adding the same element with your requirement-->\n", 
            "+    <messageReceivers>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2004/08/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-only\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver\"/>\n", 
            "+        <messageReceiver mep=\"http://www.w3.org/2006/01/wsdl/in-out\"\n", 
            "+                         class=\"org.apache.axis2.receivers.RawXMLINOutMessageReceiver\"/>\n", 
            "+    </messageReceivers>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Formatter -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to message formatter mapping can be used to implement support for different message -->\n", 
            "+    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageFormatters>\n", 
            "+        <messageFormatter contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.XFormURLEncodedFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/>\n", 
            "+        <messageFormatter contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/>\n", 
            "+    </messageFormatters>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Message Builders -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!--Following content type to builder mapping can be used to implement support for different message -->\n", 
            "+    <!--formats in Axis2. These message formats are expected to be resolved based on the content type. -->\n", 
            "+    <messageBuilders>\n", 
            "+        <messageBuilder contentType=\"application/xml\"\n", 
            "+                         class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"application/x-www-form-urlencoded\"\n", 
            "+                         class=\"org.apache.axis2.builder.XFormURLEncodedBuilder\"/>\n", 
            "+        <messageBuilder contentType=\"multipart/form-data\"\n", 
            "+                         class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/>\n", 
            "+    </messageBuilders>\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Ins -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\t<transportReceiver name=\"http\"\n", 
            "+                       class=\"org.apache.axis2.transport.http.SimpleHTTPServer\">\n", 
            "+        <parameter name=\"port\">8200</parameter>\n", 
            "+        <!-- Here is the complete list of supported parameters (see example settings further below):\n", 
            "+            port: the port to listen on (default 6060)\n", 
            "+            hostname:  if non-null, url prefix used in reply-to endpoint references                                 (default null)\n", 
            "+            originServer:  value of http Server header in outgoing messages                                         (default \"Simple-Server/1.1\")\n", 
            "+            requestTimeout:  value in millis of time that requests can wait for data                                (default 20000)\n", 
            "+            requestTcpNoDelay:  true to maximize performance and minimize latency                                   (default true)\n", 
            "+                                false to minimize bandwidth consumption by combining segments\n", 
            "+            requestCoreThreadPoolSize:  number of threads available for request processing (unless queue fills up)  (default 25)\n", 
            "+            requestMaxThreadPoolSize:  number of threads available for request processing if queue fills up         (default 150)\n", 
            "+                                       note that default queue never fills up:  see HttpFactory\n", 
            "+            threadKeepAliveTime:  time to keep threads in excess of core size alive while inactive                  (default 180)\n", 
            "+                                  note that no such threads can exist with default unbounded request queue\n", 
            "+            threadKeepAliveTimeUnit:  TimeUnit of value in threadKeepAliveTime (default SECONDS)                    (default SECONDS)\n", 
            "+        -->\n", 
            "+        <!-- <parameter name=\"hostname\">http://www.myApp.com/ws</parameter> -->\n", 
            "+        <!-- <parameter name=\"originServer\">My-Server/1.1</parameter>           -->\n", 
            "+        <!-- <parameter name=\"requestTimeout\">10000</parameter>                   -->\n", 
            "+        <!-- <parameter name=\"requestTcpNoDelay\">false</parameter>                   -->\n", 
            "+        <!-- <parameter name=\"requestCoreThreadPoolSize\">50</parameter>                      -->\n", 
            "+        <!-- <parameter name=\"RequestMaxThreadPoolSize\">100</parameter>                     -->\n", 
            "+        <!-- <parameter name=\"threadKeepAliveTime\">240000</parameter>                  -->\n", 
            "+        <!-- <parameter name=\"threadKeepAliveTimeUnit\">MILLISECONDS</parameter>            -->\n", 
            "+    </transportReceiver>\n", 
            "+\n", 
            "+    <!--transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\">\n", 
            "+        <parameter name=\"myTopicConnectionFactory\">\n", 
            "+        \t<parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+        \t<parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+        \t<parameter name=\"transport.jms.ConnectionFactoryJNDIName\">TopicConnectionFactory</parameter>\n", 
            "+\t\t<parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\">topic</parameter>\n", 
            "+        </parameter>\n", 
            "+\n", 
            "+        <parameter name=\"myQueueConnectionFactory\">\n", 
            "+        \t<parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+        \t<parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+        \t<parameter name=\"transport.jms.ConnectionFactoryJNDIName\">QueueConnectionFactory</parameter>\n", 
            "+\t\t<parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\">queue</parameter>\n", 
            "+        </parameter>\n", 
            "+\n", 
            "+        <parameter name=\"default\">\n", 
            "+        \t<parameter name=\"java.naming.factory.initial\">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>\n", 
            "+        \t<parameter name=\"java.naming.provider.url\">tcp://localhost:61616</parameter>\n", 
            "+        \t<parameter name=\"transport.jms.ConnectionFactoryJNDIName\">QueueConnectionFactory</parameter>\n", 
            "+\t\t<parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\">queue</parameter>\n", 
            "+        </parameter>\n", 
            "+    </transportReceiver-->\n", 
            "+\n", 
            "+    <!--transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\">\n", 
            "+    </transportReceiver-->\n", 
            "+\n", 
            "+    <!--transportReceiver name=\"tcp\"\n", 
            "+                       class=\"org.apache.axis2.transport.tcp.TCPServer\">\n", 
            "+        <parameter name=\"port\">6060</parameter>\n", 
            "+    </transportReceiver-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Transport Outs -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+\n", 
            "+    <!--transportSender name=\"tcp\"\n", 
            "+                     class=\"org.apache.axis2.transport.tcp.TCPTransportSender\"/>\n", 
            "+    <transportSender name=\"udp\"\n", 
            "+                     class=\"org.apache.axis2.transport.udp.UDPSender\"/-->\n", 
            "+    <!--transportSender name=\"local\"\n", 
            "+                     class=\"org.apache.axis2.transport.local.LocalTransportSender\"/ -->\n", 
            "+\t<transportSender name=\"http\"\n", 
            "+                     class=\"org.apache.axis2.transport.http.CommonsHTTPTransportSender\">\n", 
            "+        <parameter name=\"PROTOCOL\">HTTP/1.1</parameter>\n", 
            "+        <parameter name=\"Transfer-Encoding\">chunked</parameter>\n", 
            "+\n", 
            "+        <!-- If following is set to 'true', optional action part of the Content-Type will not be added to the SOAP 1.2 messages -->\n", 
            "+        <!--  <parameter name=\"OmitSOAP12Action\">true</parameter>  -->\n", 
            "+    </transportSender>\n", 
            "+\n", 
            "+    <transportSender name=\"https\"\n", 
            "+                     class=\"org.apache.axis2.transport.http.CommonsHTTPTransportSender\">\n", 
            "+        <parameter name=\"PROTOCOL\">HTTP/1.1</parameter>\n", 
            "+        <parameter name=\"Transfer-Encoding\">chunked</parameter>\n", 
            "+    </transportSender>\n", 
            "+    <transportSender name=\"jms\"\n", 
            "+                     class=\"org.apache.axis2.transport.jms.JMSSender\"/>\n", 
            "+\n", 
            "+    <!-- configure the SMTP server information\n", 
            "+    check com.sun.mail.smtp package documentation for descriptions of properties-->\n", 
            "+    <!--transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\">\n", 
            "+        <parameter name=\"mail.smtp.host\">smtp.gmail.com</parameter>\n", 
            "+        <parameter name=\"mail.smtp.port\">587</parameter>\n", 
            "+        <parameter name=\"mail.smtp.starttls.enable\">true</parameter>\n", 
            "+        <parameter name=\"mail.smtp.auth\">true</parameter>\n", 
            "+        <parameter name=\"mail.smtp.user\">synapse.demo.0</parameter>\n", 
            "+        <parameter name=\"mail.smtp.password\">mailpassword</parameter>\n", 
            "+        <parameter name=\"mail.smtp.from\">synapse.demo.0@gmail.com</parameter>\n", 
            "+    </transportSender-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Global Modules  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Comment this to disable Addressing -->\n", 
            "+    <module ref=\"addressing\"/>\n", 
            "+\n", 
            "+    <!--Configuring module , providing parameters for modules whether they refer or not-->\n", 
            "+    <!--<moduleConfig name=\"addressing\">-->\n", 
            "+    <!--<parameter name=\"addressingPara\">N/A</parameter>-->\n", 
            "+    <!--</moduleConfig>-->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Clustering  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Configure and uncomment following for preparing Axis2 to a clustered environment -->\n", 
            "+    <!--\n", 
            "+    <cluster class=\"org.apache.axis2.cluster.tribes.TribesClusterManager\">\n", 
            "+        <parameter name=\"param1\">value1</parameter>\n", 
            "+        <parameter name=\"domain\">apache.axis2.domain</parameter>\n", 
            "+    \t<configurationManager class=\"org.apache.axis2.cluster.configuration.TribesConfigurationManager\">\n", 
            "+    \t    <listener class=\"org.apache.axis2.cluster.configuration.DefaultConfigurationManagerListener\"/>\n", 
            "+    \t</configurationManager>\n", 
            "+    \t<contextManager class=\"org.apache.axis2.cluster.context.TribesContextManager\">\n", 
            "+    \t    <listener class=\"org.apache.axis2.cluster.context.DefaultContextManagerListener\"/>\n", 
            "+    \t</contextManager>\n", 
            "+    </cluster>\n", 
            "+     -->\n", 
            "+\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <!-- Phases  -->\n", 
            "+    <!-- ================================================= -->\n", 
            "+    <phaseOrder type=\"InFlow\">\n", 
            "+        <!--  System pre defined phases       -->\n", 
            "+        <phase name=\"Transport\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\">\n", 
            "+                <order phase=\"Transport\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--  System predefined phases       -->\n", 
            "+        <!--   After Postdispatch phase module author or service author can add any phase he want      -->\n", 
            "+        <phase name=\"OperationInPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutPhase\"/>\n", 
            "+        <!--system predefined phase-->\n", 
            "+        <!--these phase will run irrespective of the service-->\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"InFaultFlow\">\n", 
            "+        <phase name=\"Addressing\">\n", 
            "+             <handler name=\"AddressingBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.AddressingBasedDispatcher\">\n", 
            "+                 <order phase=\"Addressing\"/>\n", 
            "+            </handler>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+        <phase name=\"PreDispatch\"/>\n", 
            "+        <phase name=\"Dispatch\" class=\"org.apache.axis2.engine.DispatchPhase\">\n", 
            "+            <handler name=\"RequestURIBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIBasedDispatcher\"/>\n", 
            "+            <handler name=\"SOAPActionBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPActionBasedDispatcher\"/>\n", 
            "+            <handler name=\"RequestURIOperationDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.RequestURIOperationDispatcher\"/>\n", 
            "+            <handler name=\"SOAPMessageBodyBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher\"/>\n", 
            "+\n", 
            "+            <handler name=\"HTTPLocationBasedDispatcher\"\n", 
            "+                     class=\"org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher\"/>\n", 
            "+        </phase>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"OperationInFaultPhase\"/>\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+    </phaseOrder>\n", 
            "+    <phaseOrder type=\"OutFaultFlow\">\n", 
            "+        <!--      user can add his own phases to this area  -->\n", 
            "+        <phase name=\"soapmonitorPhase\"/>\n", 
            "+        <phase name=\"OperationOutFaultPhase\"/>\n", 
            "+        <phase name=\"RMPhase\"/>\n", 
            "+        <phase name=\"PolicyDetermination\"/>\n", 
            "+        <phase name=\"MessageOut\"/>\n", 
            "+        <phase name=\"Security\"/>\n", 
            "+    </phaseOrder>\n", 
            "+</axisconfig>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_jms.xml", 
      "from": "java/modules/integration/src/test/resources/axis2Xml/axis2Client/axis2_jms.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>7</sampleID>\n", 
            "+    <sampleName>Introduction to local Registry entries and using Schema validation</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_7.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample7.xml", 
      "from": "java/modules/integration/src/test/resources/sample7.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>8</sampleID>\n", 
            "+    <sampleName>Introduction to static and dynamic registry resources, and using XSLT transformations</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_8.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample8.xml", 
      "from": "java/modules/integration/src/test/resources/sample8.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>9</sampleID>\n", 
            "+    <sampleName>Introduction to dynamic sequences with the Registry</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_9.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample9.xml", 
      "from": "java/modules/integration/src/test/resources/sample9.xml"
    }, 
    {
      "chunks": [], 
      "to": "java/modules/integration/src/test/resources/identity.jks", 
      "from": "java/modules/integration/src/test/resources/identity.jks"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>11</sampleID>\n", 
            "+    <sampleName>A full registry based configuration, and sharing a configuration between multiple instances</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_11.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample11.xml", 
      "from": "java/modules/integration/src/test/resources/sample11.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>13</sampleID>\n", 
            "+    <sampleName>Dual channel invocation through Synapse</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_0.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample13.xml", 
      "from": "java/modules/integration/src/test/resources/sample13.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+<synapseSample>\n", 
            "+    <sampleID>16</sampleID>\n", 
            "+    <sampleName>Introduction to dynamic and static keys</sampleName>\n", 
            "+    <synapseConfig>\n", 
            "+        <axis2Repo>modules/integration/target/test_repos/synapse</axis2Repo>\n", 
            "+        <axis2Xml>modules/integration/target/test_repos/synapse/conf/axis2_def.xml</axis2Xml>\n", 
            "+        <synapseXml>repository/conf/sample/synapse_sample_16.xml</synapseXml>\n", 
            "+    </synapseConfig>\n", 
            "+    <backEndServerConfig>\n", 
            "+        <axis2Server id='0'>\n", 
            "+            <axis2Repo>modules/integration/target/test_repos/axis2Server</axis2Repo>\n", 
            "+            <axis2Xml>modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml</axis2Xml>\n", 
            "+        </axis2Server>\n", 
            "+    </backEndServerConfig>\n", 
            "+    <clientConfig>\n", 
            "+\t<clientRepo>modules/integration/target/test_repos/axis2Client</clientRepo>\n", 
            "+    </clientConfig>\n", 
            "+</synapseSample>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/sample16.xml", 
      "from": "java/modules/integration/src/test/resources/sample16.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,485", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework;\n", 
            "+\n", 
            "+import junit.framework.TestCase;\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axiom.om.impl.builder.StAXOMBuilder;\n", 
            "+import org.apache.commons.io.FileUtils;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.clients.EventSampleClient;\n", 
            "+import org.apache.synapse.samples.framework.clients.MTOMSwASampleClient;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+import javax.xml.namespace.QName;\n", 
            "+import java.io.File;\n", 
            "+import java.io.IOException;\n", 
            "+import java.io.InputStream;\n", 
            "+import java.util.ArrayList;\n", 
            "+import java.util.Iterator;\n", 
            "+import java.util.Properties;\n", 
            "+\n", 
            "+/**\n", 
            "+ * This is the class from which all sample tests are derived. Loads and stores necessary\n", 
            "+ * configuration information. Starts the mediation engine and backend server(s) before each test.\n", 
            "+ * Shuts down running servers after a test is complete.\n", 
            "+ */\n", 
            "+public abstract class SynapseTestCase extends TestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(SynapseTestCase.class);\n", 
            "+\n", 
            "+    private SampleConfiguration configuration;\n", 
            "+    private String sampleDescriptor;\n", 
            "+    private int sampleId;\n", 
            "+    private ProcessController pc;\n", 
            "+    private ArrayList<BackEndServerController> backendServerControllers;\n", 
            "+    private OMElement sampleConfigElement;\n", 
            "+\n", 
            "+    private String currentLocation;\n", 
            "+\n", 
            "+    protected SynapseTestCase(int sampleId) {\n", 
            "+        this.sampleId = sampleId;\n", 
            "+        log.info(\"Creating Synapse TestCase for test \" + sampleId);\n", 
            "+        currentLocation = System.getProperty(\"user.dir\") + \"/\";\n", 
            "+        sampleDescriptor = \"/sample\" + sampleId + \".xml\";\n", 
            "+        configuration = new SampleConfiguration();\n", 
            "+        backendServerControllers = new ArrayList<BackEndServerController>();\n", 
            "+        System.setProperty(\"java.io.tmpdir\", currentLocation + \"modules/integration/target/temp\");\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Executed before this test case. That means, this will be executed before each test.\n", 
            "+     * Loads all configuration info. and starts the servers.\n", 
            "+     */\n", 
            "+    public void setUp() {\n", 
            "+        log.info(\"SynapseTestCase: Performing necessary steps to run test \" + sampleId);\n", 
            "+\n", 
            "+        assertTrue(\"Could not load the global descriptor file for sample \" + sampleId,\n", 
            "+                loadDescriptorInfoFile());\n", 
            "+        assertTrue(\"There are errors in global descriptor file for sample \" + sampleId,\n", 
            "+                processDescriptorFile());\n", 
            "+        assertTrue(\"Could not load synapse configuration settings for the sample \" + sampleId,\n", 
            "+                initSynapseConfigInfo());\n", 
            "+        assertTrue(\"Could not load axis2 configuration settings for the sample \" + sampleId,\n", 
            "+                initBackEndServersConfigInfo());\n", 
            "+        assertTrue(\"Could not load client configuration settings for the sample \" + sampleId,\n", 
            "+                initClientConfigInfo());\n", 
            "+\n", 
            "+        if (configuration.getSynapseConfig().isClusteringEnabled()) {\n", 
            "+            assertTrue(\"Could not properly configure clustering\", configureClustering());\n", 
            "+        }\n", 
            "+\n", 
            "+        for (BackEndServerController bsc : backendServerControllers) {\n", 
            "+            if (!bsc.start()) {\n", 
            "+                doCleanup();\n", 
            "+                fail(\"There was an error starting the server: \" + bsc.getServerName());\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        if (!pc.startProcess()) {\n", 
            "+            doCleanup();\n", 
            "+            fail(\"There was an error starting synapse server\");\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Executed after this test case. That means, This will be executed after each test\n", 
            "+     */\n", 
            "+    public void tearDown() {\n", 
            "+        log.info(\"Test \" + sampleId + \" is finished\");\n", 
            "+        doCleanup();\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * shutting down servers, cleaning temp files\n", 
            "+     */\n", 
            "+    private void doCleanup() {\n", 
            "+        if (pc != null) {\n", 
            "+            log.info(\"Stopping Synapse\");\n", 
            "+            pc.stopProcess();\n", 
            "+        }\n", 
            "+\n", 
            "+        ArrayList<BackEndServerController> clonedControllers = (ArrayList<BackEndServerController>)\n", 
            "+                backendServerControllers.clone();\n", 
            "+        for (BackEndServerController bsc : clonedControllers) {\n", 
            "+            if (bsc instanceof Axis2BackEndServerController) {\n", 
            "+                log.info(\"Stopping Server: \" + bsc.getServerName());\n", 
            "+                bsc.stop();\n", 
            "+                backendServerControllers.remove(bsc);\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        for (BackEndServerController bsc : backendServerControllers) {\n", 
            "+            log.info(\"Stopping Server: \" + bsc.getServerName());\n", 
            "+            bsc.stop();\n", 
            "+        }\n", 
            "+\n", 
            "+        //cleaning up temp dir\n", 
            "+        try {\n", 
            "+            FileUtils.cleanDirectory(new File(System.getProperty(\"java.io.tmpdir\")));\n", 
            "+        } catch (IOException e) {\n", 
            "+            log.warn(\"Error while cleaning temp directory\", e);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Reads the specific descriptor file for the particular sample\n", 
            "+     * from resource directory\n", 
            "+     *\n", 
            "+     * @return true if the configuration was loaded successfully\n", 
            "+     */\n", 
            "+    private boolean loadDescriptorInfoFile() {\n", 
            "+        log.info(\"Reading sample descriptor file from \" + sampleDescriptor);\n", 
            "+        sampleConfigElement = null;\n", 
            "+        try {\n", 
            "+            InputStream in = this.getClass().getResourceAsStream(sampleDescriptor);\n", 
            "+            if (in == null) {\n", 
            "+                fail(\"Cannot read sample descriptor file. Verify that it exists in the resource dir\");\n", 
            "+            }\n", 
            "+            StAXOMBuilder builder = new StAXOMBuilder(in);\n", 
            "+            sampleConfigElement = builder.getDocumentElement();\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Error loading test descriptor\", e);\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+        return sampleConfigElement != null;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Checks if sample id is matched\n", 
            "+     *\n", 
            "+     * @return true If the sample ID matches\n", 
            "+     */\n", 
            "+    private boolean processDescriptorFile() {\n", 
            "+        int fileID = -1;\n", 
            "+        Iterator itr = sampleConfigElement.getChildrenWithLocalName(SampleConfigConstants.TAG_SAMPLE_ID);\n", 
            "+        while (itr.hasNext()) {\n", 
            "+            fileID = Integer.parseInt(((OMElement) itr.next()).getText());\n", 
            "+        }\n", 
            "+        itr = sampleConfigElement.getChildrenWithLocalName(SampleConfigConstants.TAG_SAMPLE_NAME);\n", 
            "+        while (itr.hasNext()) {\n", 
            "+            String sampleName = ((OMElement) itr.next()).getText();\n", 
            "+            configuration.setSampleName(sampleName);\n", 
            "+        }\n", 
            "+\n", 
            "+        return sampleId == fileID;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Reads and stores synapse specific configuration information from descriptor\n", 
            "+     *\n", 
            "+     * @return true If the initialization is successful\n", 
            "+     */\n", 
            "+    private boolean initSynapseConfigInfo() {\n", 
            "+        Properties synapseProperties = new Properties();\n", 
            "+        OMElement synEle = null;\n", 
            "+        Iterator itr = sampleConfigElement.getChildrenWithLocalName(SampleConfigConstants.TAG_SYNAPSE_CONF);\n", 
            "+        while (itr.hasNext()) {\n", 
            "+            synEle = (OMElement) itr.next();\n", 
            "+        }\n", 
            "+        if (synEle == null) {\n", 
            "+            log.error(\"Cannot find synapse configuration information in sample descriptor file\");\n", 
            "+            return false;\n", 
            "+        } else {\n", 
            "+            itr = synEle.getChildElements();\n", 
            "+        }\n", 
            "+        while (itr.hasNext()) {\n", 
            "+            OMElement ele = (OMElement) itr.next();\n", 
            "+            synapseProperties.setProperty(ele.getLocalName(), ele.getText());\n", 
            "+        }\n", 
            "+        log.info(\"Initializing Configuration information for synapse server...\");\n", 
            "+        String synapseHome = currentLocation;\n", 
            "+\n", 
            "+        String synapseXml = synapseProperties.getProperty(SampleConfigConstants.TAG_SYNAPSE_CONF_XML);\n", 
            "+        String axis2Repo = synapseProperties.getProperty(SampleConfigConstants.TAG_SYNAPSE_CONF_AXIS2_REPO);\n", 
            "+        String axis2Xml = synapseProperties.getProperty(SampleConfigConstants.TAG_SYNAPSE_CONF_AXIS2_XML);\n", 
            "+        Boolean clusteringEnabled = Boolean.parseBoolean(\n", 
            "+                (String) synapseProperties.get(SampleConfigConstants.TAG_ENABLE_CLUSTERING));\n", 
            "+\n", 
            "+        configuration.getSynapseConfig().setServerName(\"SynapseServerForSample\" + sampleId);\n", 
            "+\n", 
            "+        if (synapseXml == null) {\n", 
            "+            log.error(\"synapse config file must be specified for the sample\");\n", 
            "+            return false;\n", 
            "+        } else {\n", 
            "+            configuration.getSynapseConfig().setSynapseXml(synapseHome + synapseXml);\n", 
            "+        }\n", 
            "+        if (axis2Repo == null) {\n", 
            "+            log.info(\"synapse repository is not specified in the descriptor. using default value...\");\n", 
            "+            configuration.getSynapseConfig().setAxis2Repo(synapseHome +\n", 
            "+                    SampleConfigConstants.DEFAULT_SYNAPSE_CONF_AXIS2_REPO);\n", 
            "+        } else {\n", 
            "+            configuration.getSynapseConfig().setAxis2Repo(synapseHome + axis2Repo);\n", 
            "+        }\n", 
            "+        if (axis2Xml == null) {\n", 
            "+            log.info(\"synapse axis2.xml is not specified in the descriptor. using default value...\");\n", 
            "+            configuration.getSynapseConfig().setAxis2Xml(synapseHome +\n", 
            "+                    SampleConfigConstants.DEFAULT_SYNAPSE_CONF_AXIS2_XML);\n", 
            "+        } else {\n", 
            "+            configuration.getSynapseConfig().setAxis2Xml(synapseHome + axis2Xml);\n", 
            "+        }\n", 
            "+\n", 
            "+        configuration.getSynapseConfig().setSynapseHome(synapseHome);\n", 
            "+        configuration.getSynapseConfig().setClusteringEnabled(clusteringEnabled);\n", 
            "+\n", 
            "+        pc = new SynapseProcessController(configuration.getSynapseConfig());\n", 
            "+        return true;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Reads and stores backend server specific configuration information from descriptor\n", 
            "+     *\n", 
            "+     * @return true If the initialization is successful\n", 
            "+     */\n", 
            "+    private boolean initBackEndServersConfigInfo() {\n", 
            "+        OMElement bESConfigEle = null;\n", 
            "+        Iterator itr_BEEle = sampleConfigElement.getChildrenWithLocalName(\n", 
            "+                SampleConfigConstants.TAG_BE_SERVER_CONF);\n", 
            "+        while (itr_BEEle.hasNext()) {\n", 
            "+            bESConfigEle = (OMElement) itr_BEEle.next();\n", 
            "+        }\n", 
            "+        if (bESConfigEle == null) {\n", 
            "+            log.warn(\"No backend servers are defined\");\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+        log.info(\"Initializing Configuration information for backend servers...\");\n", 
            "+\n", 
            "+        // Processing JMS servers\n", 
            "+        Properties jmsProperties = new Properties();\n", 
            "+        Iterator itr_JMS_Servers = bESConfigEle.getChildrenWithLocalName(\n", 
            "+                SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_BROKER);\n", 
            "+        while (itr_JMS_Servers.hasNext()) {\n", 
            "+            OMElement jmsServer = (OMElement) itr_JMS_Servers.next();\n", 
            "+            String serverID = jmsServer.getAttributeValue(new QName(\"id\"));\n", 
            "+            String serverName = \"SampleJMSServer\" + serverID;\n", 
            "+            configuration.addNewJMSBroker(serverName);\n", 
            "+\n", 
            "+            Iterator serverConfig = jmsServer.getChildElements();\n", 
            "+            while (serverConfig.hasNext()) {\n", 
            "+                OMElement ele = (OMElement) serverConfig.next();\n", 
            "+                jmsProperties.setProperty(ele.getLocalName(), ele.getText());\n", 
            "+            }\n", 
            "+\n", 
            "+            String providerURL = jmsProperties.getProperty(\n", 
            "+                    SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_PROVIDER_URL);\n", 
            "+            String initialNF = jmsProperties.getProperty(\n", 
            "+                    SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY);\n", 
            "+\n", 
            "+            if (providerURL == null) {\n", 
            "+                log.info(\"Using default provider url\");\n", 
            "+                configuration.getJMSConfig(serverName).setProviderURL(\n", 
            "+                        SampleConfigConstants.DEFAULT_BE_SERVER_CONF_JMS_PROVIDER_URL);\n", 
            "+            } else {\n", 
            "+                configuration.getJMSConfig(serverName).setProviderURL(providerURL);\n", 
            "+            }\n", 
            "+            if (initialNF == null) {\n", 
            "+                log.info(\"Using default initial naming factory\");\n", 
            "+                configuration.getJMSConfig(serverName).setInitialNamingFactory(\n", 
            "+                        SampleConfigConstants.DEFAULT_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY);\n", 
            "+            } else {\n", 
            "+                configuration.getJMSConfig(serverName).setInitialNamingFactory(initialNF);\n", 
            "+            }\n", 
            "+\n", 
            "+            configuration.getJMSConfig(serverName).setServerName(serverName);\n", 
            "+\n", 
            "+            backendServerControllers.add(new JMSBrokerController(serverName,\n", 
            "+                    configuration.getJMSConfig(serverName)));\n", 
            "+        }\n", 
            "+\n", 
            "+\n", 
            "+        // Processing derby servers\n", 
            "+        Properties derbyProperties = new Properties();\n", 
            "+        Iterator itrDerbyServers = bESConfigEle.getChildrenWithLocalName(\n", 
            "+                SampleConfigConstants.TAG_BE_SERVER_CONF_DERBY_SERVER);\n", 
            "+        while (itrDerbyServers.hasNext()) {\n", 
            "+            OMElement derbyServer = (OMElement) itrDerbyServers.next();\n", 
            "+            String serverID = derbyServer.getAttributeValue(new QName(\"id\"));\n", 
            "+            String serverName = \"SampleDerbyServer\" + serverID;\n", 
            "+            configuration.addNewDerbyServer(serverName);\n", 
            "+\n", 
            "+            Iterator serverConfig = derbyServer.getChildElements();\n", 
            "+            while (serverConfig.hasNext()) {\n", 
            "+                OMElement ele = (OMElement) serverConfig.next();\n", 
            "+                derbyProperties.setProperty(ele.getLocalName(), ele.getText());\n", 
            "+            }\n", 
            "+\n", 
            "+            configuration.getDerbyConfig(serverName).setServerName(serverName);\n", 
            "+            backendServerControllers.add(new DerbyServerController(serverName,\n", 
            "+                    configuration.getDerbyConfig(serverName)));\n", 
            "+        }\n", 
            "+\n", 
            "+        // Processing axis2 servers\n", 
            "+        Properties axis2Properties = new Properties();\n", 
            "+        Iterator itr_Axis2_Servers = bESConfigEle.getChildrenWithLocalName(\n", 
            "+                SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_SERVER);\n", 
            "+        while (itr_Axis2_Servers.hasNext()) {\n", 
            "+            OMElement axis2Server = (OMElement) itr_Axis2_Servers.next();\n", 
            "+            String serverID = axis2Server.getAttributeValue(new QName(\"id\"));\n", 
            "+            String serverName = \"SampleAxis2Server\" + serverID;\n", 
            "+            configuration.addNewAxis2Server(serverName);\n", 
            "+\n", 
            "+            Iterator serverConfig = axis2Server.getChildElements();\n", 
            "+            while (serverConfig.hasNext()) {\n", 
            "+                OMElement ele = (OMElement) serverConfig.next();\n", 
            "+                axis2Properties.setProperty(ele.getLocalName(), ele.getText());\n", 
            "+            }\n", 
            "+            String axis2Home = currentLocation;\n", 
            "+            String relAxis2Repo = axis2Properties.getProperty(\n", 
            "+                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_REPO);\n", 
            "+            String relAxis2Xml = axis2Properties.getProperty(\n", 
            "+                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_XML);\n", 
            "+            String axis2HttpPort = axis2Properties.getProperty(\n", 
            "+                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_HTTP_PORT);\n", 
            "+            String axis2HttpsPort = axis2Properties.getProperty(\n", 
            "+                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_HTTPS_PORT);\n", 
            "+\n", 
            "+            configuration.getAxis2Config(serverName).setServerName(serverName);\n", 
            "+\n", 
            "+            if (relAxis2Repo == null) {\n", 
            "+                log.info(\"axis2 repository is not specified in the descriptor. using default value...\");\n", 
            "+                configuration.getAxis2Config(serverName).setAxis2Repo(axis2Home +\n", 
            "+                        SampleConfigConstants.DEFAULT_BE_SERVER_CONF_AXIS2_REPO);\n", 
            "+            } else {\n", 
            "+                configuration.getAxis2Config(serverName).setAxis2Repo(axis2Home + relAxis2Repo);\n", 
            "+            }\n", 
            "+            if (relAxis2Xml == null) {\n", 
            "+                log.info(\"axis2.xml is not specified in the descriptor. using default value...\");\n", 
            "+                configuration.getAxis2Config(serverName).setAxis2Xml(axis2Home +\n", 
            "+                        SampleConfigConstants.DEFAULT_BE_SERVER_CONF_AXIS2_XML);\n", 
            "+            } else {\n", 
            "+                configuration.getAxis2Config(serverName).setAxis2Xml(axis2Home + relAxis2Xml);\n", 
            "+            }\n", 
            "+\n", 
            "+            configuration.getAxis2Config(serverName).setHttpPort(axis2HttpPort);\n", 
            "+            configuration.getAxis2Config(serverName).setHttpsPort(axis2HttpsPort);\n", 
            "+\n", 
            "+            backendServerControllers.add(new Axis2BackEndServerController(serverName,\n", 
            "+                    configuration.getAxis2Config(serverName)));\n", 
            "+        }\n", 
            "+\n", 
            "+        return true;\n", 
            "+    }\n", 
            "+\n", 
            "+    /*\n", 
            "+     * reads and stores client specific configuration information from descriptor\n", 
            "+     */\n", 
            "+    private boolean initClientConfigInfo() {\n", 
            "+        Properties clientProperties = new Properties();\n", 
            "+        OMElement cliEle = null;\n", 
            "+        Iterator itr = sampleConfigElement.getChildrenWithLocalName(\n", 
            "+                SampleConfigConstants.TAG_CLIENT_CONF);\n", 
            "+        while (itr.hasNext()) {\n", 
            "+            cliEle = (OMElement) itr.next();\n", 
            "+        }\n", 
            "+        if (cliEle == null) {\n", 
            "+            return false;\n", 
            "+        } else {\n", 
            "+            itr = cliEle.getChildElements();\n", 
            "+        }\n", 
            "+        while (itr.hasNext()) {\n", 
            "+            OMElement ele = (OMElement) itr.next();\n", 
            "+            clientProperties.setProperty(ele.getLocalName(), ele.getText());\n", 
            "+        }\n", 
            "+\n", 
            "+        log.info(\"Initializing Configuration information for clients...\");\n", 
            "+        String clientRepo = clientProperties.getProperty(\n", 
            "+                SampleConfigConstants.TAG_CLIENT_CONF_REPO);\n", 
            "+        String clientAxis2Xml = clientProperties.getProperty(\n", 
            "+                SampleConfigConstants.TAG_CLIENT_CONF_AXIS2_XML);\n", 
            "+\n", 
            "+        if (clientRepo == null) {\n", 
            "+            log.info(\"client repository location is not specified in the descriptor. using default value...\");\n", 
            "+            configuration.getClientConfig().setClientRepo(currentLocation +\n", 
            "+                    SampleConfigConstants.DEFAULT_CLIENT_CONF_REPO);\n", 
            "+\n", 
            "+        } else {\n", 
            "+            configuration.getClientConfig().setClientRepo(currentLocation + clientRepo);\n", 
            "+        }\n", 
            "+\n", 
            "+        if (clientAxis2Xml == null) {\n", 
            "+            log.info(\"client axis2.xml is not specified in the descriptor. using default value...\");\n", 
            "+            configuration.getClientConfig().setAxis2Xml(currentLocation +\n", 
            "+                    SampleConfigConstants.DEFAULT_CLIENT_CONF_AXIS2_XML);\n", 
            "+\n", 
            "+        } else {\n", 
            "+            configuration.getClientConfig().setAxis2Xml(currentLocation + clientAxis2Xml);\n", 
            "+        }\n", 
            "+        return true;\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+    private boolean configureClustering() {\n", 
            "+        try {\n", 
            "+            String ip = SynapseTestUtils.getIPAddress();\n", 
            "+            if (ip == null || ip.isEmpty()) {\n", 
            "+                log.fatal(\"Could not detect an active IP address\");\n", 
            "+                return false;\n", 
            "+            }\n", 
            "+            log.info(\" Using the IP :\" + ip);\n", 
            "+\n", 
            "+            String synapseAxis2Xml = configuration.getSynapseConfig().getAxis2Xml();\n", 
            "+            String axis2Config = FileUtils.readFileToString(new File(synapseAxis2Xml));\n", 
            "+            String modifiedSynapseAxis2 = SynapseTestUtils.replace(axis2Config, \"${replace.me}\", ip);\n", 
            "+            File tempSynapseAxis2 = File.createTempFile(\"axis2Syn-\", \"xml\");\n", 
            "+            tempSynapseAxis2.deleteOnExit();\n", 
            "+            FileUtils.writeStringToFile(tempSynapseAxis2, modifiedSynapseAxis2);\n", 
            "+            configuration.getSynapseConfig().setAxis2Xml(tempSynapseAxis2.getAbsolutePath());\n", 
            "+\n", 
            "+            for (BackEndServerController besc : backendServerControllers) {\n", 
            "+                String serverName = besc.getServerName();\n", 
            "+                String beAxis2Xml = configuration.getAxis2Config(serverName).getAxis2Xml();\n", 
            "+                String beAxis2Config = FileUtils.readFileToString(new File(beAxis2Xml));\n", 
            "+                String modifiedBEAxis2 = SynapseTestUtils.replace(beAxis2Config, \"${replace.me}\", ip);\n", 
            "+                File tempBEAxis2 = File.createTempFile(\"axis2BE-\", \"xml\");\n", 
            "+                tempBEAxis2.deleteOnExit();\n", 
            "+                FileUtils.writeStringToFile(tempBEAxis2, modifiedBEAxis2);\n", 
            "+                configuration.getAxis2Config(serverName).setAxis2Xml(tempBEAxis2.getAbsolutePath());\n", 
            "+            }\n", 
            "+            return true;\n", 
            "+\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Error configuring clustering\", e);\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+    protected SampleConfiguration getConfiguration() {\n", 
            "+        return configuration;\n", 
            "+    }\n", 
            "+\n", 
            "+    protected ArrayList<BackEndServerController> getBackendServerControllers() {\n", 
            "+        return backendServerControllers;\n", 
            "+    }\n", 
            "+\n", 
            "+    public StockQuoteSampleClient getStockQuoteClient() {\n", 
            "+        return new StockQuoteSampleClient(configuration.getClientConfig());\n", 
            "+    }\n", 
            "+\n", 
            "+    public EventSampleClient getEventSubscriberSampleClient() {\n", 
            "+        return new EventSampleClient(configuration.getClientConfig());\n", 
            "+    }\n", 
            "+\n", 
            "+    public MTOMSwASampleClient getMTOMSwASampleClient() {\n", 
            "+        return new MTOMSwASampleClient(configuration.getClientConfig());\n", 
            "+    }\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestCase.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestCase.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,197", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.clients;\n", 
            "+\n", 
            "+import org.apache.axiom.attachments.Attachments;\n", 
            "+import org.apache.axiom.om.*;\n", 
            "+import org.apache.axiom.soap.SOAPBody;\n", 
            "+import org.apache.axiom.soap.SOAPEnvelope;\n", 
            "+import org.apache.axiom.soap.SOAPFactory;\n", 
            "+import org.apache.axis2.Constants;\n", 
            "+import org.apache.axis2.addressing.EndpointReference;\n", 
            "+import org.apache.axis2.client.OperationClient;\n", 
            "+import org.apache.axis2.client.Options;\n", 
            "+import org.apache.axis2.client.ServiceClient;\n", 
            "+import org.apache.axis2.context.ConfigurationContext;\n", 
            "+import org.apache.axis2.context.ConfigurationContextFactory;\n", 
            "+import org.apache.axis2.context.MessageContext;\n", 
            "+import org.apache.axis2.wsdl.WSDLConstants;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SampleConfiguration;\n", 
            "+\n", 
            "+import javax.activation.DataHandler;\n", 
            "+import javax.activation.FileDataSource;\n", 
            "+import javax.xml.namespace.QName;\n", 
            "+import java.io.BufferedOutputStream;\n", 
            "+import java.io.File;\n", 
            "+import java.io.FileOutputStream;\n", 
            "+import java.io.InputStream;\n", 
            "+\n", 
            "+public class MTOMSwASampleClient {\n", 
            "+    private static final Log log = LogFactory.getLog(StockQuoteSampleClient.class);\n", 
            "+    ConfigurationContext configContext = null;\n", 
            "+\n", 
            "+    Options options;\n", 
            "+    SampleClientResult clientResult;\n", 
            "+    OMElement payload;\n", 
            "+    OMElement response;\n", 
            "+    ServiceClient serviceClient;\n", 
            "+    boolean completed;\n", 
            "+    SampleConfiguration.ClientSampleConfiguration configuration;\n", 
            "+\n", 
            "+    public MTOMSwASampleClient(SampleConfiguration.ClientSampleConfiguration configuration) {\n", 
            "+        this.configuration = configuration;\n", 
            "+    }\n", 
            "+\n", 
            "+    public SampleClientResult sendUsingMTOM(String fileName, String targetEPR) {\n", 
            "+        clientResult = new SampleClientResult();\n", 
            "+        try {\n", 
            "+            OMFactory factory = OMAbstractFactory.getOMFactory();\n", 
            "+            OMNamespace ns = factory.createOMNamespace(\"http://services.samples\", \"m0\");\n", 
            "+            payload = factory.createOMElement(\"uploadFileUsingMTOM\", ns);\n", 
            "+            OMElement request = factory.createOMElement(\"request\", ns);\n", 
            "+            OMElement image = factory.createOMElement(\"image\", ns);\n", 
            "+\n", 
            "+            log.info(\"Sending file : \" + fileName + \" as MTOM\");\n", 
            "+            FileDataSource fileDataSource = new FileDataSource(new File(fileName));\n", 
            "+            DataHandler dataHandler = new DataHandler(fileDataSource);\n", 
            "+            OMText textData = factory.createOMText(dataHandler, true);\n", 
            "+            image.addChild(textData);\n", 
            "+            request.addChild(image);\n", 
            "+            payload.addChild(request);\n", 
            "+\n", 
            "+            ConfigurationContext configContext =\n", 
            "+                    ConfigurationContextFactory.\n", 
            "+                            createConfigurationContextFromFileSystem(configuration.getClientRepo(),\n", 
            "+                                    configuration.getAxis2Xml());\n", 
            "+\n", 
            "+            serviceClient = new ServiceClient(configContext, null);\n", 
            "+\n", 
            "+            Options options = new Options();\n", 
            "+            options.setTo(new EndpointReference(targetEPR));\n", 
            "+            options.setAction(\"urn:uploadFileUsingMTOM\");\n", 
            "+            options.setProperty(Constants.Configuration.ENABLE_MTOM, Constants.VALUE_TRUE);\n", 
            "+\n", 
            "+            serviceClient.setOptions(options);\n", 
            "+            OMElement response = serviceClient.sendReceive(payload);\n", 
            "+\n", 
            "+            OMText binaryNode = (OMText) response.\n", 
            "+                    getFirstChildWithName(new QName(\"http://services.samples\", \"response\")).\n", 
            "+                    getFirstChildWithName(new QName(\"http://services.samples\", \"image\")).\n", 
            "+                    getFirstOMChild();\n", 
            "+            dataHandler = (DataHandler) binaryNode.getDataHandler();\n", 
            "+            InputStream is = dataHandler.getInputStream();\n", 
            "+            log.info(\"temp.dir: \" + System.getProperty(\"java.io.tmpdir\"));\n", 
            "+            File tempFile = File.createTempFile(\"mtom-\", \".gif\");\n", 
            "+            FileOutputStream fos = new FileOutputStream(tempFile);\n", 
            "+            BufferedOutputStream dest = new BufferedOutputStream(fos, 2048);\n", 
            "+\n", 
            "+            byte data[] = new byte[2048];\n", 
            "+            int count;\n", 
            "+            while ((count = is.read(data, 0, 2048)) != -1) {\n", 
            "+                dest.write(data, 0, count);\n", 
            "+            }\n", 
            "+\n", 
            "+            dest.flush();\n", 
            "+            dest.close();\n", 
            "+            log.info(\"Saved response to file : \" + tempFile.getAbsolutePath());\n", 
            "+\n", 
            "+            clientResult.setGotResponse(true);\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Error invoking service\", e);\n", 
            "+            clientResult.setGotResponse(false);\n", 
            "+            clientResult.setException(e);\n", 
            "+        }\n", 
            "+\n", 
            "+        return clientResult;\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+    public SampleClientResult sendUsingSWA(String fileName, String targetEPR) {\n", 
            "+        clientResult = new SampleClientResult();\n", 
            "+        try {\n", 
            "+            Options options = new Options();\n", 
            "+            options.setTo(new EndpointReference(targetEPR));\n", 
            "+            options.setAction(\"urn:uploadFileUsingSwA\");\n", 
            "+            options.setProperty(Constants.Configuration.ENABLE_SWA, Constants.VALUE_TRUE);\n", 
            "+\n", 
            "+            ConfigurationContext configContext =\n", 
            "+                    ConfigurationContextFactory.\n", 
            "+                            createConfigurationContextFromFileSystem(configuration.getClientRepo(),\n", 
            "+                                    configuration.getAxis2Xml());\n", 
            "+\n", 
            "+            ServiceClient sender = new ServiceClient(configContext, null);\n", 
            "+\n", 
            "+            sender.setOptions(options);\n", 
            "+            OperationClient mepClient = sender.createClient(ServiceClient.ANON_OUT_IN_OP);\n", 
            "+\n", 
            "+            MessageContext mc = new MessageContext();\n", 
            "+\n", 
            "+            log.info(\"Sending file : \" + fileName + \" as SwA\");\n", 
            "+            FileDataSource fileDataSource = new FileDataSource(new File(fileName));\n", 
            "+            DataHandler dataHandler = new DataHandler(fileDataSource);\n", 
            "+            String attachmentID = mc.addAttachment(dataHandler);\n", 
            "+\n", 
            "+\n", 
            "+            SOAPFactory factory = OMAbstractFactory.getSOAP11Factory();\n", 
            "+            SOAPEnvelope env = factory.getDefaultEnvelope();\n", 
            "+            OMNamespace ns = factory.createOMNamespace(\"http://services.samples\", \"m0\");\n", 
            "+            OMElement payload = factory.createOMElement(\"uploadFileUsingSwA\", ns);\n", 
            "+            OMElement request = factory.createOMElement(\"request\", ns);\n", 
            "+            OMElement imageId = factory.createOMElement(\"imageId\", ns);\n", 
            "+            imageId.setText(attachmentID);\n", 
            "+            request.addChild(imageId);\n", 
            "+            payload.addChild(request);\n", 
            "+            env.getBody().addChild(payload);\n", 
            "+            mc.setEnvelope(env);\n", 
            "+\n", 
            "+            mepClient.addMessageContext(mc);\n", 
            "+            mepClient.execute(true);\n", 
            "+            MessageContext response = mepClient.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE);\n", 
            "+\n", 
            "+            SOAPBody body = response.getEnvelope().getBody();\n", 
            "+            String imageContentId = body.\n", 
            "+                    getFirstChildWithName(new QName(\"http://services.samples\", \"uploadFileUsingSwAResponse\")).\n", 
            "+                    getFirstChildWithName(new QName(\"http://services.samples\", \"response\")).\n", 
            "+                    getFirstChildWithName(new QName(\"http://services.samples\", \"imageId\")).\n", 
            "+                    getText();\n", 
            "+\n", 
            "+            Attachments attachment = response.getAttachmentMap();\n", 
            "+            dataHandler = attachment.getDataHandler(imageContentId);\n", 
            "+            File tempFile = File.createTempFile(\"swa-\", \".gif\");\n", 
            "+            FileOutputStream fos = new FileOutputStream(tempFile);\n", 
            "+            dataHandler.writeTo(fos);\n", 
            "+            fos.flush();\n", 
            "+            fos.close();\n", 
            "+\n", 
            "+            log.info(\"Saved response to file : \" + tempFile.getAbsolutePath());\n", 
            "+\n", 
            "+            clientResult.setGotResponse(true);\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Error invoking service\", e);\n", 
            "+            clientResult.setGotResponse(false);\n", 
            "+            clientResult.setException(e);\n", 
            "+        }\n", 
            "+\n", 
            "+        return clientResult;\n", 
            "+\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/MTOMSwASampleClient.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/MTOMSwASampleClient.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,364", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework.clients;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMAbstractFactory;\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axiom.om.OMFactory;\n", 
            "+import org.apache.axiom.om.OMNamespace;\n", 
            "+import org.apache.axiom.om.xpath.AXIOMXPath;\n", 
            "+\n", 
            "+import java.util.Iterator;\n", 
            "+import java.util.List;\n", 
            "+import java.util.Random;\n", 
            "+\n", 
            "+/**\n", 
            "+ * A class that can create messages to, and parse replies from our sample StockQuote service\n", 
            "+ */\n", 
            "+public class StockQuoteHandler {\n", 
            "+\n", 
            "+    private static final Random RANDOM = new Random();\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Create a new custom quote request with a body as follows\n", 
            "+     * <m0:CheckPriceRequest xmlns:m0=\"http://services.samples\">\n", 
            "+     *   <m0:Code>symbol</m0:Code>\n", 
            "+     * </m0:CheckPriceRequest>\n", 
            "+     * @param symbol the stock symbol\n", 
            "+     * @return OMElement for SOAP body\n", 
            "+     */\n", 
            "+    public static OMElement createCustomQuoteRequest(String symbol) {\n", 
            "+        OMFactory factory   = OMAbstractFactory.getOMFactory();\n", 
            "+        OMNamespace ns      = factory.createOMNamespace(\n", 
            "+            \"http://services.samples\", \"m0\");\n", 
            "+        OMElement chkPrice  = factory.createOMElement(\"CheckPriceRequest\", ns);\n", 
            "+        OMElement code      = factory.createOMElement(\"Code\", ns);\n", 
            "+        chkPrice.addChild(code);\n", 
            "+        code.setText(symbol);\n", 
            "+        return chkPrice;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Create a new quote request with a body as follows\n", 
            "+     *  <m:GetQuote xmlns:m=\"http://services.samples\">\n", 
            "+     *      <m:request>\n", 
            "+     *          <m:symbol>IBM</m:symbol>\n", 
            "+     *      </m:request>\n", 
            "+     *  </m:GetQuote>\n", 
            "+     * @param symbol the stock symbol\n", 
            "+     * @return OMElement for SOAP body\n", 
            "+     */\n", 
            "+    public static OMElement createStandardQuoteRequest(String symbol, int itrCount) {\n", 
            "+        OMFactory factory   = OMAbstractFactory.getOMFactory();\n", 
            "+        OMNamespace ns      = factory.createOMNamespace(\"http://services.samples\", \"m0\");\n", 
            "+        OMElement getQuote  = factory.createOMElement(\"getQuote\", ns);\n", 
            "+        for (int i =0; i<itrCount; i++) {\n", 
            "+            OMElement request   = factory.createOMElement(\"request\", ns);\n", 
            "+            OMElement symb      = factory.createOMElement(\"symbol\", ns);\n", 
            "+            request.addChild(symb);\n", 
            "+            getQuote.addChild(request);\n", 
            "+            symb.setText(symbol);\n", 
            "+        }\n", 
            "+        return getQuote;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Create a new full quote request with a body as follows\n", 
            "+     *  <m:GetFullQuote xmlns:m=\"http://services.samples\">\n", 
            "+     *      <m:request>\n", 
            "+     *          <m:symbol>IBM</m:symbol>\n", 
            "+     *      </m:request>\n", 
            "+     *  </m:GetFullQuote>\n", 
            "+     * @param symbol the stock symbol\n", 
            "+     * @return OMElement for SOAP body\n", 
            "+     */\n", 
            "+    public static OMElement createFullQuoteRequest(String symbol) {\n", 
            "+        OMFactory factory   = OMAbstractFactory.getOMFactory();\n", 
            "+        OMNamespace ns      = factory.createOMNamespace(\"http://services.samples\", \"m0\");\n", 
            "+        OMElement getQuote  = factory.createOMElement(\"getFullQuote\", ns);\n", 
            "+        OMElement request   = factory.createOMElement(\"request\", ns);\n", 
            "+        OMElement symb      = factory.createOMElement(\"symbol\", ns);\n", 
            "+        request.addChild(symb);\n", 
            "+        getQuote.addChild(request);\n", 
            "+        symb.setText(symbol);\n", 
            "+        return getQuote;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Create a new market activity request with a body as follows\n", 
            "+     *  <m:getMarketActivity xmlns:m=\"http://services.samples\">\n", 
            "+     *      <m:request>\n", 
            "+     *          <m:symbol>IBM</m:symbol>\n", 
            "+     *          ...\n", 
            "+     *          <m:symbol>MSFT</m:symbol>\n", 
            "+     *      </m:request>\n", 
            "+     *  </m:getMarketActivity>\n", 
            "+     * @return OMElement for SOAP body\n", 
            "+     */\n", 
            "+    public static OMElement createMarketActivityRequest() {\n", 
            "+        OMFactory factory   = OMAbstractFactory.getOMFactory();\n", 
            "+        OMNamespace ns      = factory.createOMNamespace(\"http://services.samples\", \"m0\");\n", 
            "+        OMElement getQuote  = factory.createOMElement(\"getMarketActivity\", ns);\n", 
            "+        OMElement request   = factory.createOMElement(\"request\", ns);\n", 
            "+\n", 
            "+        OMElement symb = null;\n", 
            "+        for (int i=0; i<100; i++) {\n", 
            "+            symb = factory.createOMElement(\"symbols\", ns);\n", 
            "+            symb.setText(randomString(3));\n", 
            "+            request.addChild(symb);\n", 
            "+        }\n", 
            "+\n", 
            "+        getQuote.addChild(request);\n", 
            "+        return getQuote;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Create a new order for a quantiry of a stock at a given price\n", 
            "+     * <m:placeOrder xmlns:m=\"http://services.samples\">\n", 
            "+     *\t  <m:order>\n", 
            "+     *\t      <m:price>3.141593E0</m:price>\n", 
            "+     *\t      <m:quantity>4</m:quantity>\n", 
            "+     *\t      <m:symbol>IBM</m:symbol>\n", 
            "+     *    </m:order>\n", 
            "+     * \t</m:placeOrder>\n", 
            "+     *\n", 
            "+     * @param purchPrice the purchase price\n", 
            "+     * @param qty the quantiry\n", 
            "+     * @param symbol the stock\n", 
            "+     * @return an OMElement payload for the order\n", 
            "+     */\n", 
            "+    public static OMElement createPlaceOrderRequest(double purchPrice, int qty, String symbol) {\n", 
            "+        OMFactory factory   = OMAbstractFactory.getOMFactory();\n", 
            "+        OMNamespace ns      = factory.createOMNamespace(\"http://services.samples\", \"m0\");\n", 
            "+        OMElement placeOrder= factory.createOMElement(\"placeOrder\", ns);\n", 
            "+        OMElement order     = factory.createOMElement(\"order\", ns);\n", 
            "+        OMElement price     = factory.createOMElement(\"price\", ns);\n", 
            "+        OMElement quantity  = factory.createOMElement(\"quantity\", ns);\n", 
            "+        OMElement symb      = factory.createOMElement(\"symbol\", ns);\n", 
            "+        price.setText(Double.toString(purchPrice));\n", 
            "+        quantity.setText(Integer.toString(qty));\n", 
            "+        symb.setText(symbol);\n", 
            "+        order.addChild(price);\n", 
            "+        order.addChild(quantity);\n", 
            "+        order.addChild(symb);\n", 
            "+        placeOrder.addChild(order);        \n", 
            "+        return placeOrder;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Digests the standard StockQuote response and extracts the last trade price\n", 
            "+     * @param result\n", 
            "+     * @return\n", 
            "+     * @throws javax.xml.stream.XMLStreamException\n", 
            "+     *\n", 
            "+     *  <ns:getQuoteResponse xmlns:ns=\"http://services.samples\">\n", 
            "+     *      <ns:return>\n", 
            "+     *          <ns:change>-2.3238706829151026</ns:change>\n", 
            "+     *          ...\n", 
            "+     *          <ns:symbol>IBM</ns:symbol>\n", 
            "+     *          <ns:volume>17949</ns:volume>\n", 
            "+     *      </ns:return>\n", 
            "+     *  </ns:getQuoteResponse>\n", 
            "+     */\n", 
            "+    public static String parseStandardQuoteResponse(OMElement result) throws Exception {\n", 
            "+\n", 
            "+        AXIOMXPath xPath = new AXIOMXPath(\"//ns:last\");\n", 
            "+        xPath.addNamespace(\"ns\",\"http://services.samples/xsd\");\n", 
            "+        OMElement last = (OMElement) xPath.selectSingleNode(result);\n", 
            "+        if (last != null) {\n", 
            "+            return last.getText();\n", 
            "+        } else {\n", 
            "+            throw new Exception(\"Unexpected response : \" + result);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * <ns:getFullQuoteResponse xmlns:ns=\"http://services.samples\">\n", 
            "+            <ns:return>\n", 
            "+               <tradeHistory xmlns=\"http://services.samples\">\n", 
            "+                  <day>0</day>\n", 
            "+                  <quote>\n", 
            "+                     <change>-2.367492989603466</change>\n", 
            "+                     <earnings>13.14956711287784</earnings>\n", 
            "+                     <high>-155.58844623078153</high>\n", 
            "+                     <last>157.47582716569198</last>\n", 
            "+                     <lastTradeTimestamp>Mon Apr 16 23:29:58 LKT 2007</lastTradeTimestamp>\n", 
            "+                     <low>-155.31924118819015</low>\n", 
            "+                     <marketCap>6373750.467022192</marketCap>\n", 
            "+                     <name>IBM Company</name>\n", 
            "+                     <open>-154.84071720443495</open>\n", 
            "+                     <peRatio>-17.353258031353164</peRatio>\n", 
            "+                     <percentageChange>-1.3910235348298898</percentageChange>\n", 
            "+                     <prevClose>170.1979104108393</prevClose>\n", 
            "+                     <symbol>IBM</symbol>\n", 
            "+                     <volume>8935</volume>\n", 
            "+                  </quote>\n", 
            "+               </tradeHistory>\n", 
            "+               <tradeHistory xmlns=\"http://services.samples\">\n", 
            "+                  <day>1</day>\n", 
            "+                  <quote>\n", 
            "+                     <change>3.794122022240518</change>\n", 
            "+                     <earnings>-8.656536789776045</earnings>\n", 
            "+                     <high>176.77136802352928</high>\n", 
            "+                     <last>170.28677783945102</last>\n", 
            "+                     <lastTradeTimestamp>Mon Apr 16 23:29:58 LKT 2007</lastTradeTimestamp>\n", 
            "+                     <low>-166.64126635049223</low>\n", 
            "+                     <marketCap>-6112014.916847887</marketCap>\n", 
            "+                     <name>IBM Company</name>\n", 
            "+                     <open>-168.30884678174925</open>\n", 
            "+                     <peRatio>-18.644628475049693</peRatio>\n", 
            "+                     <percentageChange>-2.29678289479374</percentageChange>\n", 
            "+                     <prevClose>-165.19288918603885</prevClose>\n", 
            "+                     <symbol>IBM</symbol>\n", 
            "+                     <volume>5825</volume>\n", 
            "+                  </quote>\n", 
            "+               </tradeHistory>\n", 
            "+               ...\n", 
            "+            </ns:return>\n", 
            "+         </ns:getFullQuoteResponse>\n", 
            "+     *\n", 
            "+     * @param result\n", 
            "+     * @return\n", 
            "+     * @throws Exception\n", 
            "+     */\n", 
            "+    public static String parseFullQuoteResponse(OMElement result) throws Exception {\n", 
            "+\n", 
            "+        AXIOMXPath xPath = new AXIOMXPath(\"//ns:last\");\n", 
            "+        xPath.addNamespace(\"ns\",\"http://services.samples/xsd\");\n", 
            "+        List lastNodes = xPath.selectNodes(result);\n", 
            "+\n", 
            "+        if (lastNodes == null) {\n", 
            "+            throw new Exception(\"Unexpected response : \" + result);\n", 
            "+        }\n", 
            "+\n", 
            "+        double total = 0;\n", 
            "+        int count = 0;\n", 
            "+\n", 
            "+        Iterator iter = lastNodes.iterator();\n", 
            "+        while (iter.hasNext()) {\n", 
            "+            OMElement last = (OMElement) iter.next();\n", 
            "+            total += Double.parseDouble(last.getText());\n", 
            "+            count++;\n", 
            "+        }\n", 
            "+\n", 
            "+        return Double.toString(total/count);\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * <ns:getMarketActivityResponse xmlns:ns=\"http://services.samples\">\n", 
            "+            <ns:return>\n", 
            "+               <quotes xmlns=\"http://services.samples\">\n", 
            "+                  <change>4.183958555301184</change>\n", 
            "+                  <earnings>-8.585281368244686</earnings>\n", 
            "+                  <high>-158.70528805517333</high>\n", 
            "+                  <last>160.83784480071603</last>\n", 
            "+                  <lastTradeTimestamp>Tue Apr 17 02:21:30 LKT 2007</lastTradeTimestamp>\n", 
            "+                  <low>-157.4950051860593</low>\n", 
            "+                  <marketCap>5.9907588733164035E7</marketCap>\n", 
            "+                  <name>EHM Company</name>\n", 
            "+                  <open>-160.18368223376558</open>\n", 
            "+                  <peRatio>24.0926205053427</peRatio>\n", 
            "+                  <percentageChange>-2.6141745708181374</percentageChange>\n", 
            "+                  <prevClose>-160.04893483420904</prevClose>\n", 
            "+                  <symbol>EHM</symbol>\n", 
            "+                  <volume>6319</volume>\n", 
            "+               </quotes>\n", 
            "+               <quotes xmlns=\"http://services.samples\">\n", 
            "+                  ....\n", 
            "+                  <volume>7613</volume>\n", 
            "+               </quotes>\n", 
            "+               ...\n", 
            "+            </ns:return>\n", 
            "+        <ns:getMarketActivityResponse>\n", 
            "+     * @param result\n", 
            "+     * @return the average last price for each stock symbol\n", 
            "+     * @throws Exception\n", 
            "+     */\n", 
            "+    public static String parseMarketActivityResponse(OMElement result) throws Exception {\n", 
            "+\n", 
            "+        AXIOMXPath xPath = new AXIOMXPath(\"//ns:last\");\n", 
            "+        xPath.addNamespace(\"ns\",\"http://services.samples/xsd\");\n", 
            "+        List lastNodes = xPath.selectNodes(result);\n", 
            "+\n", 
            "+        if (lastNodes == null) {\n", 
            "+            throw new Exception(\"Unexpected response : \" + result);\n", 
            "+        }\n", 
            "+\n", 
            "+        double total = 0;\n", 
            "+        int count = 0;\n", 
            "+\n", 
            "+        Iterator iter = lastNodes.iterator();\n", 
            "+        while (iter.hasNext()) {\n", 
            "+            OMElement last = (OMElement) iter.next();\n", 
            "+            total += Double.parseDouble(last.getText());\n", 
            "+            count++;\n", 
            "+        }\n", 
            "+\n", 
            "+        return Double.toString(total/count);\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Digests the custom quote response and extracts the last trade price\n", 
            "+     * @param result\n", 
            "+     * @return\n", 
            "+     * @throws javax.xml.stream.XMLStreamException\n", 
            "+     *\n", 
            "+     *      <CheckPriceResponse xmlns=\"http://ws.invesbot.com/\" >\n", 
            "+     *          <Code>IBM</Code>\n", 
            "+     *          <Price>82.90</Price>\n", 
            "+     *      </CheckPriceResponse>\n", 
            "+     */\n", 
            "+    public static String parseCustomQuoteResponse(OMElement result) throws Exception {\n", 
            "+\n", 
            "+        AXIOMXPath xPath = new AXIOMXPath(\"//ns:Price\");\n", 
            "+        xPath.addNamespace(\"ns\",\"http://services.samples/xsd\");\n", 
            "+        OMElement price = (OMElement) xPath.selectSingleNode(result);        \n", 
            "+        if (price != null) {\n", 
            "+            return price.getText();\n", 
            "+        } else {\n", 
            "+            throw new Exception(\"Unexpected response : \" + result);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Return a random String of letters\n", 
            "+     * @param count number of letters\n", 
            "+     * @return the random string\n", 
            "+     */\n", 
            "+    public static String randomString(int count) {\n", 
            "+        int end = 'Z' + 1;\n", 
            "+        int start = 'A';\n", 
            "+\n", 
            "+        StringBuffer buffer = new StringBuffer();\n", 
            "+        int gap = end - start;\n", 
            "+\n", 
            "+        while (count-- != 0) {\n", 
            "+            char ch;\n", 
            "+            ch = (char) (RANDOM.nextInt(gap) + start);\n", 
            "+            if (Character.isLetter(ch)) {\n", 
            "+                buffer.append(ch);\n", 
            "+            } else {\n", 
            "+                count++;\n", 
            "+            }\n", 
            "+        }\n", 
            "+        return buffer.toString();\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteHandler.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/clients/StockQuoteHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,33", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Specifies the operations associated with controlling\n", 
            "+ * backend server - starting up and shutting down.\n", 
            "+ */\n", 
            "+public interface BackEndServerController {\n", 
            "+\n", 
            "+    public String getServerName();\n", 
            "+\n", 
            "+    public boolean start();\n", 
            "+\n", 
            "+    public boolean stop();\n", 
            "+\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/BackEndServerController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/BackEndServerController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,47", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.message;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample10 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample10.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample10() {\n", 
            "+        super(10);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testDynamicEndPoints() {\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Dynamic EndPoints with Registry\");\n", 
            "+        result = client.requestStandardQuote(null, trpUrl, null, \"IBM\", null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.gotResponse());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample10.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample10.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,47", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.message;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample15 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample15.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample15() {\n", 
            "+        super(15);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testMessageEnrichment() {\n", 
            "+        String trpUrl = \"http://localhost:8280/services/StockQuote\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Message Enrichment through Synapse\");\n", 
            "+        result = client.requestStandardQuote(null, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.gotResponse());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample15.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample15.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,50", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.message;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample2 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample2.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample2() {\n", 
            "+        super(2);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testCBR() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280\";\n", 
            "+\n", 
            "+        log.info(\"Running test: CBR with the Switch-case mediator, using message properties\");\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.gotResponse());\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"MSFT\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.gotResponse());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample2.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample2.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,47", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.message;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample6 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample6.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample6() {\n", 
            "+        super(6);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testManipulatingHeadersAndFiltering() {\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Dumb Client mode  \");\n", 
            "+        result = client.requestStandardQuote(null, trpUrl, null, null ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.gotResponse());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample6.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample6.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,81", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework;\n", 
            "+\n", 
            "+import java.net.Inet4Address;\n", 
            "+import java.net.InetAddress;\n", 
            "+import java.net.NetworkInterface;\n", 
            "+import java.util.ArrayList;\n", 
            "+import java.util.Enumeration;\n", 
            "+import java.util.List;\n", 
            "+\n", 
            "+public class SynapseTestUtils {\n", 
            "+\n", 
            "+    static String replace(String str, String pattern, String replace) {\n", 
            "+        int s = 0;\n", 
            "+        int e;\n", 
            "+        StringBuilder result = new StringBuilder();\n", 
            "+\n", 
            "+        while ((e = str.indexOf(pattern, s)) >= 0) {\n", 
            "+            result.append(str.substring(s, e));\n", 
            "+            result.append(replace);\n", 
            "+            s = e + pattern.length();\n", 
            "+        }\n", 
            "+        result.append(str.substring(s));\n", 
            "+        return result.toString();\n", 
            "+    }\n", 
            "+\n", 
            "+    static String getIPAddress() throws Exception {\n", 
            "+        List<InetAddress> ipAddresses = new ArrayList<InetAddress>();\n", 
            "+        String ipAddress = null;\n", 
            "+\n", 
            "+        Enumeration e = NetworkInterface.getNetworkInterfaces();\n", 
            "+        while (e.hasMoreElements()) {\n", 
            "+            NetworkInterface ni = (NetworkInterface) e.nextElement();\n", 
            "+            // Clustering doesn't work for loop-back addresses, so we are not interested\n", 
            "+            // we are not interested in inactive interfaces either\n", 
            "+            if (ni.isLoopback() || !ni.isUp()) continue;\n", 
            "+\n", 
            "+            Enumeration e2 = ni.getInetAddresses();\n", 
            "+            while (e2.hasMoreElements()) {\n", 
            "+                InetAddress ip = (InetAddress) e2.nextElement();\n", 
            "+                ipAddresses.add(ip);\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        if (ipAddresses.isEmpty()) {\n", 
            "+            return null;\n", 
            "+        } else {\n", 
            "+            for (InetAddress ip : ipAddresses) {\n", 
            "+                if (ip instanceof Inet4Address) {\n", 
            "+                    ipAddress = ip.getHostAddress();\n", 
            "+                    break;\n", 
            "+                }\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        if (ipAddress == null) {\n", 
            "+            ipAddress = ipAddresses.get(0).getHostAddress();\n", 
            "+        }\n", 
            "+\n", 
            "+        return ipAddress;\n", 
            "+    }\n", 
            "+\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestUtils.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,301", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework;\n", 
            "+\n", 
            "+import java.util.HashMap;\n", 
            "+import java.util.Set;\n", 
            "+\n", 
            "+/**\n", 
            "+* Stores the configuration information for Synapse, Axis2 Server and Clients.\n", 
            "+* All the information loaded from sample descriptor files are stored here.\n", 
            "+*/\n", 
            "+public class SampleConfiguration {\n", 
            "+    private String sampleName;\n", 
            "+    private SynapseSampleConfiguration synapseConfig;\n", 
            "+    private HashMap<String, Axis2SampleConfiguration> axis2Configs;\n", 
            "+    private HashMap<String, JMSBrokerSampleConfiguration> jmsConfigs;\n", 
            "+    private HashMap<String, DerbyServerSampleConfiguration> derbyConfigs;\n", 
            "+    private HashMap<String, FIXExecutorSampleConfiguration> executorConfigs;\n", 
            "+    private ClientSampleConfiguration clientConfig;\n", 
            "+\n", 
            "+    public SampleConfiguration() {\n", 
            "+        this.synapseConfig = new SynapseSampleConfiguration();\n", 
            "+        this.axis2Configs = new HashMap<String, Axis2SampleConfiguration>();\n", 
            "+        this.jmsConfigs = new HashMap<String, JMSBrokerSampleConfiguration>();\n", 
            "+        this.derbyConfigs = new HashMap<String, DerbyServerSampleConfiguration>();\n", 
            "+        this.executorConfigs = new HashMap<String, FIXExecutorSampleConfiguration>();\n", 
            "+        this.clientConfig = new ClientSampleConfiguration();\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getSampleName() {\n", 
            "+        return sampleName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setSampleName(String name) {\n", 
            "+        this.sampleName = sampleName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public SynapseSampleConfiguration getSynapseConfig() {\n", 
            "+        return synapseConfig;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void addNewAxis2Server(String name) {\n", 
            "+        axis2Configs.put(name, new Axis2SampleConfiguration());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void addNewJMSBroker(String name) {\n", 
            "+        jmsConfigs.put(name, new JMSBrokerSampleConfiguration());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void addNewDerbyServer(String name) {\n", 
            "+        derbyConfigs.put(name, new DerbyServerSampleConfiguration());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void addNewFIXExecutor(String name) {\n", 
            "+        executorConfigs.put(name, new FIXExecutorSampleConfiguration());\n", 
            "+    }\n", 
            "+\n", 
            "+    public Axis2SampleConfiguration getAxis2Config(String name) {\n", 
            "+        return axis2Configs.get(name);\n", 
            "+    }\n", 
            "+\n", 
            "+    public JMSBrokerSampleConfiguration getJMSConfig(String name) {\n", 
            "+        return jmsConfigs.get(name);\n", 
            "+    }\n", 
            "+\n", 
            "+    public DerbyServerSampleConfiguration getDerbyConfig(String name) {\n", 
            "+        return derbyConfigs.get(name);\n", 
            "+    }\n", 
            "+\n", 
            "+    public FIXExecutorSampleConfiguration getFIXExecutorConfig(String name) {\n", 
            "+        return executorConfigs.get(name);\n", 
            "+    }\n", 
            "+\n", 
            "+    public Set<String> getAxis2ServersList() {\n", 
            "+        return axis2Configs.keySet();\n", 
            "+    }\n", 
            "+\n", 
            "+    public int getBackEndServerCount() {\n", 
            "+        return axis2Configs.size() + jmsConfigs.size();\n", 
            "+    }\n", 
            "+\n", 
            "+    public ClientSampleConfiguration getClientConfig() {\n", 
            "+        return clientConfig;\n", 
            "+    }\n", 
            "+\n", 
            "+    class SynapseSampleConfiguration {\n", 
            "+        private String serverName;\n", 
            "+        private String synapseHome;\n", 
            "+        private String axis2Repo;\n", 
            "+        private String axis2Xml;\n", 
            "+        private String synapseXml;\n", 
            "+        private boolean clusteringEnabled;\n", 
            "+\n", 
            "+        public String getServerName() {\n", 
            "+            return serverName;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setServerName(String serverName) {\n", 
            "+            this.serverName = serverName;\n", 
            "+        }\n", 
            "+\n", 
            "+        public String getSynapseHome() {\n", 
            "+            return synapseHome;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setSynapseHome(String synapseHome) {\n", 
            "+            this.synapseHome = synapseHome;\n", 
            "+        }\n", 
            "+\n", 
            "+        public String getAxis2Repo() {\n", 
            "+            return axis2Repo;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setAxis2Repo(String axis2Repo) {\n", 
            "+            this.axis2Repo = axis2Repo;\n", 
            "+        }\n", 
            "+\n", 
            "+        public String getAxis2Xml() {\n", 
            "+            return axis2Xml;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setAxis2Xml(String axis2Xml) {\n", 
            "+            this.axis2Xml = axis2Xml;\n", 
            "+        }\n", 
            "+\n", 
            "+        public String getSynapseXml() {\n", 
            "+            return synapseXml;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setSynapseXml(String synapseXml) {\n", 
            "+            this.synapseXml = synapseXml;\n", 
            "+        }\n", 
            "+\n", 
            "+        public boolean isClusteringEnabled() {\n", 
            "+            return clusteringEnabled;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setClusteringEnabled(boolean clusteringEnabled) {\n", 
            "+            this.clusteringEnabled = clusteringEnabled;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    class Axis2SampleConfiguration {\n", 
            "+        private String serverName;\n", 
            "+        private String axis2Repo;\n", 
            "+        private String axis2Xml;\n", 
            "+        private String httpPort;\n", 
            "+        private String httpsPort;\n", 
            "+        private boolean clusteringEnabled;\n", 
            "+\n", 
            "+        public String getServerName() {\n", 
            "+            return serverName;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setServerName(String serverName) {\n", 
            "+            this.serverName = serverName;\n", 
            "+        }\n", 
            "+\n", 
            "+        public String getAxis2Repo() {\n", 
            "+            return axis2Repo;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setAxis2Repo(String axis2Repo) {\n", 
            "+            this.axis2Repo = axis2Repo;\n", 
            "+        }\n", 
            "+\n", 
            "+        public String getAxis2Xml() {\n", 
            "+            return axis2Xml;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setAxis2Xml(String axis2Xml) {\n", 
            "+            this.axis2Xml = axis2Xml;\n", 
            "+        }\n", 
            "+\n", 
            "+        public String getHttpPort() {\n", 
            "+            return httpPort;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setHttpPort(String httpPort) {\n", 
            "+            this.httpPort = httpPort;\n", 
            "+        }\n", 
            "+\n", 
            "+        public String getHttpsPort() {\n", 
            "+            return httpsPort;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setHttpsPort(String httpsPort) {\n", 
            "+            this.httpsPort = httpsPort;\n", 
            "+        }\n", 
            "+\n", 
            "+        public boolean isClusteringEnabled() {\n", 
            "+            return clusteringEnabled;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setClusteringEnabled(boolean clusteringEnabled) {\n", 
            "+            this.clusteringEnabled = clusteringEnabled;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    class JMSBrokerSampleConfiguration {\n", 
            "+        private String serverName;\n", 
            "+        private String providerURL;\n", 
            "+        private String initialNamingFactory;\n", 
            "+\n", 
            "+        public String getServerName() {\n", 
            "+            return serverName;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setServerName(String serverName) {\n", 
            "+            this.serverName = serverName;\n", 
            "+        }\n", 
            "+\n", 
            "+        public String getProviderURL() {\n", 
            "+            return providerURL;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setProviderURL(String providerURL) {\n", 
            "+            this.providerURL = providerURL;\n", 
            "+        }\n", 
            "+\n", 
            "+        public String getInitialNamingFactory() {\n", 
            "+            return initialNamingFactory;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setInitialNamingFactory(String initialNamingFactory) {\n", 
            "+            this.initialNamingFactory = initialNamingFactory;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    class DerbyServerSampleConfiguration {\n", 
            "+        private String serverName;\n", 
            "+\n", 
            "+        public String getServerName() {\n", 
            "+            return serverName;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setServerName(String serverName) {\n", 
            "+            this.serverName = serverName;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    class FIXExecutorSampleConfiguration {\n", 
            "+        private String serverName;\n", 
            "+\n", 
            "+        public String getServerName() {\n", 
            "+            return serverName;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setServerName(String serverName) {\n", 
            "+            this.serverName = serverName;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public class ClientSampleConfiguration {\n", 
            "+        private String clientRepo;\n", 
            "+        private String fileName;\n", 
            "+        private String axis2Xml;\n", 
            "+\n", 
            "+        public String getClientRepo() {\n", 
            "+            return clientRepo;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setClientRepo(String clientRepo) {\n", 
            "+            this.clientRepo = clientRepo;\n", 
            "+        }\n", 
            "+\n", 
            "+        public String getFileName() {\n", 
            "+            return fileName;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setFileName(String fileName) {\n", 
            "+            this.fileName = fileName;\n", 
            "+        }\n", 
            "+\n", 
            "+        public String getAxis2Xml() {\n", 
            "+            return axis2Xml;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void setAxis2Xml(String axis2Xml) {\n", 
            "+            this.axis2Xml = axis2Xml;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfiguration.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,48", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.message;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample13 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample13.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample13() {\n", 
            "+        super(13);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testDualQuote() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Dual channel invocation through Synapse\");\n", 
            "+        result = client.requestDualQuote(addUrl, trpUrl, null, \"IBM\");\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.gotResponse());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample13.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample13.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,47", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.message;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample1 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample1.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample1() {\n", 
            "+        super(1);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testDumbClientMode() {\n", 
            "+        String trpUrl = \"http://localhost:8280/services/StockQuote\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Dumb Client mode\");\n", 
            "+        result = client.requestStandardQuote(null, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.gotResponse());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample1.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample1.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,73", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework.tests.message;\n", 
            "+\n", 
            "+import org.apache.axis2.AxisFault;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample5 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample5.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample5() {\n", 
            "+        super(5);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testCreateFaultAndChangeDirection() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280\";\n", 
            "+        String expectedError_MSFT = \"bogus\";\n", 
            "+        String expectedError_SUN = \"Connection refused\";\n", 
            "+        String expectedError_IBM = \"The input stream for an incoming message is null\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Creating SOAP fault messages and changing the direction of a message\");\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"MSFT\" ,null);\n", 
            "+        assertFalse(\"Must not get a response\", result.gotResponse());\n", 
            "+        Exception resultEx = result.getException();\n", 
            "+        assertNotNull(\"Did not receive expected error\", resultEx);\n", 
            "+        log.info(\"Got an error as expected: \" + resultEx.getMessage());\n", 
            "+        assertTrue(\"Did not receive expected error\", resultEx instanceof AxisFault);\n", 
            "+        assertTrue(\"Did not receive expected error\", resultEx.getMessage().indexOf(expectedError_MSFT)!=-1);\n", 
            "+\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"SUN\" ,null);\n", 
            "+        assertFalse(\"Must not get a response\", result.gotResponse());\n", 
            "+        resultEx = result.getException();\n", 
            "+        assertNotNull(\"Did not receive expected error\", resultEx);\n", 
            "+        log.info(\"Got an error as expected: \" + resultEx.getMessage());\n", 
            "+        assertTrue(\"Did not receive expected error\", resultEx instanceof AxisFault);\n", 
            "+        assertTrue(\"Did not receive expected error\", resultEx.getMessage().indexOf(expectedError_SUN)!=-1);\n", 
            "+\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertFalse(\"Must not get a response\", result.gotResponse());\n", 
            "+        resultEx = result.getException();\n", 
            "+        assertNotNull(\"Did not receive expected error\", resultEx);\n", 
            "+        log.info(\"Got an error as expected: \" + resultEx.getMessage());\n", 
            "+        assertTrue(\"Did not receive expected error\", resultEx instanceof AxisFault);\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample5.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample5.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,48", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.message;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample9 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample9.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample9() {\n", 
            "+        super(9);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testDynamicSequences() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Dynamic Sequences with Registry\");\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.gotResponse());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample9.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample9.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,157", 
          "lines": [
            "+package org.apache.synapse.samples.framework;\n", 
            "+\n", 
            "+import org.apache.axis2.clustering.ClusteringAgent;\n", 
            "+import org.apache.axis2.clustering.ClusteringConstants;\n", 
            "+import org.apache.axis2.context.ConfigurationContext;\n", 
            "+import org.apache.axis2.context.ConfigurationContextFactory;\n", 
            "+import org.apache.axis2.description.TransportInDescription;\n", 
            "+import org.apache.axis2.engine.ListenerManager;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+\n", 
            "+import java.util.concurrent.CountDownLatch;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Responsible for programatically starting up and shutting down\n", 
            "+ * an Axis2 server instance in order to run a sample test.\n", 
            "+ */\n", 
            "+public class Axis2BackEndServerController implements BackEndServerController {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Axis2BackEndServerController.class);\n", 
            "+\n", 
            "+    private String serverName;\n", 
            "+    private BackEndServerThread serverThread;\n", 
            "+    private ConfigurationContext configContext;\n", 
            "+    private ListenerManager listenerManager;\n", 
            "+    private SampleConfiguration.Axis2SampleConfiguration configuration;\n", 
            "+    private CountDownLatch cdLatch;\n", 
            "+    private Exception processException;\n", 
            "+\n", 
            "+    public Axis2BackEndServerController(String serverName,\n", 
            "+                                        SampleConfiguration.Axis2SampleConfiguration configuration) {\n", 
            "+        this.serverName = serverName;\n", 
            "+        this.configuration = configuration;\n", 
            "+        serverThread = new BackEndServerThread();\n", 
            "+        serverThread.setName(configuration.getServerName()+ \" thread\");\n", 
            "+        cdLatch = new CountDownLatch(1);\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getServerName() {\n", 
            "+        return serverName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean start() {\n", 
            "+        log.info(\"Preparing to start Axis2 Server: \" + serverName);\n", 
            "+        serverThread.start();\n", 
            "+        try {\n", 
            "+            log.info(\"Waiting for Axis2 to start\");\n", 
            "+            cdLatch.await();\n", 
            "+            if (processException == null) {\n", 
            "+                log.info(\"Axis2 is successfully started. continuing tests\");\n", 
            "+                return true;\n", 
            "+            } else {\n", 
            "+                log.warn(\"There was an error starting Axis2 server: \" + serverName, processException);\n", 
            "+                return false;\n", 
            "+            }\n", 
            "+        } catch (InterruptedException e) {\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean stop() {\n", 
            "+        if (serverThread.isRunning) {\n", 
            "+            serverThread.isRunning = false;\n", 
            "+            try {\n", 
            "+                cdLatch = new CountDownLatch(1);\n", 
            "+                cdLatch.await();\n", 
            "+            } catch (InterruptedException e) {\n", 
            "+                 return false;\n", 
            "+            }\n", 
            "+        }\n", 
            "+        return true;\n", 
            "+    }\n", 
            "+\n", 
            "+    class BackEndServerThread extends Thread {\n", 
            "+\n", 
            "+        public boolean isRunning = false;\n", 
            "+\n", 
            "+        public void run() {processException = null;\n", 
            "+            log.info(\"ServerThread: Initializing Axis2 Server: \" + serverName);\n", 
            "+            processException = null;\n", 
            "+            try {\n", 
            "+                listenerManager = new ListenerManager();\n", 
            "+\n", 
            "+                configContext = ConfigurationContextFactory\n", 
            "+                        .createConfigurationContextFromFileSystem(configuration.getAxis2Repo(),\n", 
            "+                                configuration.getAxis2Xml());\n", 
            "+\n", 
            "+                // setting System.setProperty does not work since this all servers are run on same jvm\n", 
            "+                configContext.setProperty(\"server_name\", serverName);\n", 
            "+\n", 
            "+\n", 
            "+                TransportInDescription httpTrsIn = configContext.getAxisConfiguration().\n", 
            "+                        getTransportsIn().get(\"http\");\n", 
            "+                String httpPort = configuration.getHttpPort();\n", 
            "+                if (httpPort != null && !httpPort.isEmpty()) {\n", 
            "+                    try {\n", 
            "+                        new Integer(httpPort);\n", 
            "+                        httpTrsIn.getParameter(\"port\").setValue(httpPort);\n", 
            "+                    } catch (NumberFormatException e) {\n", 
            "+                        log.error(\"Given port is not a valid integer. Using default value.\");\n", 
            "+                    }\n", 
            "+                }\n", 
            "+\n", 
            "+                TransportInDescription httpsTrsIn = configContext.getAxisConfiguration().\n", 
            "+                        getTransportsIn().get(\"https\");\n", 
            "+                String httpsPort = configuration.getHttpsPort();\n", 
            "+                if (httpsPort != null && !httpsPort.isEmpty()) {\n", 
            "+                    try {\n", 
            "+                        new Integer(httpsPort);\n", 
            "+                        httpsTrsIn.getParameter(\"port\").setValue(httpsPort);\n", 
            "+                    } catch (NumberFormatException e) {\n", 
            "+                        log.error(\"Given port is not a valid integer. Using default value.\");\n", 
            "+                    }\n", 
            "+                }\n", 
            "+\n", 
            "+                log.info(\"ServerThread: Starting Axis2 Server: \" + serverName);\n", 
            "+\n", 
            "+\n", 
            "+                ClusteringAgent clusteringAgent =\n", 
            "+                        configContext.getAxisConfiguration().getClusteringAgent();\n", 
            "+                String avoidInit = ClusteringConstants.Parameters.AVOID_INITIATION;\n", 
            "+                if (clusteringAgent != null && clusteringAgent.getParameter(avoidInit) != null &&\n", 
            "+                        ((String) clusteringAgent.getParameter(avoidInit).getValue()).\n", 
            "+                                equalsIgnoreCase(\"true\")) {\n", 
            "+                    clusteringAgent.setConfigurationContext(configContext);\n", 
            "+                    clusteringAgent.init();\n", 
            "+                }\n", 
            "+\n", 
            "+\n", 
            "+                listenerManager.startSystem(configContext);\n", 
            "+                isRunning = true;\n", 
            "+\n", 
            "+            } catch (Exception e) {\n", 
            "+                processException = e;\n", 
            "+            }\n", 
            "+            cdLatch.countDown();\n", 
            "+\n", 
            "+            log.info(\"ServerThread: Wait until test are finished\");\n", 
            "+            while (isRunning) {\n", 
            "+                //wait\n", 
            "+                try {\n", 
            "+                    sleep(1000);\n", 
            "+                } catch (InterruptedException e) {\n", 
            "+                    log.info(\"Thread interrupted\");\n", 
            "+                }\n", 
            "+            }\n", 
            "+            log.info(\"ServerThread: Shutting down Axis2 Server...\");\n", 
            "+            try {\n", 
            "+                listenerManager.stop();\n", 
            "+                configContext.terminate();\n", 
            "+            } catch (Exception e) {\n", 
            "+                log.warn(\"Error while shutting down Axis2 server\", e);\n", 
            "+            }\n", 
            "+            cdLatch.countDown();\n", 
            "+        }\n", 
            "+    }\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/Axis2BackEndServerController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/Axis2BackEndServerController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,58", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.message;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample0 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample0.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample0() {\n", 
            "+        super(0);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testSmartClientMode() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Smart Client mode\");\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.gotResponse());\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testSynapseAsHTTPProxy() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String prxUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Using Synapse as a HTTP Proxy\");\n", 
            "+        result = client.requestStandardQuote(addUrl, null, prxUrl, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.gotResponse());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample0.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample0.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,61", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.message;\n", 
            "+\n", 
            "+import org.apache.axis2.AxisFault;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample4 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample4.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample4() {\n", 
            "+        super(4);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testErrorHandling() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Introduction to error handling\");\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Did not get the correct response\", result.gotResponse());\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"MSFT\" ,null);\n", 
            "+        assertFalse(\"Must not get a response\", result.gotResponse());\n", 
            "+        Exception resultEx = result.getException();\n", 
            "+        assertNotNull(\"Did not receive expected error\" , resultEx);\n", 
            "+        log.info(\"Got an error as expected: \" + resultEx.getMessage());\n", 
            "+        assertTrue(\"Did not receive expected error\", resultEx instanceof AxisFault);\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"SUN\" ,null);\n", 
            "+        assertFalse(\"Must not get a response\", result.gotResponse());\n", 
            "+        Exception resultEx2 = result.getException();\n", 
            "+        assertNotNull(\"Did not receive expected error\" , resultEx);\n", 
            "+        log.info(\"Got an error as expected: \" + resultEx.getMessage());\n", 
            "+        assertTrue(\"Did not receive expected error\", resultEx2 instanceof AxisFault);\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample4.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample4.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,48", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.message;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample8 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample8.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample8() {\n", 
            "+        super(8);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testRegistryAndXSLTMediator() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280/\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Introduction to static and dynamic registry resources, and using XSLT transformations  \");\n", 
            "+        result = client.requestCustomQuote(addUrl, trpUrl, null, \"IBM\");\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.gotResponse());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample8.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample8.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,123", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.ServerConfigurationInformation;\n", 
            "+import org.apache.synapse.ServerManager;\n", 
            "+\n", 
            "+import java.util.concurrent.CountDownLatch;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Responsible for starting up and shutting down\n", 
            "+ * a synapse server instance in order to run a sample test.\n", 
            "+ */\n", 
            "+public class SynapseProcessController implements ProcessController {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(SynapseProcessController.class);\n", 
            "+\n", 
            "+    private ServerThread serverThread;\n", 
            "+    private SampleConfiguration.SynapseSampleConfiguration configuration;\n", 
            "+    private ServerConfigurationInformation information;\n", 
            "+    private ServerManager manager;\n", 
            "+    private CountDownLatch cdLatch;\n", 
            "+    private Exception processException;\n", 
            "+\n", 
            "+    public SynapseProcessController(SampleConfiguration.SynapseSampleConfiguration configuration) {\n", 
            "+        this.configuration = configuration;\n", 
            "+        information = new ServerConfigurationInformation();\n", 
            "+        manager = new ServerManager();\n", 
            "+        cdLatch = new CountDownLatch(1);\n", 
            "+        serverThread = new ServerThread();\n", 
            "+        serverThread.setName(configuration.getServerName() + \" thread\");\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean startProcess() {\n", 
            "+        information.setSynapseHome(configuration.getSynapseHome());\n", 
            "+        information.setSynapseXMLLocation(configuration.getSynapseXml());\n", 
            "+        information.setServerName(configuration.getServerName());\n", 
            "+        information.setAxis2Xml(configuration.getAxis2Xml());\n", 
            "+        information.setResolveRoot(configuration.getAxis2Repo());\n", 
            "+        information.setAxis2RepoLocation(configuration.getAxis2Repo());\n", 
            "+\n", 
            "+        log.info(\"SynapseProcessController: Preparing to start synapse server\");\n", 
            "+        serverThread.start();\n", 
            "+\n", 
            "+        try {\n", 
            "+            log.info(\"SynapseProcessController: Waiting for synapse to start\");\n", 
            "+            cdLatch.await();\n", 
            "+            if (processException == null) {\n", 
            "+                log.info(\"SynapseProcessController: synapse is started. continuing tests\");\n", 
            "+                return true;\n", 
            "+            } else {\n", 
            "+                log.warn(\"SynapseProcessController: There was an error starting synapse\", processException);\n", 
            "+                return false;\n", 
            "+            }\n", 
            "+        } catch (InterruptedException e) {\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean stopProcess() {\n", 
            "+        if (serverThread.isRunning) {\n", 
            "+            serverThread.isRunning = false;\n", 
            "+            try {\n", 
            "+                cdLatch = new CountDownLatch(1);\n", 
            "+                cdLatch.await();\n", 
            "+            } catch (InterruptedException e) {\n", 
            "+                log.warn(\"Thread interrupted\");\n", 
            "+            }\n", 
            "+        }\n", 
            "+        return true;\n", 
            "+    }\n", 
            "+\n", 
            "+    private class ServerThread extends Thread {\n", 
            "+\n", 
            "+        public boolean isRunning = false;\n", 
            "+\n", 
            "+        public void run() {\n", 
            "+            processException = null;\n", 
            "+            log.info(\"SynapseProcessController.ServerThread: Initializing Synapse Server...\");\n", 
            "+            try {\n", 
            "+                manager.init(information, null);\n", 
            "+                log.info(\"SynapseProcessController.ServerThread: Starting Synapse Server...\");\n", 
            "+                manager.start();\n", 
            "+                isRunning = true;\n", 
            "+            } catch (Exception e) {\n", 
            "+                processException = e;\n", 
            "+            }\n", 
            "+            cdLatch.countDown();\n", 
            "+\n", 
            "+            log.info(\"SynapseProcessController.ServerThread: Await until test are finished\");\n", 
            "+            while (isRunning) {\n", 
            "+                //wait\n", 
            "+                try {\n", 
            "+                    sleep(1000);\n", 
            "+                } catch (InterruptedException e) {\n", 
            "+                    log.warn(\"Thread interrupted\");\n", 
            "+                }\n", 
            "+            }\n", 
            "+            log.info(\"SynapseProcessController.ServerThread:Shutting down Synapse Server...\");\n", 
            "+            manager.shutdown();\n", 
            "+            cdLatch.countDown();\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseProcessController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseProcessController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,520", 
          "lines": [
            "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
            "+<!--\n", 
            "+  ~  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+  ~  or more contributor license agreements.  See the NOTICE file\n", 
            "+  ~  distributed with this work for additional information\n", 
            "+  ~  regarding copyright ownership.  The ASF licenses this file\n", 
            "+  ~  to you under the Apache License, Version 2.0 (the\n", 
            "+  ~  \"License\"); you may not use this file except in compliance\n", 
            "+  ~  with the License.  You may obtain a copy of the License at\n", 
            "+  ~\n", 
            "+  ~   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+  ~\n", 
            "+  ~  Unless required by applicable law or agreed to in writing,\n", 
            "+  ~  software distributed under the License is distributed on an\n", 
            "+  ~   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+  ~  KIND, either express or implied.  See the License for the\n", 
            "+  ~  specific language governing permissions and limitations\n", 
            "+  ~  under the License.\n", 
            "+  -->\n", 
            "+\n", 
            "+<project\n", 
            "+        xmlns=\"http://maven.apache.org/POM/4.0.0\"\n", 
            "+        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n", 
            "+        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n", 
            "+    <modelVersion>4.0.0</modelVersion>\n", 
            "+    <parent>\n", 
            "+        <groupId>org.apache.synapse</groupId>\n", 
            "+        <artifactId>Apache-Synapse</artifactId>\n", 
            "+        <version>2.1.0-SNAPSHOT</version>\n", 
            "+        <relativePath>../../pom.xml</relativePath>\n", 
            "+    </parent>\n", 
            "+\n", 
            "+    <groupId>org.apache.synapse</groupId>\n", 
            "+    <artifactId>synapse-integration</artifactId>\n", 
            "+\n", 
            "+    <name>Apache Synapse - Integration</name>\n", 
            "+    <description>Apache Synapse - Sample Automation Framework</description>\n", 
            "+    <!--<packaging>bundle</packaging>-->\n", 
            "+\n", 
            "+    <build>\n", 
            "+        <plugins>\n", 
            "+\n", 
            "+            <plugin>\n", 
            "+                <groupId>org.apache.maven.plugins</groupId>\n", 
            "+                <artifactId>maven-antrun-plugin</artifactId>\n", 
            "+                <version>1.6</version>\n", 
            "+                <executions>\n", 
            "+                    <execution>\n", 
            "+                        <id>create_repo</id>\n", 
            "+                        <phase>generate-test-resources</phase>\n", 
            "+                        <configuration>\n", 
            "+                            <tasks>\n", 
            "+                                <echo message=\"*** Creating testing repositories for synapse samples\"/>\n", 
            "+\n", 
            "+                                <mkdir dir=\"target/test_repos\"/>\n", 
            "+                                <mkdir dir=\"target/test_repos/axis2Server\"/>\n", 
            "+                                <mkdir dir=\"target/test_repos/axis2Client\"/>\n", 
            "+                                <mkdir dir=\"target/test_repos/synapse\"/>\n", 
            "+                                <mkdir dir=\"target/test_repos/synapse\"/>\n", 
            "+                                <mkdir dir=\"target/test_repos/synapse/modules\"/>\n", 
            "+                                <mkdir dir=\"target/test_repos/synapse/conf\"/>\n", 
            "+                                <mkdir dir=\"target/test_repos/axis2Server/services\"/>\n", 
            "+                                <mkdir dir=\"target/test_repos/axis2Server/modules\"/>\n", 
            "+                                <mkdir dir=\"target/test_repos/axis2Server/conf\"/>\n", 
            "+                                <mkdir dir=\"target/test_repos/axis2Client/modules\"/>\n", 
            "+                                <mkdir dir=\"target/test_repos/axis2Client/conf\"/>\n", 
            "+\n", 
            "+                                <copy todir=\"target/test_repos/axis2Server/conf/\">\n", 
            "+                                    <fileset dir=\"src/test/resources/axis2Xml/axis2Server\">\n", 
            "+                                        <include name=\"*.xml\"/>\n", 
            "+                                    </fileset>\n", 
            "+                                </copy>\n", 
            "+                                <copy todir=\"target/test_repos/synapse/conf/\">\n", 
            "+                                    <fileset dir=\"src/test/resources/axis2Xml/synapse\">\n", 
            "+                                        <include name=\"*.xml\"/>\n", 
            "+                                    </fileset>\n", 
            "+                                </copy>\n", 
            "+                                <copy todir=\"target/test_repos/axis2Client/conf/\">\n", 
            "+                                    <fileset dir=\"src/test/resources/axis2Xml/axis2Client\">\n", 
            "+                                        <include name=\"*.xml\"/>\n", 
            "+                                    </fileset>\n", 
            "+                                </copy>\n", 
            "+\n", 
            "+                                <!--<copy file=\"src/test/resources/trust.jks\"-->\n", 
            "+                                <!--tofile=\"target/test_repos/synapse/conf/trust.jks\"/>-->\n", 
            "+                                <!--<copy file=\"src/test/resources/identity.jks\"-->\n", 
            "+                                <!--tofile=\"target/test_repos/synapse/conf/identity.jks\"/>-->\n", 
            "+                                <!--<copy file=\"../core/src/test/resources/keystore.jks\"-->\n", 
            "+                                <!--tofile=\"target/test_repos/synapse/conf/keystore.jks\"/>-->\n", 
            "+\n", 
            "+                                <property name=\"temp.dir\" value=\"target/temp\"/>\n", 
            "+                                <property name=\"classes\" value=\"${temp.dir}/classes\"/>\n", 
            "+                                <property name=\"services\"\n", 
            "+                                value=\"target/test_repos/axis2Server/services\"/>\n", 
            "+\n", 
            "+                                <property name=\"src\"\n", 
            "+                                value=\"../samples/services/SimpleStockQuoteService/src\"/>\n", 
            "+\n", 
            "+                                <mkdir dir=\"${temp.dir}\"/>\n", 
            "+                                <mkdir dir=\"${classes}\"/>\n", 
            "+\n", 
            "+                                <javac debug=\"on\" destdir=\"${classes}\" fork=\"true\" includeantruntime=\"false\">\n", 
            "+                                <src path=\"${src}\"/>\n", 
            "+                                <classpath refid=\"maven.compile.classpath\"/>\n", 
            "+                                </javac>\n", 
            "+\n", 
            "+                                <property name=\"SSQ.dir\"\n", 
            "+                                value=\"${temp.dir}/SimpleStockQuote\"/>\n", 
            "+                                <mkdir dir=\"${SSQ.dir}\"/>\n", 
            "+\n", 
            "+                                <mkdir dir=\"${SSQ.dir}/META-INF\"/>\n", 
            "+                                <copy file=\"${src}/../conf/services.xml\"\n", 
            "+                                tofile=\"${SSQ.dir}/META-INF/services.xml\"/>\n", 
            "+                                <!--<copy file=\"${src}/../wsdl/SimpleStockQuoteService.wsdl\"-->\n", 
            "+                                <!--tofile=\"${SSQ.dir}/META-INF/service.wsdl\"/>-->\n", 
            "+                                <copy toDir=\"${SSQ.dir}\">\n", 
            "+                                <fileset dir=\"${classes}\">\n", 
            "+                                <include name=\"**/*.class\"/>\n", 
            "+                                </fileset>\n", 
            "+                                </copy>\n", 
            "+\n", 
            "+                                <jar destfile=\"${services}/SimpleStockQuoteService.aar\">\n", 
            "+                                <fileset dir=\"${SSQ.dir}\"/>\n", 
            "+                                </jar>\n", 
            "+\n", 
            "+                                <property name=\"src2\"\n", 
            "+                                value=\"../samples/services/SecureStockQuoteService/src\"/>\n", 
            "+                                <delete dir=\"${temp.dir}\"/>\n", 
            "+                                <mkdir dir=\"${temp.dir}\"/>\n", 
            "+                                <mkdir dir=\"${classes}\"/>\n", 
            "+                                <javac debug=\"on\" destdir=\"${classes}\" fork=\"true\" includeantruntime=\"false\">\n", 
            "+                                <src path=\"${src2}\"/>\n", 
            "+                                <classpath refid=\"maven.compile.classpath\"/>\n", 
            "+                                </javac>\n", 
            "+                                <property name=\"SSQ2.dir\"\n", 
            "+                                value=\"${temp.dir}/SecureStockQuoteService\"/>\n", 
            "+                                <mkdir dir=\"${SSQ2.dir}\"/>\n", 
            "+                                <mkdir dir=\"${SSQ2.dir}/META-INF\"/>\n", 
            "+                                <copy file=\"${src2}/../conf/services.xml\"\n", 
            "+                                tofile=\"${SSQ2.dir}/META-INF/services.xml\"/>\n", 
            "+                                <!--<copy file=\"${src2}/../wsdl/SimpleStockQuoteService.wsdl\"-->\n", 
            "+                                <!--tofile=\"${SSQ2.dir}/META-INF/service.wsdl\"/>-->\n", 
            "+                                <copy file=\"${src2}/../store.jks\"\n", 
            "+                                tofile=\"${SSQ2.dir}/store.jks\"/>\n", 
            "+                                <copy toDir=\"${SSQ2.dir}\">\n", 
            "+                                <fileset dir=\"${classes}\">\n", 
            "+                                <include name=\"**/*.class\"/>\n", 
            "+                                </fileset>\n", 
            "+                                </copy>\n", 
            "+                                <jar destfile=\"${services}/SecureStockQuoteService.aar\">\n", 
            "+                                <fileset dir=\"${SSQ2.dir}\"/>\n", 
            "+                                </jar>\n", 
            "+\n", 
            "+                                <property name=\"src3\"\n", 
            "+                                value=\"../samples/services/MTOMSwASampleService/src\"/>\n", 
            "+                                <delete dir=\"${temp.dir}\"/>\n", 
            "+                                <mkdir dir=\"${temp.dir}\"/>\n", 
            "+                                <mkdir dir=\"${classes}\"/>\n", 
            "+                                <javac debug=\"on\" destdir=\"${classes}\" fork=\"true\" includeantruntime=\"false\">\n", 
            "+                                <src path=\"${src3}\"/>\n", 
            "+                                <classpath refid=\"maven.compile.classpath\"/>\n", 
            "+                                </javac>\n", 
            "+                                <property name=\"SSQ3.dir\"\n", 
            "+                                value=\"${temp.dir}/MTOMSwASampleService\"/>\n", 
            "+                                <mkdir dir=\"${SSQ3.dir}\"/>\n", 
            "+                                <mkdir dir=\"${SSQ3.dir}/META-INF\"/>\n", 
            "+                                <copy file=\"${src3}/../conf/services.xml\"\n", 
            "+                                tofile=\"${SSQ3.dir}/META-INF/services.xml\"/>\n", 
            "+                                <copy toDir=\"${SSQ3.dir}\">\n", 
            "+                                <fileset dir=\"${classes}\">\n", 
            "+                                <include name=\"**/*.class\"/>\n", 
            "+                                </fileset>\n", 
            "+                                </copy>\n", 
            "+                                <jar destfile=\"${services}/MTOMSwASampleService.aar\">\n", 
            "+                                <fileset dir=\"${SSQ3.dir}\"/>\n", 
            "+                                </jar>\n", 
            "+\n", 
            "+                                <property name=\"src4\"\n", 
            "+                                value=\"../samples/services/ReliableStockQuoteService/src\"/>\n", 
            "+                                <delete dir=\"${temp.dir}\"/>\n", 
            "+                                <mkdir dir=\"${temp.dir}\"/>\n", 
            "+                                <mkdir dir=\"${classes}\"/>\n", 
            "+                                <javac debug=\"on\" destdir=\"${classes}\" fork=\"true\" includeantruntime=\"false\">\n", 
            "+                                <src path=\"${src4}\"/>\n", 
            "+                                <classpath refid=\"maven.compile.classpath\"/>\n", 
            "+                                </javac>\n", 
            "+                                <property name=\"RSQ.dir\"\n", 
            "+                                value=\"${temp.dir}/ReliableStockQuoteService\"/>\n", 
            "+                                <mkdir dir=\"${RSQ.dir}\"/>\n", 
            "+\n", 
            "+                                <mkdir dir=\"${RSQ.dir}/META-INF\"/>\n", 
            "+                                <copy file=\"${src4}/../conf/services.xml\"\n", 
            "+                                tofile=\"${RSQ.dir}/META-INF/services.xml\"/>\n", 
            "+                                <!--<copy file=\"${src4}/../wsdl/ReliableStockQuoteService.wsdl\"-->\n", 
            "+                                <!--tofile=\"${RSQ.dir}/META-INF/service.wsdl\"/>-->\n", 
            "+                                <copy toDir=\"${RSQ.dir}\">\n", 
            "+                                <fileset dir=\"${classes}\">\n", 
            "+                                <include name=\"**/*.class\"/>\n", 
            "+                                </fileset>\n", 
            "+                                </copy>\n", 
            "+\n", 
            "+                                <jar destfile=\"${services}/ReliableStockQuoteService.aar\">\n", 
            "+                                <fileset dir=\"${RSQ.dir}\"/>\n", 
            "+                                </jar>\n", 
            "+\n", 
            "+                                <property name=\"src5\"\n", 
            "+                                value=\"../samples/services/LoadbalanceFailoverService/src\"/>\n", 
            "+                                <delete dir=\"${temp.dir}\"/>\n", 
            "+                                <mkdir dir=\"${temp.dir}\"/>\n", 
            "+                                <mkdir dir=\"${classes}\"/>\n", 
            "+                                <javac debug=\"on\" destdir=\"${classes}\" fork=\"true\" includeantruntime=\"false\">\n", 
            "+                                <src path=\"${src5}\"/>\n", 
            "+                                <classpath refid=\"maven.compile.classpath\"/>\n", 
            "+                                </javac>\n", 
            "+\n", 
            "+                                <property name=\"LBFA1.dir\" value=\"${temp.dir}/LBService1\"/>\n", 
            "+                                <mkdir dir=\"${LBFA1.dir}\"/>\n", 
            "+\n", 
            "+                                <mkdir dir=\"${LBFA1.dir}/META-INF\"/>\n", 
            "+                                <copy file=\"${src5}/../conf/service1/services.xml\"\n", 
            "+                                tofile=\"${LBFA1.dir}/META-INF/services.xml\"/>\n", 
            "+                                <copy toDir=\"${LBFA1.dir}\">\n", 
            "+                                <fileset dir=\"${classes}\">\n", 
            "+                                <include name=\"**/LBService1.class\"/>\n", 
            "+                                </fileset>\n", 
            "+                                </copy>\n", 
            "+\n", 
            "+                                <jar destfile=\"${services}/LBService1.aar\">\n", 
            "+                                <fileset dir=\"${LBFA1.dir}\"/>\n", 
            "+                                </jar>\n", 
            "+\n", 
            "+                                <property name=\"LBFA2.dir\" value=\"${temp.dir}/LBService2\"/>\n", 
            "+                                <mkdir dir=\"${LBFA2.dir}\"/>\n", 
            "+\n", 
            "+                                <mkdir dir=\"${LBFA2.dir}/META-INF\"/>\n", 
            "+                                <copy file=\"${src5}/../conf/service2/services.xml\"\n", 
            "+                                tofile=\"${LBFA2.dir}/META-INF/services.xml\"/>\n", 
            "+                                <copy toDir=\"${LBFA2.dir}\">\n", 
            "+                                <fileset dir=\"${classes}\">\n", 
            "+                                <include name=\"**/LBService2.class\"/>\n", 
            "+                                </fileset>\n", 
            "+                                </copy>\n", 
            "+\n", 
            "+                                <jar destfile=\"${services}/LBService2.aar\">\n", 
            "+                                <fileset dir=\"${LBFA2.dir}\"/>\n", 
            "+                                </jar>\n", 
            "+\n", 
            "+                            </tasks>\n", 
            "+                        </configuration>\n", 
            "+                        <goals>\n", 
            "+                            <goal>run</goal>\n", 
            "+                        </goals>\n", 
            "+                    </execution>\n", 
            "+                </executions>\n", 
            "+            </plugin>\n", 
            "+\n", 
            "+\n", 
            "+            <plugin>\n", 
            "+                <groupId>org.apache.maven.plugins</groupId>\n", 
            "+                <artifactId>maven-dependency-plugin</artifactId>\n", 
            "+                <version>2.3</version>\n", 
            "+                <executions>\n", 
            "+                    <execution>\n", 
            "+                        <id>copy</id>\n", 
            "+                        <phase>generate-test-resources</phase>\n", 
            "+                        <goals>\n", 
            "+                            <goal>copy</goal>\n", 
            "+                        </goals>\n", 
            "+                        <configuration>\n", 
            "+                            <artifactItems>\n", 
            "+                                <artifactItem>\n", 
            "+                                    <groupId>org.apache.axis2</groupId>\n", 
            "+                                    <artifactId>addressing</artifactId>\n", 
            "+                                    <version>${addressing.version}</version>\n", 
            "+                                    <type>mar</type>\n", 
            "+                                    <outputDirectory>target/test_repos/axis2Server/modules\n", 
            "+                                    </outputDirectory>\n", 
            "+                                </artifactItem>\n", 
            "+\n", 
            "+                                <artifactItem>\n", 
            "+                                    <groupId>org.apache.rampart</groupId>\n", 
            "+                                    <artifactId>rampart</artifactId>\n", 
            "+                                    <version>${rampart.version}</version>\n", 
            "+                                    <type>mar</type>\n", 
            "+                                    <outputDirectory>target/test_repos/axis2Server/modules\n", 
            "+                                    </outputDirectory>\n", 
            "+                                </artifactItem>\n", 
            "+                                <artifactItem>\n", 
            "+                                    <groupId>org.apache.sandesha2</groupId>\n", 
            "+                                    <artifactId>sandesha2</artifactId>\n", 
            "+                                    <version>${sandesha2.version}</version>\n", 
            "+                                    <type>mar</type>\n", 
            "+                                    <outputDirectory>target/test_repos/axis2Server/modules\n", 
            "+                                    </outputDirectory>\n", 
            "+                                </artifactItem>\n", 
            "+                                <artifactItem>\n", 
            "+                                    <groupId>org.apache.axis2</groupId>\n", 
            "+                                    <artifactId>addressing</artifactId>\n", 
            "+                                    <version>${addressing.version}</version>\n", 
            "+                                    <type>mar</type>\n", 
            "+                                    <outputDirectory>target/test_repos/axis2Client/modules\n", 
            "+                                    </outputDirectory>\n", 
            "+                                </artifactItem>\n", 
            "+                                <artifactItem>\n", 
            "+                                    <groupId>org.apache.rampart</groupId>\n", 
            "+                                    <artifactId>rampart</artifactId>\n", 
            "+                                    <version>${rampart.version}</version>\n", 
            "+                                    <type>mar</type>\n", 
            "+                                    <outputDirectory>target/test_repos/axis2Client/modules\n", 
            "+                                    </outputDirectory>\n", 
            "+                                </artifactItem>\n", 
            "+\n", 
            "+                                <artifactItem>\n", 
            "+                                    <groupId>org.apache.axis2</groupId>\n", 
            "+                                    <artifactId>addressing</artifactId>\n", 
            "+                                    <version>${addressing.version}</version>\n", 
            "+                                    <type>mar</type>\n", 
            "+                                    <outputDirectory>target/test_repos/synapse/modules\n", 
            "+                                    </outputDirectory>\n", 
            "+                                </artifactItem>\n", 
            "+                                <artifactItem>\n", 
            "+                                    <groupId>org.apache.rampart</groupId>\n", 
            "+                                    <artifactId>rampart</artifactId>\n", 
            "+                                    <version>${rampart.version}</version>\n", 
            "+                                    <type>mar</type>\n", 
            "+                                    <outputDirectory>target/test_repos/synapse/modules\n", 
            "+                                    </outputDirectory>\n", 
            "+                                </artifactItem>\n", 
            "+                                <artifactItem>\n", 
            "+                                    <groupId>org.apache.sandesha2</groupId>\n", 
            "+                                    <artifactId>sandesha2</artifactId>\n", 
            "+                                    <version>${sandesha2.version}</version>\n", 
            "+                                    <type>mar</type>\n", 
            "+                                    <outputDirectory>target/test_repos/synapse/modules\n", 
            "+                                    </outputDirectory>\n", 
            "+                                </artifactItem>\n", 
            "+\n", 
            "+                            </artifactItems>\n", 
            "+                        </configuration>\n", 
            "+                    </execution>\n", 
            "+                </executions>\n", 
            "+            </plugin>\n", 
            "+\n", 
            "+            <plugin>\n", 
            "+                <groupId>org.apache.maven.plugins</groupId>\n", 
            "+                <artifactId>maven-surefire-plugin</artifactId>\n", 
            "+                <version>2.9</version>\n", 
            "+                <configuration>\n", 
            "+                    <systemPropertyVariables>\n", 
            "+                        <property>\n", 
            "+                            <name>suite</name>\n", 
            "+                            <value>${suite}</value>\n", 
            "+                            <name>tests</name>\n", 
            "+                            <value>${tests}</value>\n", 
            "+                        </property>\n", 
            "+                        <timeStamp>${maven.build.timestamp}</timeStamp>\n", 
            "+                        <log4j.configuration>test-log4j.properties</log4j.configuration>\n", 
            "+                    </systemPropertyVariables>\n", 
            "+                    <argLine>-Xms512m -Xmx1024m -XX:MaxPermSize=512m</argLine>\n", 
            "+                    <workingDirectory>../..</workingDirectory>\n", 
            "+                    <!--redirectTestOutputToFile>true</redirectTestOutputToFile-->\n", 
            "+                    <forkMode>pertest</forkMode>\n", 
            "+                </configuration>\n", 
            "+            </plugin>\n", 
            "+\n", 
            "+        </plugins>\n", 
            "+    </build>\n", 
            "+\n", 
            "+    <reporting>\n", 
            "+        <plugins>\n", 
            "+            <plugin>\n", 
            "+                <groupId>org.apache.maven.plugins</groupId>\n", 
            "+                <artifactId>maven-surefire-report-plugin</artifactId>\n", 
            "+                <version>2.7.2</version>\n", 
            "+                <configuration>\n", 
            "+                    <outputName>sample_automation</outputName>\n", 
            "+                </configuration>\n", 
            "+            </plugin>\n", 
            "+        </plugins>\n", 
            "+    </reporting>\n", 
            "+\n", 
            "+    <dependencies>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.synapse</groupId>\n", 
            "+            <artifactId>synapse-core</artifactId>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.synapse</groupId>\n", 
            "+            <artifactId>synapse-commons</artifactId>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.synapse</groupId>\n", 
            "+            <artifactId>synapse-extensions</artifactId>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.synapse</groupId>\n", 
            "+            <artifactId>synapse-samples</artifactId>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.synapse</groupId>\n", 
            "+            <artifactId>synapse-fix-transport</artifactId>\n", 
            "+            <version>${synapse.version}</version>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.rampart</groupId>\n", 
            "+            <artifactId>rampart-core</artifactId>\n", 
            "+            <version>${rampart.version}</version>\n", 
            "+            <scope>test</scope>\n", 
            "+            <exclusions>\n", 
            "+                <exclusion>\n", 
            "+                    <groupId>org.apache.woden</groupId>\n", 
            "+                    <artifactId>woden-api</artifactId>\n", 
            "+                </exclusion>\n", 
            "+            </exclusions>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.axis2</groupId>\n", 
            "+            <artifactId>axis2-transport-base</artifactId>\n", 
            "+            <version>${axis2.transport.version}</version>\n", 
            "+            <scope>test</scope>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.axis2</groupId>\n", 
            "+            <artifactId>axis2-transport-jms</artifactId>\n", 
            "+            <version>${axis2.transport.version}</version>\n", 
            "+            <scope>test</scope>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.axis2</groupId>\n", 
            "+            <artifactId>axis2-transport-udp</artifactId>\n", 
            "+            <version>${axis2.transport.version}</version>\n", 
            "+            <scope>test</scope>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.axis2</groupId>\n", 
            "+            <artifactId>axis2-transport-tcp</artifactId>\n", 
            "+            <version>1.0.0</version>\n", 
            "+            <scope>test</scope>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.jruby</groupId>\n", 
            "+            <artifactId>jruby-complete</artifactId>\n", 
            "+            <version>${jruby.version}</version>\n", 
            "+            <scope>test</scope>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.httpcomponents</groupId>\n", 
            "+            <artifactId>httpclient</artifactId>\n", 
            "+            <version>4.1</version>\n", 
            "+            <scope>test</scope>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.activemq</groupId>\n", 
            "+            <artifactId>activemq-core</artifactId>\n", 
            "+            <version>5.5.0</version>\n", 
            "+            <scope>test</scope>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.derby</groupId>\n", 
            "+            <artifactId>derbyclient</artifactId>\n", 
            "+            <version>10.8.1.2</version>\n", 
            "+            <scope>test</scope>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.derby</groupId>\n", 
            "+            <artifactId>derbynet</artifactId>\n", 
            "+            <version>10.8.1.2</version>\n", 
            "+            <scope>test</scope>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.slf4j</groupId>\n", 
            "+            <artifactId>slf4j-log4j12</artifactId>\n", 
            "+            <version>1.6.1</version>\n", 
            "+            <scope>test</scope>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.slf4j</groupId>\n", 
            "+            <artifactId>slf4j-api</artifactId>\n", 
            "+            <version>1.6.1</version>\n", 
            "+            <scope>test</scope>\n", 
            "+        </dependency>\n", 
            "+        <!--<dependency>-->\n", 
            "+        <!--<groupId>org.slf4j</groupId>-->\n", 
            "+        <!--<artifactId>slf4j-jdk14</artifactId>-->\n", 
            "+        <!--<version>1.6.1</version>-->\n", 
            "+        <!--<scope>test</scope>-->\n", 
            "+        <!--</dependency>-->\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.derby</groupId>\n", 
            "+            <artifactId>derby</artifactId>\n", 
            "+            <version>10.8.1.2</version>\n", 
            "+            <scope>test</scope>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.neethi</groupId>\n", 
            "+            <artifactId>neethi</artifactId>\n", 
            "+            <version>3.0.1</version>\n", 
            "+            <scope>test</scope>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>org.apache.mina</groupId>\n", 
            "+            <artifactId>mina-core</artifactId>\n", 
            "+            <version>1.1.7</version>\n", 
            "+            <scope>test</scope>\n", 
            "+        </dependency>\n", 
            "+        <dependency>\n", 
            "+            <groupId>quickfixj</groupId>\n", 
            "+            <artifactId>quickfixj-all</artifactId>\n", 
            "+            <version>1.4.0</version>\n", 
            "+            <scope>test</scope>\n", 
            "+        </dependency>\n", 
            "+        <!--dependency>\n", 
            "+            <groupId>quickfixj</groupId>\n", 
            "+            <artifactId>quickfixj-examples</artifactId>\n", 
            "+            <version>1.5.0</version>\n", 
            "+            <scope>test</scope>\n", 
            "+        </dependency-->\n", 
            "+    </dependencies>\n", 
            "+\n", 
            "+</project>\n"
          ]
        }
      ], 
      "to": "java/modules/integration/pom.xml", 
      "from": "java/modules/integration/pom.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,48", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.message;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample3 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample3.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample3() {\n", 
            "+        super(3);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testLocalEntriesReusableEndPointsSequences() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Local Registry entry definitions, reusable endpoints and sequences\");\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "+        assertTrue(\"Client did not get run successfully \", result.gotResponse());\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample3.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample3.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,56", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework.tests.message;\n", 
            "+\n", 
            "+import org.apache.axis2.AxisFault;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            "+import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "+import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "+\n", 
            "+public class Sample7 extends SynapseTestCase {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Sample7.class);\n", 
            "+    SampleClientResult result;\n", 
            "+    StockQuoteSampleClient client;\n", 
            "+\n", 
            "+    public Sample7() {\n", 
            "+        super(7);\n", 
            "+        client = getStockQuoteClient();\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testLocalRegEntriesAndSchemaValidation() {\n", 
            "+        String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "+        String trpUrl = \"http://localhost:8280\";\n", 
            "+        String expectedError = \"Invalid custom quote request\";\n", 
            "+\n", 
            "+        log.info(\"Running test: Creating SOAP fault messages and changing the direction of a message\");\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\",null);\n", 
            "+        assertFalse(\"Should not get a response\", result.gotResponse());\n", 
            "+        Exception resultEx = result.getException();\n", 
            "+        assertNotNull(\"Did not receive expected error\", resultEx);\n", 
            "+        log.info(\"Got an error as expected: \" + resultEx.getMessage());\n", 
            "+        assertTrue(\"Did not receive expected error\", resultEx instanceof AxisFault);\n", 
            "+        assertTrue(\"Did not receive expected error\", resultEx.getMessage().indexOf(expectedError)!=-1);\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample7.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample7.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,79", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+package org.apache.synapse.samples.framework;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Sample configuration constants\n", 
            "+ */\n", 
            "+public class SampleConfigConstants {\n", 
            "+\n", 
            "+    //xml tag names\n", 
            "+    public static final String TAG_SAMPLE_ID = \"sampleID\";\n", 
            "+    public static final String TAG_SAMPLE_NAME = \"sampleName\";\n", 
            "+\n", 
            "+    public static final String TAG_SYNAPSE_CONF = \"synapseConfig\";\n", 
            "+    public static final String TAG_SYNAPSE_CONF_AXIS2_REPO = \"axis2Repo\";\n", 
            "+    public static final String TAG_SYNAPSE_CONF_AXIS2_XML = \"axis2Xml\";\n", 
            "+    public static final String TAG_SYNAPSE_CONF_XML = \"synapseXml\";\n", 
            "+\n", 
            "+    public static final String TAG_BE_SERVER_CONF = \"backEndServerConfig\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_AXIS2_SERVER = \"axis2Server\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_JMS_BROKER = \"jmsBroker\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_DERBY_SERVER = \"derbyServer\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_QFIX_EXECUTOR = \"fixExecutor\";\n", 
            "+\n", 
            "+    public static final String TAG_BE_SERVER_CONF_AXIS2_REPO = \"axis2Repo\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_AXIS2_XML = \"axis2Xml\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_AXIS2_HTTP_PORT = \"httpPort\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_AXIS2_HTTPS_PORT = \"httpsPort\";\n", 
            "+\n", 
            "+    public static final String TAG_BE_SERVER_CONF_JMS_PROVIDER_URL = \"providerURL\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY = \"initialNamingFactory\";\n", 
            "+\n", 
            "+    public static final String TAG_CLIENT_CONF = \"clientConfig\";\n", 
            "+    public static final String TAG_CLIENT_CONF_REPO = \"clientRepo\";\n", 
            "+    public static final String TAG_CLIENT_CONF_AXIS2_XML = \"axis2Xml\";\n", 
            "+    public static final String TAG_CLIENT_CONF_FILENAME = \"fileName\";\n", 
            "+\n", 
            "+    public static final String TAG_ENABLE_CLUSTERING = \"enableClustering\";\n", 
            "+\n", 
            "+    //default values\n", 
            "+    public static final String DEFAULT_SYNAPSE_CONF_AXIS2_XML =\n", 
            "+            \"modules/integration/target/test_repos/synapse/conf/axis2_def.xml\";\n", 
            "+    public static final String DEFAULT_SYNAPSE_CONF_AXIS2_REPO =\n", 
            "+            \"modules/integration/target/test_repos/synapse\";\n", 
            "+\n", 
            "+    public static final String DEFAULT_BE_SERVER_CONF_AXIS2_XML =\n", 
            "+            \"modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml\";\n", 
            "+    public static final String DEFAULT_BE_SERVER_CONF_AXIS2_REPO =\n", 
            "+            \"modules/integration/target/test_repos/axis2Server\";\n", 
            "+\n", 
            "+    public static final String DEFAULT_BE_SERVER_CONF_JMS_PROVIDER_URL = \"tcp://localhost:61616\";\n", 
            "+    public static final String DEFAULT_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY =\n", 
            "+            \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\";\n", 
            "+\n", 
            "+    public static final String DEFAULT_CLIENT_CONF_REPO =\n", 
            "+            \"modules/integration/target/test_repos/axis2Client\";\n", 
            "+    public static final String DEFAULT_CLIENT_CONF_FILENAME =\n", 
            "+            \"./repository/samples/resources/asf-logo.gif\";\n", 
            "+    public static final String DEFAULT_CLIENT_CONF_AXIS2_XML =\n", 
            "+            \"modules/integration/target/test_repos/axis2Client/conf/axis2_def.xml\";\n", 
            "+\n", 
            "+\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfigConstants.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfigConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,173", 
          "lines": [
            "+/*\n", 
            "+ * Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ * or more contributor license agreements.  See the NOTICE file\n", 
            "+ * distributed with this work for additional information\n", 
            "+ * regarding copyright ownership.  The ASF licenses this file\n", 
            "+ * to you under the Apache License, Version 2.0 (the\n", 
            "+ * \"License\"); you may not use this file except in compliance\n", 
            "+ * with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ * http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ * Unless required by applicable law or agreed to in writing,\n", 
            "+ * software distributed under the License is distributed on an\n", 
            "+ *  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ * KIND, either express or implied.  See the License for the\n", 
            "+ * specific language governing permissions and limitations\n", 
            "+ * under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework;\n", 
            "+\n", 
            "+import junit.framework.TestSuite;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.tests.message.*;\n", 
            "+\n", 
            "+import java.util.ArrayList;\n", 
            "+import java.util.HashMap;\n", 
            "+\n", 
            "+/*\n", 
            "+ * This is executed by maven and handles which samples to run\n", 
            "+ */\n", 
            "+public class TestSamplesHandlerSuite extends TestSuite {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(TestSamplesHandlerSuite.class);\n", 
            "+    private static HashMap<String, Object> sampleClassRepo\n", 
            "+            = new HashMap<String, Object>();\n", 
            "+\n", 
            "+    public static TestSuite suite() {\n", 
            "+\n", 
            "+        //Adding all samples available\n", 
            "+        populateSamplesMap();\n", 
            "+\n", 
            "+        ArrayList<Class> suiteClassesList = new ArrayList<Class>();\n", 
            "+        TestSuite suite = new TestSuite();\n", 
            "+\n", 
            "+        String inputSuiteName = System.getProperty(\"suite\");\n", 
            "+        String tests = System.getProperty(\"tests\");\n", 
            "+        String suiteName = \"SamplesSuite\";\n", 
            "+\n", 
            "+        //preparing suites, if specified\n", 
            "+        if (inputSuiteName != null) {\n", 
            "+            if (inputSuiteName.equalsIgnoreCase(\"message\")) {\n", 
            "+                suiteName = \"MessageMediationSamplesSuite\";\n", 
            "+                for (int i = 0; i <= 15; i++) {\n", 
            "+                    Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));\n", 
            "+                    if (testClass != null) {\n", 
            "+                        suiteClassesList.add(testClass);\n", 
            "+                    }\n", 
            "+                }\n", 
            "+            }\n", 
            "+            if (inputSuiteName.equalsIgnoreCase(\"endpoint\")) {\n", 
            "+                suiteName = \"EndpointSamplesSuite\";\n", 
            "+                for (int i = 50; i <= 60; i++) {\n", 
            "+                    Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));\n", 
            "+                    if (testClass != null) {\n", 
            "+                        suiteClassesList.add(testClass);\n", 
            "+                    }\n", 
            "+                }\n", 
            "+            }\n", 
            "+            if (inputSuiteName.equalsIgnoreCase(\"qos\")) {\n", 
            "+                suiteName = \"QoSSamplesSuite\";\n", 
            "+                for (int i = 100; i <= 110; i++) {\n", 
            "+                    Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));\n", 
            "+                    if (testClass != null) {\n", 
            "+                        suiteClassesList.add(testClass);\n", 
            "+                    }\n", 
            "+                }\n", 
            "+            }\n", 
            "+            if (inputSuiteName.equalsIgnoreCase(\"proxy\")) {\n", 
            "+                suiteName = \"ProxySamplesSuite\";\n", 
            "+                for (int i = 150; i <= 170; i++) {\n", 
            "+                    Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));\n", 
            "+                    if (testClass != null) {\n", 
            "+                        suiteClassesList.add(testClass);\n", 
            "+                    }\n", 
            "+                }\n", 
            "+            }\n", 
            "+            if (inputSuiteName.equalsIgnoreCase(\"transport\")) {\n", 
            "+                suiteName = \"TransportSamplesSuite\";\n", 
            "+                for (int i = 250; i <= 280; i++) {\n", 
            "+                    Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));\n", 
            "+                    if (testClass != null) {\n", 
            "+                        suiteClassesList.add(testClass);\n", 
            "+                    }\n", 
            "+                }\n", 
            "+            }\n", 
            "+            if (inputSuiteName.equalsIgnoreCase(\"tasks\")) {\n", 
            "+                suiteName = \"TasksSamplesSuite\";\n", 
            "+                for (int i = 300; i <= 310; i++) {\n", 
            "+                    Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));\n", 
            "+                    if (testClass != null) {\n", 
            "+                        suiteClassesList.add(testClass);\n", 
            "+                    }\n", 
            "+                }\n", 
            "+            }\n", 
            "+            if (inputSuiteName.equalsIgnoreCase(\"advanced\")) {\n", 
            "+                suiteName = \"AdvancedSamplesSuite\";\n", 
            "+                for (int i = 350; i <= 490; i++) {\n", 
            "+                    Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));\n", 
            "+                    if (testClass != null) {\n", 
            "+                        suiteClassesList.add(testClass);\n", 
            "+                    }\n", 
            "+                }\n", 
            "+            }\n", 
            "+            if (inputSuiteName.equalsIgnoreCase(\"eventing\")) {\n", 
            "+                suiteName = \"EventingSamplesSuite\";\n", 
            "+                for (int i = 500; i <= 510; i++) {\n", 
            "+                    Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));\n", 
            "+                    if (testClass != null) {\n", 
            "+                        suiteClassesList.add(testClass);\n", 
            "+                    }\n", 
            "+                }\n", 
            "+            }\n", 
            "+        } else if (tests != null) {\n", 
            "+            String[] testArray = tests.split(\",\");\n", 
            "+            suiteName = \"SelectedSamplesSuite\";\n", 
            "+            for (String testNum : testArray) {\n", 
            "+                Class testClass = (Class) sampleClassRepo.get(testNum);\n", 
            "+                if (testClass != null) {\n", 
            "+                    suiteClassesList.add(testClass);\n", 
            "+                }\n", 
            "+            }\n", 
            "+        } else {\n", 
            "+            suiteName = \"AllSamplesSuite\";\n", 
            "+            for (int i = 0; i <= 600; i++) {\n", 
            "+                Class testClass = (Class) sampleClassRepo.get(Integer.toString(i));\n", 
            "+                if (testClass != null) {\n", 
            "+                    suiteClassesList.add(testClass);\n", 
            "+                }\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        for (Class testClass : suiteClassesList) {\n", 
            "+            suite.addTestSuite(testClass);\n", 
            "+            log.info(\"Adding Sample:\" + testClass);\n", 
            "+        }\n", 
            "+        suite.setName(suiteName);\n", 
            "+\n", 
            "+        return suite;\n", 
            "+    }\n", 
            "+\n", 
            "+    private static void populateSamplesMap() {\n", 
            "+\n", 
            "+        //Message Mediation\n", 
            "+        sampleClassRepo.put(\"0\", Sample0.class);\n", 
            "+        sampleClassRepo.put(\"1\", Sample1.class);\n", 
            "+        sampleClassRepo.put(\"2\", Sample2.class);\n", 
            "+        sampleClassRepo.put(\"3\", Sample3.class);\n", 
            "+        sampleClassRepo.put(\"4\", Sample4.class);\n", 
            "+        sampleClassRepo.put(\"5\", Sample5.class);\n", 
            "+        sampleClassRepo.put(\"6\", Sample6.class);\n", 
            "+        sampleClassRepo.put(\"7\", Sample7.class);\n", 
            "+        sampleClassRepo.put(\"8\", Sample8.class);\n", 
            "+        sampleClassRepo.put(\"9\", Sample9.class);\n", 
            "+        sampleClassRepo.put(\"10\", Sample10.class);\n", 
            "+        sampleClassRepo.put(\"11\", Sample11.class);\n", 
            "+        sampleClassRepo.put(\"12\", Sample12.class);\n", 
            "+        sampleClassRepo.put(\"13\", Sample13.class);\n", 
            "+        sampleClassRepo.put(\"15\", Sample15.class);\n", 
            "+        sampleClassRepo.put(\"16\", Sample16.class);\n", 
            "+    }\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/TestSamplesHandlerSuite.java"
    }
  ], 
  "id": "1211407"
}