{
  "when": "2013-07-14T17:30:22-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-102,14 +102,10", 
          "lines": [
            " \t\t}\n", 
            " \n", 
            " \t\tif (isServiceListBlocked(uri)) {\n", 
            "-\t\t\tresponse.setStatusCode(HttpStatus.SC_FORBIDDEN);\n", 
            "-\t\t\tsourceHandler.commitResponseHideExceptions(conn, response);\n", 
            "-            closeOutputStream(os);\n", 
            "+            sendResponseAndFinish(response, HttpStatus.SC_FORBIDDEN, conn, os, msgContext);\n", 
            " \t\t} else if (uri.equals(\"/favicon.ico\")) {\n", 
            "-\t\t\tresponse.setStatusCode(HttpStatus.SC_MOVED_PERMANENTLY);\n", 
            " \t\t\tresponse.addHeader(LOCATION, \"http://ws.apache.org/favicon.ico\");\n", 
            "-\t\t\tsourceHandler.commitResponseHideExceptions(conn, response);\n", 
            "-            closeOutputStream(os);\n", 
            "+            sendResponseAndFinish(response, HttpStatus.SC_MOVED_PERMANENTLY, conn, os, msgContext);\n", 
            " \t\t} else if (serviceName != null && parameters.containsKey(\"wsdl\")) {\n", 
            " \t\t\tgenerateWsdl(response, msgContext, conn, os, serviceName, parameters);\n", 
            " \t\t} else if (serviceName != null && parameters.containsKey(\"wsdl2\")) {\n"
          ]
        }, 
        {
          "locn": "-121,6 +117,26", 
          "lines": [
            " \t\t}\n", 
            " \t}\n", 
            " \n", 
            "+    private void sendResponseAndFinish(HttpResponse response, int status,\n", 
            "+                                       NHttpServerConnection conn, OutputStream os,\n", 
            "+                                       MessageContext msgContext) {\n", 
            "+        response.setStatusCode(status);\n", 
            "+        SourceContext.updateState(conn, ProtocolState.GET_REQUEST_COMPLETE);\n", 
            "+        sourceHandler.commitResponseHideExceptions(conn, response);\n", 
            "+        closeOutputStream(os);\n", 
            "+        msgContext.setProperty(PassThroughConstants.GET_REQUEST_HANDLED, true);\n", 
            "+    }\n", 
            "+\n", 
            "+    private void sendResponseAndFinish(HttpResponse response, byte[] data,\n", 
            "+                                       NHttpServerConnection conn, OutputStream os,\n", 
            "+                                       MessageContext msgContext) throws IOException {\n", 
            "+        SourceContext.updateState(conn, ProtocolState.GET_REQUEST_COMPLETE);\n", 
            "+        sourceHandler.commitResponseHideExceptions(conn, response);\n", 
            "+        os.write(data);\n", 
            "+        closeOutputStream(os);\n", 
            "+        msgContext.setProperty(PassThroughConstants.GET_REQUEST_HANDLED, true);\n", 
            "+    }\n", 
            "+\n", 
            " \tprivate void closeOutputStream(OutputStream os) {\n", 
            " \t\ttry {\n", 
            " \t\t\tos.flush();\n"
          ]
        }, 
        {
          "locn": "-161,12 +177,10", 
          "lines": [
            " \t\t\t\t\t// here the parameter value should be the wsdl file name\n", 
            " \t\t\t\t\tservice.printUserWSDL(baos, parameterValue);\n", 
            " \t\t\t\t}\n", 
            "-\t\t\t\tSourceContext.updateState(conn, ProtocolState.WSDL_XSD_RESPONSE_DONE);\n", 
            "-\t\t\t\tresponse.addHeader(CONTENT_TYPE, TEXT_XML);\n", 
            "-\t\t\t\tsourceHandler.commitResponseHideExceptions(conn, response);\n", 
            "-\t\t\t\tos.write(baos.toByteArray());\n", 
            "-\t\t\t\tcloseOutputStream(os);\n", 
            " \n", 
            "+                response.addHeader(CONTENT_TYPE, TEXT_XML);\n", 
            "+                sendResponseAndFinish(response, baos.toByteArray(), conn, os, msgContext);\n", 
            "+\n", 
            " \t\t\t} catch (Exception e) {\n", 
            " \t\t\t\thandleBrowserException(response, conn, os,\n", 
            " \t\t\t\t\t\t\"Error generating ?wsdl output for service : \"\n"
          ]
        }, 
        {
          "locn": "-209,11 +223,7", 
          "lines": [
            " \t\t\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n", 
            " \t\t\t\tservice.printWSDL2(baos, getIpAddress());\n", 
            " \t\t\t\tresponse.addHeader(CONTENT_TYPE, TEXT_XML);\n", 
            "-\t\t\t\tSourceContext.updateState(conn, ProtocolState.WSDL_XSD_RESPONSE_DONE);\n", 
            "-\t\t\t\tsourceHandler.commitResponseHideExceptions(conn, response);\n", 
            "-\t\t\t\tos.write(baos.toByteArray());\n", 
            "-\t\t\t\tcloseOutputStream(os);\n", 
            "-\n", 
            "+                sendResponseAndFinish(response, baos.toByteArray(), conn, os, msgContext);\n", 
            " \t\t\t} catch (Exception e) {\n", 
            " \t\t\t\thandleBrowserException(response, conn, os,\n", 
            " \t\t\t\t\t\t\"Error generating ?wsdl2 output for service : \"\n"
          ]
        }, 
        {
          "locn": "-280,7 +290,7", 
          "lines": [
            " \t *\n", 
            " \t * @param response\n", 
            " \t *            HttpResponse\n", 
            "-\t * @param messageCtx\n", 
            "+\t * @param msgContext\n", 
            " \t *            Current MessageContext\n", 
            " \t * @param conn\n", 
            " \t *            NHttpServerConnection\n"
          ]
        }, 
        {
          "locn": "-292,7 +302,7", 
          "lines": [
            " \t *            url parameters\n", 
            " \t */\n", 
            " \tprotected void generateXsd(HttpResponse response,\n", 
            "-\t\t\tMessageContext messageCtx, NHttpServerConnection conn,\n", 
            "+\t\t\tMessageContext msgContext, NHttpServerConnection conn,\n", 
            " \t\t\tOutputStream os, String serviceName,\n", 
            " \t\t\tMap<String, String> parameters) {\n", 
            " \t\tif (parameters.get(\"xsd\") == null || \"\".equals(parameters.get(\"xsd\"))) {\n"
          ]
        }, 
        {
          "locn": "-303,11 +313,7", 
          "lines": [
            " \t\t\t\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n", 
            " \t\t\t\t\tservice.printSchema(baos);\n", 
            " \t\t\t\t\tresponse.addHeader(CONTENT_TYPE, TEXT_XML);\n", 
            "-\t\t\t\t\tSourceContext.updateState(conn, ProtocolState.WSDL_XSD_RESPONSE_DONE);\n", 
            "-\t\t\t\t\tsourceHandler.commitResponseHideExceptions(conn, response);\n", 
            "-\t\t\t\t\tos.write(baos.toByteArray());\n", 
            "-\t\t\t\t\tcloseOutputStream(os);\n", 
            "-\n", 
            "+                    sendResponseAndFinish(response, baos.toByteArray(), conn, os, msgContext);\n", 
            " \t\t\t\t} catch (Exception e) {\n", 
            " \t\t\t\t\thandleBrowserException(response, conn, os,\n", 
            " \t\t\t\t\t\t\t\"Error generating ?xsd output for service : \"\n"
          ]
        }, 
        {
          "locn": "-314,8 +320,7", 
          "lines": [
            " \t\t\t\t\t\t\t\t\t+ serviceName, e);\n", 
            " \t\t\t\t}\n", 
            " \t\t\t} else {\n", 
            "-\t\t\t\tmessageCtx.setProperty(PassThroughConstants.REST_GET_DELETE_INVOKE,\n", 
            "-\t\t\t\t\t\ttrue);\n", 
            "+\t\t\t\tmsgContext.setProperty(PassThroughConstants.REST_GET_DELETE_INVOKE, true);\n", 
            " \t\t\t}\n", 
            " \n", 
            " \t\t} else {\n"
          ]
        }, 
        {
          "locn": "-347,6 +352,7", 
          "lines": [
            " \t\t\t\t\t\t\t\tresponse);\n", 
            " \t\t\t\t\t\tos.write(baos.toByteArray());\n", 
            " \t\t\t\t\t\tcloseOutputStream(os);\n", 
            "+                        msgContext.setProperty(PassThroughConstants.GET_REQUEST_HANDLED, true);\n", 
            " \t\t\t\t\t} catch (Exception e) {\n", 
            " \t\t\t\t\t\thandleBrowserException(response, conn, os,\n", 
            " \t\t\t\t\t\t\t\t\"Error generating named ?xsd output for service : \"\n"
          ]
        }, 
        {
          "locn": "-357,10 +363,10", 
          "lines": [
            " \t\t\t\t\t// no schema available by that name - send 404\n", 
            " \t\t\t\t\tresponse.setStatusCode(HttpStatus.SC_NOT_FOUND);\n", 
            " \t\t\t\t\tcloseOutputStream(os);\n", 
            "+                    msgContext.setProperty(PassThroughConstants.GET_REQUEST_HANDLED, true);\n", 
            " \t\t\t\t}\n", 
            " \t\t\t} else {\n", 
            "-\t\t\t\tmessageCtx.setProperty(PassThroughConstants.REST_GET_DELETE_INVOKE,\n", 
            "-\t\t\t\t\t\ttrue);\n", 
            "+\t\t\t\tmsgContext.setProperty(PassThroughConstants.REST_GET_DELETE_INVOKE, true);\n", 
            " \t\t\t}\n", 
            " \t\t}\n", 
            " \t}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/api/PassThroughNHttpGetProcessor.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/api/PassThroughNHttpGetProcessor.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-83,7 +83,7", 
          "lines": [
            "                     System.currentTimeMillis());\n", 
            "         \t \n", 
            "             if (!SourceContext.assertState(conn, ProtocolState.REQUEST_READY) &&\n", 
            "-                    !SourceContext.assertState(conn, ProtocolState.WSDL_XSD_RESPONSE_DONE)) {\n", 
            "+                    !SourceContext.assertState(conn, ProtocolState.GET_REQUEST_COMPLETE)) {\n", 
            "                 handleInvalidState(conn, \"Request received\");\n", 
            "                 return;\n", 
            "             }\n"
          ]
        }, 
        {
          "locn": "-192,7 +192,7", 
          "lines": [
            "             ProtocolState protocolState = SourceContext.getState(conn);\n", 
            "             \n", 
            "             //special case to handle WSDLs\n", 
            "-            if(protocolState == ProtocolState.WSDL_XSD_RESPONSE_DONE){\n", 
            "+            if(protocolState == ProtocolState.GET_REQUEST_COMPLETE){\n", 
            "             \t// we need to shut down if the shutdown flag is set\n", 
            "             \t HttpContext context = conn.getContext();\n", 
            "             \t ContentOutputBuffer outBuf = (ContentOutputBuffer) context.getAttribute(\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-35,7 +35,7", 
          "lines": [
            "     REQUEST_DONE,\n", 
            "     /** The connection is reading the response headers */\n", 
            "     RESPONSE_HEAD,\n", 
            "-    /** The connection si reading the response body */\n", 
            "+    /** The connection is reading the response body */\n", 
            "     RESPONSE_BODY,\n", 
            "     /** The response is completed */\n", 
            "     RESPONSE_DONE,\n"
          ]
        }, 
        {
          "locn": "-43,6 +43,6", 
          "lines": [
            "     CLOSING,\n", 
            "     /** The connection is closed */\n", 
            "     CLOSED,\n", 
            "-    /** WSDL response has been sent */\n", 
            "-    WSDL_XSD_RESPONSE_DONE\n", 
            "+    /** GET request has been responded to */\n", 
            "+    GET_REQUEST_COMPLETE\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ProtocolState.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ProtocolState.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-124,6 +124,6", 
          "lines": [
            " \t\n", 
            " \tpublic static final String FORCE_PASS_THROUGH_BUILDER = \"force.passthrough.builder\";\n", 
            " \t\n", 
            "-\tpublic static final String WSDL_GEN_HANDLED = \"WSDL_GEN_HANDLED\";\n", 
            "+\tpublic static final String GET_REQUEST_HANDLED = \"GET_REQUEST_HANDLED\";\n", 
            " \n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughConstants.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-184,9 +184,9", 
          "lines": [
            " \t\t} \n", 
            " \t\t\n", 
            " \t\t//need special case to handle REST\n", 
            "-\t\tboolean restHandle =false;\n", 
            "+\t\tboolean restHandle = false;\n", 
            " \t\tif (msgContext.getProperty(PassThroughConstants.REST_GET_DELETE_INVOKE) != null &&\n", 
            "-                (Boolean)msgContext.getProperty(PassThroughConstants.REST_GET_DELETE_INVOKE)){\n", 
            "+                (Boolean) msgContext.getProperty(PassThroughConstants.REST_GET_DELETE_INVOKE)){\n", 
            " \t\t\tmsgContext.setProperty(HTTPConstants.HTTP_METHOD, method);\n", 
            " \t        msgContext.setServerSide(true);\n", 
            " \t        msgContext.setDoingREST(true);\n"
          ]
        }, 
        {
          "locn": "-196,13 +196,13", 
          "lines": [
            " \t\t\trestHandle = true;\n", 
            " \t\t}\n", 
            " \t\t\n", 
            "-\t\t//if WSDL done then moved out rather than hand over to entity handle methods.\n", 
            "+\t\t// If WSDL generation is done then move out rather than hand over to\n", 
            "+\t\t// entity handle methods.\n", 
            " \t\tSourceContext info = (SourceContext) request.getConnection().getContext().\n", 
            "                 getAttribute(SourceContext.CONNECTION_INFORMATION);\n", 
            "-\t\tif (info != null &&\n", 
            "-\t\t    info.getState().equals(ProtocolState.WSDL_XSD_RESPONSE_DONE) ||\n", 
            "-\t\t    (msgContext.getProperty(PassThroughConstants.WSDL_GEN_HANDLED) != null &&\n", 
            "-                    Boolean.TRUE.equals((msgContext.getProperty(PassThroughConstants.WSDL_GEN_HANDLED))))) {\n", 
            "+        Object getHandled = msgContext.getProperty(PassThroughConstants.GET_REQUEST_HANDLED);\n", 
            "+\t\tif ((info != null && info.getState().equals(ProtocolState.GET_REQUEST_COMPLETE)) ||\n", 
            "+                Boolean.TRUE.equals(getHandled)) {\n", 
            " \t\t\treturn;\n", 
            " \t\t}\n", 
            " \t\t\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ServerWorker.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ServerWorker.java"
    }
  ], 
  "id": "1503064"
}