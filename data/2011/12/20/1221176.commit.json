{
  "when": "2011-12-20T05:02:05-05:00", 
  "message": "", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-28,22 +28,24", 
          "lines": [
            "         </section>\n", 
            "         <section name=\"Introduction\">\n", 
            "             <p>\n", 
            "-                Apache Synapse reads its configuration from a set of XML files.  This allows the\n", 
            "-                configuration to be easily hand edited, backed up from the file system, or even\n", 
            "-                included in a version control system for easier management and control (e.g. moving\n", 
            "-                a configuration from development, through QA, staging and into production). All these\n", 
            "-                XML configuration files are housed under the repository/conf/synapse-config directory.\n", 
            "+                Apache Synapse loads its configuration from a set of XML files. This enables the\n", 
            "+                user to easily hand edit the configuration, maintain backups and even include the\n", 
            "+                entire configuration in a version control system for easier management and control.\n", 
            "+                For an example one may check-in all Synapse configuration files into a version\n", 
            "+                control system such as Subversion and easily move the configuration files from\n", 
            "+                development, through QA, staging and into production.\n", 
            "             </p>\n", 
            "             <p>\n", 
            "-                Synapse also has the ability to load certain configuration elements from an external\n", 
            "-                registry. When using a registry to hold pieces of the configuration, certain items\n", 
            "-                such as endpoint definitions, sequences and local entries can be updated dynamically\n", 
            "-                while the Synapse ESB is executing.\n", 
            "+                All the configuration files related to Synapse are housed in the repository/conf/synapse-config\n", 
            "+                directory of the Synapse installation. Synapse is also capable of loading certain\n", 
            "+                configuration elements (eg: sequences, endpoints) from an external SOA registry.\n", 
            "+                When using a registry to store fragments of the configuration, some configuration\n", 
            "+                elements such as endpoints can be updated dynamically while Synapse is executing.\n", 
            "             </p>\n", 
            "             <p>\n", 
            "-                This article describes the hierarchy or XML files from which Synapse loads its\n", 
            "+                This article describes the hierarchy of XML files from which Synapse reads its\n", 
            "                 configuration. It describes the high level structure of the file set and the XML\n", 
            "-                syntax used to configure various elements in the Synapse configuration.\n", 
            "+                syntax used to configure various elements in Synapse.\n", 
            "             </p>\n", 
            "         </section>\n", 
            "         <section name=\"The Synapse Configuration\">\n"
          ]
        }, 
        {
          "locn": "-51,9 +53,9", 
          "lines": [
            "                 A typical Synapse configuration is comprised of sequences, endpoints, proxy services\n", 
            "                 and local entries. In certain advanced scenarios, Synapse configuration may also\n", 
            "                 contain scheduled tasks, event sources, messages stores and priority executors.\n", 
            "-                Synapse configuration may also include a registry adapter through which Synapse can\n", 
            "-                import various resources to the mediation engine at runtime. Following diagram\n", 
            "-                illustrates different components of the Synapse configuration and how they interact\n", 
            "+                Synapse configuration may also include a registry adapter through which the mediation\n", 
            "+                engine can import various resources to the mediation engine at runtime. Following\n", 
            "+                diagram illustrates different functional components of Synapse and how they interact\n", 
            "                 with each other.\n", 
            "             </p>\n", 
            "             <!-- Image goes here -->\n"
          ]
        }, 
        {
          "locn": "-64,17 +66,18", 
          "lines": [
            "                 available as a <a href=\"http://synapse.apache.org/ns/2010/04/configuration/synapse_config.xsd\">XML schema</a>.\n", 
            "             </p>\n", 
            "             <p>\n", 
            "-                Typically the Synapse ESB is deployed between an actual client and a back-end service\n", 
            "-                implementation to mediate the message flow. Therefore the Synapse ESB can accept a\n", 
            "-                message on behalf of the actual service, perform authentication, validation, transformation,\n", 
            "-                logging, routing and then decide the destination endpoint for the message and direct\n", 
            "-                it to an actual service. The Synapse ESB can also detect timeouts and transport failures\n", 
            "-                during communication or introduce load balancing, throttling or caching where necessary.\n", 
            "-                For fault scenarios such as authentication failures or schema validation failures, the\n", 
            "-                Synapse ESB can be configured to return a custom message or a fault to the requesting\n", 
            "-                client without forwarding the request to the actual service. All these scenarios\n", 
            "-                and usecases can be put into action by selecting the right set of functional components\n", 
            "-                and combining them appropriately in the Synapse configuration.\n", 
            "+                Typically the Synapse ESB is used to mediate the message flow between a client\n", 
            "+                and a back-end service implementation. Therefore Synapse can accept a message on\n", 
            "+                behalf of the actual service and perform a variety of mediation tasks on it such\n", 
            "+                as authentication, validation, transformation, logging and routing. Synapse can also\n", 
            "+                detect timeouts and other communication errors when connecting to back-end services.\n", 
            "+                In addition to that users can configure Synapse to perform load balancing, access\n", 
            "+                throttling and response caching. In case of a fault scenario, such as an authentication\n", 
            "+                failure or a schema validation failure, the Synapse ESB can be configured to return\n", 
            "+                a custom message or a SOAP fault to the requesting client without forwarding the\n", 
            "+                message to the back-end service. All these scenarios and use cases can be put into\n", 
            "+                action by selecting the right set of functional components of Synapse and combining\n", 
            "+                them appropriately through the Synapse configuration.\n", 
            "             </p>\n", 
            "             <p>\n", 
            "                 Depending on how functional components are used in the Synapse configuration, Synapse\n"
          ]
        }, 
        {
          "locn": "-102,12 +105,13", 
          "lines": [
            "                     access control etc, and could 'mediate' messages without the explicit knowledge\n", 
            "                     of the original client. If Synapse receives a message that is not accepted by any\n", 
            "                     proxy service, that message is handled through message mediation. Message mediation\n", 
            "-                    always processes messages according to the mediation sequence defined as 'main'.\n", 
            "+                    always processes messages according to the mediation sequence defined with\n", 
            "+                    the name 'main'.\n", 
            "                 </p>\n", 
            "             </subsection>\n", 
            "             <subsection name=\"Task Scheduling\">\n", 
            "                 <p>\n", 
            "-                    In task scheduling, Synapse can execute a predefined task based on a user\n", 
            "+                    In task scheduling, Synapse can execute a predefined task (job) based on a user\n", 
            "                     specified schedule. This way a task can be configured to run exactly once or\n", 
            "                     multiple times with fixed intervals. The schedule can be defined by specifying\n", 
            "                     the number of times the task should be executed and the interval between\n"
          ]
        }, 
        {
          "locn": "-121,7 +125,7", 
          "lines": [
            "                     In eventing mode, Synapse can be used as an event source and users or systems can\n", 
            "                     subscribe to receive events from Synapse. Synapse can also act as an event broker\n", 
            "                     which receives events from other systems and delivers them to the appropriate\n", 
            "-                    subscribers with or without mediation. The set of subsribers will be selected\n", 
            "+                    subscribers with or without mediation. The set of subscribers will be selected\n", 
            "                     by applying a predefined filter criteria. This mode enables Synapse to integrate\n", 
            "                     applications and systems based on the Event Driven Architecture (EDA).\n", 
            "                 </p>\n"
          ]
        }, 
        {
          "locn": "-129,27 +133,65", 
          "lines": [
            "         </section>\n", 
            "         <section name=\"Functional Components Overview\">\n", 
            "             <p>\n", 
            "-                We have already skimmed through some of the functional components available in\n", 
            "-                Synapse configuration. This section provides detailed information about each of\n", 
            "-                functional component types.\n", 
            "+                As described in the previous section, Synapse engine is comprised of a range of\n", 
            "+                functional components. Synapse configuration language is used to define, configure\n", 
            "+                and combine these components so various messaging scenarios and integration\n", 
            "+                patterns can be realized. Before diving into the specifics of the configuration\n", 
            "+                language, it is useful to have a thorough understanding of all the functional\n", 
            "+                components available, their capabilities and features. A good knowledge on Synapse\n", 
            "+                functional components will help you determine which components should be used to\n", 
            "+                implement any given scenario or use case. In turns it will allow you to develop\n", 
            "+                powerful and efficient Synapse configurations thus putting the ESB to maximum use.\n", 
            "             </p>\n", 
            "+            <p>\n", 
            "+                As of now Synapse mediation engine consists of following functional elements:\n", 
            "+            </p>\n", 
            "+            <p>\n", 
            "+                <ul>\n", 
            "+                    <li>Mediators and sequences</li>\n", 
            "+                    <li>Endpoints</li>\n", 
            "+                    <li>Proxy services</li>\n", 
            "+                    <li>Scheduled tasks</li>\n", 
            "+                    <li>Event sources</li>\n", 
            "+                    <li>Sequence templates</li>\n", 
            "+                    <li>Endpoint templates</li>\n", 
            "+                    <li>Registry adapter</li>\n", 
            "+                    <li>APIs</li>\n", 
            "+                    <li>Priority executors</li>\n", 
            "+                    <li>Message stores and processors</li>\n", 
            "+                </ul>\n", 
            "+            </p>\n", 
            "             <subsection name=\"Mediators and Sequences\">\n", 
            "                 <p>\n", 
            "                     The Synapse ESB defines a 'mediator' as a component which performs a predefined\n", 
            "-                    action on a message during the message flow. Thus a mediator gets full access to\n", 
            "-                    a message at the point where it is defined to gain control, and could inspect the\n", 
            "-                    message, modify it or take an external action depending on some attributes or\n", 
            "-                    values of the current message. Writing a custom mediator in Java is easy\n", 
            "-                    and the supplementary documentation provides more details on this. The 'Class' and\n", 
            "-                    'POJO (command)' mediators allow one to plugin a Java class into the Synapse\n", 
            "-                    engine with minimal effort. In addition, the Script mediator allows one to provide\n", 
            "-                    an Apache BSF script (e.g. Javascript, Ruby, Groovy etc) for mediation.\n", 
            "+                    action on a message during a message flow. It is the most fundamental message\n", 
            "+                    processing unit in Synapse. A mediator can be thought of as a filter that resides\n", 
            "+                    in a message flow, which processes all the messages passing through it.\n", 
            "                 </p>\n", 
            "                 <p>\n", 
            "+                    A mediator gets full access to the messages at the point where it is defined.\n", 
            "+                    Thus they can inspect, validate and modify messages. Further, mediators can take\n", 
            "+                    external action such as looking up a database or invoking a remote service,\n", 
            "+                    depending on some attributes or values in the current message. Synapse ships\n", 
            "+                    with a variety of built-in mediators which are capable of handling an array of\n", 
            "+                    heterogeneous tasks. There are built-in mediators that can log the requests,\n", 
            "+                    perform content transformations, filter out traffic and a plethora of other\n", 
            "+                    messaging and integration activities.\n", 
            "+                </p>\n", 
            "+                <p>\n", 
            "+                    Synapse also provides an API using which custom mediators can be implemented\n", 
            "+                    easily in Java. The 'Class' and 'POJO (command)' mediators allow one to plugin a\n", 
            "+                    Java class into Synapse with minimal effort. In addition, the 'Script' mediator\n", 
            "+                    allows one to provide an Apache BSF script (eg: JavaScript, Ruby, Groovy etc)\n", 
            "+                    for mediation.\n", 
            "+                </p>\n", 
            "+                <p>\n", 
            "                     A mediation sequence, commonly called a 'sequence' is a list of mediators. A\n", 
            "                     sequence may be named for re-use, or defined in-line or anonymously within a\n", 
            "-                    configuration. Sequences may be defined within the Synapse configuration or within\n", 
            "-                    the Registry.\n", 
            "+                    configuration. Sequences may be defined within the Synapse configuration or in\n", 
            "+                    the Registry. From an ESB point of view, a sequence equates to a message flow.\n", 
            "+                    It can be thought of as a pipe consisting of many filters, where individual\n", 
            "+                    mediators play the role of the filters.\n", 
            "                 </p>\n", 
            "                 <p>\n", 
            "                     A Synapse configuration contains two special sequences named 'main' and 'fault'.\n"
          ]
        }, 
        {
          "locn": "-174,224 +216,87", 
          "lines": [
            "                     Load-balance endpoints - which are defined over a group of endpoints. Endpoints\n", 
            "                     may be defined within the local Synapse configuration or within the Registry.\n", 
            "                 </p>\n", 
            "+                <p>\n", 
            "+                    From a more practical stand point, an endpoint can be used to represent any\n", 
            "+                    entity to which Synapse can make a connection. An endpoint may represent a\n", 
            "+                    URL, a mail box, a JMS queue or a TCP socket. The 'send' mediator of Synapse\n", 
            "+                    which is used to forward messages can take an endpoint as an argument. In that\n", 
            "+                    case the 'send' mediator would forward the message to the specified endpoint.\n", 
            "+                </p>\n", 
            "             </subsection>\n", 
            "-            <subsection name=\"Tasks\">\n", 
            "+            <subsection name=\"Proxy Services\">\n", 
            "                 <p>\n", 
            "-                    A task is a custom Java class that implements the org.apache.synapse.task.Task\n", 
            "-                    interface which contains a single \"public void execute()\" method. Such a task can\n", 
            "-                    be scheduled and managed via the Synapse ESB. The scheduling information for a\n", 
            "-                    task can be specified in the cron format or a simple format by the user. A task\n", 
            "-                    may also be specified as a one-time task where required, and can be used to trigger\n", 
            "-                    a callout or inject a message into the Synapse ESB.\n", 
            "+                    A proxy service is a virtual service exposed on Synapse. For the external\n", 
            "+                    clients, a proxy service looks like a full fledged web service which has a\n", 
            "+                    set of endpoint references (EPRs), a WSDL and a set of developer specified\n", 
            "+                    policies. But in reality, a proxy service sits in front of a real web service\n", 
            "+                    implementation, acting as a proxy, mediating messages back and forth. The\n", 
            "+                    actual business logic of the service resides in the real back-end web service.\n", 
            "+                    Proxy service simply hides the real service from the consumer and provides\n", 
            "+                    an interface through which the actual service can be reached but with some\n", 
            "+                    added mediation/routing logic.\n", 
            "                 </p>\n", 
            "+                <p>\n", 
            "+                    Proxy services have many use cases. A proxy can be used to expose an existing\n", 
            "+                    service over a different protocol or a schema. The mediation logic in the proxy\n", 
            "+                    can take care of performing the necessary content transformations and protocol\n", 
            "+                    switching. A proxy service can act as a load balancer or a lightweight process\n", 
            "+                    manager thereby hiding multiple back-end services from the client. Proxy services\n", 
            "+                    also provide a convenient way of extending existing web services without changing\n", 
            "+                    the back-end service implementations. For an example a proxy service can add logging\n", 
            "+                    and validation capabilities to an existing service without the developer having\n", 
            "+                    to implement such functionality at service level. Another very common usage of\n", 
            "+                    proxy services is to secure an existing service or a legacy system.\n", 
            "+                </p>\n", 
            "+                <p>\n", 
            "+                    A proxy service is a composite functional component. It is made of several\n", 
            "+                    sequences and endpoints. Typically a proxy service consists of an 'in sequence',\n", 
            "+                    an 'out sequence' and an endpoint. The 'in sequence' handles all the incoming\n", 
            "+                    requests sent by the client. Mediated messages are then forwarded to the target\n", 
            "+                    endpoint which generally points to the real back-end service. Responses coming\n", 
            "+                    back from the back-end service are processed by the 'out sequence'. In addition\n", 
            "+                    to these a 'fault sequence' can also be associated with a proxy service which\n", 
            "+                    is invoked in case of an error.\n", 
            "+                </p>\n", 
            "+                <p>\n", 
            "+                    In addition to the above basic configuration elements, a proxy service can\n", 
            "+                    also define a WSDL file to be published, a set of policies and various other\n", 
            "+                    parameters.\n", 
            "+                </p>\n", 
            "             </subsection>\n", 
            "+            <subsection name=\"Scheduled Tasks\">\n", 
            "+                <p>\n", 
            "+                    A scheduled task is a job deployed in the Synapse runtime for periodic execution.\n", 
            "+                    Users can program the jobs using the task API (Java) provided by Synapse. Once\n", 
            "+                    deployed, tasks can be configured to run periodically. The execution schedule\n", 
            "+                    can be configured by specifying the delay between successive executions or using\n", 
            "+                    the Unix Cron syntax.\n", 
            "+                </p>\n", 
            "+            </subsection>\n", 
            "             <subsection name=\"Remote Registry and Local Registry (Local Entries)\">\n", 
            "                 <p>\n", 
            "                     Synapse configuration can refer to an external registry/repository for resources\n", 
            "-                    used such as WSDL, schemas, scripts, XSLT and XQuery transformations etc. One or\n", 
            "+                    such as WSDLs, schemas, scripts, XSLT and XQuery transformations etc. One or\n", 
            "                     more remote registries may be hidden or merged behind a local registry interface\n", 
            "                     defined in the Synapse configuration. Resources from an external registry are\n", 
            "                     looked up using 'keys' - which are known to the external registry. The Synapse\n", 
            "                     ESB ships with a simple URL based registry implementation that uses the file system\n", 
            "-                    for storage of resources, and URL's or fragments as 'keys'.\n", 
            "+                    for storage of resources, and URLs or fragments as 'keys'.\n", 
            "                 </p>\n", 
            "                 <p>\n", 
            "                     A registry may define a duration for which a resource served may be cached by the\n", 
            "                     Synapse runtime. If such a duration is specified, the Synapse ESB is capable of\n", 
            "-                    refreshing the resource after cache expiry to support dynamic re-loading of resource\n", 
            "+                    refreshing the resource after cache expiry to support dynamic re-loading of resources\n", 
            "                     at runtime. Optionally, a configuration could define certain 'keys' to map to locally\n", 
            "                     defined entities. These entities may refer to a source URL or file, or may be defined\n", 
            "                     as in-line XML or text within the configuration itself. If a registry contains a\n", 
            "                     resource whose 'key' matches the key of a locally defined entry, the local entry\n", 
            "                     shadows the resource available in the registry. Thus it is possible to override\n", 
            "-                    registry resources locally from within a configuration. To integrate Synapse with\n", 
            "+                    registry resources locally from within the configuration. To integrate Synapse with\n", 
            "                     a custom/new registry, one needs to implement the org.apache.synapse.registry.Registry\n", 
            "                     interface to suit the actual registry being used.\n", 
            "                 </p>\n", 
            "             </subsection>\n", 
            "-            <subsection name=\"Event Sources\">\n", 
            "-\n", 
            "-            </subsection>\n", 
            "-            <subsection name=\"Priority Executors\">\n", 
            "-\n", 
            "-            </subsection>\n", 
            "-            <subsection name=\"Message Stores\">\n", 
            "-                \n", 
            "-            </subsection>\n", 
            "         </section>\n", 
            "-        <section name=\"Synapse Configuration Files\">\n", 
            "-            <p>\n", 
            "-                All the XML files pertaining to Synapse configuration are available in the\n", 
            "-                repository/conf/synapse-config directory of the Synapse installation. This file\n", 
            "-                heirarchy consists of two files named synapse.xml and registry.xml. In addition to\n", 
            "-                that, following subdirectories can be found in the synapse-config directory.\n", 
            "-            </p>\n", 
            "-            <ul>\n", 
            "-                <li>endpoints</li>\n", 
            "-                <li>events</li>\n", 
            "-                <li>local-entries</li>\n", 
            "-                <li>proxy-services</li>\n", 
            "-                <li>sequences</li>\n", 
            "-                <li>tasks</li>\n", 
            "-            </ul>\n", 
            "-            <p>\n", 
            "-                Each of these subdirectories can contain zero or more configuration items. For\n", 
            "-                an example the 'endpoints' directory may contain zero or more endpoint definitions\n", 
            "-                and the 'sequences' directory may contain zero or more sequence definitions. The\n", 
            "-                registry adapter is defined in the top level registry.xml file. The synapse.xml file\n", 
            "-                is there mainly for backward compatibility reasons. It can be used to define any\n", 
            "-                type of configuration items. One may define few endpoints in the 'endpoints' directory\n", 
            "-                and a few endpoints in the synapse.xml file. However it is recommended to stick to\n", 
            "-                a single, consistent way of defining configuration elements.\n", 
            "-            </p>\n", 
            "-            <p>\n", 
            "-                The following tree diagram shows the high-level view of the resulting file\n", 
            "-                heirarchy.\n", 
            "-            </p>\n", 
            "-            <div class=\"consoleOutput\">synapse-config\n", 
            "-            |-- endpoints\n", 
            "-            |   `-- foo.xml\n", 
            "-            |-- events\n", 
            "-            |   `-- event1.xml\n", 
            "-            |-- local-entries\n", 
            "-            |   `-- bar.xml\n", 
            "-            |-- proxy-services\n", 
            "-            |   |-- proxy1.xml\n", 
            "-            |   |-- proxy2.xml\n", 
            "-            |   `-- proxy3.xml\n", 
            "-            |-- registry.xml\n", 
            "-            |-- sequences\n", 
            "-            |   |-- custom-logger.xml\n", 
            "-            |   |-- fault.xml\n", 
            "-            |   `-- main.xml\n", 
            "-            |-- synapse.xml\n", 
            "-            `-- tasks\n", 
            "-                `-- task1.xml</div>\n", 
            "-        </section>\n", 
            "-        <section name=\"Contents of the synapse.xml File\">\n", 
            "-            <p>\n", 
            "-                As stated earlier, the synapse.xml file can be used to define all kinds of artifacts.\n", 
            "-                All these different configuration items should be wrapped in a top level\n", 
            "-                'definitions' element. A configuration defined in the synapse.xml file looks like\n", 
            "-                this at the high level.\n", 
            "-            </p>\n", 
            "-            <div class=\"xmlConf\">&lt;definitions&gt;\n", 
            "-   &lt;<a href=\"#registry\">registry</a> provider=\"string\"&gt;...&lt;/registry&gt;?\n", 
            "-   &lt;<a href=\"#localEntry\">localEntry</a> key=\"string\"&gt;...&lt;/localEntry&gt;?\n", 
            "-   &lt;<a href=\"#sequence\">sequence</a> name=\"string\"&gt;...&lt;/sequence&gt;?\n", 
            "-   &lt;<a href=\"#endpoint\">endpoint</a> name=\"string\"&gt;...&lt;/endpoint&gt;?\n", 
            "-   &lt;<a href=\"#proxy\">proxy</a> name=\"string\" ...&gt;...&lt;/proxy&gt;?\n", 
            "-   &lt;<a href=\"#task\">task</a> name=\"string\" ...&gt;...&lt;/task&gt;?\n", 
            "-   &lt;<a href=\"#eventsource\">eventSource</a> name=\"string\" ...&gt;...&lt;/eventSource&gt;?\n", 
            "-   &lt;<a href=\"#executor\">executor</a> name=\"string\" ...&gt;...&lt;/executor&gt;?\n", 
            "-   &lt;<a href=\"#store\">messageStore</a> name=\"string\" ...&gt;...&lt;/messageStore&gt;?\n", 
            "- &lt;/definitions&gt;</div>\n", 
            "-            <p>\n", 
            "-                The registry adapter definition is defined under the &lt;registry&gt; element. Similarly\n", 
            "-                &lt;endpoint&gt;, &lt;sequence&gt;, &lt;proxy&gt;, &lt;localEntry&gt;, &lt;eventSource\n", 
            "-                and &lt;executor&gt; elements are used to define other functional components.\n", 
            "-            </p>\n", 
            "-            <p>\n", 
            "-                As pointed out earlier, the synapse.xml file is there in the synapse-config directory\n", 
            "-                for backwards compatibility reasons. Any artifact defined in this file can be\n", 
            "-                defined separately in its own XML file. The registry can be defined in the registry.xml\n", 
            "-                and other artifacts can be defined in the corresponding subdirectories of the synapse-config\n", 
            "-                directory. However the XML syntax used to configure these artifacts are always the same.\n", 
            "-                Next few sections of this document explains the XML syntax for defining various\n", 
            "-                types of components in the Synapse configuration.\n", 
            "-            </p>\n", 
            "-        </section>\n", 
            "-        <section name=\"Registry\" id=\"registry\">\n", 
            "-            <p>\n", 
            "-                The &lt;registry&gt; element is used to define the remote registry used by the\n", 
            "-                Synapse runtime. The registry provider specifies an implementation class for the\n", 
            "-                registry being used, and optionally a number of configuration parameters as may be\n", 
            "-                required by the particular registry implementation. An outline configuration is given\n", 
            "-                below.\n", 
            "-            </p>\n", 
            "-            <div class=\"xmlConf\">&lt;registry provider=\"string\"/&gt;\n", 
            "-    &lt;parameter name=\"string\"&gt;text | xml&lt;/parameter&gt;*\n", 
            "-&lt;/registry&gt;</div>\n", 
            "-            <p>\n", 
            "-                Registry entries loaded from a remote registry may be cached as governed by the\n", 
            "-                registry, and reloaded after the cache periods expires if a newer version is found.\n", 
            "-                Hence it is possible to define configuration elements such as (dynamic) sequences and\n", 
            "-                endpoints, as well as resources such as XSLT's, scripts or XSDs in the registry, and\n", 
            "-                update the configuration as these are allowed to dynamically change over time.\n", 
            "-            </p>\n", 
            "-            <p>\n", 
            "-                Synapse ships with a built-in URL based registry implementation called the\n", 
            "-                'SimpleURLRegistry' and this can be configured as follows:\n", 
            "-            </p>\n", 
            "-            <div class=\"xmlConf\">&lt;registry provider=\"org.apache.synapse.registry.url.SimpleURLRegistry\"&gt;\n", 
            "-  &lt;parameter name=\"root\"&gt;file:./repository/conf/sample/resources/&lt;/parameter&gt;\n", 
            "-  &lt;parameter name=\"cachableDuration\"&gt;15000&lt;/parameter&gt;\n", 
            "-&lt;/registry&gt;</div>\n", 
            "-            <p>\n", 
            "-                The 'root' parameter specifies the root URL of the registry for loaded resources. The\n", 
            "-                SimpleURLRegistry keys are path fragments, that when combined with the root prefix\n", 
            "-                would form the full URL for the referenced resource. The 'cachableDuration' parameter\n", 
            "-                specifies the number of milliseconds for which resources loaded from the registry\n", 
            "-                should be cached. More advanced registry implementations allows different cachable\n", 
            "-                durations to be specified for different resources, or mark some resources as never\n", 
            "-                expires. (e.g. Check the WSO2 ESB implementation based on Apache Synapse)\n", 
            "-            </p>\n", 
            "-        </section>\n", 
            "-        <section name=\"Local Registry (Local Entries)\" id=\"localEntry\">\n", 
            "-            <p>\n", 
            "-                The &lt;localEntry&gt; element is used to declare registry entries that are local to\n", 
            "-                the Synapse instance, as shown below.\n", 
            "-            </p>\n", 
            "-            <div class=\"xmlConf\">&lt;localEntry key=\"string\" [src=\"url\"]&gt;text | xml&lt;/localEntry&gt;</div>\n", 
            "-            <p>\n", 
            "-                These entries are top level entries which are globally visible within the entire\n", 
            "-                system. Values of these entries can be retrieved via the extension XPath function\n", 
            "-                'synapse:get-property(prop-name)' and the keys of these entries could be specified\n", 
            "-                wherever a registry key is expected within the configuration.\n", 
            "-            </p>\n", 
            "-            <p>\n", 
            "-                An entry can contain static text or static XML specified inline. A local entry may\n", 
            "-                also load its content from a URL (using the 'src' attribute). A local entry shadows\n", 
            "-                any entry with the same name from a remote registry.\n", 
            "-            </p>\n", 
            "-            <div class=\"xmlConf\">&lt;localEntry key=\"version\"&gt;0.1&lt;/localEntry&gt;\n", 
            "-\n", 
            "-&lt;localEntry key=\"validate_schema\"&gt;\n", 
            "-    &lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n", 
            "-     ...\n", 
            "-    &lt;/xs:schema&gt;\n", 
            "-&lt;/localEntry&gt;\n", 
            "-\n", 
            "-&lt;localEntry key=\"xslt-key-req\" src=\"file:repository/conf/sample/resources/transform/transform.xslt\"/&gt;</div>\n", 
            "-        </section>\n", 
            "-        <section name=\"Sequences\" id=\"sequence\">\n", 
            "-            <p>\n", 
            "-                A &lt;sequence&gt; element is used to define a sequence of mediators that can be\n", 
            "-                invoked later by name. The sequences named 'main' and 'fault' has special significance\n", 
            "-                in a Synapse configuration. The 'main' sequence handles any message that is accepted\n", 
            "-                for message mediation, and the 'fault' sequence is invoked if Synapse encounters a fault,\n", 
            "-                and a custom fault handler is not specified for the sequence via its 'onError' attribute.\n", 
            "-            </p>\n", 
            "-            <p>\n", 
            "-                A dynamic sequence may be defined by specifying a key reference to a registry entry.\n", 
            "-                As the remote registry entry changes, the sequence will dynamically be updated according\n", 
            "-                to the specified cache duration and expiration. If tracing is enabled on a sequence,\n", 
            "-                all messages being processed through the sequence would write tracing information\n", 
            "-                through  each mediation step to the trace.log file configured via the log4j.properties\n", 
            "-                configuration. Setting the trace log level to TRACE would additionally dump the message\n", 
            "-                and detailed trace information at each mediation step. A tracing enabled sequence\n", 
            "-                propagates this setting to invoked sub-sequences.\n", 
            "-            </p>\n", 
            "-            <div class=\"xmlConf\">&lt;sequence name=\"main\" onError=\"errorHandler\"&gt;\n", 
            "-  .. &lt;!-- a 'main' sequence that invokes the sequence named 'errorHandler' on a fault --&gt; ..\n", 
            "-&lt;/sequence&gt;</div>\n", 
            "-            <div class=\"xmlConf\">&lt;sequence key=\"sequence/dynamic_seq_1.xml\"/&gt;\n", 
            "-where \"sequence/dynamic_seq_1.xml\" refers to the following sequence definition from the registry:\n", 
            "-\n", 
            "-&lt;sequence name=\"dynamic_sequence\" xmlns=\"http://synapse.apache.org/ns/2010/04/configuraiton\"&gt;\n", 
            "-  ..\n", 
            "-&lt;/sequence&gt;</div>\n", 
            "-            \n", 
            "-        </section>\n", 
            "     </body>\n", 
            " </document>\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "scratch/hiranya/website/src/site/xdoc/userguide/config.xml", 
      "from": "scratch/hiranya/website/src/site/xdoc/userguide/config.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,8 +25,8", 
          "lines": [
            "     <body>\n", 
            "         <section name=\"Apache Synapse Samples Catalog\">\n", 
            "             <p>\n", 
            "-                Apache Synapse comes prelaoded with a horde of sample configurations that\n", 
            "-                demonstrates various features of the service bus. This catalog lists out all\n", 
            "+                Apache Synapse comes preloaded with a horde of sample configurations that\n", 
            "+                demonstrate various features of the service bus. This catalog lists out all\n", 
            "                 these sample configurations and provides detailed information on how to run\n", 
            "                 them. These samples require an Apache ANT installation for you to be able to\n", 
            "                 try them out. If you are new to Synapse and have no experience running Synapse,\n"
          ]
        }
      ], 
      "to": "scratch/hiranya/website/src/site/xdoc/userguide/samples.xml", 
      "from": "scratch/hiranya/website/src/site/xdoc/userguide/samples.xml"
    }
  ], 
  "id": "1221176"
}