{
  "when": "2013-07-22T16:59:03-04:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-1,33 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-package org.apache.synapse.samples.framework;\n", 
            "-\n", 
            "-/**\n", 
            "- * Specifies the operations associated with controlling\n", 
            "- * backend server - starting up and shutting down.\n", 
            "- */\n", 
            "-public interface BackEndServerController {\n", 
            "-\n", 
            "-    public String getServerName();\n", 
            "-\n", 
            "-    public boolean start();\n", 
            "-\n", 
            "-    public boolean stop();\n", 
            "-\n", 
            "-}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/BackEndServerController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/BackEndServerController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,76 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.samples.framework;\n", 
            "-\n", 
            "-import org.apache.activemq.broker.BrokerService;\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.synapse.samples.framework.config.JMSBrokerConfiguration;\n", 
            "-\n", 
            "-/**\n", 
            "- * Responsible for starting up and shutting down\n", 
            "- * a JMS broker instance in order to run a sample test.\n", 
            "- */\n", 
            "-public class JMSBrokerController implements BackEndServerController {\n", 
            "-\n", 
            "-    private static final Log log = LogFactory.getLog(JMSBrokerController.class);\n", 
            "-\n", 
            "-    private String serverName;\n", 
            "-    private JMSBrokerConfiguration configuration;\n", 
            "-    private BrokerService broker;\n", 
            "-\n", 
            "-    public JMSBrokerController(String serverName, JMSBrokerConfiguration configuration) {\n", 
            "-        this.serverName = serverName;\n", 
            "-        this.configuration = configuration;\n", 
            "-    }\n", 
            "-\n", 
            "-    public String getServerName() {\n", 
            "-        return serverName;\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean start() {\n", 
            "-        try {\n", 
            "-            log.info(\"JMSServerController: Preparing to start JMS Broker: \" + serverName);\n", 
            "-            //using embedded jms broker\n", 
            "-            broker = new BrokerService();\n", 
            "-            // configure the broker\n", 
            "-            broker.setBrokerName(\"synapseSampleBroker\");\n", 
            "-            broker.addConnector(configuration.getProviderURL());\n", 
            "-            broker.start();\n", 
            "-            log.info(\"JMSServerController: Broker is Successfully started. continuing tests\");\n", 
            "-            return true;\n", 
            "-        } catch (Exception e) {\n", 
            "-            log.error(\"JMSServerController: There was an error starting JMS broker: \" +\n", 
            "-                    serverName, e);\n", 
            "-            return false;\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean stop() {\n", 
            "-        try {\n", 
            "-            broker.stop();\n", 
            "-            return true;\n", 
            "-        } catch (Exception e) {\n", 
            "-            log.error(\"Error while shutting down the broker\", e);\n", 
            "-            return false;\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/JMSBrokerController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/JMSBrokerController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,80 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-package org.apache.synapse.samples.framework;\n", 
            "-\n", 
            "-/**\n", 
            "- * Sample configuration constants\n", 
            "- */\n", 
            "-public class SampleConfigConstants {\n", 
            "-\n", 
            "-    //xml tag names\n", 
            "-    public static final String TAG_SAMPLE_ID = \"sampleID\";\n", 
            "-    public static final String TAG_SAMPLE_NAME = \"sampleName\";\n", 
            "-\n", 
            "-    public static final String TAG_SYNAPSE_CONF = \"synapseConfig\";\n", 
            "-    public static final String TAG_SYNAPSE_CONF_AXIS2_REPO = \"axis2Repo\";\n", 
            "-    public static final String TAG_SYNAPSE_CONF_AXIS2_XML = \"axis2Xml\";\n", 
            "-    public static final String TAG_SYNAPSE_CONF_XML = \"synapseXml\";\n", 
            "-\n", 
            "-    public static final String TAG_BE_SERVER_CONF = \"backEndServerConfig\";\n", 
            "-    public static final String TAG_BE_SERVER_CONF_AXIS2_SERVER = \"axis2Server\";\n", 
            "-    public static final String TAG_BE_SERVER_CONF_JMS_BROKER = \"jmsBroker\";\n", 
            "-    public static final String TAG_BE_SERVER_CONF_DERBY_SERVER = \"derbyServer\";\n", 
            "-    public static final String TAG_BE_SERVER_CONF_QFIX_EXECUTOR = \"fixExecutor\";\n", 
            "-\n", 
            "-    public static final String TAG_BE_SERVER_CONF_AXIS2_REPO = \"axis2Repo\";\n", 
            "-    public static final String TAG_BE_SERVER_CONF_AXIS2_XML = \"axis2Xml\";\n", 
            "-    public static final String TAG_BE_SERVER_CONF_AXIS2_HTTP_PORT = \"httpPort\";\n", 
            "-    public static final String TAG_BE_SERVER_CONF_AXIS2_HTTPS_PORT = \"httpsPort\";\n", 
            "-    public static final String TAG_BE_SERVER_CONF_AXIS2_COUNTER_ENABLED = \"counterEnabled\";\n", 
            "-\n", 
            "-    public static final String TAG_BE_SERVER_CONF_JMS_PROVIDER_URL = \"providerURL\";\n", 
            "-    public static final String TAG_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY = \"initialNamingFactory\";\n", 
            "-\n", 
            "-    public static final String TAG_CLIENT_CONF = \"clientConfig\";\n", 
            "-    public static final String TAG_CLIENT_CONF_REPO = \"clientRepo\";\n", 
            "-    public static final String TAG_CLIENT_CONF_AXIS2_XML = \"axis2Xml\";\n", 
            "-    public static final String TAG_CLIENT_CONF_FILENAME = \"fileName\";\n", 
            "-\n", 
            "-    public static final String TAG_ENABLE_CLUSTERING = \"enableClustering\";\n", 
            "-\n", 
            "-    //default values\n", 
            "-    public static final String DEFAULT_SYNAPSE_CONF_AXIS2_XML =\n", 
            "-            \"modules/integration/target/test_repos/synapse/conf/axis2_def.xml\";\n", 
            "-    public static final String DEFAULT_SYNAPSE_CONF_AXIS2_REPO =\n", 
            "-            \"modules/integration/target/test_repos/synapse\";\n", 
            "-\n", 
            "-    public static final String DEFAULT_BE_SERVER_CONF_AXIS2_XML =\n", 
            "-            \"modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml\";\n", 
            "-    public static final String DEFAULT_BE_SERVER_CONF_AXIS2_REPO =\n", 
            "-            \"modules/integration/target/test_repos/axis2Server\";\n", 
            "-\n", 
            "-    public static final String DEFAULT_BE_SERVER_CONF_JMS_PROVIDER_URL = \"tcp://localhost:61616\";\n", 
            "-    public static final String DEFAULT_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY =\n", 
            "-            \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\";\n", 
            "-\n", 
            "-    public static final String DEFAULT_CLIENT_CONF_REPO =\n", 
            "-            \"modules/integration/target/test_repos/axis2Client\";\n", 
            "-    public static final String DEFAULT_CLIENT_CONF_FILENAME =\n", 
            "-            \"./repository/samples/resources/asf-logo.gif\";\n", 
            "-    public static final String DEFAULT_CLIENT_CONF_AXIS2_XML =\n", 
            "-            \"modules/integration/target/test_repos/axis2Client/conf/axis2_def.xml\";\n", 
            "-\n", 
            "-\n", 
            "-}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfigConstants.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SampleConfigConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,11 +26,9", 
          "lines": [
            " public class Sample362 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample362() {\n", 
            "         super(362);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-37,7 +35,7", 
          "lines": [
            "     public void testDbLookupReport() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "-\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         log.info(\"Running test: Action of dbreport and dblookup mediators together\");\n", 
            " \n", 
            "         result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample362.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample362.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,11 +26,9", 
          "lines": [
            " public class Sample452 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample452() {\n", 
            "         super(452);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-39,6 +37,7", 
          "lines": [
            " \n", 
            "         String addUrl = \"https://localhost/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\", null);\n", 
            "         assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample452.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample452.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,16 +26,15", 
          "lines": [
            " public class Sample354 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample354() {\n", 
            "         super(354);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testScriptMediationWithInLineRuby() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Using In-lined Ruby scripts for mediation\");\n", 
            "         result = client.requestCustomQuote(addUrl, trpUrl, null, \"IBM\");\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample354.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample354.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-28,11 +28,8", 
          "lines": [
            " \n", 
            " public class Sample51 extends SynapseTestCase {\n", 
            " \n", 
            "-    private MTOMSwASampleClient client;\n", 
            "-\n", 
            "     public Sample51() {\n", 
            "         super(51);\n", 
            "-        client = getMTOMSwASampleClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testMTOMOptimization() {\n"
          ]
        }, 
        {
          "locn": "-40,18 +37,18", 
          "lines": [
            "         String currentLocation = System.getProperty(\"user.dir\") + File.separator;\n", 
            "         String filename = FilenameUtils.normalize(\n", 
            "                 currentLocation + \"repository/conf/sample/resources/mtom/asf-logo.gif\");\n", 
            "+        MTOMSwASampleClient client = getMTOMSwASampleClient();\n", 
            "         log.info(\"Running test: MTOM optimization and request/response correlation \");\n", 
            "         SampleClientResult result = client.sendUsingMTOM(filename, ep);\n", 
            "         assertResponseReceived(result);\n", 
            "     }\n", 
            " \n", 
            "-\n", 
            "     public void testSWAOptimization() {\n", 
            "         String ep = \"http://localhost:8280/services/MTOMSwASampleService\";\n", 
            "         String currentLocation = System.getProperty(\"user.dir\") + File.separator;\n", 
            "         String filename = FilenameUtils.normalize(\n", 
            "                 currentLocation + \"repository/conf/sample/resources/mtom/asf-logo.gif\");\n", 
            "-\n", 
            "+        MTOMSwASampleClient client = getMTOMSwASampleClient();\n", 
            "         log.info(\"Running test:SwA optimization and request/response correlation \");\n", 
            "         SampleClientResult result = client.sendUsingSWA(filename, ep);\n", 
            "         assertResponseReceived(result);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample51.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample51.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,16 +26,15", 
          "lines": [
            " public class Sample55 extends SynapseTestCase {\n", 
            " \n", 
            "     private SampleClientResult result;\n", 
            "-    private StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample55() {\n", 
            "         super(55);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n", 
            "     public void testSessionFullLBFailOver() {\n", 
            "         final String addUrl = \"http://localhost:8280/services/LBService1\";\n", 
            "+        final StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         log.info(\"Running test: Failover sending among 3 endpoints\");\n", 
            "         Thread t = new Thread(new Runnable() {\n", 
            "             public void run() {\n"
          ]
        }, 
        {
          "locn": "-50,7 +49,7", 
          "lines": [
            " \n", 
            "         }\n", 
            " \n", 
            "-        getBackendServerControllers().get(0).stop();\n", 
            "+        getBackendServerControllers().get(0).stopProcess();\n", 
            "         try {\n", 
            "             Thread.sleep(2000);\n", 
            "         } catch (InterruptedException e) {\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample55.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample55.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,17 +25,14", 
          "lines": [
            " \n", 
            " public class Sample52 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample52() {\n", 
            "         super(52);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n", 
            "     public void testSessionLessLB() {\n", 
            "         String addUrl = \"http://localhost:8280/services/LBService1\";\n", 
            "-\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         log.info(\"Running test: Session-less load balancing between 3 endpoints\");\n", 
            "         SampleClientResult result = client.sessionlessClient(addUrl, null, 100);\n", 
            "         assertResponseReceived(result);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample52.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample52.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,11 +26,9", 
          "lines": [
            " public class Sample450 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample450() {\n", 
            "         super(450);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-38,7 +36,7", 
          "lines": [
            "         //String repo = getConfiguration().getClientConfig().getClientRepo();\n", 
            "         String addUrl = \"http://localhost:9000/soap/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "-\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         log.info(\"Running test: Introduction to the URL Rewrite Mediator\");\n", 
            "         result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "         assertTrue(\"Client did not get run successfully \", result.responseReceived());\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample450.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample450.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,11 +26,9", 
          "lines": [
            " public class Sample360 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample360() {\n", 
            "         super(360);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-37,6 +35,7", 
          "lines": [
            "     public void testDbLookup() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Introduction to dblookup mediator\");\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample360.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample360.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,11 +26,9", 
          "lines": [
            " public class Sample451 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample451() {\n", 
            "         super(451);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-37,6 +35,7", 
          "lines": [
            "     public void testURLRewrite() {\n", 
            "         log.info(\"Running test: Conditional URL Rewriting\");\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         String addUrl = \"jms://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\", null);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample451.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample451.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,11 +26,9", 
          "lines": [
            " public class Sample361 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample361() {\n", 
            "         super(361);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-37,6 +35,7", 
          "lines": [
            "     public void testDbReport() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Introduction to dbreport mediator\");\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample361.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample361.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,16 +26,15", 
          "lines": [
            " public class Sample353 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample353() {\n", 
            "         super(353);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testScriptMediationWithRuby() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Using Ruby scripts for mediation\");\n", 
            "         result = client.requestCustomQuote(addUrl, trpUrl, null, \"IBM\");\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample353.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample353.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,17 +26,15", 
          "lines": [
            " public class Sample380 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample380() {\n", 
            "         super(380);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n", 
            "     public void testCustomMediator() {\n", 
            "         String addUrl = \"http://localhost:8280/\";\n", 
            "-\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         log.info(\"Running test: Demonstrate the use of Class mediator to extend the mediation functionality\");\n", 
            "         result = client.requestStandardQuote(addUrl, null, null, \"IBM\" ,null);\n", 
            "         assertTrue(\"Client did not get run successfully \", result.responseReceived());\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample380.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample380.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,16 +26,14", 
          "lines": [
            " public class Sample372 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample372() {\n", 
            "         super(372);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testConcurrencyAndRateThrottling() {\n", 
            "         String addUrl = \"http://localhost:8280/services/StockQuoteProxy\";\n", 
            "-\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         log.info(\"Running test: concurrency throttling and request rate based throttling\");\n", 
            "         result = client.requestStandardQuote(addUrl, null, null, \"IBM\" ,null);\n", 
            "         assertTrue(\"Client did not get run successfully \", result.responseReceived());\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample372.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample372.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,11 +25,8", 
          "lines": [
            " \n", 
            " public class Sample50 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample50() {\n", 
            "         super(50);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-36,6 +33,7", 
          "lines": [
            "     public void testRestToPox() {\n", 
            "         String trpUrl = \"http://localhost:8280/services/StockQuote\";\n", 
            "         log.info(\"Running test: HTTP REST request \");\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         SampleClientResult result = client.requestRestQuote(null, trpUrl, null, \"IBM\");\n", 
            "         assertResponseReceived(result);\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample50.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample50.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,11 +25,8", 
          "lines": [
            " \n", 
            " public class Sample54 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample54() {\n", 
            "         super(54);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-36,6 +33,7", 
          "lines": [
            "     public void testSessionFullLB() {\n", 
            "         String addUrl = \"http://localhost:8280/services/LBService1\";\n", 
            "         log.info(\"Running test: Session affinity load balancing between 3 endpoints\");\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         SampleClientResult result = client.statefulClient(addUrl,null, 100);\n", 
            "         assertResponseReceived(result);\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample54.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample54.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,5 +1,26", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            " package org.apache.synapse.samples.framework;\n", 
            " \n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axis2.AxisFault;\n", 
            " import org.apache.axis2.clustering.ClusteringAgent;\n", 
            " import org.apache.axis2.clustering.ClusteringConstants;\n", 
            " import org.apache.axis2.context.ConfigurationContext;\n"
          ]
        }, 
        {
          "locn": "-10,69 +31,102", 
          "lines": [
            " import org.apache.axis2.phaseresolver.PhaseMetadata;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.synapse.samples.framework.config.Axis2ServerConfiguration;\n", 
            "+import org.apache.synapse.samples.framework.config.SampleConfigConstants;\n", 
            " \n", 
            " import java.util.List;\n", 
            "-import java.util.concurrent.CountDownLatch;\n", 
            " \n", 
            " /**\n", 
            "  * Responsible for programatically starting up and shutting down\n", 
            "  * an Axis2 server instance in order to run a sample test.\n", 
            "  */\n", 
            "-public class Axis2BackEndServerController implements BackEndServerController {\n", 
            "+public class Axis2BackEndServerController extends AbstractBackEndServerController {\n", 
            " \n", 
            "     private static final Log log = LogFactory.getLog(Axis2BackEndServerController.class);\n", 
            " \n", 
            "-    private String serverName;\n", 
            "-    private BackEndServerThread serverThread;\n", 
            "-    private ConfigurationContext configContext;\n", 
            "-    private ListenerManager listenerManager;\n", 
            "-    private Axis2ServerConfiguration configuration;\n", 
            "-    private CountDownLatch cdLatch;\n", 
            "+    private static final int UNDEFINED      = 1;\n", 
            "+    private static final int STARTING_UP    = 2;\n", 
            "+    private static final int SERVER_ACTIVE  = 3;\n", 
            "+    private static final int STARTUP_FAILED = 4;\n", 
            "+    private static final int SHUTTING_DOWN  = 5;\n", 
            "+\n", 
            "+    private String repoPath;\n", 
            "+    private String axis2Xml;\n", 
            "+    private String httpPort;\n", 
            "+    private String httpsPort;\n", 
            "+    private boolean counterEnabled;\n", 
            "+\n", 
            "+    private int serverState = UNDEFINED;\n", 
            "+\n", 
            "+    private final Axis2Server axis2Server;\n", 
            "     private Exception processException;\n", 
            "     private MessageCounter counter;\n", 
            " \n", 
            "-    public Axis2BackEndServerController(String serverName,\n", 
            "-                                        Axis2ServerConfiguration configuration) {\n", 
            "-        this.serverName = serverName;\n", 
            "-        this.configuration = configuration;\n", 
            "-        serverThread = new BackEndServerThread();\n", 
            "-        serverThread.setName(configuration.getServerName()+ \" thread\");\n", 
            "-        cdLatch = new CountDownLatch(1);\n", 
            "+    public Axis2BackEndServerController(OMElement element) {\n", 
            "+        super(element);\n", 
            "+        String currentDir = SynapseTestUtils.getCurrentDir();\n", 
            "+        repoPath = SynapseTestUtils.getParameter(element,\n", 
            "+                SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_REPO,\n", 
            "+                currentDir + SampleConfigConstants.DEFAULT_BE_SERVER_CONF_AXIS2_REPO);\n", 
            "+        axis2Xml = SynapseTestUtils.getParameter(element,\n", 
            "+                SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_XML,\n", 
            "+                currentDir + SampleConfigConstants.DEFAULT_BE_SERVER_CONF_AXIS2_XML);\n", 
            "+        httpPort = SynapseTestUtils.getParameter(element,\n", 
            "+                SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_HTTP_PORT, null);\n", 
            "+        httpsPort = SynapseTestUtils.getParameter(element,\n", 
            "+                SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_HTTPS_PORT, null);\n", 
            "+\n", 
            "+        counterEnabled = Boolean.parseBoolean(SynapseTestUtils.getParameter(element,\n", 
            "+                SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_COUNTER_ENABLED, \"false\"));\n", 
            "+\n", 
            "+        axis2Server = new Axis2Server();\n", 
            "     }\n", 
            " \n", 
            "-    public String getServerName() {\n", 
            "-        return serverName;\n", 
            "+    public String getAxis2Xml() {\n", 
            "+        return axis2Xml;\n", 
            "     }\n", 
            " \n", 
            "-    public boolean start() {\n", 
            "-        log.info(\"Preparing to start Axis2 Server: \" + serverName);\n", 
            "-        serverThread.start();\n", 
            "-        try {\n", 
            "-            log.info(\"Waiting for Axis2 to start\");\n", 
            "-            cdLatch.await();\n", 
            "-            if (processException == null) {\n", 
            "-                log.info(\"Axis2 is successfully started. continuing tests\");\n", 
            "-                return true;\n", 
            "-            } else {\n", 
            "-                log.warn(\"There was an error starting Axis2 server: \" + serverName, processException);\n", 
            "-                return false;\n", 
            "+    public void setAxis2Xml(String axis2Xml) {\n", 
            "+        this.axis2Xml = axis2Xml;\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean startProcess() {\n", 
            "+        processException = null;\n", 
            "+\n", 
            "+        synchronized (axis2Server) {\n", 
            "+            axis2Server.start();\n", 
            "+            while (serverState <= STARTING_UP) {\n", 
            "+                try {\n", 
            "+                    axis2Server.wait(1000); // Label: 1 [Wait for Axis2Server.run() to notify]\n", 
            "+                } catch (InterruptedException e) {\n", 
            "+                    log.error(\"Axis2 server startup was interrupted\", e);\n", 
            "+                    return false;\n", 
            "+                }\n", 
            "             }\n", 
            "-        } catch (InterruptedException e) {\n", 
            "+        }\n", 
            "+\n", 
            "+        if (serverState == STARTUP_FAILED) {\n", 
            "+            log.error(\"Axis2 server failed to start\", processException);\n", 
            "             return false;\n", 
            "         }\n", 
            "+        return true;\n", 
            "     }\n", 
            " \n", 
            "-    public boolean stop() {\n", 
            "-        if (serverThread.isRunning) {\n", 
            "+    public boolean stopProcess() {\n", 
            "+        if (serverState == SERVER_ACTIVE) {\n", 
            "+            synchronized (axis2Server) {\n", 
            "+                serverState = SHUTTING_DOWN;\n", 
            "+                axis2Server.notifyAll(); // Notify Label: 2\n", 
            "+\n", 
            "+                while (serverState > UNDEFINED) {\n", 
            "+                    try {\n", 
            "+                        axis2Server.wait(1000); // Label: 3 [Wait for Axis2Server.run() to notify]\n", 
            "+                    } catch (InterruptedException e) {\n", 
            "+                        log.warn(\"Axis2 server shutdown was interrupted\", e);\n", 
            "+                        return false;\n", 
            "+                    }\n", 
            "+                }\n", 
            "+            }\n", 
            "             counter = null;\n", 
            "-            serverThread.isRunning = false;\n", 
            "-            try {\n", 
            "-                cdLatch = new CountDownLatch(1);\n", 
            "-                cdLatch.await();\n", 
            "-            } catch (InterruptedException e) {\n", 
            "-                 return false;\n", 
            "-            }\n", 
            "         }\n", 
            "         return true;\n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-84,97 +138,99", 
          "lines": [
            "         return -1;\n", 
            "     }\n", 
            " \n", 
            "-    class BackEndServerThread extends Thread {\n", 
            "+    class Axis2Server extends Thread {\n", 
            " \n", 
            "-        public boolean isRunning = false;\n", 
            "+        Axis2Server() {\n", 
            "+            super(\"axis2-\" + serverName);\n", 
            "+        }\n", 
            " \n", 
            "         public void run() {processException = null;\n", 
            "-            log.info(\"ServerThread: Initializing Axis2 Server: \" + serverName);\n", 
            "-            processException = null;\n", 
            "+            log.info(\"Starting up Axis2 server: \" + serverName);\n", 
            "+\n", 
            "+            ListenerManager listenerManager;\n", 
            "+            ConfigurationContext configContext;\n", 
            "+\n", 
            "             try {\n", 
            "                 listenerManager = new ListenerManager();\n", 
            "+                configContext = ConfigurationContextFactory.\n", 
            "+                        createConfigurationContextFromFileSystem(repoPath, axis2Xml);\n", 
            "+                configure(configContext);\n", 
            "+                listenerManager.startSystem(configContext);\n", 
            "+                serverState = SERVER_ACTIVE;\n", 
            " \n", 
            "-                configContext = ConfigurationContextFactory\n", 
            "-                        .createConfigurationContextFromFileSystem(configuration.getAxis2Repo(),\n", 
            "-                                configuration.getAxis2Xml());\n", 
            "-\n", 
            "-                // setting System.setProperty does not work since this all servers are run on same jvm\n", 
            "-                configContext.setProperty(\"server_name\", serverName);\n", 
            "-\n", 
            "-                TransportInDescription httpTrsIn = configContext.getAxisConfiguration().\n", 
            "-                        getTransportsIn().get(\"http\");\n", 
            "-                String httpPort = configuration.getHttpPort();\n", 
            "-                if (httpPort != null && httpPort.length() > 0) {\n", 
            "-                    try {\n", 
            "-                        new Integer(httpPort);\n", 
            "-                        httpTrsIn.getParameter(\"port\").setValue(httpPort);\n", 
            "-                    } catch (NumberFormatException e) {\n", 
            "-                        log.error(\"Given port is not a valid integer. Using default value.\");\n", 
            "-                    }\n", 
            "+            } catch (Exception e) {\n", 
            "+                processException = e;\n", 
            "+                serverState = STARTUP_FAILED;\n", 
            "+                // start up failed...nothing more to do here\n", 
            "+                return;\n", 
            "+            } finally {\n", 
            "+                synchronized (this) {\n", 
            "+                    this.notifyAll(); // Notify Label: 1\n", 
            "                 }\n", 
            "+            }\n", 
            " \n", 
            "-                TransportInDescription httpsTrsIn = configContext.getAxisConfiguration().\n", 
            "-                        getTransportsIn().get(\"https\");\n", 
            "-                String httpsPort = configuration.getHttpsPort();\n", 
            "-                if (httpsPort != null && httpsPort.length() > 0) {\n", 
            "+            synchronized (this) {\n", 
            "+                while (serverState < SHUTTING_DOWN) {\n", 
            "+                    //wait for the tests\n", 
            "                     try {\n", 
            "-                        new Integer(httpsPort);\n", 
            "-                        httpsTrsIn.getParameter(\"port\").setValue(httpsPort);\n", 
            "-                    } catch (NumberFormatException e) {\n", 
            "-                        log.error(\"Given port is not a valid integer. Using default value.\");\n", 
            "+                        this.wait(1000); // Label: 2 [Wait for the stop() to notify]\n", 
            "+                    } catch (InterruptedException e) {\n", 
            "+                        log.error(\"Axis2 server interrupted\", e);\n", 
            "                     }\n", 
            "                 }\n", 
            "+            }\n", 
            " \n", 
            "-                log.info(\"ServerThread: Starting Axis2 Server: \" + serverName);\n", 
            "-\n", 
            "-\n", 
            "-                ClusteringAgent clusteringAgent =\n", 
            "-                        configContext.getAxisConfiguration().getClusteringAgent();\n", 
            "-                String avoidInit = ClusteringConstants.Parameters.AVOID_INITIATION;\n", 
            "-                if (clusteringAgent != null && clusteringAgent.getParameter(avoidInit) != null &&\n", 
            "-                        ((String) clusteringAgent.getParameter(avoidInit).getValue()).\n", 
            "-                                equalsIgnoreCase(\"true\")) {\n", 
            "-                    clusteringAgent.setConfigurationContext(configContext);\n", 
            "-                    clusteringAgent.init();\n", 
            "+            log.info(\"Shutting down Axis2 server...\");\n", 
            "+            try {\n", 
            "+                listenerManager.stop();\n", 
            "+                configContext.terminate();\n", 
            "+            } catch (Exception e) {\n", 
            "+                log.warn(\"Error while shutting down Axis2 server\", e);\n", 
            "+            } finally {\n", 
            "+                synchronized (this) {\n", 
            "+                    serverState = UNDEFINED;\n", 
            "+                    this.notifyAll(); // Notify Label: 3\n", 
            "                 }\n", 
            "+            }\n", 
            "+        }\n", 
            " \n", 
            "-                if (configuration.isCounterEnabled()) {\n", 
            "-                    log.info(\"Engaging server side message counter\");\n", 
            "-                    List<Phase> phases = configContext.getAxisConfiguration().getInFlowPhases();\n", 
            "-                    for (Phase phase : phases) {\n", 
            "-                        if (PhaseMetadata.PHASE_DISPATCH.equals(phase.getName())) {\n", 
            "-                            counter = new MessageCounter();\n", 
            "-                            phase.addHandler(counter);\n", 
            "-                            break;\n", 
            "-                        }\n", 
            "-                    }\n", 
            "-                }\n", 
            "+        private void configure(ConfigurationContext configContext) throws AxisFault {\n", 
            "+            // setting System.setProperty does not work since all servers run on same jvm\n", 
            "+            configContext.setProperty(\"server_name\", serverName);\n", 
            " \n", 
            "-                listenerManager.startSystem(configContext);\n", 
            "-                isRunning = true;\n", 
            "+            if (httpPort != null) {\n", 
            "+                TransportInDescription httpTrsIn = configContext.getAxisConfiguration().\n", 
            "+                        getTransportsIn().get(\"http\");\n", 
            "+                httpTrsIn.getParameter(\"port\").setValue(httpPort);\n", 
            "+            }\n", 
            " \n", 
            "-            } catch (Exception e) {\n", 
            "-                processException = e;\n", 
            "+            if (httpsPort != null) {\n", 
            "+                TransportInDescription httpsTrsIn = configContext.getAxisConfiguration().\n", 
            "+                        getTransportsIn().get(\"https\");\n", 
            "+                httpsTrsIn.getParameter(\"port\").setValue(httpsPort);\n", 
            "             }\n", 
            "-            cdLatch.countDown();\n", 
            " \n", 
            "-            log.info(\"ServerThread: Wait until tests are finished\");\n", 
            "-            while (isRunning) {\n", 
            "-                //wait\n", 
            "-                try {\n", 
            "-                    sleep(1000);\n", 
            "-                } catch (InterruptedException e) {\n", 
            "-                    log.info(\"Thread interrupted\");\n", 
            "+            ClusteringAgent clusteringAgent =\n", 
            "+                    configContext.getAxisConfiguration().getClusteringAgent();\n", 
            "+            String avoidInit = ClusteringConstants.Parameters.AVOID_INITIATION;\n", 
            "+            if (clusteringAgent != null && clusteringAgent.getParameter(avoidInit) != null &&\n", 
            "+                    ((String) clusteringAgent.getParameter(avoidInit).getValue()).\n", 
            "+                            equalsIgnoreCase(\"true\")) {\n", 
            "+                clusteringAgent.setConfigurationContext(configContext);\n", 
            "+                clusteringAgent.init();\n", 
            "+            }\n", 
            "+\n", 
            "+            if (counterEnabled) {\n", 
            "+                log.info(\"Engaging server side message counter\");\n", 
            "+                List<Phase> phases = configContext.getAxisConfiguration().getInFlowPhases();\n", 
            "+                for (Phase phase : phases) {\n", 
            "+                    if (PhaseMetadata.PHASE_DISPATCH.equals(phase.getName())) {\n", 
            "+                        counter = new MessageCounter();\n", 
            "+                        phase.addHandler(counter);\n", 
            "+                        break;\n", 
            "+                    }\n", 
            "                 }\n", 
            "             }\n", 
            "-            log.info(\"ServerThread: Shutting down Axis2 Server...\");\n", 
            "-            try {\n", 
            "-                listenerManager.stop();\n", 
            "-                configContext.terminate();\n", 
            "-            } catch (Exception e) {\n", 
            "-                log.warn(\"Error while shutting down Axis2 server\", e);\n", 
            "-            }\n", 
            "-            cdLatch.countDown();\n", 
            "         }\n", 
            "     }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/Axis2BackEndServerController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/Axis2BackEndServerController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,73", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework;\n", 
            "+\n", 
            "+import org.apache.activemq.broker.BrokerService;\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.samples.framework.config.SampleConfigConstants;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Responsible for starting up and shutting down\n", 
            "+ * a JMS broker instance in order to run a sample test.\n", 
            "+ */\n", 
            "+public class ActiveMQController extends AbstractBackEndServerController {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(ActiveMQController.class);\n", 
            "+\n", 
            "+    private String providerURL;\n", 
            "+\n", 
            "+    private BrokerService broker;\n", 
            "+\n", 
            "+    public ActiveMQController(OMElement element) {\n", 
            "+        super(element);\n", 
            "+        providerURL = SynapseTestUtils.getParameter(element,\n", 
            "+                SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_PROVIDER_URL,\n", 
            "+                SampleConfigConstants.DEFAULT_BE_SERVER_CONF_JMS_PROVIDER_URL);\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean startProcess() {\n", 
            "+        try {\n", 
            "+            //using embedded jms broker\n", 
            "+            broker = new BrokerService();\n", 
            "+            // configure the broker\n", 
            "+            broker.setBrokerName(\"synapseSampleBroker\");\n", 
            "+            broker.addConnector(providerURL);\n", 
            "+            broker.start();\n", 
            "+            log.info(\"JMSServerController: Broker is Successfully started. continuing tests\");\n", 
            "+            return true;\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"There was an error starting JMS broker: \" + serverName, e);\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean stopProcess() {\n", 
            "+        try {\n", 
            "+            broker.stop();\n", 
            "+            return true;\n", 
            "+        } catch (Exception e) {\n", 
            "+            log.error(\"Error while shutting down the broker\", e);\n", 
            "+            return false;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/ActiveMQController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/ActiveMQController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,10 +26,10", 
          "lines": [
            " import org.apache.commons.io.FilenameUtils;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.synapse.samples.framework.clients.EventSampleClient;\n", 
            " import org.apache.synapse.samples.framework.clients.MTOMSwASampleClient;\n", 
            " import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            "-import org.apache.synapse.samples.framework.config.SampleConfiguration;\n", 
            "+import org.apache.synapse.samples.framework.config.Axis2ClientConfiguration;\n", 
            "+import org.apache.synapse.samples.framework.config.SampleConfigConstants;\n", 
            " \n", 
            " import javax.xml.namespace.QName;\n", 
            " import java.io.File;\n"
          ]
        }, 
        {
          "locn": "-38,7 +38,6", 
          "lines": [
            " import java.util.ArrayList;\n", 
            " import java.util.Iterator;\n", 
            " import java.util.List;\n", 
            "-import java.util.Properties;\n", 
            " \n", 
            " /**\n", 
            "  * This is the class from which all sample tests are derived. Loads and stores necessary\n"
          ]
        }, 
        {
          "locn": "-49,14 +48,12", 
          "lines": [
            " \n", 
            "     protected final Log log = LogFactory.getLog(this.getClass());\n", 
            " \n", 
            "-    private SampleConfiguration configuration;\n", 
            "-    private String sampleDescriptor;\n", 
            "     private int sampleId;\n", 
            "-    private ProcessController pc;\n", 
            "-    private ArrayList<BackEndServerController> backendServerControllers;\n", 
            "-    private OMElement sampleConfigElement;\n", 
            "+    private String sampleName;\n", 
            " \n", 
            "-    private String currentLocation;\n", 
            "+    private SynapseProcessController synapseController;\n", 
            "+    private List<ProcessController> backendServerControllers;\n", 
            "+    private Axis2ClientConfiguration clientConfig;\n", 
            " \n", 
            "     protected SynapseTestCase(int sampleId) {\n", 
            "         if (log.isDebugEnabled()) {\n"
          ]
        }, 
        {
          "locn": "-63,26 +60,56", 
          "lines": [
            "             log.debug(\"Creating SynapseTestCase for test \" + sampleId);\n", 
            "         }\n", 
            "         this.sampleId = sampleId;\n", 
            "-        currentLocation = System.getProperty(\"user.dir\") + File.separator;\n", 
            "-        sampleDescriptor = \"/sample\" + sampleId + \".xml\";\n", 
            "-        configuration = new SampleConfiguration();\n", 
            "-        backendServerControllers = new ArrayList<BackEndServerController>();\n", 
            "         System.setProperty(\"java.io.tmpdir\", FilenameUtils.normalize(\n", 
            "-                currentLocation + \"modules/integration/target/temp\"));\n", 
            "+                SynapseTestUtils.getCurrentDir() + \"modules/integration/target/temp\"));\n", 
            "+        loadConfiguration();\n", 
            "     }\n", 
            " \n", 
            "+    private void loadConfiguration() {\n", 
            "+        // Parse the sample descriptor\n", 
            "+        OMElement sampleConfig = loadDescriptorInfoFile();\n", 
            "+        if (sampleConfig == null) {\n", 
            "+            fail(\"Failed to load the sample configuration for sample: \" + sampleId);\n", 
            "+        }\n", 
            "+\n", 
            "+        // Verify sample ID\n", 
            "+        OMElement sampleIdElt = sampleConfig.getFirstChildWithName(\n", 
            "+                new QName(SampleConfigConstants.TAG_SAMPLE_ID));\n", 
            "+        if (sampleIdElt == null || sampleIdElt.getText() == null || \"\".equals(sampleIdElt.getText())) {\n", 
            "+            fail(\"Sample ID not specified in the descriptor\");\n", 
            "+        } else if (this.sampleId != Integer.parseInt(sampleIdElt.getText())) {\n", 
            "+            fail(\"Sample ID in the descriptor does not match the current test case\");\n", 
            "+        }\n", 
            "+\n", 
            "+        // Load sample name\n", 
            "+        OMElement sampleNameElt = sampleConfig.getFirstChildWithName(\n", 
            "+                new QName(SampleConfigConstants.TAG_SAMPLE_NAME));\n", 
            "+        if (sampleNameElt == null || sampleNameElt.getText() == null || \"\".equals(sampleNameElt.getText())) {\n", 
            "+            fail(\"Sample name not specified in the descriptor\");\n", 
            "+        } else {\n", 
            "+            this.sampleName = sampleNameElt.getText();\n", 
            "+        }\n", 
            "+\n", 
            "+        // Load Synapse, backend server and client configurations\n", 
            "+        synapseController = initSynapseConfigInfo(sampleConfig);\n", 
            "+        backendServerControllers = initBackEndServersConfigInfo(sampleConfig);\n", 
            "+        if (backendServerControllers == null) {\n", 
            "+            fail(\"Failed to load backend server configurations for the sample \" + sampleId);\n", 
            "+        }\n", 
            "+        clientConfig = initClientConfigInfo(sampleConfig);\n", 
            "+\n", 
            "+        if (synapseController.isClusteringEnabled()) {\n", 
            "+            assertTrue(\"Could not properly configure clustering\", configureClustering());\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "     /**\n", 
            "      * Executed before this test case. That means, this will be executed before each test.\n", 
            "      * Loads all configuration info and starts the servers.\n", 
            "      */\n", 
            "     public void setUp() {\n", 
            "-        assertTrue(\"Could not load the global descriptor file for sample \" + sampleId,\n", 
            "-                loadDescriptorInfoFile());\n", 
            "-        assertTrue(\"There are errors in global descriptor file for sample \" + sampleId,\n", 
            "-                processDescriptorFile());\n", 
            "-\n", 
            "         // Print a short intro to the console, so the console output is more readable\n", 
            "-        String title = \"Sample \" + sampleId + \": \" + configuration.getSampleName();\n", 
            "+        String title = \"Sample \" + sampleId + \": \" + sampleName;\n", 
            "         String underline = \"\";\n", 
            "         for (int i = 0; i < title.length(); i++) {\n", 
            "             underline += \"=\";\n"
          ]
        }, 
        {
          "locn": "-90,25 +117,16", 
          "lines": [
            "         System.out.println(\"\\n\\n\" + title);\n", 
            "         System.out.println(underline);\n", 
            " \n", 
            "-        assertTrue(\"Could not load synapse configuration settings for the sample \" + sampleId,\n", 
            "-                initSynapseConfigInfo());\n", 
            "-        assertTrue(\"Could not load axis2 configuration settings for the sample \" + sampleId,\n", 
            "-                initBackEndServersConfigInfo());\n", 
            "-        assertTrue(\"Could not load client configuration settings for the sample \" + sampleId,\n", 
            "-                initClientConfigInfo());\n", 
            "-\n", 
            "-        if (configuration.getSynapseServerConfig().isClusteringEnabled()) {\n", 
            "-            assertTrue(\"Could not properly configure clustering\", configureClustering());\n", 
            "-        }\n", 
            "-\n", 
            "-        for (BackEndServerController bsc : backendServerControllers) {\n", 
            "-            if (!bsc.start()) {\n", 
            "+        // Start backend servers\n", 
            "+        for (ProcessController controller : backendServerControllers) {\n", 
            "+            if (!controller.startProcess()) {\n", 
            "                 doCleanup();\n", 
            "-                fail(\"Error starting the server: \" + bsc.getServerName());\n", 
            "+                fail(\"Error starting the server: \" + controller.getServerName());\n", 
            "             }\n", 
            "         }\n", 
            " \n", 
            "-        if (!pc.startProcess()) {\n", 
            "+        // Start Synapse\n", 
            "+        if (!synapseController.startProcess()) {\n", 
            "             doCleanup();\n", 
            "             fail(\"Error starting synapse server\");\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-118,7 +136,7", 
          "lines": [
            "      * Executed after this test case. That means, This will be executed after each test\n", 
            "      */\n", 
            "     public void tearDown() {\n", 
            "-        log.info(\"Test \" + sampleId + \" is finished\");\n", 
            "+        log.info(\"Sample \" + sampleId + \" is finished\");\n", 
            "         doCleanup();\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-126,24 +144,27", 
          "lines": [
            "      * shutting down servers, cleaning temp files\n", 
            "      */\n", 
            "     private void doCleanup() {\n", 
            "-        if (pc != null) {\n", 
            "+        if (synapseController != null) {\n", 
            "             log.debug(\"Stopping Synapse\");\n", 
            "-            pc.stopProcess();\n", 
            "+            synapseController.stopProcess();\n", 
            "         }\n", 
            " \n", 
            "-        ArrayList<BackEndServerController> clonedControllers = (ArrayList<BackEndServerController>)\n", 
            "-                backendServerControllers.clone();\n", 
            "-        for (BackEndServerController bsc : clonedControllers) {\n", 
            "+        List<ProcessController> removed = new ArrayList<ProcessController>();\n", 
            "+        for (ProcessController bsc : backendServerControllers) {\n", 
            "             if (bsc instanceof Axis2BackEndServerController) {\n", 
            "                 log.info(\"Stopping Server: \" + bsc.getServerName());\n", 
            "-                bsc.stop();\n", 
            "-                backendServerControllers.remove(bsc);\n", 
            "+                bsc.stopProcess();\n", 
            "+                removed.add(bsc);\n", 
            "             }\n", 
            "         }\n", 
            " \n", 
            "-        for (BackEndServerController bsc : backendServerControllers) {\n", 
            "+        for (ProcessController bsc : removed) {\n", 
            "+            backendServerControllers.remove(bsc);\n", 
            "+        }\n", 
            "+\n", 
            "+        for (ProcessController bsc : backendServerControllers) {\n", 
            "             log.info(\"Stopping Server: \" + bsc.getServerName());\n", 
            "-            bsc.stop();\n", 
            "+            bsc.stopProcess();\n", 
            "         }\n", 
            " \n", 
            "         //cleaning up temp dir\n"
          ]
        }, 
        {
          "locn": "-160,11 +181,12", 
          "lines": [
            "      *\n", 
            "      * @return true if the configuration was loaded successfully\n", 
            "      */\n", 
            "-    private boolean loadDescriptorInfoFile() {\n", 
            "+    private OMElement loadDescriptorInfoFile() {\n", 
            "+        String sampleDescriptor = \"/sample\" + sampleId + \".xml\";\n", 
            "         if (log.isDebugEnabled()) {\n", 
            "             log.debug(\"Reading sample descriptor file from \" + sampleDescriptor);\n", 
            "         }\n", 
            "-        sampleConfigElement = null;\n", 
            "+\n", 
            "         try {\n", 
            "             InputStream in = this.getClass().getResourceAsStream(sampleDescriptor);\n", 
            "             if (in == null) {\n"
          ]
        }, 
        {
          "locn": "-171,290 +193,73", 
          "lines": [
            "                 fail(\"Cannot read sample descriptor file\");\n", 
            "             }\n", 
            "             StAXOMBuilder builder = new StAXOMBuilder(in);\n", 
            "-            sampleConfigElement = builder.getDocumentElement();\n", 
            "+            return builder.getDocumentElement();\n", 
            "         } catch (Exception e) {\n", 
            "             log.error(\"Error loading test descriptor\", e);\n", 
            "-            return false;\n", 
            "+            return null;\n", 
            "         }\n", 
            "-        return sampleConfigElement != null;\n", 
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     * Checks if sample id is matched\n", 
            "+     * Reads and initializes Synapse specific configuration information from descriptor\n", 
            "      *\n", 
            "-     * @return true If the sample ID matches\n", 
            "+     * @param config Sample descriptor\n", 
            "+     * @return A SynapseProcessController instance\n", 
            "      */\n", 
            "-    private boolean processDescriptorFile() {\n", 
            "-        int fileId = -1;\n", 
            "-        Iterator itr = sampleConfigElement.getChildrenWithLocalName(\n", 
            "-                SampleConfigConstants.TAG_SAMPLE_ID);\n", 
            "-        while (itr.hasNext()) {\n", 
            "-            fileId = Integer.parseInt(((OMElement) itr.next()).getText());\n", 
            "-        }\n", 
            "-        itr = sampleConfigElement.getChildrenWithLocalName(SampleConfigConstants.TAG_SAMPLE_NAME);\n", 
            "-        while (itr.hasNext()) {\n", 
            "-            String sampleName = ((OMElement) itr.next()).getText();\n", 
            "-            configuration.setSampleName(sampleName);\n", 
            "-        }\n", 
            "-\n", 
            "-        return sampleId == fileId;\n", 
            "+    private SynapseProcessController initSynapseConfigInfo(OMElement config) {\n", 
            "+        OMElement synapseConfig = config.getFirstChildWithName(\n", 
            "+                new QName(SampleConfigConstants.TAG_SYNAPSE_CONF));\n", 
            "+        return new SynapseProcessController(sampleId, synapseConfig);\n", 
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     * Reads and stores synapse specific configuration information from descriptor\n", 
            "+     * Reads and initializes backend server specific configuration information from descriptor\n", 
            "      *\n", 
            "-     * @return true If the initialization is successful\n", 
            "+     * @param config Sample descriptor\n", 
            "+     * @return a List of ProcessController instances\n", 
            "      */\n", 
            "-    private boolean initSynapseConfigInfo() {\n", 
            "-        Properties synapseProperties = new Properties();\n", 
            "-        OMElement synEle = null;\n", 
            "-        Iterator itr = sampleConfigElement.getChildrenWithLocalName(\n", 
            "-                SampleConfigConstants.TAG_SYNAPSE_CONF);\n", 
            "-        while (itr.hasNext()) {\n", 
            "-            synEle = (OMElement) itr.next();\n", 
            "-        }\n", 
            "-        if (synEle == null) {\n", 
            "-            log.error(\"Cannot find synapse configuration information in sample descriptor file\");\n", 
            "-            return false;\n", 
            "-        } else {\n", 
            "-            itr = synEle.getChildElements();\n", 
            "-        }\n", 
            "-        while (itr.hasNext()) {\n", 
            "-            OMElement ele = (OMElement) itr.next();\n", 
            "-            synapseProperties.setProperty(ele.getLocalName(), ele.getText());\n", 
            "-        }\n", 
            "-        log.debug(\"Initializing configuration information for synapse server...\");\n", 
            "-        String synapseHome = currentLocation;\n", 
            "-\n", 
            "-        String synapseXml = synapseProperties.getProperty(SampleConfigConstants.TAG_SYNAPSE_CONF_XML);\n", 
            "-        String axis2Repo = synapseProperties.getProperty(SampleConfigConstants.TAG_SYNAPSE_CONF_AXIS2_REPO);\n", 
            "-        String axis2Xml = synapseProperties.getProperty(SampleConfigConstants.TAG_SYNAPSE_CONF_AXIS2_XML);\n", 
            "-        Boolean clusteringEnabled = Boolean.parseBoolean(\n", 
            "-                (String) synapseProperties.get(SampleConfigConstants.TAG_ENABLE_CLUSTERING));\n", 
            "-\n", 
            "-        configuration.getSynapseServerConfig().setServerName(\"SynapseServerForSample\" + sampleId);\n", 
            "-\n", 
            "-        if (synapseXml == null) {\n", 
            "-            log.error(\"synapse config file must be specified for the sample\");\n", 
            "-            return false;\n", 
            "-        } else {\n", 
            "-            configuration.getSynapseServerConfig().setSynapseXml(synapseHome + synapseXml);\n", 
            "-        }\n", 
            "-\n", 
            "-        if (axis2Repo == null) {\n", 
            "-            configuration.getSynapseServerConfig().setAxis2Repo(synapseHome +\n", 
            "-                    SampleConfigConstants.DEFAULT_SYNAPSE_CONF_AXIS2_REPO);\n", 
            "-        } else {\n", 
            "-            if (log.isDebugEnabled()) {\n", 
            "-                log.debug(\"Using Synapse Axis2 repository: \" + axis2Repo);\n", 
            "-            }\n", 
            "-            configuration.getSynapseServerConfig().setAxis2Repo(synapseHome + axis2Repo);\n", 
            "-        }\n", 
            "-\n", 
            "-        if (axis2Xml == null) {\n", 
            "-            configuration.getSynapseServerConfig().setAxis2Xml(synapseHome +\n", 
            "-                    SampleConfigConstants.DEFAULT_SYNAPSE_CONF_AXIS2_XML);\n", 
            "-        } else {\n", 
            "-            if (log.isDebugEnabled()) {\n", 
            "-                log.debug(\"Using Synapse Axis2 XML: \" + axis2Xml);\n", 
            "-            }\n", 
            "-            configuration.getSynapseServerConfig().setAxis2Xml(synapseHome + axis2Xml);\n", 
            "-        }\n", 
            "-\n", 
            "-        configuration.getSynapseServerConfig().setSynapseHome(synapseHome);\n", 
            "-        configuration.getSynapseServerConfig().setClusteringEnabled(clusteringEnabled);\n", 
            "-\n", 
            "-        pc = new SynapseProcessController(configuration.getSynapseServerConfig());\n", 
            "-        return true;\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Reads and stores backend server specific configuration information from descriptor\n", 
            "-     *\n", 
            "-     * @return true If the initialization is successful\n", 
            "-     */\n", 
            "-    private boolean initBackEndServersConfigInfo() {\n", 
            "-        OMElement bESConfigEle = null;\n", 
            "-        Iterator itrBackEndElements = sampleConfigElement.getChildrenWithLocalName(\n", 
            "-                SampleConfigConstants.TAG_BE_SERVER_CONF);\n", 
            "-        while (itrBackEndElements.hasNext()) {\n", 
            "-            bESConfigEle = (OMElement) itrBackEndElements.next();\n", 
            "-        }\n", 
            "-        if (bESConfigEle == null) {\n", 
            "-            log.warn(\"No backend servers are defined\");\n", 
            "-            return false;\n", 
            "-        }\n", 
            "+    private List<ProcessController> initBackEndServersConfigInfo(OMElement config) {\n", 
            "         log.debug(\"Initializing configuration information for backend servers...\");\n", 
            "-\n", 
            "-        // Processing JMS servers\n", 
            "-        Properties jmsProperties = new Properties();\n", 
            "-        Iterator itrJmsServers = bESConfigEle.getChildrenWithLocalName(\n", 
            "-                SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_BROKER);\n", 
            "-        while (itrJmsServers.hasNext()) {\n", 
            "-            OMElement jmsServer = (OMElement) itrJmsServers.next();\n", 
            "-            String serverID = jmsServer.getAttributeValue(new QName(\"id\"));\n", 
            "-            String serverName = \"SampleJMSServer\" + serverID;\n", 
            "-            configuration.addNewJMSBroker(serverName);\n", 
            "-\n", 
            "-            Iterator serverConfig = jmsServer.getChildElements();\n", 
            "-            while (serverConfig.hasNext()) {\n", 
            "-                OMElement ele = (OMElement) serverConfig.next();\n", 
            "-                jmsProperties.setProperty(ele.getLocalName(), ele.getText());\n", 
            "-            }\n", 
            "-\n", 
            "-            String providerURL = jmsProperties.getProperty(\n", 
            "-                    SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_PROVIDER_URL);\n", 
            "-            String initialNF = jmsProperties.getProperty(\n", 
            "-                    SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY);\n", 
            "-\n", 
            "-            if (providerURL == null) {\n", 
            "-                configuration.getJMSConfig(serverName).setProviderURL(\n", 
            "-                        SampleConfigConstants.DEFAULT_BE_SERVER_CONF_JMS_PROVIDER_URL);\n", 
            "-            } else {\n", 
            "-                log.info(\"Using provider URL: \" + providerURL);\n", 
            "-                configuration.getJMSConfig(serverName).setProviderURL(providerURL);\n", 
            "-            }\n", 
            "-\n", 
            "-            if (initialNF == null) {\n", 
            "-                configuration.getJMSConfig(serverName).setInitialNamingFactory(\n", 
            "-                        SampleConfigConstants.DEFAULT_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY);\n", 
            "-            } else {\n", 
            "-                log.info(\"Using initial context factory: \" + initialNF);\n", 
            "-                configuration.getJMSConfig(serverName).setInitialNamingFactory(initialNF);\n", 
            "-            }\n", 
            "-\n", 
            "-            configuration.getJMSConfig(serverName).setServerName(serverName);\n", 
            "-\n", 
            "-            backendServerControllers.add(new JMSBrokerController(serverName,\n", 
            "-                    configuration.getJMSConfig(serverName)));\n", 
            "+        List<ProcessController> controllers = new ArrayList<ProcessController>();\n", 
            "+        OMElement backendServersConfig = config.getFirstChildWithName(\n", 
            "+                new QName(SampleConfigConstants.TAG_BE_SERVER_CONF));\n", 
            "+        if (backendServersConfig == null) {\n", 
            "+            log.warn(\"No backend servers defined\");\n", 
            "+            return null;\n", 
            "         }\n", 
            " \n", 
            "-\n", 
            "-        // Processing derby servers\n", 
            "-        Properties derbyProperties = new Properties();\n", 
            "-        Iterator itrDerbyServers = bESConfigEle.getChildrenWithLocalName(\n", 
            "-                SampleConfigConstants.TAG_BE_SERVER_CONF_DERBY_SERVER);\n", 
            "-        while (itrDerbyServers.hasNext()) {\n", 
            "-            OMElement derbyServer = (OMElement) itrDerbyServers.next();\n", 
            "-            String serverID = derbyServer.getAttributeValue(new QName(\"id\"));\n", 
            "-            String serverName = \"SampleDerbyServer\" + serverID;\n", 
            "-            configuration.addNewDerbyServer(serverName);\n", 
            "-\n", 
            "-            Iterator serverConfig = derbyServer.getChildElements();\n", 
            "-            while (serverConfig.hasNext()) {\n", 
            "-                OMElement ele = (OMElement) serverConfig.next();\n", 
            "-                derbyProperties.setProperty(ele.getLocalName(), ele.getText());\n", 
            "-            }\n", 
            "-\n", 
            "-            configuration.getDerbyConfig(serverName).setServerName(serverName);\n", 
            "-            backendServerControllers.add(new DerbyServerController(serverName,\n", 
            "-                    configuration.getDerbyConfig(serverName)));\n", 
            "-        }\n", 
            "-\n", 
            "-        // Processing axis2 servers\n", 
            "-        Properties axis2Properties = new Properties();\n", 
            "-        Iterator itrAxis2Servers = bESConfigEle.getChildrenWithLocalName(\n", 
            "-                SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_SERVER);\n", 
            "-        while (itrAxis2Servers.hasNext()) {\n", 
            "-            OMElement axis2Server = (OMElement) itrAxis2Servers.next();\n", 
            "-            String serverID = axis2Server.getAttributeValue(new QName(\"id\"));\n", 
            "-            String serverName = \"SampleAxis2Server\" + serverID;\n", 
            "-            configuration.addNewAxis2Server(serverName);\n", 
            "-\n", 
            "-            Iterator serverConfig = axis2Server.getChildElements();\n", 
            "-            while (serverConfig.hasNext()) {\n", 
            "-                OMElement ele = (OMElement) serverConfig.next();\n", 
            "-                axis2Properties.setProperty(ele.getLocalName(), ele.getText());\n", 
            "-            }\n", 
            "-            String axis2Home = currentLocation;\n", 
            "-            String relAxis2Repo = axis2Properties.getProperty(\n", 
            "-                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_REPO);\n", 
            "-            String relAxis2Xml = axis2Properties.getProperty(\n", 
            "-                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_XML);\n", 
            "-            String axis2HttpPort = axis2Properties.getProperty(\n", 
            "-                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_HTTP_PORT);\n", 
            "-            String axis2HttpsPort = axis2Properties.getProperty(\n", 
            "-                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_HTTPS_PORT);\n", 
            "-            String counterEnabled = axis2Properties.getProperty(\n", 
            "-                    SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_COUNTER_ENABLED);\n", 
            "-\n", 
            "-            configuration.getAxis2Config(serverName).setServerName(serverName);\n", 
            "-\n", 
            "-            if (relAxis2Repo == null) {\n", 
            "-                configuration.getAxis2Config(serverName).setAxis2Repo(axis2Home +\n", 
            "-                        SampleConfigConstants.DEFAULT_BE_SERVER_CONF_AXIS2_REPO);\n", 
            "+        Iterator backendServers = backendServersConfig.getChildElements();\n", 
            "+        while (backendServers.hasNext()) {\n", 
            "+            OMElement backendServer = (OMElement) backendServers.next();\n", 
            "+            ProcessController controller = SynapseTestUtils.createController(backendServer);\n", 
            "+            if (controller != null) {\n", 
            "+                controllers.add(controller);\n", 
            "             } else {\n", 
            "-                log.info(\"Using Axis2 repository: \" + relAxis2Repo);\n", 
            "-                configuration.getAxis2Config(serverName).setAxis2Repo(axis2Home + relAxis2Repo);\n", 
            "+                log.error(\"Unrecognized backend server configuration: \" + backendServer.getLocalName());\n", 
            "+                return null;\n", 
            "             }\n", 
            "-\n", 
            "-            if (relAxis2Xml == null) {\n", 
            "-                configuration.getAxis2Config(serverName).setAxis2Xml(axis2Home +\n", 
            "-                        SampleConfigConstants.DEFAULT_BE_SERVER_CONF_AXIS2_XML);\n", 
            "-            } else {\n", 
            "-                log.info(\"Using Axis2 XML: \" + relAxis2Xml);\n", 
            "-                configuration.getAxis2Config(serverName).setAxis2Xml(axis2Home + relAxis2Xml);\n", 
            "-            }\n", 
            "-\n", 
            "-            configuration.getAxis2Config(serverName).setHttpPort(axis2HttpPort);\n", 
            "-            configuration.getAxis2Config(serverName).setHttpsPort(axis2HttpsPort);\n", 
            "-            if (Boolean.parseBoolean(counterEnabled)) {\n", 
            "-                configuration.getAxis2Config(serverName).setCounterEnabled(true);\n", 
            "-            }\n", 
            "-\n", 
            "-            backendServerControllers.add(new Axis2BackEndServerController(serverName,\n", 
            "-                    configuration.getAxis2Config(serverName)));\n", 
            "         }\n", 
            " \n", 
            "-        return true;\n", 
            "+        return controllers;\n", 
            "     }\n", 
            " \n", 
            "     /**\n", 
            "      * Reads and stores client specific configuration information from descriptor\n", 
            "+     *\n", 
            "+     * @param config Sample descriptor\n", 
            "+     * @return An Axis2ClientConfiguration instance\n", 
            "      */\n", 
            "-    private boolean initClientConfigInfo() {\n", 
            "-        Properties clientProperties = new Properties();\n", 
            "-        OMElement cliEle = null;\n", 
            "-        Iterator itr = sampleConfigElement.getChildrenWithLocalName(\n", 
            "-                SampleConfigConstants.TAG_CLIENT_CONF);\n", 
            "-        while (itr.hasNext()) {\n", 
            "-            cliEle = (OMElement) itr.next();\n", 
            "-        }\n", 
            "-        if (cliEle == null) {\n", 
            "-            return false;\n", 
            "-        } else {\n", 
            "-            itr = cliEle.getChildElements();\n", 
            "-        }\n", 
            "-        while (itr.hasNext()) {\n", 
            "-            OMElement ele = (OMElement) itr.next();\n", 
            "-            clientProperties.setProperty(ele.getLocalName(), ele.getText());\n", 
            "-        }\n", 
            "+    private Axis2ClientConfiguration initClientConfigInfo(OMElement config) {\n", 
            "+        Axis2ClientConfiguration clientConfig = new Axis2ClientConfiguration();\n", 
            " \n", 
            "-        log.debug(\"Initializing configuration information for clients...\");\n", 
            "-        String clientRepo = clientProperties.getProperty(\n", 
            "-                SampleConfigConstants.TAG_CLIENT_CONF_REPO);\n", 
            "-        String clientAxis2Xml = clientProperties.getProperty(\n", 
            "-                SampleConfigConstants.TAG_CLIENT_CONF_AXIS2_XML);\n", 
            "-\n", 
            "-        if (clientRepo == null) {\n", 
            "-            configuration.getAxis2ClientConfig().setClientRepo(FilenameUtils.normalize(\n", 
            "-                    currentLocation + SampleConfigConstants.DEFAULT_CLIENT_CONF_REPO));\n", 
            "-        } else {\n", 
            "-            log.info(\"Using client Axis2 repository location: \" + clientRepo);\n", 
            "-            configuration.getAxis2ClientConfig().setClientRepo(FilenameUtils.normalize(\n", 
            "-                    currentLocation + clientRepo));\n", 
            "-        }\n", 
            "-\n", 
            "-        if (clientAxis2Xml == null) {\n", 
            "-            configuration.getAxis2ClientConfig().setAxis2Xml(FilenameUtils.normalize(\n", 
            "-                    currentLocation + SampleConfigConstants.DEFAULT_CLIENT_CONF_AXIS2_XML));\n", 
            "-        } else {\n", 
            "-            log.info(\"Using client Axis2 XML: \" + clientAxis2Xml);\n", 
            "-            configuration.getAxis2ClientConfig().setAxis2Xml(FilenameUtils.normalize(\n", 
            "-                    currentLocation + clientAxis2Xml));\n", 
            "-        }\n", 
            "-        return true;\n", 
            "-\n", 
            "+        String currentDir = SynapseTestUtils.getCurrentDir();\n", 
            "+        clientConfig.setAxis2Xml(SynapseTestUtils.getParameter(config,\n", 
            "+                SampleConfigConstants.TAG_CLIENT_CONF_AXIS2_XML,\n", 
            "+                FilenameUtils.normalize(currentDir + SampleConfigConstants.DEFAULT_CLIENT_CONF_AXIS2_XML)));\n", 
            "+        clientConfig.setClientRepo(SynapseTestUtils.getParameter(config,\n", 
            "+                SampleConfigConstants.TAG_CLIENT_CONF_REPO,\n", 
            "+                FilenameUtils.normalize(currentDir + SampleConfigConstants.DEFAULT_CLIENT_CONF_REPO)));\n", 
            "+        return clientConfig;\n", 
            "     }\n", 
            " \n", 
            "     private boolean configureClustering() {\n"
          ]
        }, 
        {
          "locn": "-464,25 +269,27", 
          "lines": [
            "                 log.fatal(\"Could not detect an active IP address\");\n", 
            "                 return false;\n", 
            "             }\n", 
            "-            log.info(\" Using the IP :\" + ip);\n", 
            "+            log.info(\"Using the IP: \" + ip);\n", 
            " \n", 
            "-            String synapseAxis2Xml = configuration.getSynapseServerConfig().getAxis2Xml();\n", 
            "+            String synapseAxis2Xml = synapseController.getAxis2Xml();\n", 
            "             String axis2Config = FileUtils.readFileToString(new File(synapseAxis2Xml));\n", 
            "             String modifiedSynapseAxis2 = SynapseTestUtils.replace(axis2Config, \"${replace.me}\", ip);\n", 
            "             File tempSynapseAxis2 = File.createTempFile(\"axis2Syn-\", \"xml\");\n", 
            "             tempSynapseAxis2.deleteOnExit();\n", 
            "             FileUtils.writeStringToFile(tempSynapseAxis2, modifiedSynapseAxis2);\n", 
            "-            configuration.getSynapseServerConfig().setAxis2Xml(tempSynapseAxis2.getAbsolutePath());\n", 
            "+            synapseController.setAxis2Xml(tempSynapseAxis2.getAbsolutePath());\n", 
            " \n", 
            "-            for (BackEndServerController controller : backendServerControllers) {\n", 
            "-                String serverName = controller.getServerName();\n", 
            "-                String beAxis2Xml = configuration.getAxis2Config(serverName).getAxis2Xml();\n", 
            "-                String beAxis2Config = FileUtils.readFileToString(new File(beAxis2Xml));\n", 
            "-                String modifiedBEAxis2 = SynapseTestUtils.replace(beAxis2Config, \"${replace.me}\", ip);\n", 
            "-                File tempBEAxis2 = File.createTempFile(\"axis2BE-\", \"xml\");\n", 
            "-                tempBEAxis2.deleteOnExit();\n", 
            "-                FileUtils.writeStringToFile(tempBEAxis2, modifiedBEAxis2);\n", 
            "-                configuration.getAxis2Config(serverName).setAxis2Xml(tempBEAxis2.getAbsolutePath());\n", 
            "+            for (ProcessController controller : backendServerControllers) {\n", 
            "+                if (controller instanceof Axis2BackEndServerController) {\n", 
            "+                    Axis2BackEndServerController axis2Controller = (Axis2BackEndServerController) controller;\n", 
            "+                    String beAxis2Xml = axis2Controller.getAxis2Xml();\n", 
            "+                    String beAxis2Config = FileUtils.readFileToString(new File(beAxis2Xml));\n", 
            "+                    String modifiedBEAxis2 = SynapseTestUtils.replace(beAxis2Config, \"${replace.me}\", ip);\n", 
            "+                    File tempBEAxis2 = File.createTempFile(\"axis2BE-\", \"xml\");\n", 
            "+                    tempBEAxis2.deleteOnExit();\n", 
            "+                    FileUtils.writeStringToFile(tempBEAxis2, modifiedBEAxis2);\n", 
            "+                    axis2Controller.setAxis2Xml(tempBEAxis2.getAbsolutePath());\n", 
            "+                }\n", 
            "             }\n", 
            "             return true;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-490,28 +297,18", 
          "lines": [
            "             log.error(\"Error configuring clustering\", e);\n", 
            "             return false;\n", 
            "         }\n", 
            "-\n", 
            "-\n", 
            "     }\n", 
            " \n", 
            "-    protected SampleConfiguration getConfiguration() {\n", 
            "-        return configuration;\n", 
            "-    }\n", 
            "-\n", 
            "-    protected ArrayList<BackEndServerController> getBackendServerControllers() {\n", 
            "+    protected List<ProcessController> getBackendServerControllers() {\n", 
            "         return backendServerControllers;\n", 
            "     }\n", 
            " \n", 
            "     public StockQuoteSampleClient getStockQuoteClient() {\n", 
            "-        return new StockQuoteSampleClient(configuration.getAxis2ClientConfig());\n", 
            "+        return new StockQuoteSampleClient(clientConfig);\n", 
            "     }\n", 
            " \n", 
            "-    public EventSampleClient getEventSubscriberSampleClient() {\n", 
            "-        return new EventSampleClient(configuration.getAxis2ClientConfig());\n", 
            "-    }\n", 
            "-\n", 
            "     public MTOMSwASampleClient getMTOMSwASampleClient() {\n", 
            "-        return new MTOMSwASampleClient(configuration.getAxis2ClientConfig());\n", 
            "+        return new MTOMSwASampleClient(clientConfig);\n", 
            "     }\n", 
            " \n", 
            "     protected void assertResponseReceived(SampleClientResult result) {\n"
          ]
        }, 
        {
          "locn": "-519,8 +316,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     protected Axis2BackEndServerController getAxis2Server() {\n", 
            "-        List<BackEndServerController> servers = getBackendServerControllers();\n", 
            "-        for (BackEndServerController server : servers) {\n", 
            "+        for (ProcessController server : backendServerControllers) {\n", 
            "             if (server instanceof Axis2BackEndServerController) {\n", 
            "                 return (Axis2BackEndServerController) server;\n", 
            "             }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestCase.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestCase.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,10 +1,11", 
          "lines": [
            " package org.apache.synapse.samples.framework;\n", 
            " \n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            " import org.apache.commons.io.FileUtils;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.derby.drda.NetworkServerControl;\n", 
            "-import org.apache.synapse.samples.framework.config.DerbyConfiguration;\n", 
            "+import org.apache.synapse.samples.framework.config.SampleConfigConstants;\n", 
            " \n", 
            " import java.io.File;\n", 
            " import java.net.InetAddress;\n"
          ]
        }, 
        {
          "locn": "-17,30 +18,26", 
          "lines": [
            "  * Responsible for starting up and shutting down\n", 
            "  * a derby server instance in order to run a sample test.\n", 
            "  */\n", 
            "-public class DerbyServerController implements BackEndServerController {\n", 
            "+public class DerbyServerController extends AbstractBackEndServerController {\n", 
            " \n", 
            "     private static final Log log = LogFactory.getLog(DerbyServerController.class);\n", 
            " \n", 
            "-    private String serverName;\n", 
            "-    private DerbyConfiguration configuration;\n", 
            "     private NetworkServerControl server;\n", 
            "+    private int port;\n", 
            " \n", 
            "-    public DerbyServerController(String serverName, DerbyConfiguration configuration) {\n", 
            "-        this.serverName = serverName;\n", 
            "-        this.configuration = configuration;\n", 
            "+    public DerbyServerController(OMElement element) {\n", 
            "+        super(element);\n", 
            "+        port = Integer.parseInt(SynapseTestUtils.getParameter(element,\n", 
            "+                SampleConfigConstants.TAG_BE_SERVER_CONF_DERBY_PORT,\n", 
            "+                SampleConfigConstants.DEFAULT_BE_SERVER_CONF_DERBY_PORT));\n", 
            "     }\n", 
            " \n", 
            "-    public String getServerName() {\n", 
            "-        return serverName;\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean start() {\n", 
            "-        log.info(\"Preparing to start Derby server: \" + serverName);\n", 
            "+    public boolean startProcess() {\n", 
            "         try {\n", 
            "             //server\n", 
            "             Class.forName(\"org.apache.derby.jdbc.ClientDriver\").newInstance();\n", 
            "             server = new NetworkServerControl\n", 
            "-                    (InetAddress.getByName(\"localhost\"), 1527);\n", 
            "+                    (InetAddress.getByName(\"localhost\"), port);\n", 
            "             server.start(null);\n", 
            "             while (true) {\n", 
            "                 try {\n"
          ]
        }, 
        {
          "locn": "-52,12 +49,17", 
          "lines": [
            "                 }\n", 
            "             }\n", 
            "             log.info(\"Derby is successfully started.\");\n", 
            "-\n", 
            "+            initData();\n", 
            "+            return true;\n", 
            "         } catch (Exception e) {\n", 
            "-            log.warn(\"There was an error starting Derby server: \" + serverName, e);\n", 
            "+            log.error(\"There was an error starting Derby server: \" + serverName, e);\n", 
            "             return false;\n", 
            "         }\n", 
            "+    }\n", 
            " \n", 
            "+    private void initData() throws Exception {\n", 
            "+        log.info(\"Creating the sample table and inserting values\");\n", 
            "+\n", 
            "         //client\n", 
            "         String dbName = \"synapsedb\";\n", 
            "         String createTableQuery = \"CREATE table company(name varchar(10), id varchar(10), price double)\";\n"
          ]
        }, 
        {
          "locn": "-68,28 +70,28", 
          "lines": [
            "         props.put(\"password\", \"synapse\");\n", 
            "         props.put(\"create\", \"true\");\n", 
            " \n", 
            "+        Connection conn = null;\n", 
            "         try {\n", 
            "             // on JDK 1.6 or higher, EmbeddedDriver get loaded automatically.\n", 
            "             Class.forName(\"org.apache.derby.jdbc.ClientDriver\").newInstance();\n", 
            "-\n", 
            "-            log.info(\"Creating the sample database and connecting to server\");\n", 
            "-            Connection conn = DriverManager.getConnection(connectionURL, props);\n", 
            "-\n", 
            "+            conn = DriverManager.getConnection(connectionURL, props);\n", 
            "             Statement s = conn.createStatement();\n", 
            "-            log.info(\"Creating the sample table and inserting values\");\n", 
            "             s.execute(createTableQuery);\n", 
            "             s.execute(\"INSERT into company values ('IBM','c1',0.0)\");\n", 
            "             s.execute(\" INSERT into company values ('SUN','c2',0.0)\");\n", 
            "             s.execute(\" INSERT into company values ('MSFT','c3',0.0)\");\n", 
            "             conn.commit();\n", 
            "-            return true;\n", 
            "-        } catch (Exception e) {\n", 
            "-            log.error(\"Error executing SQL queries\", e);\n", 
            "-            return false;\n", 
            "+        } finally {\n", 
            "+            if (conn != null) {\n", 
            "+                try {\n", 
            "+                    conn.close();\n", 
            "+                } catch (SQLException ignored) {\n", 
            "+                }\n", 
            "+            }\n", 
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    public boolean stop() {\n", 
            "+    public boolean stopProcess() {\n", 
            "         log.info(\"Shutting down Derby server...\");\n", 
            "         try {\n", 
            "             try {\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/DerbyServerController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/DerbyServerController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-29,4 +29,6", 
          "lines": [
            " \n", 
            "     public boolean stopProcess();\n", 
            " \n", 
            "+    public String getServerName();\n", 
            "+\n", 
            " }\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/ProcessController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/ProcessController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-21,15 +21,11", 
          "lines": [
            " \n", 
            " import org.apache.synapse.samples.framework.SampleClientResult;\n", 
            " import org.apache.synapse.samples.framework.SynapseTestCase;\n", 
            "-import org.apache.synapse.samples.framework.clients.StockQuoteSampleClient;\n", 
            " \n", 
            " public class Sample0 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample0() {\n", 
            "         super(0);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-38,7 +34,8", 
          "lines": [
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            " \n", 
            "         log.info(\"Running test: Smart Client mode\");\n", 
            "-        SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "+        SampleClientResult result = getStockQuoteClient().requestStandardQuote(\n", 
            "+                addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "         assertResponseReceived(result);\n", 
            "     }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-48,7 +45,8", 
          "lines": [
            "         String prxUrl = \"http://localhost:8280/\";\n", 
            " \n", 
            "         log.info(\"Running test: Using Synapse as a HTTP Proxy\");\n", 
            "-        SampleClientResult result = client.requestStandardQuote(addUrl, null, prxUrl, \"IBM\", null);\n", 
            "+        SampleClientResult result = getStockQuoteClient().requestStandardQuote(\n", 
            "+                addUrl, null, prxUrl, \"IBM\", null);\n", 
            "         assertResponseReceived(result);\n", 
            "     }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample0.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample0.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,19 +25,18", 
          "lines": [
            " \n", 
            " public class Sample1 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample1() {\n", 
            "         super(1);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n", 
            "     public void testDumbClientMode() {\n", 
            "         String trpUrl = \"http://localhost:8280/services/StockQuote\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Dumb Client mode\");\n", 
            "-        SampleClientResult result = client.requestStandardQuote(null, trpUrl, null, \"IBM\" ,null);\n", 
            "+        SampleClientResult result = client.requestStandardQuote(\n", 
            "+                null, trpUrl, null, \"IBM\", null);\n", 
            "         assertResponseReceived(result);\n", 
            "     }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample1.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample1.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,21 +25,19", 
          "lines": [
            " \n", 
            " public class Sample2 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample2() {\n", 
            "         super(2);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testCBR() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: CBR with the Switch-case mediator, using message properties\");\n", 
            "-        SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "+        SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\", null);\n", 
            "         assertResponseReceived(result);\n", 
            "-        result = client.requestStandardQuote(addUrl, trpUrl, null, \"MSFT\" ,null);\n", 
            "+        result = client.requestStandardQuote(addUrl, trpUrl, null, \"MSFT\", null);\n", 
            "         assertResponseReceived(result);\n", 
            "     }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample2.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample2.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,11 +25,8", 
          "lines": [
            " \n", 
            " public class Sample3 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample3() {\n", 
            "         super(3);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-36,9 +33,11", 
          "lines": [
            "     public void testLocalEntriesReusableEndPointsSequences() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Local Registry entry definitions, reusable endpoints and sequences\");\n", 
            "-        SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "+        SampleClientResult result = client.requestStandardQuote(\n", 
            "+                addUrl, trpUrl, null, \"IBM\", null);\n", 
            "         assertResponseReceived(result);\n", 
            "     }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample3.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample3.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,11 +26,8", 
          "lines": [
            " \n", 
            " public class Sample4 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample4() {\n", 
            "         super(4);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-38,6 +35,8", 
          "lines": [
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280\";\n", 
            " \n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "+\n", 
            "         log.info(\"Running test: Introduction to error handling\");\n", 
            "         SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "         assertResponseReceived(result);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample4.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample4.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,11 +26,8", 
          "lines": [
            " \n", 
            " public class Sample5 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample5() {\n", 
            "         super(5);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-40,6 +37,8", 
          "lines": [
            "         String expectedError_MSFT = \"Error while connecting to the endpoint (Connection Failed)\";\n", 
            "         String expectedError_SUN = \"Error while connecting to the endpoint (Connection Failed)\";\n", 
            " \n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "+\n", 
            "         log.info(\"Running test: Creating SOAP fault messages and changing the direction of a message\");\n", 
            "         SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, \"MSFT\" ,null);\n", 
            "         assertFalse(\"Must not get a response\", result.responseReceived());\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample5.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample5.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,15 +25,13", 
          "lines": [
            " \n", 
            " public class Sample6 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample6() {\n", 
            "         super(6);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testManipulatingHeadersAndFiltering() {\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Dumb Client mode  \");\n", 
            "         SampleClientResult result = client.requestStandardQuote(null, trpUrl, null, null ,null);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample6.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample6.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,11 +26,8", 
          "lines": [
            " \n", 
            " public class Sample7 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample7() {\n", 
            "         super(7);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-38,6 +35,7", 
          "lines": [
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280\";\n", 
            "         String expectedError = \"Invalid custom quote request\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Creating SOAP fault messages and changing the direction of a message\");\n", 
            "         SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\",null);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample7.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample7.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,11 +25,8", 
          "lines": [
            " \n", 
            " public class Sample8 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample8() {\n", 
            "         super(8);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-36,6 +33,7", 
          "lines": [
            "     public void testRegistryAndXSLTMediator() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Introduction to static and dynamic registry resources, and using XSLT transformations\");\n", 
            "         SampleClientResult result = client.requestCustomQuote(addUrl, trpUrl, null, \"IBM\");\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample8.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample8.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,11 +25,8", 
          "lines": [
            " \n", 
            " public class Sample9 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample9() {\n", 
            "         super(9);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-36,6 +33,7", 
          "lines": [
            "     public void testDynamicSequences() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Dynamic Sequences with Registry\");\n", 
            "         SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample9.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample9.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,16 +25,14", 
          "lines": [
            " \n", 
            " public class Sample10 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample10() {\n", 
            "         super(10);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n", 
            "     public void testDynamicEndPoints() {\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Dynamic EndPoints with Registry\");\n", 
            "         SampleClientResult result = client.requestStandardQuote(null, trpUrl, null, \"IBM\", null);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample10.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample10.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,11 +25,8", 
          "lines": [
            " \n", 
            " public class Sample11 extends SynapseTestCase {\n", 
            " \n", 
            "-    StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample11() {\n", 
            "         super(11);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-36,6 +33,7", 
          "lines": [
            "     public void testFullRegistryBasedConfig() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Local Registry entry definitions, reusable endpoints and sequences\");\n", 
            "         SampleClientResult result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\",null);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample11.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample11.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,16 +25,14", 
          "lines": [
            " \n", 
            " public class Sample12 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample12() {\n", 
            "         super(12);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testFireAndForget() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: One way messaging / fireAndForget through Synapse\");\n", 
            "         SampleClientResult result = client.placeOrder(addUrl, trpUrl, null, \"IBM\");\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample12.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample12.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,11 +25,8", 
          "lines": [
            " \n", 
            " public class Sample13 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample13() {\n", 
            "         super(13);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-36,6 +33,7", 
          "lines": [
            "     public void testDualQuote() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Dual channel invocation through Synapse\");\n", 
            "         SampleClientResult result = client.requestDualQuote(addUrl, trpUrl, null, \"IBM\");\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample13.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample13.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,16 +25,14", 
          "lines": [
            " \n", 
            " public class Sample15 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample15() {\n", 
            "         super(15);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n", 
            "     public void testMessageEnrichment() {\n", 
            "         String trpUrl = \"http://localhost:8280/services/StockQuote\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Message Enrichment through Synapse\");\n", 
            "         SampleClientResult result = client.requestStandardQuote(null, trpUrl, null, \"IBM\" ,null);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample15.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample15.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,11 +25,8", 
          "lines": [
            " \n", 
            " public class Sample16 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample16() {\n", 
            "         super(16);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-36,6 +33,7", 
          "lines": [
            "     public void testDynamicStaticKeys() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Introduction to dynamic and static keys \");\n", 
            "         SampleClientResult result = client.requestCustomQuote(addUrl, trpUrl, null, \"IBM\");\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample16.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/message/Sample16.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,16 +26,14", 
          "lines": [
            " public class Sample420 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample420() {\n", 
            "         super(420);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testCache() {\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "-\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         log.info(\"Running test: Simple cache implemented on Synapse for the actual service\");\n", 
            "         result = client.requestStandardQuote(null, trpUrl, null, \"IBM\" ,null);\n", 
            "         assertTrue(\"Client did not get run successfully \", result.responseReceived());\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample420.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample420.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,17 +26,15", 
          "lines": [
            " public class Sample430 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample430() {\n", 
            "         super(430);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testCallOut() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "-\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         log.info(\"Running test: Simple Callout Mediator for synchronizing web service invocation\");\n", 
            "         result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "         assertTrue(\"Client did not get run successfully \", result.responseReceived());\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample430.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample430.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,16 +25,15", 
          "lines": [
            " public class Sample431 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample431() {\n", 
            "         super(431);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testCallOutSecurity() {\n", 
            "         log.info(\"Running test: Callout Mediator with security\");\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         result = client.requestStandardQuote(null, trpUrl, null, \"IBM\" ,null);\n", 
            "         assertTrue(\"Client did not run successfully \", result.responseReceived());\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample431.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample431.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,17 +26,15", 
          "lines": [
            " public class Sample350 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample350() {\n", 
            "         super(350);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testScriptMediationWithJS() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "-\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         log.info(\"Running test: Introduction to the script mediator using js scripts \");\n", 
            "         result = client.requestCustomQuote(addUrl, trpUrl, null, \"IBM\");\n", 
            "         assertTrue(\"Client did not get run successfully \", result.responseReceived());\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample350.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample350.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,11 +26,9", 
          "lines": [
            " public class Sample351 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample351() {\n", 
            "         super(351);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-37,6 +35,7", 
          "lines": [
            "     public void testScriptMediationInLineJS() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Introduction to the script mediator using js scripts \");\n", 
            "         result = client.requestCustomQuote(addUrl, trpUrl, null, \"IBM\");\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample351.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample351.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,11 +26,9", 
          "lines": [
            " public class Sample460 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample460() {\n", 
            "         super(460);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-37,6 +35,7", 
          "lines": [
            "     public void testSpringBeanAsAMediator() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Spring Bean as a Mediator\");\n", 
            "         result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample460.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample460.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,18 +26,16", 
          "lines": [
            " public class Sample352 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample352() {\n", 
            "         super(352);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n", 
            "-    public void testAccesingAPIUsingScripting() {\n", 
            "+    public void testAccessingAPIUsingScripting() {\n", 
            "         String addUrl = \"http://localhost:9000/services/SimpleStockQuoteService\";\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "-\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         log.info(\"Running test: Accessing Synapse message context API methods using scripting language\");\n", 
            "         result = client.requestStandardQuote(addUrl, trpUrl, null, \"IBM\" ,null);\n", 
            "         assertTrue(\"Client did not get run successfully \", result.responseReceived());\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample352.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample352.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,17 +26,15", 
          "lines": [
            " public class Sample370 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample370() {\n", 
            "         super(370);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n", 
            "     public void testThrottling() {\n", 
            "         String addUrl = \"http://localhost:8280/\";\n", 
            "-\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         log.info(\"Running test: Introduction to throttle mediator and concurrency throttling\");\n", 
            "         result = client.requestStandardQuote(addUrl, null, null, \"IBM\" ,null);\n", 
            "         assertTrue(\"Client did not get run successfully \", result.responseReceived());\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample370.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample370.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-27,16 +27,15", 
          "lines": [
            " public class Sample371 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample371() {\n", 
            "         super(371);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testRestrictedThrottling() {\n", 
            "         String addUrl = \"http://localhost:8280/\";\n", 
            "         String expectedError = \"Access Denied\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Restricting requests based on policies \");\n", 
            "         for (int i = 0; i < 4; i++) {\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample371.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample371.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,17 +26,15", 
          "lines": [
            " public class Sample390 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample390() {\n", 
            "         super(390);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n", 
            "     public void testXQuery() {\n", 
            "         String addUrl = \"http://localhost:8280/services/StockQuoteProxy\";\n", 
            "-\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         log.info(\"Running test: Introduction to the XQuery mediator\");\n", 
            "         result = client.requestCustomQuote(addUrl, null, null, \"IBM\");\n", 
            "         assertTrue(\"Client did not get run successfully \", result.responseReceived());\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample390.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample390.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,16 +26,14", 
          "lines": [
            " public class Sample391 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample391() {\n", 
            "         super(391);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testExternalXQuery() {\n", 
            "         String addUrl = \"http://localhost:8280/services/StockQuoteProxy\";\n", 
            "-\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         log.info(\"Running test: How to use the data from an external XML document with in XQuery \");\n", 
            "         result = client.requestStandardQuote(addUrl, null, null, \"IBM\",null);\n", 
            "         assertTrue(\"Client did not get run successfully \", result.responseReceived());\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample391.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/advanced/Sample391.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-27,12 +27,10", 
          "lines": [
            " public class Sample53 extends SynapseTestCase {\n", 
            " \n", 
            "     private SampleClientResult result;\n", 
            "-    private StockQuoteSampleClient client;\n", 
            "     private String addUrl;\n", 
            " \n", 
            "     public Sample53() {\n", 
            "         super(53);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-40,6 +38,7", 
          "lines": [
            "         String expectedError = \"COULDN'T SEND THE MESSAGE TO THE SERVER\";\n", 
            "         addUrl = \"http://localhost:8280/services/LBService1\";\n", 
            "         log.info(\"Running test: Failover sending among 3 endpoints\");\n", 
            "+        final StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         // Send some messages and check\n", 
            "         Thread t = new Thread(new Runnable() {\n"
          ]
        }, 
        {
          "locn": "-56,7 +55,7", 
          "lines": [
            "         assertResponseReceived(result);\n", 
            " \n", 
            "         // Stop BE server 1\n", 
            "-        getBackendServerControllers().get(0).stop();\n", 
            "+        getBackendServerControllers().get(0).stopProcess();\n", 
            "         try {\n", 
            "             Thread.sleep(2000);\n", 
            "         } catch (InterruptedException e) {\n"
          ]
        }, 
        {
          "locn": "-78,7 +77,7", 
          "lines": [
            "         assertResponseReceived(result);\n", 
            " \n", 
            "         // Stop BE server 2\n", 
            "-        getBackendServerControllers().get(1).stop();\n", 
            "+        getBackendServerControllers().get(1).stopProcess();\n", 
            "         try {\n", 
            "             Thread.sleep(2000);\n", 
            "         } catch (InterruptedException e) {\n"
          ]
        }, 
        {
          "locn": "-100,7 +99,7", 
          "lines": [
            "         assertResponseReceived(result);\n", 
            " \n", 
            "         // Stop BE server 3\n", 
            "-        getBackendServerControllers().get(2).stop();\n", 
            "+        getBackendServerControllers().get(2).stopProcess();\n", 
            "         try {\n", 
            "             Thread.sleep(2000);\n", 
            "         } catch (InterruptedException e) {\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample53.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample53.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,78 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.samples.framework.config;\n", 
            "-\n", 
            "-public class SynapseServerConfiguration {\n", 
            "-\n", 
            "-    private String serverName;\n", 
            "-    private String synapseHome;\n", 
            "-    private String axis2Repo;\n", 
            "-    private String axis2Xml;\n", 
            "-    private String synapseXml;\n", 
            "-    private boolean clusteringEnabled;\n", 
            "-\n", 
            "-    public String getServerName() {\n", 
            "-        return serverName;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setServerName(String serverName) {\n", 
            "-        this.serverName = serverName;\n", 
            "-    }\n", 
            "-\n", 
            "-    public String getSynapseHome() {\n", 
            "-        return synapseHome;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setSynapseHome(String synapseHome) {\n", 
            "-        this.synapseHome = synapseHome;\n", 
            "-    }\n", 
            "-\n", 
            "-    public String getAxis2Repo() {\n", 
            "-        return axis2Repo;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setAxis2Repo(String axis2Repo) {\n", 
            "-        this.axis2Repo = axis2Repo;\n", 
            "-    }\n", 
            "-\n", 
            "-    public String getAxis2Xml() {\n", 
            "-        return axis2Xml;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setAxis2Xml(String axis2Xml) {\n", 
            "-        this.axis2Xml = axis2Xml;\n", 
            "-    }\n", 
            "-\n", 
            "-    public String getSynapseXml() {\n", 
            "-        return synapseXml;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setSynapseXml(String synapseXml) {\n", 
            "-        this.synapseXml = synapseXml;\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean isClusteringEnabled() {\n", 
            "-        return clusteringEnabled;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setClusteringEnabled(boolean clusteringEnabled) {\n", 
            "-        this.clusteringEnabled = clusteringEnabled;\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SynapseServerConfiguration.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SynapseServerConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,87 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.samples.framework.config;\n", 
            "-\n", 
            "-public class Axis2ServerConfiguration {\n", 
            "-\n", 
            "-    private String serverName;\n", 
            "-    private String axis2Repo;\n", 
            "-    private String axis2Xml;\n", 
            "-    private String httpPort;\n", 
            "-    private String httpsPort;\n", 
            "-    private boolean clusteringEnabled;\n", 
            "-    private boolean counterEnabled;\n", 
            "-\n", 
            "-    public String getServerName() {\n", 
            "-        return serverName;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setServerName(String serverName) {\n", 
            "-        this.serverName = serverName;\n", 
            "-    }\n", 
            "-\n", 
            "-    public String getAxis2Repo() {\n", 
            "-        return axis2Repo;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setAxis2Repo(String axis2Repo) {\n", 
            "-        this.axis2Repo = axis2Repo;\n", 
            "-    }\n", 
            "-\n", 
            "-    public String getAxis2Xml() {\n", 
            "-        return axis2Xml;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setAxis2Xml(String axis2Xml) {\n", 
            "-        this.axis2Xml = axis2Xml;\n", 
            "-    }\n", 
            "-\n", 
            "-    public String getHttpPort() {\n", 
            "-        return httpPort;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setHttpPort(String httpPort) {\n", 
            "-        this.httpPort = httpPort;\n", 
            "-    }\n", 
            "-\n", 
            "-    public String getHttpsPort() {\n", 
            "-        return httpsPort;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setHttpsPort(String httpsPort) {\n", 
            "-        this.httpsPort = httpsPort;\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean isClusteringEnabled() {\n", 
            "-        return clusteringEnabled;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setClusteringEnabled(boolean clusteringEnabled) {\n", 
            "-        this.clusteringEnabled = clusteringEnabled;\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean isCounterEnabled() {\n", 
            "-        return counterEnabled;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setCounterEnabled(boolean counterEnabled) {\n", 
            "-        this.counterEnabled = counterEnabled;\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/Axis2ServerConfiguration.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/Axis2ServerConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,51 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.samples.framework.config;\n", 
            "-\n", 
            "-public class JMSBrokerConfiguration {\n", 
            "-\n", 
            "-    private String serverName;\n", 
            "-    private String providerURL;\n", 
            "-    private String initialNamingFactory;\n", 
            "-\n", 
            "-    public String getServerName() {\n", 
            "-        return serverName;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setServerName(String serverName) {\n", 
            "-        this.serverName = serverName;\n", 
            "-    }\n", 
            "-\n", 
            "-    public String getProviderURL() {\n", 
            "-        return providerURL;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setProviderURL(String providerURL) {\n", 
            "-        this.providerURL = providerURL;\n", 
            "-    }\n", 
            "-\n", 
            "-    public String getInitialNamingFactory() {\n", 
            "-        return initialNamingFactory;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setInitialNamingFactory(String initialNamingFactory) {\n", 
            "-        this.initialNamingFactory = initialNamingFactory;\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/JMSBrokerConfiguration.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/JMSBrokerConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,98 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.samples.framework.config;\n", 
            "-\n", 
            "-import java.util.HashMap;\n", 
            "-import java.util.Set;\n", 
            "-\n", 
            "-public class SampleConfiguration {\n", 
            "-\n", 
            "-    private String sampleName;\n", 
            "-    private SynapseServerConfiguration synapseServerConfig;\n", 
            "-    private HashMap<String, Axis2ServerConfiguration> axis2ServerConfigs;\n", 
            "-    private HashMap<String, JMSBrokerConfiguration> jmsConfigs;\n", 
            "-    private HashMap<String, DerbyConfiguration> derbyConfigs;\n", 
            "-    private Axis2ClientConfiguration axis2ClientConfig;\n", 
            "-\n", 
            "-    public SampleConfiguration() {\n", 
            "-        this.synapseServerConfig = new SynapseServerConfiguration();\n", 
            "-        this.axis2ServerConfigs = new HashMap<String, Axis2ServerConfiguration>();\n", 
            "-        this.jmsConfigs = new HashMap<String, JMSBrokerConfiguration>();\n", 
            "-        this.derbyConfigs = new HashMap<String, DerbyConfiguration>();\n", 
            "-        this.axis2ClientConfig = new Axis2ClientConfiguration();\n", 
            "-    }\n", 
            "-\n", 
            "-    public String getSampleName() {\n", 
            "-        return sampleName;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setSampleName(String sampleName) {\n", 
            "-        this.sampleName = sampleName;\n", 
            "-    }\n", 
            "-\n", 
            "-    public Axis2ClientConfiguration getAxis2ClientConfig() {\n", 
            "-        return axis2ClientConfig;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setAxis2Client(Axis2ClientConfiguration axis2ClientConfig) {\n", 
            "-        this.axis2ClientConfig = axis2ClientConfig;\n", 
            "-    }\n", 
            "-\n", 
            "-    public SynapseServerConfiguration getSynapseServerConfig() {\n", 
            "-        return synapseServerConfig;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setSynapseServerConfig(SynapseServerConfiguration synapseServerConfig) {\n", 
            "-        this.synapseServerConfig = synapseServerConfig;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void addNewAxis2Server(String name) {\n", 
            "-        axis2ServerConfigs.put(name, new Axis2ServerConfiguration());\n", 
            "-    }\n", 
            "-\n", 
            "-    public void addNewJMSBroker(String name) {\n", 
            "-        jmsConfigs.put(name, new JMSBrokerConfiguration());\n", 
            "-    }\n", 
            "-\n", 
            "-    public void addNewDerbyServer(String name) {\n", 
            "-        derbyConfigs.put(name, new DerbyConfiguration());\n", 
            "-    }\n", 
            "-\n", 
            "-    public Axis2ServerConfiguration getAxis2Config(String name) {\n", 
            "-        return axis2ServerConfigs.get(name);\n", 
            "-    }\n", 
            "-\n", 
            "-    public JMSBrokerConfiguration getJMSConfig(String name) {\n", 
            "-        return jmsConfigs.get(name);\n", 
            "-    }\n", 
            "-\n", 
            "-    public DerbyConfiguration getDerbyConfig(String name) {\n", 
            "-        return derbyConfigs.get(name);\n", 
            "-    }\n", 
            "-\n", 
            "-    public Set<String> getAxis2ServersList() {\n", 
            "-        return axis2ServerConfigs.keySet();\n", 
            "-    }\n", 
            "-\n", 
            "-    public int getBackEndServerCount() {\n", 
            "-        return axis2ServerConfigs.size() + jmsConfigs.size();\n", 
            "-    }\n", 
            "-\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SampleConfiguration.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SampleConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,33 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.samples.framework.config;\n", 
            "-\n", 
            "-public class DerbyConfiguration {\n", 
            "-\n", 
            "-    private String serverName;\n", 
            "-\n", 
            "-    public String getServerName() {\n", 
            "-        return serverName;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setServerName(String serverName) {\n", 
            "-        this.serverName = serverName;\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/DerbyConfiguration.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/DerbyConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,11 +25,8", 
          "lines": [
            " \n", 
            " public class Sample59 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample59() {\n", 
            "         super(59);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testSessionLessLB() {\n"
          ]
        }, 
        {
          "locn": "-36,6 +33,7", 
          "lines": [
            "         String addUrl = \"http://localhost:8280/services/LBService1\";\n", 
            " \n", 
            "         log.info(\"Running test: Weighted load balancing between 3 endpoints\");\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         SampleClientResult result = client.sessionlessClient(addUrl, null, 100);\n", 
            "         assertResponseReceived(result);\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample59.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample59.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,11 +25,8", 
          "lines": [
            " \n", 
            " public class Sample153 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample153() {\n", 
            "         super(153);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-38,6 +35,7", 
          "lines": [
            "         String policy = \"./repository/conf/sample/resources/policy/client_policy_3.xml\";\n", 
            "         log.info(\"Running test: Routing the messages arrived to a proxy service without \" +\n", 
            "                 \"processing the security headers\");\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         SampleClientResult  result = client.requestStandardQuote(null, url, null, \"IBM\", policy);\n", 
            "         assertTrue(\"Client did not a response with https \", result.responseReceived());\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample153.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample153.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,15 +26,14", 
          "lines": [
            " public class Sample58 extends SynapseTestCase {\n", 
            " \n", 
            "     private SampleClientResult result;\n", 
            "-    private StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample58() {\n", 
            "         super(58);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testStaticLB() {\n", 
            "         final String addUrl = \"http://localhost:8280/services/LBService1\";\n", 
            "+        final StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         new Thread(new Runnable() {\n", 
            "             public void run() {\n"
          ]
        }, 
        {
          "locn": "-46,7 +45,7", 
          "lines": [
            "         } catch (InterruptedException e) {\n", 
            " \n", 
            "         }\n", 
            "-        getBackendServerControllers().get(0).stop();\n", 
            "+        getBackendServerControllers().get(0).stopProcess();\n", 
            " \n", 
            "         try {\n", 
            "             Thread.sleep(2000);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample58.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample58.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,11 +26,8", 
          "lines": [
            " \n", 
            " public class Sample152 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample152() {\n", 
            "         super(152);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-39,7 +36,7", 
          "lines": [
            "         String trustStore = FilenameUtils.normalize(System.getProperty(\"user.dir\") +\n", 
            "                 \"/modules/integration/src/test/resources/trust.jks\");\n", 
            "         System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n", 
            "-\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         log.info(\"Running test: Switching transports and message format from SOAP to REST/POX\");\n", 
            " \n", 
            "         SampleClientResult result2 = client.requestStandardQuote(null, url2, null, \"IBM\" ,null);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample152.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample152.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,16 +26,14", 
          "lines": [
            " public class Sample57 extends SynapseTestCase {\n", 
            " \n", 
            "     private SampleClientResult result;\n", 
            "-    private StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample57() {\n", 
            "         super(57);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testDynamicLB() {\n", 
            "         final String addUrl = \"http://localhost:8280/services/LBService1\";\n", 
            "-\n", 
            "+        final StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         log.info(\"Running test: Dynamic load balancing between 3 nodes\");\n", 
            "         try {\n", 
            "             Thread.sleep(3000);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample57.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample57.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,16 +25,14", 
          "lines": [
            " \n", 
            " public class Sample151 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample151() {\n", 
            "         super(151);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testCustomSequencesEndpointsWithProxy() {\n", 
            "         String addUrl = \"http://localhost:8280/services/StockQuoteProxy1\";\n", 
            "         String addUrl2 = \"http://localhost:8280/services/StockQuoteProxy2\";\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            " \n", 
            "         log.info(\"Running test: Custom sequences and endpoints with proxy services\");\n", 
            "         SampleClientResult result1 = client.requestStandardQuote(addUrl, null, null, \"IBM\" ,null);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample151.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample151.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,11 +25,8", 
          "lines": [
            " \n", 
            " public class Sample155 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample155() {\n", 
            "         super(155);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-38,6 +35,7", 
          "lines": [
            " \n", 
            "         log.info(\"Running test: Dual channel invocation on both client side and server \" +\n", 
            "                 \"side of Synapse with Proxy Services\");\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         SampleClientResult result = client.requestDualQuote(addUrl, null, null, \"IBM\");\n", 
            "         assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample155.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample155.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,17 +25,14", 
          "lines": [
            " \n", 
            " public class Sample56 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample56() {\n", 
            "         super(56);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n", 
            "     public void testSmartClientMode() {\n", 
            "         String addUrl = \"http://localhost:8280\";\n", 
            "-\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         log.info(\"Running test: Smart Client mode\");\n", 
            "         SampleClientResult result = client.requestStandardQuote(addUrl, null, null, \"IBM\" ,null);\n", 
            "         assertResponseReceived(result);\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample56.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/endpoint/Sample56.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-29,16 +29,14", 
          "lines": [
            " \n", 
            " public class Sample150 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample150() {\n", 
            "         super(150);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            "     public void testBasicProxy() {\n", 
            "         String addUrl = \"http://localhost:8280/services/StockQuoteProxy\";\n", 
            "         log.info(\"Running test: Introduction to proxy services\");\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         SampleClientResult result = client.requestStandardQuote(addUrl, null, null, \"IBM\" ,null);\n", 
            "         assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample150.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample150.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,11 +25,8", 
          "lines": [
            " \n", 
            " public class Sample154 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample154() {\n", 
            "         super(154);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-36,6 +33,7", 
          "lines": [
            "     public void testSessionFullLB() {\n", 
            "         String trpUrl = \"http://localhost:8280/services/LBProxy\";\n", 
            "         log.info(\"Running test: Load Balancing with Proxy Services \");\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         SampleClientResult result = client.statefulClient(null, trpUrl, 100);\n", 
            "         assertTrue(\"Client did not run successfully \", result.responseReceived());\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample154.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample154.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,11 +26,9", 
          "lines": [
            " public class Sample100 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample100() {\n", 
            "         super(100);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-37,6 +35,7", 
          "lines": [
            "     public void testWSSecurity() {\n", 
            "         String trpUrl = \"http://localhost:8280/\";\n", 
            "         log.info(\"Running test: Using WS-Security for outgoing messages\");\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         result = client.requestStandardQuote(null, trpUrl, null, \"IBM\", null);\n", 
            "         assertTrue(\"Client did not run successfully\", result.responseReceived());\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/qos/Sample100.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/qos/Sample100.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,89", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.samples.framework.config;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Sample configuration constants\n", 
            "+ */\n", 
            "+public class SampleConfigConstants {\n", 
            "+\n", 
            "+    public static final String ATTR_SERVER_ID = \"id\";\n", 
            "+\n", 
            "+    //xml tag names\n", 
            "+    public static final String TAG_SAMPLE_ID = \"sampleID\";\n", 
            "+    public static final String TAG_SAMPLE_NAME = \"sampleName\";\n", 
            "+\n", 
            "+    public static final String TAG_SYNAPSE_CONF = \"synapseConfig\";\n", 
            "+    public static final String TAG_SYNAPSE_CONF_AXIS2_REPO = \"axis2Repo\";\n", 
            "+    public static final String TAG_SYNAPSE_CONF_AXIS2_XML = \"axis2Xml\";\n", 
            "+    public static final String TAG_SYNAPSE_CONF_XML = \"synapseXml\";\n", 
            "+\n", 
            "+    public static final String TAG_BE_SERVER_CONF = \"backEndServerConfig\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_AXIS2_SERVER = \"axis2Server\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_JMS_BROKER = \"jmsBroker\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_DERBY_SERVER = \"derbyServer\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_QFIX_EXECUTOR = \"fixExecutor\";\n", 
            "+\n", 
            "+    public static final String TAG_BE_SERVER_CONF_AXIS2_REPO = \"axis2Repo\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_AXIS2_XML = \"axis2Xml\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_AXIS2_HTTP_PORT = \"httpPort\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_AXIS2_HTTPS_PORT = \"httpsPort\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_AXIS2_COUNTER_ENABLED = \"counterEnabled\";\n", 
            "+\n", 
            "+    public static final String TAG_BE_SERVER_CONF_DERBY_PORT = \"dbPort\";\n", 
            "+\n", 
            "+    public static final String TAG_BE_SERVER_CONF_JMS_PROVIDER_URL = \"providerURL\";\n", 
            "+    public static final String TAG_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY = \"initialNamingFactory\";\n", 
            "+\n", 
            "+    public static final String TAG_CLIENT_CONF = \"clientConfig\";\n", 
            "+    public static final String TAG_CLIENT_CONF_REPO = \"clientRepo\";\n", 
            "+    public static final String TAG_CLIENT_CONF_AXIS2_XML = \"axis2Xml\";\n", 
            "+    public static final String TAG_CLIENT_CONF_FILENAME = \"fileName\";\n", 
            "+\n", 
            "+    public static final String TAG_ENABLE_CLUSTERING = \"enableClustering\";\n", 
            "+\n", 
            "+    //default values\n", 
            "+    public static final String DEFAULT_SERVER_ID = \"default\";\n", 
            "+\n", 
            "+    public static final String DEFAULT_SYNAPSE_CONF_AXIS2_XML =\n", 
            "+            \"modules/integration/target/test_repos/synapse/conf/axis2_def.xml\";\n", 
            "+    public static final String DEFAULT_SYNAPSE_CONF_AXIS2_REPO =\n", 
            "+            \"modules/integration/target/test_repos/synapse\";\n", 
            "+\n", 
            "+    public static final String DEFAULT_BE_SERVER_CONF_AXIS2_XML =\n", 
            "+            \"modules/integration/target/test_repos/axis2Server/conf/axis2_def.xml\";\n", 
            "+    public static final String DEFAULT_BE_SERVER_CONF_AXIS2_REPO =\n", 
            "+            \"modules/integration/target/test_repos/axis2Server\";\n", 
            "+\n", 
            "+    public static final String DEFAULT_BE_SERVER_CONF_DERBY_PORT = \"1527\";\n", 
            "+\n", 
            "+    public static final String DEFAULT_BE_SERVER_CONF_JMS_PROVIDER_URL = \"tcp://localhost:61616\";\n", 
            "+    public static final String DEFAULT_BE_SERVER_CONF_JMS_INITIAL_NAMING_FACTORY =\n", 
            "+            \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\";\n", 
            "+\n", 
            "+    public static final String DEFAULT_CLIENT_CONF_REPO =\n", 
            "+            \"modules/integration/target/test_repos/axis2Client\";\n", 
            "+    public static final String DEFAULT_CLIENT_CONF_FILENAME =\n", 
            "+            \"./repository/samples/resources/asf-logo.gif\";\n", 
            "+    public static final String DEFAULT_CLIENT_CONF_AXIS2_XML =\n", 
            "+            \"modules/integration/target/test_repos/axis2Client/conf/axis2_def.xml\";\n", 
            "+\n", 
            "+\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SampleConfigConstants.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/config/SampleConfigConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,11 +25,8", 
          "lines": [
            " \n", 
            " public class Sample156 extends SynapseTestCase {\n", 
            " \n", 
            "-    private StockQuoteSampleClient client;\n", 
            "-\n", 
            "     public Sample156() {\n", 
            "         super(156);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-36,6 +33,7", 
          "lines": [
            "     public void testServiceIntegration() {\n", 
            "         String addUrl = \"http://localhost:8280/services/StockQuoteProxy\";\n", 
            "         log.info(\"Running test: Service Integration with specifying the receiving sequence\");\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         SampleClientResult result = client.requestStandardQuote(addUrl, null, null, \"IBM\" ,null);\n", 
            "         assertTrue(\"Client did not get run successfully \", result.responseReceived());\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample156.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/proxy/Sample156.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-18,14 +18,13", 
          "lines": [
            "  */\n", 
            " package org.apache.synapse.samples.framework;\n", 
            " \n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.synapse.ServerConfigurationInformation;\n", 
            " import org.apache.synapse.ServerManager;\n", 
            "-import org.apache.synapse.samples.framework.config.SynapseServerConfiguration;\n", 
            "+import org.apache.synapse.samples.framework.config.SampleConfigConstants;\n", 
            " \n", 
            "-import java.util.concurrent.CountDownLatch;\n", 
            "-\n", 
            " /**\n", 
            "  * Responsible for starting up and shutting down\n", 
            "  * a synapse server instance in order to run a sample test.\n"
          ]
        }, 
        {
          "locn": "-34,90 +33,147", 
          "lines": [
            " \n", 
            "     private static final Log log = LogFactory.getLog(SynapseProcessController.class);\n", 
            " \n", 
            "-    private ServerThread serverThread;\n", 
            "-    private SynapseServerConfiguration configuration;\n", 
            "+    private static final int UNDEFINED      = 1;\n", 
            "+    private static final int STARTING_UP    = 2;\n", 
            "+    private static final int SERVER_ACTIVE  = 3;\n", 
            "+    private static final int STARTUP_FAILED = 4;\n", 
            "+    private static final int SHUTTING_DOWN  = 5;\n", 
            "+\n", 
            "     private ServerConfigurationInformation information;\n", 
            "-    private ServerManager manager;\n", 
            "-    private CountDownLatch cdLatch;\n", 
            "+    private boolean clusteringEnabled;\n", 
            "+\n", 
            "+    private int serverState = UNDEFINED;\n", 
            "+\n", 
            "+    private final SynapseServer synapseServer;\n", 
            "     private Exception processException;\n", 
            " \n", 
            "-    public SynapseProcessController(SynapseServerConfiguration configuration) {\n", 
            "-        this.configuration = configuration;\n", 
            "+    public SynapseProcessController(int sampleId, OMElement element) {\n", 
            "+        String synapseHome = SynapseTestUtils.getCurrentDir();\n", 
            "+        String synapseXml = SynapseTestUtils.getRequiredParameter(element,\n", 
            "+                SampleConfigConstants.TAG_SYNAPSE_CONF_XML);\n", 
            "+        String repoPath = SynapseTestUtils.getParameter(element,\n", 
            "+                SampleConfigConstants.TAG_SYNAPSE_CONF_AXIS2_REPO,\n", 
            "+                SampleConfigConstants.DEFAULT_SYNAPSE_CONF_AXIS2_REPO);\n", 
            "+        String axis2Xml = SynapseTestUtils.getParameter(element,\n", 
            "+                SampleConfigConstants.TAG_SYNAPSE_CONF_AXIS2_XML,\n", 
            "+                SampleConfigConstants.DEFAULT_SYNAPSE_CONF_AXIS2_XML);\n", 
            "+        String serverName = \"Synapse\" + sampleId;\n", 
            "+\n", 
            "+        clusteringEnabled = Boolean.parseBoolean(SynapseTestUtils.getParameter(element,\n", 
            "+                SampleConfigConstants.TAG_ENABLE_CLUSTERING, \"false\"));\n", 
            "+\n", 
            "         information = new ServerConfigurationInformation();\n", 
            "-        manager = new ServerManager();\n", 
            "-        cdLatch = new CountDownLatch(1);\n", 
            "-        serverThread = new ServerThread();\n", 
            "-        serverThread.setName(configuration.getServerName() + \" thread\");\n", 
            "+        information.setSynapseHome(synapseHome);\n", 
            "+        information.setSynapseXMLLocation(synapseXml);\n", 
            "+        information.setServerName(serverName);\n", 
            "+        information.setAxis2Xml(axis2Xml);\n", 
            "+        information.setResolveRoot(repoPath);\n", 
            "+        information.setAxis2RepoLocation(repoPath);\n", 
            "+\n", 
            "+        synapseServer = new SynapseServer();\n", 
            "     }\n", 
            " \n", 
            "+    public boolean isClusteringEnabled() {\n", 
            "+        return clusteringEnabled;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getAxis2Xml() {\n", 
            "+        return information.getAxis2Xml();\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setAxis2Xml(String path) {\n", 
            "+        information.setAxis2Xml(path);\n", 
            "+    }\n", 
            "+\n", 
            "     public boolean startProcess() {\n", 
            "-        information.setSynapseHome(configuration.getSynapseHome());\n", 
            "-        information.setSynapseXMLLocation(configuration.getSynapseXml());\n", 
            "-        information.setServerName(configuration.getServerName());\n", 
            "-        information.setAxis2Xml(configuration.getAxis2Xml());\n", 
            "-        information.setResolveRoot(configuration.getAxis2Repo());\n", 
            "-        information.setAxis2RepoLocation(configuration.getAxis2Repo());\n", 
            "+        processException = null;\n", 
            " \n", 
            "-        log.info(\"SynapseProcessController: Preparing to start synapse server\");\n", 
            "-        serverThread.start();\n", 
            "+        synchronized (synapseServer) {\n", 
            "+            synapseServer.start();\n", 
            "+            while (serverState <= STARTING_UP) {\n", 
            "+                try {\n", 
            "+                    synapseServer.wait(1000);\n", 
            "+                } catch (InterruptedException e) {\n", 
            "+                    log.error(\"Synapse startup was interrupted\", e);\n", 
            "+                    return false;\n", 
            "+                }\n", 
            "+            }\n", 
            "+        }\n", 
            " \n", 
            "-        try {\n", 
            "-            log.info(\"SynapseProcessController: Waiting for synapse to start\");\n", 
            "-            cdLatch.await();\n", 
            "-            if (processException == null) {\n", 
            "-                log.info(\"SynapseProcessController: synapse is started. continuing tests\");\n", 
            "-                return true;\n", 
            "-            } else {\n", 
            "-                log.warn(\"SynapseProcessController: There was an error starting synapse\", processException);\n", 
            "-                return false;\n", 
            "-            }\n", 
            "-        } catch (InterruptedException e) {\n", 
            "+        if (serverState == STARTUP_FAILED) {\n", 
            "+            log.error(\"Synapse failed to start\", processException);\n", 
            "             return false;\n", 
            "         }\n", 
            "+        return true;\n", 
            "     }\n", 
            " \n", 
            "     public boolean stopProcess() {\n", 
            "-        if (serverThread.isRunning) {\n", 
            "-            serverThread.isRunning = false;\n", 
            "-            try {\n", 
            "-                cdLatch = new CountDownLatch(1);\n", 
            "-                cdLatch.await();\n", 
            "-            } catch (InterruptedException e) {\n", 
            "-                log.warn(\"Thread interrupted\");\n", 
            "+        if (serverState == SERVER_ACTIVE) {\n", 
            "+            synchronized (synapseServer) {\n", 
            "+                serverState = SHUTTING_DOWN;\n", 
            "+                synapseServer.notifyAll();\n", 
            "+\n", 
            "+                while (serverState > UNDEFINED) {\n", 
            "+                    try {\n", 
            "+                        synapseServer.wait(1000);\n", 
            "+                    } catch (InterruptedException e) {\n", 
            "+                        log.warn(\"Synapse shutdown was interrupted\", e);\n", 
            "+                        return false;\n", 
            "+                    }\n", 
            "+                }\n", 
            "             }\n", 
            "         }\n", 
            "         return true;\n", 
            "     }\n", 
            " \n", 
            "-    private class ServerThread extends Thread {\n", 
            "+    public String getServerName() {\n", 
            "+        return information.getServerName();\n", 
            "+    }\n", 
            " \n", 
            "-        public boolean isRunning = false;\n", 
            "+    private class SynapseServer extends Thread {\n", 
            " \n", 
            "+        SynapseServer() {\n", 
            "+            super(information.getServerName().toLowerCase());\n", 
            "+        }\n", 
            "+\n", 
            "         public void run() {\n", 
            "-            processException = null;\n", 
            "-            log.info(\"SynapseProcessController.ServerThread: Initializing Synapse Server...\");\n", 
            "+            log.info(\"Starting up Synapse...\");\n", 
            "+\n", 
            "+            ServerManager manager = new ServerManager();\n", 
            "             try {\n", 
            "                 manager.init(information, null);\n", 
            "-                log.info(\"SynapseProcessController.ServerThread: Starting Synapse Server...\");\n", 
            "                 manager.start();\n", 
            "-                isRunning = true;\n", 
            "+                serverState = SERVER_ACTIVE;\n", 
            "             } catch (Exception e) {\n", 
            "                 processException = e;\n", 
            "+                serverState = STARTUP_FAILED;\n", 
            "+                return;\n", 
            "+            } finally {\n", 
            "+                synchronized (this) {\n", 
            "+                    this.notifyAll();\n", 
            "+                }\n", 
            "             }\n", 
            "-            cdLatch.countDown();\n", 
            " \n", 
            "-            log.info(\"SynapseProcessController.ServerThread: Await until test are finished\");\n", 
            "-            while (isRunning) {\n", 
            "-                //wait\n", 
            "-                try {\n", 
            "-                    sleep(1000);\n", 
            "-                } catch (InterruptedException e) {\n", 
            "-                    log.warn(\"Thread interrupted\");\n", 
            "+            synchronized (this) {\n", 
            "+                while (serverState < SHUTTING_DOWN) {\n", 
            "+                    //wait for the tests\n", 
            "+                    try {\n", 
            "+                        this.wait(1000);\n", 
            "+                    } catch (InterruptedException e) {\n", 
            "+                        log.error(\"Axis2 server interrupted\", e);\n", 
            "+                    }\n", 
            "                 }\n", 
            "             }\n", 
            "-            log.info(\"SynapseProcessController.ServerThread:Shutting down Synapse Server...\");\n", 
            "-            manager.shutdown();\n", 
            "-            cdLatch.countDown();\n", 
            "+\n", 
            "+            log.info(\"Shutting down Synapse...\");\n", 
            "+            try {\n", 
            "+                manager.shutdown();\n", 
            "+            } finally {\n", 
            "+                synchronized (this) {\n", 
            "+                    serverState = UNDEFINED;\n", 
            "+                    this.notifyAll();\n", 
            "+                }\n", 
            "+            }\n", 
            "         }\n", 
            "     }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseProcessController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseProcessController.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-19,6 +19,12", 
          "lines": [
            " \n", 
            " package org.apache.synapse.samples.framework;\n", 
            " \n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.synapse.SynapseException;\n", 
            "+import org.apache.synapse.samples.framework.config.SampleConfigConstants;\n", 
            "+\n", 
            "+import javax.xml.namespace.QName;\n", 
            "+import java.io.File;\n", 
            " import java.net.Inet4Address;\n", 
            " import java.net.InetAddress;\n", 
            " import java.net.NetworkInterface;\n"
          ]
        }, 
        {
          "locn": "-78,4 +84,46", 
          "lines": [
            "         return ipAddress;\n", 
            "     }\n", 
            " \n", 
            "+    public static String getParameter(OMElement root, String name, String def) {\n", 
            "+        OMElement child = root.getFirstChildWithName(new QName(name));\n", 
            "+        if (child != null && !\"\".equals(child.getText())) {\n", 
            "+            return child.getText();\n", 
            "+        } else {\n", 
            "+            return def;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public static String getRequiredParameter(OMElement root, String name) {\n", 
            "+        OMElement child = root.getFirstChildWithName(new QName(name));\n", 
            "+        if (child != null && !\"\".equals(child.getText())) {\n", 
            "+            return child.getText();\n", 
            "+        } else {\n", 
            "+            throw new SynapseException(\"Required parameter: \" + name + \" unspecified\");\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public static String getAttribute(OMElement root, String name, String def) {\n", 
            "+        String value = root.getAttributeValue(new QName(name));\n", 
            "+        if (value != null && !\"\".equals(value)) {\n", 
            "+            return value;\n", 
            "+        } else {\n", 
            "+            return def;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public static ProcessController createController(OMElement root) {\n", 
            "+        if (SampleConfigConstants.TAG_BE_SERVER_CONF_AXIS2_SERVER.equals(root.getLocalName())) {\n", 
            "+            return new Axis2BackEndServerController(root);\n", 
            "+        } else if (SampleConfigConstants.TAG_BE_SERVER_CONF_DERBY_SERVER.equals(root.getLocalName())) {\n", 
            "+            return new DerbyServerController(root);\n", 
            "+        } else if (SampleConfigConstants.TAG_BE_SERVER_CONF_JMS_BROKER.equals(root.getLocalName())) {\n", 
            "+            return new ActiveMQController(root);\n", 
            "+        }\n", 
            "+        return null;\n", 
            "+    }\n", 
            "+\n", 
            "+    public static String getCurrentDir() {\n", 
            "+        return System.getProperty(\"user.dir\") + File.separator;\n", 
            "+    }\n", 
            "+\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestUtils.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/SynapseTestUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,11 +26,9", 
          "lines": [
            " public class Sample101 extends SynapseTestCase {\n", 
            " \n", 
            "     SampleClientResult result;\n", 
            "-    StockQuoteSampleClient client;\n", 
            " \n", 
            "     public Sample101() {\n", 
            "         super(101);\n", 
            "-        client = getStockQuoteClient();\n", 
            "     }\n", 
            " \n", 
            " \n"
          ]
        }, 
        {
          "locn": "-38,6 +36,7", 
          "lines": [
            "         String addUrl = \"http://localhost:8280/\";\n", 
            " \n", 
            "         log.info(\"Running test: Reliable message exchange\");\n", 
            "+        StockQuoteSampleClient client = getStockQuoteClient();\n", 
            "         result = client.requestStandardQuote(addUrl, null, null, \"IBM\" ,null);\n", 
            "         assertTrue(\"Client did not run successfully \", result.responseReceived());\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/qos/Sample101.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/tests/qos/Sample101.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,18", 
          "lines": [
            "+package org.apache.synapse.samples.framework;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.synapse.samples.framework.config.SampleConfigConstants;\n", 
            "+\n", 
            "+public abstract class AbstractBackEndServerController implements ProcessController {\n", 
            "+\n", 
            "+    protected String serverName;\n", 
            "+\n", 
            "+    public AbstractBackEndServerController(OMElement element) {\n", 
            "+        serverName = SynapseTestUtils.getAttribute(element,\n", 
            "+                SampleConfigConstants.ATTR_SERVER_ID, SampleConfigConstants.DEFAULT_SERVER_ID);\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getServerName() {\n", 
            "+        return serverName;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/AbstractBackEndServerController.java", 
      "from": "java/modules/integration/src/test/java/org/apache/synapse/samples/framework/AbstractBackEndServerController.java"
    }
  ], 
  "id": "1505813"
}