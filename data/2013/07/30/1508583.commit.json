{
  "when": "2013-07-30T15:24:26-04:00", 
  "who": "rajikak", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-38,7 +38,7", 
          "lines": [
            "  */\n", 
            " public class RabbitMQAMQPClient {\n", 
            " \n", 
            "-    public static void main(String[] args) throws IOException, InterruptedException {\n", 
            "+    public static void main(String[] args) {\n", 
            "         String queueName = System.getProperty(\"queueName\");\n", 
            "         String mode = System.getProperty(\"mode\");\n", 
            "         String routingKey = System.getProperty(\"routingKey\");\n"
          ]
        }, 
        {
          "locn": "-60,47 +60,68", 
          "lines": [
            " \n", 
            "         ConnectionFactory factory = new ConnectionFactory();\n", 
            "         factory.setHost(\"localhost\");\n", 
            "-        Connection connection = factory.newConnection();\n", 
            "+        Connection connection = null;\n", 
            "+        Channel channel = null;\n", 
            "+        try {\n", 
            "+            connection = factory.newConnection();\n", 
            " \n", 
            "-        Channel channel = connection.createChannel();\n", 
            "-        channel.queueDeclare(queueName, false, false, false, null);\n", 
            "+            channel = connection.createChannel();\n", 
            " \n", 
            "+            if (mode == null) {\n", 
            "+                mode = \"producer\";\n", 
            "+            }\n", 
            " \n", 
            "-        if (mode == null) {\n", 
            "-            mode = \"producer\";\n", 
            "-        }\n", 
            "+            if (\"producer\".equals(mode)) {\n", 
            "+                if (queueName != null) {\n", 
            "+                    channel.basicPublish(\"\", queueName, null, msg.getBytes());\n", 
            "+                } else {\n", 
            "+                    if (routingKey != null) {\n", 
            "+                        if (exchangeName == null) {\n", 
            "+                            exchangeName = \"topic-exchange\";\n", 
            "+                        }\n", 
            "+                        channel.basicPublish(exchangeName, routingKey, null, msg.getBytes());\n", 
            " \n", 
            "-        if (\"producer\".equals(mode)) {\n", 
            "-            if (queueName != null) {\n", 
            "-                channel.basicPublish(\"\", queueName, null, msg.getBytes());\n", 
            "+                    } else {\n", 
            "+                        if (exchangeName == null) {\n", 
            "+                            exchangeName = \"subscriber-exchange\";\n", 
            "+                        }\n", 
            "+                        channel.basicPublish(exchangeName, \"\", null, msg.getBytes());\n", 
            "+                    }\n", 
            "+                }\n", 
            "             } else {\n", 
            "-                if (routingKey != null) {\n", 
            "-                    if (exchangeName == null) {\n", 
            "-                        exchangeName = \"topic-exchange\";\n", 
            "-                    }\n", 
            "-                    channel.basicPublish(exchangeName, routingKey, null, msg.getBytes());\n", 
            "+                if (queueName == null) {\n", 
            "+                    queueName = \"ConsumerProxy\";\n", 
            "+                }\n", 
            "+                QueueingConsumer consumer = new QueueingConsumer(channel);\n", 
            "+                channel.basicConsume(queueName, true, consumer);\n", 
            " \n", 
            "-                } else {\n", 
            "-                    if (exchangeName == null) {\n", 
            "-                        exchangeName = \"subscriber-exchange\";\n", 
            "-                    }\n", 
            "-                    channel.basicPublish(exchangeName, \"\", null, msg.getBytes());\n", 
            "+                QueueingConsumer.Delivery delivery = consumer.nextDelivery();\n", 
            "+                String message = new String(delivery.getBody());\n", 
            "+                System.out.println(\"[x] received '\" + message + \"'\");\n", 
            "+            }\n", 
            "+            channel.close();\n", 
            "+            connection.close();\n", 
            "+        } catch (IOException e) {\n", 
            "+            e.printStackTrace();\n", 
            "+        } catch (InterruptedException e) {\n", 
            "+            e.printStackTrace();\n", 
            "+        } finally {\n", 
            "+            if (channel != null && channel.isOpen()) {\n", 
            "+                try {\n", 
            "+                    channel.close();\n", 
            "+                } catch (IOException e) {\n", 
            "+                    System.err.println(\"Error occurred while closing the channel:\" + e.getMessage());\n", 
            "                 }\n", 
            "             }\n", 
            "-        } else {\n", 
            "-            if (queueName == null) {\n", 
            "-                queueName = \"ConsumerProxy\";\n", 
            "+            if (connection != null && connection.isOpen()) {\n", 
            "+                try {\n", 
            "+                    connection.close();\n", 
            "+                } catch (IOException e) {\n", 
            "+                    System.err.println(\"Error occurred while closing the connection:\" +\n", 
            "+                            e.getMessage());\n", 
            "+                }\n", 
            "             }\n", 
            "-            QueueingConsumer consumer = new QueueingConsumer(channel);\n", 
            "-            channel.basicConsume(queueName, true, consumer);\n", 
            "-\n", 
            "-            QueueingConsumer.Delivery delivery = consumer.nextDelivery();\n", 
            "-            String message = new String(delivery.getBody());\n", 
            "-            System.out.println(\"[x] received '\" + message + \"'\");\n", 
            "         }\n", 
            "-\n", 
            "-        channel.close();\n", 
            "-        connection.close();\n", 
            "     }\n", 
            " \n", 
            "     private static double getRandom(double base, double varience, boolean onlypositive) {\n"
          ]
        }, 
        {
          "locn": "-108,5 +129,4", 
          "lines": [
            "         return (base + ((rand > 0.5 ? 1 : -1) * varience * base * rand))\n", 
            "                 * (onlypositive ? 1 : (rand > 0.5 ? 1 : -1));\n", 
            "     }\n", 
            "-\n", 
            " }\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/samples/src/main/java/samples/userguide/RabbitMQAMQPClient.java", 
      "from": "java/modules/samples/src/main/java/samples/userguide/RabbitMQAMQPClient.java"
    }
  ], 
  "id": "1508583"
}