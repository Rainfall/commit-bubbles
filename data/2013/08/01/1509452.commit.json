{
  "when": "2013-08-01T18:03:03-04:00", 
  "who": "rajikak", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-40,7 +40,7", 
          "lines": [
            " \n", 
            "         cfMap.put(AMQPTransportConstant.PARAMETER_EXCHANGE_TYPE, \"direct\");\n", 
            "         cfMap.put(AMQPTransportConstant.PARAMETER_QUEUE_DURABLE, \"true\");\n", 
            "-        cfMap.put(AMQPTransportConstant.PARAMETER_INITIAL_RE_CONNECTION_DURATION, \"10\");\n", 
            "+        cfMap.put(AMQPTransportConstant.PARAM_INITIAL_RE_CONNECTION_DURATION, \"10\");\n", 
            "     }\n", 
            " \n", 
            "     public void testGetStringProperty() throws Exception {\n"
          ]
        }, 
        {
          "locn": "-109,9 +109,9", 
          "lines": [
            " \n", 
            "     public void testGetOptionalIntParameter() throws Exception {\n", 
            "         assertEquals(\"Invalid value\",\n", 
            "-                Integer.parseInt(cfMap.get(AMQPTransportConstant.PARAMETER_INITIAL_RE_CONNECTION_DURATION)),\n", 
            "+                Integer.parseInt(cfMap.get(AMQPTransportConstant.PARAM_INITIAL_RE_CONNECTION_DURATION)),\n", 
            "                 AMQPTransportUtils.getOptionalIntParameter(\n", 
            "-                        AMQPTransportConstant.PARAMETER_INITIAL_RE_CONNECTION_DURATION, svcMap, cfMap).intValue());\n", 
            "+                        AMQPTransportConstant.PARAM_INITIAL_RE_CONNECTION_DURATION, svcMap, cfMap).intValue());\n", 
            " \n", 
            "         assertEquals(\"Invalid value\",\n", 
            "                 Integer.parseInt(svcMap.get(AMQPTransportConstant.PARAMETER_NO_OF_CONCURRENT_CONSUMERS)),\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/amqp/src/test/java/org/apache/synapse/tranport/amqp/AMQPTransportUtilsTest.java", 
      "from": "java/modules/transports/optional/amqp/src/test/java/org/apache/synapse/tranport/amqp/AMQPTransportUtilsTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-17,6 +17,7", 
          "lines": [
            " import org.apache.axis2.transport.base.AbstractTransportListenerEx;\n", 
            " import org.apache.synapse.transport.amqp.connectionfactory.AMQPTransportConnectionFactory;\n", 
            " import org.apache.synapse.transport.amqp.connectionfactory.AMQPTransportConnectionFactoryManager;\n", 
            "+import org.apache.synapse.transport.amqp.ha.AMQPTransportReconnectHandler;\n", 
            " import org.apache.synapse.transport.amqp.pollingtask.AMQPTransportPollingTask;\n", 
            " \n", 
            " import java.util.concurrent.ExecutorService;\n"
          ]
        }, 
        {
          "locn": "-40,6 +41,8", 
          "lines": [
            " \n", 
            "     private ExecutorService connectionFactoryES;\n", 
            " \n", 
            "+    private AMQPTransportReconnectHandler haHandler;\n", 
            "+\n", 
            "     @Override\n", 
            "     protected void doInit() throws AxisFault {\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-58,6 +61,25", 
          "lines": [
            "                 AMQPTransportUtils.getIntProperty(AMQPTransportConstant.PARAM_WORKER_POOL_SIZE,\n", 
            "                         AMQPTransportConstant.WORKER_POOL_DEFAULT));\n", 
            " \n", 
            "+\n", 
            "+        int initialReconnectDuration = AMQPTransportUtils.getIntProperty(\n", 
            "+                AMQPTransportConstant.PARAM_INITIAL_RE_CONNECTION_DURATION, 1000);\n", 
            "+\n", 
            "+        double reconnectionProgressionFactor = AMQPTransportUtils.getDoubleProperty(\n", 
            "+                AMQPTransportConstant.PARAM_RE_CONNECTION_PROGRESSION_FACTOR, 2.0);\n", 
            "+\n", 
            "+        int maxReconnectionDuration = AMQPTransportUtils.getIntProperty(\n", 
            "+                AMQPTransportConstant.PARAM_MAX_RE_CONNECTION_DURATION, 1000 * 60 * 10);\n", 
            "+\n", 
            "+        haHandler = new AMQPTransportReconnectHandler(\n", 
            "+                connectionFactoryES,\n", 
            "+                maxReconnectionDuration,\n", 
            "+                reconnectionProgressionFactor,\n", 
            "+                initialReconnectDuration,\n", 
            "+                connectionFactoryManager);\n", 
            "+\n", 
            "+        new Thread(haHandler, \"AMQP-HA-handler-task\").start();\n", 
            "+\n", 
            "         log.info(\"AMQP transport listener initializing..\");\n", 
            "     }\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/AMQPTransportListener.java", 
      "from": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/AMQPTransportListener.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-164,17 +164,17", 
          "lines": [
            "      * If a polling task encounter an exception due to some reason(most probably due to broker\n", 
            "      * outage) the number of milliseconds it should be suspended before next re-try.\n", 
            "      */\n", 
            "-    public static final String PARAMETER_INITIAL_RE_CONNECTION_DURATION =\n", 
            "-            \"transport.amqp.InitialReconnectDuration\";\n", 
            "+    public static final String PARAM_INITIAL_RE_CONNECTION_DURATION =\n", 
            "+            \"initial-reconnect-duration\";\n", 
            " \n", 
            "     /**\n", 
            "      * If the polling task fails again after the initial re-connection duration\n", 
            "-     * {@link AMQPTransportConstant#PARAMETER_INITIAL_RE_CONNECTION_DURATION}\n", 
            "+     * {@link AMQPTransportConstant#PARAM_INITIAL_RE_CONNECTION_DURATION}\n", 
            "      * next suspend duration will be calculated using this\n", 
            "-     * (PARAMETER_RE_CONNECTION_PROGRESSION_FACTOR * PARAMETER_INITIAL_RE_CONNECTION_DURATION).\n", 
            "+     * (PARAM_RE_CONNECTION_PROGRESSION_FACTOR * PARAM_INITIAL_RE_CONNECTION_DURATION).\n", 
            "      */\n", 
            "-    public static final String PARAMETER_RE_CONNECTION_PROGRESSION_FACTOR =\n", 
            "-            \"transport.amqp.ReconnectionProgressionFactor\";\n", 
            "+    public static final String PARAM_RE_CONNECTION_PROGRESSION_FACTOR =\n", 
            "+            \"reconnection-progression-factor\";\n", 
            " \n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-181,12 +181,12", 
          "lines": [
            "      * The maximum duration to suspend the polling task in case of an error. The current suspend\n", 
            "      * duration will reach this\n", 
            "      * value by following the series,\n", 
            "-     * PARAMETER_RE_CONNECTION_PROGRESSION_FACTOR * PARAMETER_INITIAL_RE_CONNECTION_DURATION.\n", 
            "+     * PARAM_RE_CONNECTION_PROGRESSION_FACTOR * PARAM_INITIAL_RE_CONNECTION_DURATION.\n", 
            "      * This upper bound is there\n", 
            "      * because nobody wants to wait a long time until the next re-try if the broker is alive.\n", 
            "      */\n", 
            "-    public static final String PARAMETER_MAX_RE_CONNECTION_DURATION =\n", 
            "-            \"transport.amqp.MaximumReconnectionDuration\";\n", 
            "+    public static final String PARAM_MAX_RE_CONNECTION_DURATION =\n", 
            "+            \"maximum-reconnection-duration\";\n", 
            " \n", 
            " \n", 
            "     /**\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/AMQPTransportConstant.java", 
      "from": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/AMQPTransportConstant.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-41,8 +41,8", 
          "lines": [
            "      * Add the list of defined connection factories definition.\n", 
            "      *\n", 
            "      * @param transportInDescription The connection factory definition in axis2.xml\n", 
            "-     * @param es An instance of java.util.concurrent.ExecutorService to use with AMQP connection\n", 
            "-     *           factory\n", 
            "+     * @param es                     An instance of java.util.concurrent.ExecutorService to use with AMQP connection\n", 
            "+     *                               factory\n", 
            "      */\n", 
            "     public void addConnectionFactories(ParameterInclude transportInDescription, ExecutorService es) {\n", 
            "         for (Parameter p : transportInDescription.getParameters()) {\n"
          ]
        }, 
        {
          "locn": "-63,6 +63,10", 
          "lines": [
            "         factories.put(parameter.getName(), new AMQPTransportConnectionFactory(parameter, es));\n", 
            "     }\n", 
            " \n", 
            "+    public void addConnectionFactory(String name, AMQPTransportConnectionFactory cf) {\n", 
            "+        factories.put(name, cf);\n", 
            "+    }\n", 
            "+\n", 
            "     /**\n", 
            "      * Get the connection factory with this name.\n", 
            "      *\n"
          ]
        }, 
        {
          "locn": "-112,4 +116,9", 
          "lines": [
            "             throw new AMQPTransportException(\"Error occurred whiling shutting down connections\", e);\n", 
            "         }\n", 
            "     }\n", 
            "+\n", 
            "+    public ConcurrentHashMap<String, AMQPTransportConnectionFactory> getAllFactories() {\n", 
            "+        return factories;\n", 
            "+    }\n", 
            "+\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/connectionfactory/AMQPTransportConnectionFactoryManager.java", 
      "from": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/connectionfactory/AMQPTransportConnectionFactoryManager.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-26,7 +26,10", 
          "lines": [
            " import org.apache.synapse.transport.amqp.AMQPTransportUtils;\n", 
            " \n", 
            " import java.io.IOException;\n", 
            "-import java.util.Hashtable;\n", 
            "+import java.net.URISyntaxException;\n", 
            "+import java.security.KeyManagementException;\n", 
            "+import java.security.NoSuchAlgorithmException;\n", 
            "+import java.util.HashMap;\n", 
            " import java.util.Map;\n", 
            " import java.util.concurrent.ExecutorService;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-65,7 +68,7", 
          "lines": [
            "     /**\n", 
            "      * The list of parameters(see above) in the connection factory definition.\n", 
            "      */\n", 
            "-    private Hashtable<String, String> parameters = new Hashtable<String, String>();\n", 
            "+    private Map<String, String> parameters = new HashMap<String, String>();\n", 
            " \n", 
            "     /**\n", 
            "      * The AMQP connection to the broker maintain per connection factory.\n"
          ]
        }, 
        {
          "locn": "-77,6 +80,21", 
          "lines": [
            "      */\n", 
            "     private Channel channel = null;\n", 
            " \n", 
            "+    public AMQPTransportConnectionFactory(\n", 
            "+            Map<String, String> parameters,\n", 
            "+            ExecutorService es)\n", 
            "+            throws AMQPTransportException {\n", 
            "+        try {\n", 
            "+            connection = createConnection(es, parameters);\n", 
            "+            channel = createChannel(connection, parameters);\n", 
            "+        } catch (Exception e) {\n", 
            "+            String msg = \"Could not initialize the connection factory with parameters\\n\";\n", 
            "+            for (Map.Entry entry : parameters.entrySet()) {\n", 
            "+                msg = msg + entry.getKey() + \":\" + entry.getValue() + \"\\n\";\n", 
            "+            }\n", 
            "+            throw new AMQPTransportException(msg, e);\n", 
            "+        }\n", 
            "+    }\n", 
            " \n", 
            "     public AMQPTransportConnectionFactory(Parameter parameter, ExecutorService es)\n", 
            "             throws AMQPTransportException {\n"
          ]
        }, 
        {
          "locn": "-87,7 +105,7", 
          "lines": [
            " \n", 
            "             if (!(parameter.getValue() instanceof OMElement)) {\n", 
            "                 throw new AMQPTransportException(\"The connection factory '\" + parameter.getName() +\n", 
            "-                        \"' is in valid. It's required to have the least connection factory definition with '\" +\n", 
            "+                        \"' is invalid. It's required to have the least connection factory definition with '\" +\n", 
            "                         AMQPTransportConstant.PARAMETER_CONNECTION_URI + \"' parameter. Example: \\n\" +\n", 
            "                         \"\\n<transportReceiver name=\\\"amqp\\\" class=\\\"org.wso2.carbon.transports.amqp.AMQPTransportListener\\\">\\n\" +\n", 
            "                         \"   <parameter name=\\\"default\\\" locked=\\\"false\\\">\\n\" +\n"
          ]
        }, 
        {
          "locn": "-106,61 +124,9", 
          "lines": [
            "                 parameters.put(entry.getName(), (String) entry.getValue());\n", 
            "             }\n", 
            " \n", 
            "-            ConnectionFactory connectionFactory = new ConnectionFactory();\n", 
            "-            connectionFactory.setUri(parameters.get(AMQPTransportConstant.PARAMETER_CONNECTION_URI));\n", 
            "+            connection = createConnection(es, parameters);\n", 
            "+            channel = createChannel(connection, parameters);\n", 
            " \n", 
            "-            if (parameters.get(AMQPTransportConstant.PARAMETER_BROKER_LIST) != null) {\n", 
            "-                Address[] addresses = AMQPTransportUtils.getAddressArray(\n", 
            "-                        parameters.get(AMQPTransportConstant.PARAMETER_BROKER_LIST), \",\", ':');\n", 
            "-                connection = connectionFactory.newConnection(es, addresses);\n", 
            "-            } else {\n", 
            "-                connection = connectionFactory.newConnection(es);\n", 
            "-            }\n", 
            "-\n", 
            "-            if (parameters.get(AMQPTransportConstant.PARAMETER_AMQP_CHANNEL_NUMBER) != null) {\n", 
            "-                int index = 0;\n", 
            "-                try {\n", 
            "-                    index = Integer.parseInt(parameters.get(\n", 
            "-                            AMQPTransportConstant.PARAMETER_AMQP_CHANNEL_NUMBER));\n", 
            "-                } catch (NumberFormatException e) {\n", 
            "-                    index = 1; // assume default,\n", 
            "-                    // fair dispatch see http://www.rabbitmq.com/tutorials/tutorial-two-java.html\n", 
            "-                }\n", 
            "-                channel = connection.createChannel(index);\n", 
            "-\n", 
            "-            } else {\n", 
            "-                channel = connection.createChannel();\n", 
            "-            }\n", 
            "-\n", 
            "-\n", 
            "-            int prefetchSize = 1024;\n", 
            "-            if (parameters.get(AMQPTransportConstant.PARAMETER_CHANNEL_PREFETCH_SIZE) != null) {\n", 
            "-                try {\n", 
            "-                    prefetchSize = Integer.parseInt(\n", 
            "-                            parameters.get(AMQPTransportConstant.PARAMETER_CHANNEL_PREFETCH_SIZE));\n", 
            "-                } catch (NumberFormatException e) {\n", 
            "-                    prefetchSize = 1024; // assume default\n", 
            "-                }\n", 
            "-            }\n", 
            "-\n", 
            "-            int prefetchCount = 0;\n", 
            "-            if (parameters.get(AMQPTransportConstant.PARAMETER_CHANNEL_PREFETCH_COUNT) != null) {\n", 
            "-                try {\n", 
            "-                    prefetchCount = Integer.parseInt(\n", 
            "-                            parameters.get(AMQPTransportConstant.PARAMETER_CHANNEL_PREFETCH_COUNT));\n", 
            "-                    channel.basicQos(prefetchCount);\n", 
            "-                } catch (NumberFormatException e) {\n", 
            "-                    prefetchCount = 0; // assume default\n", 
            "-                }\n", 
            "-            }\n", 
            "-\n", 
            "-            boolean useGlobally = false;\n", 
            "-            if (parameters.get(AMQPTransportConstant.PARAMETER_CHANNEL_QOS_GLOBAL) != null) {\n", 
            "-                useGlobally = Boolean.parseBoolean(parameters.get(\n", 
            "-                        AMQPTransportConstant.PARAMETER_CHANNEL_QOS_GLOBAL));\n", 
            "-            }\n", 
            "-\n", 
            "-\n", 
            "         } catch (Exception e) {\n", 
            "             throw new AMQPTransportException(\"\" +\n", 
            "                     \"Could not initialize the connection factory '\" + parameter.getName() + \"'\", e);\n"
          ]
        }, 
        {
          "locn": "-199,6 +165,14", 
          "lines": [
            "     }\n", 
            " \n", 
            "     /**\n", 
            "+     * Get the connection\n", 
            "+     * @return the connection to broker.\n", 
            "+     */\n", 
            "+    public Connection getConnection() {\n", 
            "+        return connection;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "      * Return the name of this connection factory(the name given in axis2.xml)\n", 
            "      *\n", 
            "      * @return name of this connection factory\n"
          ]
        }, 
        {
          "locn": "-225,4 +199,64", 
          "lines": [
            "     public Map<String, String> getParameters() {\n", 
            "         return parameters;\n", 
            "     }\n", 
            "-}\n", 
            "+\n", 
            "+    private Connection createConnection(ExecutorService es, Map<String, String> parameters)\n", 
            "+            throws IOException, URISyntaxException, NoSuchAlgorithmException, KeyManagementException {\n", 
            "+        ConnectionFactory connectionFactory = new ConnectionFactory();\n", 
            "+        connectionFactory.setUri(parameters.get(AMQPTransportConstant.PARAMETER_CONNECTION_URI));\n", 
            "+\n", 
            "+        if (parameters.get(AMQPTransportConstant.PARAMETER_BROKER_LIST) != null) {\n", 
            "+            Address[] addresses = AMQPTransportUtils.getAddressArray(\n", 
            "+                    parameters.get(AMQPTransportConstant.PARAMETER_BROKER_LIST), \",\", ':');\n", 
            "+            return connectionFactory.newConnection(es, addresses);\n", 
            "+        }\n", 
            "+        return connectionFactory.newConnection(es);\n", 
            "+    }\n", 
            "+\n", 
            "+    private Channel createChannel(Connection connection, Map<String, String> parameters)\n", 
            "+            throws IOException {\n", 
            "+        Channel ch;\n", 
            "+        if (parameters.get(AMQPTransportConstant.PARAMETER_AMQP_CHANNEL_NUMBER) != null) {\n", 
            "+            int index = 0;\n", 
            "+            try {\n", 
            "+                index = Integer.parseInt(parameters.get(\n", 
            "+                        AMQPTransportConstant.PARAMETER_AMQP_CHANNEL_NUMBER));\n", 
            "+            } catch (NumberFormatException e) {\n", 
            "+                index = 1; // assume default,\n", 
            "+                // fair dispatch see http://www.rabbitmq.com/tutorials/tutorial-two-java.html\n", 
            "+            }\n", 
            "+            ch = connection.createChannel(index);\n", 
            "+\n", 
            "+        } else {\n", 
            "+            ch = connection.createChannel();\n", 
            "+        }\n", 
            "+\n", 
            "+        int prefetchSize = 1024;\n", 
            "+        if (parameters.get(AMQPTransportConstant.PARAMETER_CHANNEL_PREFETCH_SIZE) != null) {\n", 
            "+            try {\n", 
            "+                prefetchSize = Integer.parseInt(\n", 
            "+                        parameters.get(AMQPTransportConstant.PARAMETER_CHANNEL_PREFETCH_SIZE));\n", 
            "+            } catch (NumberFormatException e) {\n", 
            "+                prefetchSize = 1024; // assume default\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        int prefetchCount = 0;\n", 
            "+        if (parameters.get(AMQPTransportConstant.PARAMETER_CHANNEL_PREFETCH_COUNT) != null) {\n", 
            "+            try {\n", 
            "+                prefetchCount = Integer.parseInt(\n", 
            "+                        parameters.get(AMQPTransportConstant.PARAMETER_CHANNEL_PREFETCH_COUNT));\n", 
            "+                ch.basicQos(prefetchCount);\n", 
            "+            } catch (NumberFormatException e) {\n", 
            "+                prefetchCount = 0; // assume default\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        boolean useGlobally = false;\n", 
            "+        if (parameters.get(AMQPTransportConstant.PARAMETER_CHANNEL_QOS_GLOBAL) != null) {\n", 
            "+            useGlobally = Boolean.parseBoolean(parameters.get(\n", 
            "+                    AMQPTransportConstant.PARAMETER_CHANNEL_QOS_GLOBAL));\n", 
            "+        }\n", 
            "+        return ch;\n", 
            "+    }\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/connectionfactory/AMQPTransportConnectionFactory.java", 
      "from": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/connectionfactory/AMQPTransportConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-168,28 +168,6", 
          "lines": [
            "         }\n", 
            " \n", 
            "         try {\n", 
            "-            Integer initialReconectionDuration = AMQPTransportUtils.getOptionalIntParameter(\n", 
            "-                    AMQPTransportConstant.PARAMETER_INITIAL_RE_CONNECTION_DURATION,\n", 
            "-                    svcParam, conFacParam);\n", 
            "-            if (initialReconectionDuration != null) {\n", 
            "-                pt.setInitialReconnectDuration(initialReconectionDuration);\n", 
            "-            }\n", 
            "-        } catch (AMQPTransportException e) {\n", 
            "-            throw new AxisFault(\"Could not assign the initial re-connection duration\", e);\n", 
            "-        }\n", 
            "-\n", 
            "-        try {\n", 
            "-            Integer reconnectionFactor = AMQPTransportUtils.getOptionalIntParameter(\n", 
            "-                    AMQPTransportConstant.PARAMETER_RE_CONNECTION_PROGRESSION_FACTOR,\n", 
            "-                    svcParam, conFacParam);\n", 
            "-            if (reconnectionFactor != null) {\n", 
            "-                pt.setReconnectionFactor(reconnectionFactor);\n", 
            "-            }\n", 
            "-        } catch (AMQPTransportException e) {\n", 
            "-            throw new AxisFault(\"Could not assign reconnection factor\", e);\n", 
            "-        }\n", 
            "-\n", 
            "-        try {\n", 
            "             Integer dispatchingTask = AMQPTransportUtils.getOptionalIntParameter(\n", 
            "                     AMQPTransportConstant.PARAMETER_DISPATCHING_TASK_SIZE,\n", 
            "                     svcParam, conFacParam);\n"
          ]
        }, 
        {
          "locn": "-251,9 +229,6", 
          "lines": [
            "                     \"Is queue restricted: '\" + pt.isQueueRestricted() + \"'\\n\" +\n", 
            "                     \"Is queue auto deleted: '\" + pt.isQueueAutoDelete() + \"'\\n\" +\n", 
            "                     \"Is blocking mode: '\" + pt.isBlockingMode() + \"'\\n\" +\n", 
            "-                    \"Initial re-connection duration: '\" + pt.getInitialReconnectDuration() + \"(ms)'\\n\" +\n", 
            "-                    \"Re-connection progression factor: '\" + pt.getReconnectionFactor() + \"'\\n\" +\n", 
            "-                    \"Maximum re-connection duration: '\" + pt.getMaxReconnectionDuration() + \"'\\n\" +\n", 
            "                     \"Number of concurrent consumers: '\" + pt.getNoOfConcurrentConsumers() + \"'\\n\" +\n", 
            "                     \"Number of dispatching task: '\" + pt.getNoOfDispatchingTask() + \"'\");\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPTransportPollingTaskFactory.java", 
      "from": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPTransportPollingTaskFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-151,25 +151,6", 
          "lines": [
            "     private int noOfConcurrentConsumers = 2;\n", 
            " \n", 
            "     /**\n", 
            "-     * Initial duration(in milliseconds) to suspend the polling task in case of an error.\n", 
            "-     * {@link org.apache.synapse.transport.amqp.AMQPTransportConstant#PARAMETER_INITIAL_RE_CONNECTION_DURATION}.\n", 
            "-     */\n", 
            "-    private int initialReconnectDuration = 1000;\n", 
            "-\n", 
            "-    /**\n", 
            "-     * The progression factor for next re-try calculation.\n", 
            "-     * {@link AMQPTransportConstant#PARAMETER_RE_CONNECTION_PROGRESSION_FACTOR}\n", 
            "-     */\n", 
            "-    private double reconnectionFactor = 2.0;\n", 
            "-\n", 
            "-    /**\n", 
            "-     * The maximum duration to suspend the polling task. This is to make sure there is an upper\n", 
            "-     * bound for the suspending the polling task in case of an error.\n", 
            "-     * {@link AMQPTransportConstant#PARAMETER_MAX_RE_CONNECTION_DURATION}\n", 
            "-     */\n", 
            "-    private int maxReconnectionDuration = 1000 * 60 * 10;\n", 
            "-\n", 
            "-    /**\n", 
            "      * The name of the connectionFactory this service is bound to.\n", 
            "      * {@link AMQPTransportConstant#PARAMETER_CONNECTION_FACTORY_NAME}\n", 
            "      */\n"
          ]
        }, 
        {
          "locn": "-302,18 +283,6", 
          "lines": [
            "         this.noOfConcurrentConsumers = noOfConcurrentConsumers;\n", 
            "     }\n", 
            " \n", 
            "-    public void setInitialReconnectDuration(int initialReconnectDuration) {\n", 
            "-        this.initialReconnectDuration = initialReconnectDuration;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setReconnectionFactor(double reconnectionFactor) {\n", 
            "-        this.reconnectionFactor = reconnectionFactor;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setMaxReconnectionDuration(int maxReconnectionDuration) {\n", 
            "-        this.maxReconnectionDuration = maxReconnectionDuration;\n", 
            "-    }\n", 
            "-\n", 
            "     public void setConnectionFactoryName(String connectionFactoryName) {\n", 
            "         this.connectionFactoryName = connectionFactoryName;\n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-394,22 +363,6", 
          "lines": [
            "         return noOfConcurrentConsumers;\n", 
            "     }\n", 
            " \n", 
            "-    public int getInitialReconnectDuration() {\n", 
            "-        return initialReconnectDuration;\n", 
            "-    }\n", 
            "-\n", 
            "-    public double getReconnectionFactor() {\n", 
            "-        return reconnectionFactor;\n", 
            "-    }\n", 
            "-\n", 
            "-    public int getMaxReconnectionDuration() {\n", 
            "-        return maxReconnectionDuration;\n", 
            "-    }\n", 
            "-\n", 
            "-    public String getConnectionFactoryName() {\n", 
            "-        return connectionFactoryName;\n", 
            "-    }\n", 
            "-\n", 
            "     public TimeUnit getScheduledTaskTimeUnit() {\n", 
            "         return scheduledTaskTimeUnit;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPTransportPollingTask.java", 
      "from": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPTransportPollingTask.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-94,7 +94,7", 
          "lines": [
            "             // block if there is no messages\n", 
            "             return requestBuffer.take();\n", 
            "         } catch (InterruptedException e) {\n", 
            "-            // ignore\n", 
            "+            Thread.currentThread().interrupt();\n", 
            "         }\n", 
            "         return null;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/AMQPTransportBuffers.java", 
      "from": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/AMQPTransportBuffers.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,56", 
          "lines": [
            "+/*\n", 
            "+ * ====================================================================\n", 
            "+ * Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ * or more contributor license agreements.  See the NOTICE file\n", 
            "+ * distributed with this work for additional information\n", 
            "+ * regarding copyright ownership.  The ASF licenses this file\n", 
            "+ * to you under the Apache License, Version 2.0 (the\n", 
            "+ * \"License\"); you may not use this file except in compliance\n", 
            "+ * with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ * Unless required by applicable law or agreed to in writing,\n", 
            "+ * software distributed under the License is distributed on an\n", 
            "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ * KIND, either express or implied.  See the License for the\n", 
            "+ * specific language governing permissions and limitations\n", 
            "+ * under the License.\n", 
            "+ * ====================================================================\n", 
            "+ *\n", 
            "+ * This software consists of voluntary contributions made by many\n", 
            "+ * individuals on behalf of the Apache Software Foundation.  For more\n", 
            "+ * information on the Apache Software Foundation, please see\n", 
            "+ * <http://www.apache.org/>.\n", 
            "+ *\n", 
            "+ */\n", 
            "+package org.apache.synapse.transport.amqp.ha;\n", 
            "+\n", 
            "+import java.util.concurrent.Semaphore;\n", 
            "+\n", 
            "+public class AMQPTransportHAEntry {\n", 
            "+\n", 
            "+    private Semaphore lock;\n", 
            "+\n", 
            "+    private String key;\n", 
            "+\n", 
            "+    private String connFacName;\n", 
            "+\n", 
            "+    public AMQPTransportHAEntry(Semaphore lock, String key, String connFacName) {\n", 
            "+        this.lock = lock;\n", 
            "+        this.key = key;\n", 
            "+        this.connFacName = connFacName;\n", 
            "+    }\n", 
            "+\n", 
            "+    public Semaphore getLock() {\n", 
            "+        return lock;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getKey() {\n", 
            "+        return key;\n", 
            "+    }\n", 
            "+\n", 
            "+    public String getConnectionFactoryName() {\n", 
            "+        return connFacName;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/ha/AMQPTransportHAEntry.java", 
      "from": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/ha/AMQPTransportHAEntry.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,148", 
          "lines": [
            "+/*\n", 
            "+ * ====================================================================\n", 
            "+ * Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ * or more contributor license agreements.  See the NOTICE file\n", 
            "+ * distributed with this work for additional information\n", 
            "+ * regarding copyright ownership.  The ASF licenses this file\n", 
            "+ * to you under the Apache License, Version 2.0 (the\n", 
            "+ * \"License\"); you may not use this file except in compliance\n", 
            "+ * with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ * Unless required by applicable law or agreed to in writing,\n", 
            "+ * software distributed under the License is distributed on an\n", 
            "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ * KIND, either express or implied.  See the License for the\n", 
            "+ * specific language governing permissions and limitations\n", 
            "+ * under the License.\n", 
            "+ * ====================================================================\n", 
            "+ *\n", 
            "+ * This software consists of voluntary contributions made by many\n", 
            "+ * individuals on behalf of the Apache Software Foundation.  For more\n", 
            "+ * information on the Apache Software Foundation, please see\n", 
            "+ * <http://www.apache.org/>.\n", 
            "+ *\n", 
            "+ */\n", 
            "+package org.apache.synapse.transport.amqp.ha;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.transport.amqp.AMQPTransportException;\n", 
            "+import org.apache.synapse.transport.amqp.connectionfactory.AMQPTransportConnectionFactory;\n", 
            "+import org.apache.synapse.transport.amqp.connectionfactory.AMQPTransportConnectionFactoryManager;\n", 
            "+\n", 
            "+import java.util.Map;\n", 
            "+import java.util.concurrent.*;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Responsible for handling the shutdown signals gracefully. For example\n", 
            "+ * this provides the functionality for reconnecting to broker if broker\n", 
            "+ * when offline. The reconnection attempts happens in exponential back-off\n", 
            "+ * fashion.\n", 
            "+ */\n", 
            "+public class AMQPTransportReconnectHandler implements Runnable {\n", 
            "+\n", 
            "+    private BlockingQueue<AMQPTransportHAEntry> blockedTasks =\n", 
            "+            new LinkedBlockingQueue<AMQPTransportHAEntry>();\n", 
            "+\n", 
            "+    private ConcurrentMap<String, AMQPTransportHABrokerEntry> connectionMap =\n", 
            "+            new ConcurrentHashMap<String, AMQPTransportHABrokerEntry>();\n", 
            "+\n", 
            "+    private AMQPTransportConnectionFactoryManager connectionFactoryManager;\n", 
            "+\n", 
            "+    private int initialReconnectDuration = 1000;\n", 
            "+\n", 
            "+    private double reconnectionProgressionFactor = 2.0;\n", 
            "+\n", 
            "+    private int maxReconnectionDuration = 1000 * 60 * 10;\n", 
            "+\n", 
            "+    private ExecutorService es;\n", 
            "+\n", 
            "+    public AMQPTransportReconnectHandler(ExecutorService es,\n", 
            "+                                         int maxReconnectionDuration,\n", 
            "+                                         double reconnectionProgressionFactor,\n", 
            "+                                         int initialReconnectDuration,\n", 
            "+                                         AMQPTransportConnectionFactoryManager\n", 
            "+                                                 connectionFactoryManager) {\n", 
            "+        this.es = es;\n", 
            "+        this.maxReconnectionDuration = maxReconnectionDuration;\n", 
            "+        this.reconnectionProgressionFactor = reconnectionProgressionFactor;\n", 
            "+        this.initialReconnectDuration = initialReconnectDuration;\n", 
            "+        this.connectionFactoryManager = connectionFactoryManager;\n", 
            "+    }\n", 
            "+\n", 
            "+    private static Log log = LogFactory.getLog(AMQPTransportReconnectHandler.class);\n", 
            "+\n", 
            "+    public void run() {\n", 
            "+        try {\n", 
            "+            AMQPTransportHAEntry entry = blockedTasks.take();\n", 
            "+            if (entry != null) {\n", 
            "+                Map<String, String> params = connectionFactoryManager.\n", 
            "+                        getConnectionFactory(entry.getConnectionFactoryName()).getParameters();\n", 
            "+                int count = 1;\n", 
            "+                long retryDuration = initialReconnectDuration;\n", 
            "+\n", 
            "+                while (true) {\n", 
            "+                    try {\n", 
            "+                        Thread.sleep(initialReconnectDuration);\n", 
            "+                        new AMQPTransportConnectionFactory(params, es);\n", 
            "+                        log.info(\"The reconnection attempt '\" + count + \"' was successful\");\n", 
            "+                        break;\n", 
            "+                    } catch (AMQPTransportException e) {\n", 
            "+                        retryDuration = (long) (retryDuration * reconnectionProgressionFactor);\n", 
            "+                        if (retryDuration > maxReconnectionDuration) {\n", 
            "+                            retryDuration = initialReconnectDuration;\n", 
            "+                            log.info(\"The retry duration exceeded the maximum reconnection duration.\" +\n", 
            "+                                    \" The retry duration is set to initial reconnection duration \" +\n", 
            "+                                    \"value(\" + initialReconnectDuration + \"s)\");\n", 
            "+                        }\n", 
            "+                        log.error(\"The reconnection attempt number '\" + count++ + \"' failed. Next \" +\n", 
            "+                                \"re-try will be after '\" + (retryDuration / 1000) + \"' seconds\");\n", 
            "+                        try {\n", 
            "+                            Thread.sleep(retryDuration);\n", 
            "+                        } catch (InterruptedException ignore) {\n", 
            "+                            // we need to block\n", 
            "+                        }\n", 
            "+                    }\n", 
            "+                }\n", 
            "+\n", 
            "+                ConcurrentHashMap<String, AMQPTransportConnectionFactory> allFac =\n", 
            "+                        connectionFactoryManager.getAllFactories();\n", 
            "+\n", 
            "+                for (Map.Entry me : allFac.entrySet()) {\n", 
            "+                    String name = (String) me.getKey();\n", 
            "+                    Map<String, String> param = ((AMQPTransportConnectionFactory)\n", 
            "+                            me.getValue()).getParameters();\n", 
            "+                    connectionFactoryManager.removeConnectionFactory(name);\n", 
            "+                    connectionFactoryManager.addConnectionFactory(\n", 
            "+                            name, new AMQPTransportConnectionFactory(param, es));\n", 
            "+                }\n", 
            "+\n", 
            "+                String conFacName = entry.getConnectionFactoryName();\n", 
            "+                AMQPTransportConnectionFactory cf = connectionFactoryManager.\n", 
            "+                        getConnectionFactory(conFacName);\n", 
            "+                connectionMap.put(\n", 
            "+                        entry.getKey(),\n", 
            "+                        new AMQPTransportHABrokerEntry(cf.getChannel(), cf.getConnection()));\n", 
            "+                entry.getLock().release();\n", 
            "+\n", 
            "+\n", 
            "+                while (blockedTasks.isEmpty()) {\n", 
            "+                    entry = blockedTasks.take();\n", 
            "+                    conFacName = entry.getConnectionFactoryName();\n", 
            "+                    cf = connectionFactoryManager.\n", 
            "+                            getConnectionFactory(conFacName);\n", 
            "+                    connectionMap.put(\n", 
            "+                            entry.getKey(),\n", 
            "+                            new AMQPTransportHABrokerEntry(cf.getChannel(), cf.getConnection()));\n", 
            "+                    entry.getLock().release();\n", 
            "+                }\n", 
            "+            }\n", 
            "+        } catch (InterruptedException e) {\n", 
            "+            Thread.currentThread().interrupt();\n", 
            "+        } catch (AMQPTransportException e) {\n", 
            "+            log.error(\"High Availability handler just died!. It's time to re-start\", e);\n", 
            "+        }\n", 
            "+    }\n", 
            "+}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/ha/AMQPTransportReconnectHandler.java", 
      "from": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/ha/AMQPTransportReconnectHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,51", 
          "lines": [
            "+/*\n", 
            "+ * ====================================================================\n", 
            "+ * Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ * or more contributor license agreements.  See the NOTICE file\n", 
            "+ * distributed with this work for additional information\n", 
            "+ * regarding copyright ownership.  The ASF licenses this file\n", 
            "+ * to you under the Apache License, Version 2.0 (the\n", 
            "+ * \"License\"); you may not use this file except in compliance\n", 
            "+ * with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ * Unless required by applicable law or agreed to in writing,\n", 
            "+ * software distributed under the License is distributed on an\n", 
            "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ * KIND, either express or implied.  See the License for the\n", 
            "+ * specific language governing permissions and limitations\n", 
            "+ * under the License.\n", 
            "+ * ====================================================================\n", 
            "+ *\n", 
            "+ * This software consists of voluntary contributions made by many\n", 
            "+ * individuals on behalf of the Apache Software Foundation.  For more\n", 
            "+ * information on the Apache Software Foundation, please see\n", 
            "+ * <http://www.apache.org/>.\n", 
            "+ *\n", 
            "+ */\n", 
            "+package org.apache.synapse.transport.amqp.ha;\n", 
            "+\n", 
            "+import com.rabbitmq.client.Channel;\n", 
            "+import com.rabbitmq.client.Connection;\n", 
            "+\n", 
            "+public class AMQPTransportHABrokerEntry {\n", 
            "+\n", 
            "+    private Channel channel;\n", 
            "+\n", 
            "+    private Connection connection;\n", 
            "+\n", 
            "+    public AMQPTransportHABrokerEntry(Channel channel, Connection connection) {\n", 
            "+        this.channel = channel;\n", 
            "+        this.connection = connection;\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public Channel getChannel() {\n", 
            "+        return channel;\n", 
            "+    }\n", 
            "+\n", 
            "+    public Connection getConnection() {\n", 
            "+        return connection;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/ha/AMQPTransportHABrokerEntry.java", 
      "from": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/ha/AMQPTransportHABrokerEntry.java"
    }
  ], 
  "id": "1509452"
}