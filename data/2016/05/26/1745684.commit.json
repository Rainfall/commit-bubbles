{
  "when": "2016-05-26T19:39:09-04:00", 
  "message": "Added the base64 decode XPath function; Applied patch from Prabath at SYNAPSE-1012", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-34,12 +34,9", 
          "lines": [
            "  * Implements the XPath extension function synapse:base64Encode(string)\n", 
            "  */\n", 
            " public class Base64EncodeFunction implements Function {\n", 
            "+\n", 
            "     private static final Log log = LogFactory.getLog(Base64EncodeFunction.class);\n", 
            " \n", 
            "-    public static final String NULL_STRING = \"\";\n", 
            "-\n", 
            "-    private static final String DEFAULT_CHARSET = \"UTF-8\";\n", 
            "-\n", 
            "     /**\n", 
            "      * Returns the base64 encoded string value of the first argument.\n", 
            "      *\n"
          ]
        }, 
        {
          "locn": "-55,7 +52,7", 
          "lines": [
            "             if (debugOn) {\n", 
            "                 log.debug(\"Property key value for lookup is not specified\");\n", 
            "             }\n", 
            "-            return NULL_STRING;\n", 
            "+            return SynapseXPathConstants.NULL_STRING;\n", 
            "         }\n", 
            " \n", 
            "         int size = args.size();\n"
          ]
        }, 
        {
          "locn": "-64,7 +61,7", 
          "lines": [
            "             String value = StringFunction.evaluate(args.get(0), context.getNavigator());\n", 
            " \n", 
            "             // use the default UTF-8 encoding\n", 
            "-            return encode(debugOn, DEFAULT_CHARSET, value);\n", 
            "+            return encode(debugOn, SynapseXPathConstants.DEFAULT_CHARSET, value);\n", 
            "         } else if (size == 2) {\n", 
            "             // get the first argument, it can be a function returning a string as well\n", 
            "             String value = StringFunction.evaluate(args.get(0), context.getNavigator());\n"
          ]
        }, 
        {
          "locn": "-79,7 +76,7", 
          "lines": [
            "             }\n", 
            "         }\n", 
            "         // return empty string if the arguments are wrong\n", 
            "-        return NULL_STRING;\n", 
            "+        return SynapseXPathConstants.NULL_STRING;\n", 
            "     }\n", 
            " \n", 
            "     private Object encode(boolean debugOn, String encoding, String value)\n"
          ]
        }, 
        {
          "locn": "-89,7 +86,7", 
          "lines": [
            "                 log.debug(\"Non emprty string value should be provided for encoding\");\n", 
            "             }\n", 
            " \n", 
            "-            return NULL_STRING;\n", 
            "+            return SynapseXPathConstants.NULL_STRING;\n", 
            "         }\n", 
            " \n", 
            "         byte[] encodedValue;\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/util/xpath/Base64EncodeFunction.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/util/xpath/Base64EncodeFunction.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,110", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.util.xpath;\n", 
            "+\n", 
            "+\n", 
            "+import org.apache.commons.codec.binary.Base64;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.jaxen.Context;\n", 
            "+import org.jaxen.Function;\n", 
            "+import org.jaxen.FunctionCallException;\n", 
            "+import org.jaxen.function.StringFunction;\n", 
            "+\n", 
            "+import java.io.UnsupportedEncodingException;\n", 
            "+import java.util.List;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Implements the XPath extension function synapse:base64Decode(string)\n", 
            "+ */\n", 
            "+public class Base64DecodeFunction implements Function {\n", 
            "+\n", 
            "+    private static final Log log = LogFactory.getLog(Base64DecodeFunction.class);\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Returns the base64 decoded string value of the first argument.\n", 
            "+     *\n", 
            "+     * @param context the context at the point in the expression when the function is called\n", 
            "+     * @param args  arguments of the functions\n", 
            "+     * @return The string value of a property\n", 
            "+     * @throws FunctionCallException\n", 
            "+     */\n", 
            "+    public Object call(Context context, List args) throws FunctionCallException {\n", 
            "+        if (args == null || args.size() == 0) {\n", 
            "+            if (log.isDebugEnabled()) {\n", 
            "+                log.debug(\"Property key value for lookup is not specified\");\n", 
            "+            }\n", 
            "+            return SynapseXPathConstants.NULL_STRING;\n", 
            "+        }\n", 
            "+\n", 
            "+        int size = args.size();\n", 
            "+        if (size == 1) {\n", 
            "+            // get the first argument, it can be a function returning a string as well\n", 
            "+            String encodedValue = StringFunction.evaluate(args.get(0), context.getNavigator());\n", 
            "+            // use the default UTF-8 decoding.\n", 
            "+            return decode(log.isDebugEnabled(), SynapseXPathConstants.DEFAULT_CHARSET, encodedValue);\n", 
            "+        } else if (size == 2) {\n", 
            "+            // get the first argument, it can be a function returning a string as well\n", 
            "+            String encodedValue = StringFunction.evaluate(args.get(0), context.getNavigator());\n", 
            "+            // charset is in the second argument\n", 
            "+            String charset = StringFunction.evaluate(args.get(1), context.getNavigator());\n", 
            "+            return decode(log.isDebugEnabled(), charset, encodedValue);\n", 
            "+        } else if (log.isDebugEnabled()) {\n", 
            "+            log.debug(\"base64Decode function expects only two arguments maximum, returning empty string\");\n", 
            "+        }\n", 
            "+        // return empty string if the arguments are wrong\n", 
            "+        return SynapseXPathConstants.NULL_STRING;\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    private Object decode(boolean debugOn, String charset, String value) throws FunctionCallException {\n", 
            "+        if (value == null || value.isEmpty()) {\n", 
            "+            if (debugOn) {\n", 
            "+                log.debug(\"Non empty string value should be provided for decode\");\n", 
            "+            }\n", 
            "+            return SynapseXPathConstants.NULL_STRING;\n", 
            "+        }\n", 
            "+\n", 
            "+        byte[] decodedValue;\n", 
            "+        try {\n", 
            "+            decodedValue = new Base64().decode(value.getBytes(charset));\n", 
            "+        } catch (UnsupportedEncodingException e) {\n", 
            "+            String msg = \"Unsupported Charset\";\n", 
            "+            log.error(msg, e);\n", 
            "+            throw new FunctionCallException(msg, e);\n", 
            "+        }\n", 
            "+\n", 
            "+        String decodedString;\n", 
            "+        try {\n", 
            "+            decodedString = new String(decodedValue, charset).trim();\n", 
            "+        } catch (UnsupportedEncodingException e) {\n", 
            "+            String msg = \"Unsupported Charset\";\n", 
            "+            log.error(msg, e);\n", 
            "+            throw new FunctionCallException(msg, e);\n", 
            "+        }\n", 
            "+\n", 
            "+        if (debugOn) {\n", 
            "+            log.debug(\"Decoded base64 encoded value: \" + value + \" with charset: \" + charset +\n", 
            "+                      \" to String: \" + decodedString);\n", 
            "+        }\n", 
            "+\n", 
            "+        return decodedString;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/util/xpath/Base64DecodeFunction.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/util/xpath/Base64DecodeFunction.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-82,6 +82,10", 
          "lines": [
            "                 SynapseXPathConstants.BASE64_ENCODE_FUNCTION.equals(localName)) {\n", 
            "             // create a base64Encode function and set it to the XPath\n", 
            "             return new Base64EncodeFunction();\n", 
            "+        } else if (localName != null &&\n", 
            "+                   SynapseXPathConstants.BASE64_DECODE_FUNCTION.equals(localName)) {\n", 
            "+            // create a base64Decode function and set it to the XPath\n", 
            "+            return new Base64DecodeFunction();\n", 
            "         }\n", 
            "         //We check if custom Xpath extensions are available\n", 
            "         Function extensionFunction = XpathExtensionUtil.getFunctionContext(\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/util/xpath/SynapseXPathFunctionContext.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/util/xpath/SynapseXPathFunctionContext.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-30,6 +30,9", 
          "lines": [
            "     /** base64Encode XPath extension function name */\n", 
            "     public static final String BASE64_ENCODE_FUNCTION = \"base64Encode\";\n", 
            " \n", 
            "+    /** base64Decode XPath extension function name */\n", 
            "+    public static final String BASE64_DECODE_FUNCTION = \"base64Decode\";\n", 
            "+\n", 
            "     /** Body relative XPath variale name for the SOAPBody */\n", 
            "     public static final String SOAP_BODY_VARIABLE = \"body\";\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-50,4 +53,8", 
          "lines": [
            " \n", 
            "     /** Variable prefix for accessing URL parameters of the message through XPath variables */\n", 
            "     public static final String URL_VARIABLE_PREFIX = \"url\";\n", 
            "+\n", 
            "+    public static final String DEFAULT_CHARSET = \"UTF-8\";\n", 
            "+\n", 
            "+    public static final String NULL_STRING = \"\";\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/util/xpath/SynapseXPathConstants.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/util/xpath/SynapseXPathConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,64", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.util.xpath;\n", 
            "+\n", 
            "+import junit.framework.Assert;\n", 
            "+import junit.framework.TestCase;\n", 
            "+import org.jaxen.Context;\n", 
            "+import org.jaxen.ContextSupport;\n", 
            "+\n", 
            "+import java.util.ArrayList;\n", 
            "+import java.util.List;\n", 
            "+\n", 
            "+public class Base64DecodeFunctionTest extends TestCase {\n", 
            "+\n", 
            "+    public void testBase64DecodeFunctionWithCharset() throws Exception {\n", 
            "+        String encodedString = \"U3luYXBzZQ==\";\n", 
            "+        Base64DecodeFunction base64DecodeFunction = new Base64DecodeFunction();\n", 
            "+        List<String> params = new ArrayList<String>();\n", 
            "+        params.add(encodedString);\n", 
            "+        params.add(\"UTF-8\");\n", 
            "+        Context context = new Context(null);\n", 
            "+        context.setContextSupport(new ContextSupport());\n", 
            "+        String decodedString = (String) base64DecodeFunction.call(context, params);\n", 
            "+        assertEquals(\"Wrong decoded value found\", \"Synapse\", decodedString);\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testBase64DecodeFunctionWithoutCharset() throws Exception {\n", 
            "+        String encodedString = \"U3luYXBzZQ==\";\n", 
            "+        Base64DecodeFunction base64DecodeFunction = new Base64DecodeFunction();\n", 
            "+        List<String> params = new ArrayList<String>();\n", 
            "+        params.add(encodedString);\n", 
            "+        Context context = new Context(null);\n", 
            "+        context.setContextSupport(new ContextSupport());\n", 
            "+        String decodedString = (String) base64DecodeFunction.call(context, params);\n", 
            "+        assertEquals(\"Wrong decoded value found\", \"Synapse\", decodedString);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testBase64DecodeFunctionWithoutParameters() throws Exception {\n", 
            "+        Base64DecodeFunction base64DecodeFunction = new Base64DecodeFunction();\n", 
            "+        List<String> params = new ArrayList<String>();\n", 
            "+        Context context = new Context(null);\n", 
            "+        context.setContextSupport(new ContextSupport());\n", 
            "+        String decodedString = (String) base64DecodeFunction.call(context, params);\n", 
            "+        assertEquals(\"Wrong decoded value found\", \"\", decodedString);\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/util/xpath/Base64DecodeFunctionTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/util/xpath/Base64DecodeFunctionTest.java"
    }
  ], 
  "id": "1745684"
}