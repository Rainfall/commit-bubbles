{
  "when": "2013-07-22T21:25:37-04:00", 
  "message": "Adding the FIX message builder and formatter. Inspired by the patch for SYNAPSE-891.", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-0,0 +1,47", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.fix.message;\n", 
            "+\n", 
            "+import java.io.ByteArrayInputStream;\n", 
            "+import junit.framework.TestCase;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axis2.context.MessageContext;\n", 
            "+\n", 
            "+import javax.xml.namespace.QName;\n", 
            "+\n", 
            "+public class FIXMessageBuilderTest extends TestCase {\n", 
            "+\n", 
            "+\tpublic void testProcessDocument() throws Exception {\n", 
            "+\t\tString input = \"8=FIX.4.0\\u00019=105\\u000135=D\\u000134=2\\u000149=BANZAI\\u0001\" +\n", 
            "+                \"52=20080711-06:42:26\\u000156=SYNAPSE\\u000111=1215758546278\\u000121=1\\u0001\" +\n", 
            "+                \"38=90000000\\u000140=1\\u000154=1\\u000155=DEL\\u000159=0\\u000110=121\\u0001\";\n", 
            "+\n", 
            "+\t\tMessageContext msgCtx = new MessageContext();\n", 
            "+\t\tFIXMessageBuilder builder = new FIXMessageBuilder();\n", 
            "+        OMElement element = builder.processDocument(new ByteArrayInputStream(input.getBytes()),\n", 
            "+                \"fix/j\", msgCtx);\n", 
            "+        assertNotNull(element);\n", 
            "+        assertNotNull(element.getFirstChildWithName(new QName(\"header\")));\n", 
            "+        assertNotNull(element.getFirstChildWithName(new QName(\"body\")));\n", 
            "+        assertNotNull(element.getFirstChildWithName(new QName(\"trailer\")));\n", 
            "+\t}\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/fix/src/test/java/org/apache/synapse/transport/fix/message/FIXMessageBuilderTest.java", 
      "from": "java/modules/transports/optional/fix/src/test/java/org/apache/synapse/transport/fix/message/FIXMessageBuilderTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,60", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.fix.message;\n", 
            "+\n", 
            "+import java.io.ByteArrayInputStream;\n", 
            "+import java.io.ByteArrayOutputStream;\n", 
            "+\n", 
            "+import junit.framework.TestCase;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMAbstractFactory;\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axiom.om.OMOutputFormat;\n", 
            "+import org.apache.axiom.soap.SOAPEnvelope;\n", 
            "+import org.apache.axiom.soap.SOAPFactory;\n", 
            "+import org.apache.axis2.context.MessageContext;\n", 
            "+\n", 
            "+public class FIXMessageFormatterTest extends TestCase {\n", 
            "+\n", 
            "+\tpublic void testWriteTo() throws Exception {\n", 
            "+\n", 
            "+\t\tString input = \"8=FIX.4.0\\u00019=105\\u000135=D\\u000134=2\\u000149=BANZAI\\u0001\" +\n", 
            "+                \"52=20080711-06:42:26\\u000156=SYNAPSE\\u000111=1215758546278\\u000121=1\\u0001\" +\n", 
            "+                \"38=90000000\\u000140=1\\u000154=1\\u000155=DEL\\u000159=0\\u000110=121\\u0001\";\n", 
            "+\n", 
            "+\t\tMessageContext msgCtx = new MessageContext();\n", 
            "+\t\tFIXMessageBuilder builder = new FIXMessageBuilder();\n", 
            "+\t\tOMElement element = builder.processDocument(new ByteArrayInputStream(input.getBytes()),\n", 
            "+                \"fix/j\", msgCtx);\n", 
            "+        assertNotNull(element);\n", 
            "+\n", 
            "+        FIXMessageFormatter fixMessageFormatter = new FIXMessageFormatter();\n", 
            "+\t\tByteArrayOutputStream output = new ByteArrayOutputStream();\n", 
            "+\t\tSOAPFactory factory = OMAbstractFactory.getSOAP12Factory();\n", 
            "+\t\tSOAPEnvelope env = factory.getDefaultEnvelope();\n", 
            "+\t\tenv.getBody().addChild(element);\n", 
            "+        msgCtx.setEnvelope(env);\n", 
            "+\n", 
            "+\t\tOMOutputFormat myOutputFormat = new OMOutputFormat();\n", 
            "+        fixMessageFormatter.writeTo(msgCtx, myOutputFormat, output, false);\n", 
            "+        assertTrue(output.toByteArray().length > 0);\n", 
            "+\t}\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/fix/src/test/java/org/apache/synapse/transport/fix/message/FIXMessageFormatterTest.java", 
      "from": "java/modules/transports/optional/fix/src/test/java/org/apache/synapse/transport/fix/message/FIXMessageFormatterTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,81", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.fix.message;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+import java.io.OutputStream;\n", 
            "+import java.net.URL;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMOutputFormat;\n", 
            "+import org.apache.axis2.AxisFault;\n", 
            "+import org.apache.axis2.Constants;\n", 
            "+import org.apache.axis2.context.MessageContext;\n", 
            "+import org.apache.axis2.transport.MessageFormatter;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.synapse.transport.fix.FIXUtils;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Reads the incoming message context and convert them back to the fix raw\n", 
            "+ * message\n", 
            "+ * \n", 
            "+ */\n", 
            "+public class FIXMessageFormatter implements MessageFormatter {\n", 
            "+\n", 
            "+\tprivate static final Log log = LogFactory.getLog(FIXMessageFormatter.class);\n", 
            "+\n", 
            "+\tpublic String formatSOAPAction(MessageContext arg0, OMOutputFormat arg1, String arg2) {\n", 
            "+\t\treturn null;\n", 
            "+\t}\n", 
            "+\n", 
            "+\tpublic byte[] getBytes(MessageContext arg0, OMOutputFormat arg1) throws AxisFault {\n", 
            "+\t\n", 
            "+\t\treturn null;\n", 
            "+\t}\n", 
            "+\n", 
            "+\tpublic String getContentType(MessageContext msgCtx, OMOutputFormat format, String soapActionString) {\n", 
            "+\t\tString contentType = (String) msgCtx.getProperty(Constants.Configuration.CONTENT_TYPE);\n", 
            "+\t\tString encoding = format.getCharSetEncoding();\n", 
            "+\t\tif (contentType == null) {\n", 
            "+\t\t\tcontentType = (String) msgCtx.getProperty(Constants.Configuration.MESSAGE_TYPE);\n", 
            "+\t\t}\n", 
            "+\t\tif (encoding != null) {\n", 
            "+\t\t\tcontentType += \"; charset=\" + encoding;\n", 
            "+\t\t}\n", 
            "+\t\treturn contentType;\n", 
            "+\t}\n", 
            "+\n", 
            "+\tpublic URL getTargetAddress(MessageContext arg0, OMOutputFormat arg1, URL arg2) throws AxisFault {\n", 
            "+\t\treturn null;\n", 
            "+\t}\n", 
            "+\n", 
            "+\tpublic void writeTo(MessageContext msgCtx, OMOutputFormat format, OutputStream out,\n", 
            "+                        boolean preserve) throws AxisFault {\n", 
            "+\n", 
            "+\t\ttry {\n", 
            "+            quickfix.Message message = FIXUtils.getInstance().createFIXMessage(msgCtx);\n", 
            "+            out.write(message.toString().getBytes());\n", 
            "+\t\t} catch (IOException e) {\n", 
            "+\t\t\tlog.error(\"Error while formatting FIX SOAP message\", e);\n", 
            "+\t\t\tthrow new AxisFault(e.getMessage());\n", 
            "+\t\t}\n", 
            "+\t}\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/fix/src/main/java/org/apache/synapse/transport/fix/message/FIXMessageFormatter.java", 
      "from": "java/modules/transports/optional/fix/src/main/java/org/apache/synapse/transport/fix/message/FIXMessageFormatter.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,95", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.fix.message;\n", 
            "+\n", 
            "+import java.io.InputStream;\n", 
            "+import java.io.InputStreamReader;\n", 
            "+import java.io.Reader;\n", 
            "+\n", 
            "+import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.axis2.AxisFault;\n", 
            "+import org.apache.axis2.Constants;\n", 
            "+import org.apache.axis2.builder.Builder;\n", 
            "+import org.apache.axis2.context.MessageContext;\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+\n", 
            "+import org.apache.synapse.transport.fix.FIXUtils;\n", 
            "+import quickfix.InvalidMessage;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Fix message builder prepares a payload based on the incoming raw fix message\n", 
            "+ * read from the destination. This implementation only focuses on building the message\n", 
            "+ * context. There will be limitations such as when building message there won't be\n", 
            "+ * fix session attribute involved and the assumption is that the fix client and executor\n", 
            "+ * has the responsibility of managing fix session accordingly.\n", 
            "+ */\n", 
            "+public class FIXMessageBuilder implements Builder {\n", 
            "+\n", 
            "+\tprivate static final Log log = LogFactory.getLog(FIXMessageBuilder.class);\n", 
            "+\n", 
            "+\tpublic OMElement processDocument(InputStream inputStream, String contentType,\n", 
            "+                                     MessageContext messageContext) throws AxisFault {\n", 
            "+\t\tReader reader;\n", 
            "+        quickfix.Message message;\n", 
            "+        StringBuilder messageString = new StringBuilder();\n", 
            "+\t\ttry {\n", 
            "+\t\t\tString charSetEncoding = (String) messageContext.getProperty(\n", 
            "+                    Constants.Configuration.CHARACTER_SET_ENCODING);\n", 
            "+\t\t\tif (charSetEncoding == null) {\n", 
            "+\t\t\t\tcharSetEncoding = MessageContext.DEFAULT_CHAR_SET_ENCODING;\n", 
            "+\t\t\t}\n", 
            "+\t\t\treader = new InputStreamReader(inputStream, charSetEncoding);\n", 
            "+\t\t\ttry {\n", 
            "+\t\t\t\tint data = reader.read();\n", 
            "+\t\t\t\twhile (data != -1) {\n", 
            "+\t\t\t\t\tchar dataChar = (char) data;\n", 
            "+\t\t\t\t\tdata = reader.read();\n", 
            "+\t\t\t\t\tmessageString.append(dataChar);\n", 
            "+\t\t\t\t}\n", 
            "+\t\t\t} catch (Exception e) {\n", 
            "+                handleException(\"Error while creating FIX SOAP envelope\", e);\n", 
            "+\t\t\t}\n", 
            "+\n", 
            "+\t\t} catch (Exception e) {\n", 
            "+            handleException(\"Error while creating FIX SOAP envelope\", e);\n", 
            "+\t\t}\n", 
            "+\n", 
            "+\t\ttry {\n", 
            "+\t\t\tmessage = new quickfix.Message(messageString.toString(), null, false);\n", 
            "+\t\t} catch (InvalidMessage e) {\n", 
            "+\t\t\thandleException(\"Error while creating FIX SOAP envelope\", e);\n", 
            "+            return null;\n", 
            "+\t\t}\n", 
            "+\n", 
            "+\t\tif (log.isDebugEnabled()) {\n", 
            "+\t\t\tlog.debug(\"Creating SOAP envelope for FIX message...\");\n", 
            "+\t\t}\n", 
            "+\n", 
            "+        FIXUtils.getInstance().setSOAPEnvelope(message, -1, \"\", messageContext);\n", 
            "+\t\treturn messageContext.getEnvelope().getBody().getFirstElement();\n", 
            "+\t}\n", 
            "+\n", 
            "+    private void handleException(String msg, Exception e) throws AxisFault {\n", 
            "+        log.error(msg, e);\n", 
            "+        throw new AxisFault(msg, e);\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/fix/src/main/java/org/apache/synapse/transport/fix/message/FIXMessageBuilder.java", 
      "from": "java/modules/transports/optional/fix/src/main/java/org/apache/synapse/transport/fix/message/FIXMessageBuilder.java"
    }
  ], 
  "id": "1505874"
}