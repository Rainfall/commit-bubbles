{
  "when": "2016-12-27T04:55:18-05:00", 
  "message": "Refactoring connection factory class names", 
  "who": "isudana", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-1,170 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.utils.conn.logging;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.Header;\n", 
            "-import org.apache.http.HttpException;\n", 
            "-import org.apache.http.HttpRequest;\n", 
            "-import org.apache.http.HttpResponse;\n", 
            "-import org.apache.http.config.ConnectionConfig;\n", 
            "-import org.apache.http.config.MessageConstraints;\n", 
            "-import org.apache.http.impl.ConnSupport;\n", 
            "-import org.apache.http.impl.entity.StrictContentLengthStrategy;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "-import org.apache.http.impl.nio.codecs.DefaultHttpRequestParser;\n", 
            "-import org.apache.http.impl.nio.codecs.DefaultHttpResponseWriter;\n", 
            "-import org.apache.http.nio.*;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            "-import org.apache.http.nio.reactor.SessionOutputBuffer;\n", 
            "-import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            "-import org.apache.synapse.transport.nhttp.AccessHandler;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-\n", 
            "-/**\n", 
            "- * A connection factory implementation for DefaultNHttpServerConnection instances.\n", 
            "- * Based on the current logging configuration, this factory decides whether to create\n", 
            "- * regular DefaultNHttpServerConnection objects or to create LoggingNHttpServerConnection\n", 
            "- * objects. Also, depending on the logging configuration, this factory may choose to\n", 
            "- * wrap IOSession instances in LoggingIOSession objects.\n", 
            "- */\n", 
            "-public class LoggingNHttpServerConnectionFactory implements NHttpConnectionFactory<DefaultNHttpServerConnection> {\n", 
            "-\n", 
            "-    private static final Log sourceConnLog = LogFactory.getLog(\n", 
            "-            LoggingConstants.SOURCE_CONNECTION_LOG_ID);\n", 
            "-    private static final Log sourceHeaderLog = LogFactory.getLog(\n", 
            "-            LoggingConstants.SOURCE_HEADER_LOG_ID);\n", 
            "-    private static final Log sourceSessionLog = LogFactory.getLog(\n", 
            "-            LoggingConstants.SOURCE_SESSION_LOG_ID);\n", 
            "-    private static final Log sourceWireLog = LogFactory.getLog(\n", 
            "-            LoggingConstants.SOURCE_WIRE_LOG_ID);\n", 
            "-\n", 
            "-    private static final NHttpMessageParserFactory<HttpRequest> requestParserFactory =\n", 
            "-            new LoggingNHttpRequestParserFactory();\n", 
            "-    private static final NHttpMessageWriterFactory<HttpResponse> responseWriterFactory =\n", 
            "-            new LoggingNHttpResponseWriterFactory();\n", 
            "-\n", 
            "-    private final ConnectionConfig config;\n", 
            "-\n", 
            "-    public LoggingNHttpServerConnectionFactory(ConnectionConfig config) {\n", 
            "-        this.config = config;\n", 
            "-    }\n", 
            "-\n", 
            "-    public DefaultNHttpServerConnection createConnection(IOSession session) {\n", 
            "-        if (sourceSessionLog.isDebugEnabled() || sourceWireLog.isDebugEnabled()) {\n", 
            "-            session = new LoggingIOSession(sourceSessionLog, sourceWireLog,\n", 
            "-                    session, \"http-listener\");\n", 
            "-        }\n", 
            "-\n", 
            "-        if (sourceConnLog.isDebugEnabled()) {\n", 
            "-            return new LoggingNHttpServerConnection(\n", 
            "-                    session,\n", 
            "-                    config.getBufferSize(),\n", 
            "-                    config.getFragmentSizeHint(),\n", 
            "-                    HeapByteBufferAllocator.INSTANCE,\n", 
            "-                    ConnSupport.createDecoder(config),\n", 
            "-                    ConnSupport.createEncoder(config),\n", 
            "-                    config.getMessageConstraints(),\n", 
            "-                    StrictContentLengthStrategy.INSTANCE,\n", 
            "-                    StrictContentLengthStrategy.INSTANCE,\n", 
            "-                    requestParserFactory,\n", 
            "-                    responseWriterFactory,\n", 
            "-                    sourceConnLog);\n", 
            "-        } else {\n", 
            "-            return new DefaultNHttpServerConnection(\n", 
            "-                    session,\n", 
            "-                    config.getBufferSize(),\n", 
            "-                    config.getFragmentSizeHint(),\n", 
            "-                    HeapByteBufferAllocator.INSTANCE,\n", 
            "-                    ConnSupport.createDecoder(config),\n", 
            "-                    ConnSupport.createEncoder(config),\n", 
            "-                    config.getMessageConstraints(),\n", 
            "-                    StrictContentLengthStrategy.INSTANCE,\n", 
            "-                    StrictContentLengthStrategy.INSTANCE,\n", 
            "-                    requestParserFactory,\n", 
            "-                    responseWriterFactory);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    static class LoggingNHttpRequestParserFactory implements NHttpMessageParserFactory<HttpRequest> {\n", 
            "-        public NHttpMessageParser<HttpRequest> create(SessionInputBuffer sessionBuffer,\n", 
            "-                                                      MessageConstraints messageConstraints) {\n", 
            "-            return new LoggingNHttpRequestParser(sessionBuffer, messageConstraints);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    static class LoggingNHttpResponseWriterFactory implements NHttpMessageWriterFactory<HttpResponse> {\n", 
            "-        public NHttpMessageWriter<HttpResponse> create(SessionOutputBuffer sessionBuffer) {\n", 
            "-            return new LoggingNHttpResponseWriter(sessionBuffer);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    static class LoggingNHttpRequestParser extends DefaultHttpRequestParser {\n", 
            "-\n", 
            "-        public LoggingNHttpRequestParser(SessionInputBuffer buffer, MessageConstraints constraints) {\n", 
            "-            super(buffer, constraints);\n", 
            "-        }\n", 
            "-\n", 
            "-        public HttpRequest parse() throws IOException, HttpException {\n", 
            "-            HttpRequest request = super.parse();\n", 
            "-            if (request != null) {\n", 
            "-                if (sourceHeaderLog.isDebugEnabled()) {\n", 
            "-                    sourceHeaderLog.debug(\">> \" + request.getRequestLine().toString());\n", 
            "-                    Header[] headers = request.getAllHeaders();\n", 
            "-                    for (Header header : headers) {\n", 
            "-                        sourceHeaderLog.debug(\">> \" + header.toString());\n", 
            "-                    }\n", 
            "-                }\n", 
            "-\n", 
            "-                if (AccessHandler.getAccessLog().isInfoEnabled()) {\n", 
            "-                    AccessHandler.getAccess().addAccessToQueue(request);\n", 
            "-                }\n", 
            "-            }\n", 
            "-            return request;\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    static class LoggingNHttpResponseWriter extends DefaultHttpResponseWriter {\n", 
            "-\n", 
            "-        public LoggingNHttpResponseWriter(SessionOutputBuffer buffer) {\n", 
            "-            super(buffer);\n", 
            "-        }\n", 
            "-\n", 
            "-        public void write(final HttpResponse response) throws IOException, HttpException {\n", 
            "-            if (response != null) {\n", 
            "-                if (response != null && sourceHeaderLog.isDebugEnabled()) {\n", 
            "-                    sourceHeaderLog.debug(\"<< \" + response.getStatusLine().toString());\n", 
            "-                    Header[] headers = response.getAllHeaders();\n", 
            "-                    for (Header header : headers) {\n", 
            "-                        sourceHeaderLog.debug(\"<< \" + header.toString());\n", 
            "-                    }\n", 
            "-                }\n", 
            "-\n", 
            "-                if (AccessHandler.getAccessLog().isInfoEnabled()) {\n", 
            "-                    AccessHandler.getAccess().addAccessToQueue(response);\n", 
            "-                }\n", 
            "-            }\n", 
            "-            super.write(response);\n", 
            "-        }\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpServerConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpServerConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,57 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.utils.conn.logging;\n", 
            "-\n", 
            "-import org.apache.http.config.ConnectionConfig;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLMode;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-\n", 
            "-import javax.net.ssl.SSLContext;\n", 
            "-\n", 
            "-/**\n", 
            "- * The SSL-enabled version of the LoggingNHttpServerConnectionFactory. Identical in behavior\n", 
            "- * to the parent class, but wraps IOSession instances with SSLIOSession instances.\n", 
            "- */\n", 
            "-public class LoggingNHttpSSLServerConnectionFactory extends LoggingNHttpServerConnectionFactory {\n", 
            "-\n", 
            "-    private SSLContext sslContext;\n", 
            "-    private SSLSetupHandler sslSetupHandler;\n", 
            "-\n", 
            "-    public LoggingNHttpSSLServerConnectionFactory(ConnectionConfig config, SSLContext sslContext,\n", 
            "-                                                  SSLSetupHandler sslSetupHandler) {\n", 
            "-        super(config);\n", 
            "-        this.sslContext = sslContext;\n", 
            "-        this.sslSetupHandler = sslSetupHandler;\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public DefaultNHttpServerConnection createConnection(IOSession session) {\n", 
            "-        final SSLIOSession ssliosession = new SSLIOSession(\n", 
            "-                session,\n", 
            "-                SSLMode.SERVER,\n", 
            "-                sslContext,\n", 
            "-                sslSetupHandler);\n", 
            "-        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);\n", 
            "-        return super.createConnection(ssliosession);\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLServerConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLServerConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,172 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.utils.conn.logging;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.Header;\n", 
            "-import org.apache.http.HttpException;\n", 
            "-import org.apache.http.HttpRequest;\n", 
            "-import org.apache.http.HttpResponse;\n", 
            "-import org.apache.http.config.ConnectionConfig;\n", 
            "-import org.apache.http.config.MessageConstraints;\n", 
            "-import org.apache.http.impl.ConnSupport;\n", 
            "-import org.apache.http.impl.entity.StrictContentLengthStrategy;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.impl.nio.codecs.DefaultHttpRequestWriter;\n", 
            "-import org.apache.http.impl.nio.codecs.DefaultHttpResponseParser;\n", 
            "-import org.apache.http.nio.*;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            "-import org.apache.http.nio.reactor.SessionOutputBuffer;\n", 
            "-import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            "-import org.apache.synapse.transport.nhttp.AccessHandler;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-\n", 
            "-/**\n", 
            "- * A connection factory implementation for DefaultNHttpClientConnection instances.\n", 
            "- * Based on the current logging configuration, this factory decides whether to create\n", 
            "- * regular DefaultNHttpClientConnection objects or to create LoggingNHttpClientConnection\n", 
            "- * objects. Also, depending on the logging configuration, this factory may choose to\n", 
            "- * wrap IOSession instances in LoggingIOSession objects.\n", 
            "- */\n", 
            "-public class LoggingNHttpClientConnectionFactory implements NHttpConnectionFactory<DefaultNHttpClientConnection> {\n", 
            "-\n", 
            "-    private static final Log targetConnLog = LogFactory.getLog(\n", 
            "-            LoggingConstants.TARGET_CONNECTION_LOG_ID);\n", 
            "-    private static final Log targetHeaderLog = LogFactory.getLog(\n", 
            "-            LoggingConstants.TARGET_HEADER_LOG_ID);\n", 
            "-    private static final Log targetSessionLog = LogFactory.getLog(\n", 
            "-            LoggingConstants.TARGET_SESSION_LOG_ID);\n", 
            "-    private static final Log targetWireLog = LogFactory.getLog(\n", 
            "-            LoggingConstants.TARGET_WIRE_LOG_ID);\n", 
            "-\n", 
            "-    private static final NHttpMessageWriterFactory<HttpRequest> requestWriterFactory =\n", 
            "-            new LoggingNHttpRequestWriterFactory();\n", 
            "-    private static final NHttpMessageParserFactory<HttpResponse> responseParserFactory =\n", 
            "-            new LoggingNHttpResponseParserFactory();\n", 
            "-\n", 
            "-    private final ConnectionConfig config;\n", 
            "-\n", 
            "-    public LoggingNHttpClientConnectionFactory(ConnectionConfig config) {\n", 
            "-        this.config = config;\n", 
            "-    }\n", 
            "-\n", 
            "-    public DefaultNHttpClientConnection createConnection(IOSession session) {\n", 
            "-        if (targetSessionLog.isDebugEnabled() || targetWireLog.isDebugEnabled()) {\n", 
            "-            session = new LoggingIOSession(targetSessionLog, targetWireLog,\n", 
            "-                    session, \"http-sender\");\n", 
            "-        }\n", 
            "-\n", 
            "-        if (targetConnLog.isDebugEnabled() || targetHeaderLog.isDebugEnabled()) {\n", 
            "-            return new LoggingNHttpClientConnection(\n", 
            "-                    session,\n", 
            "-                    config.getBufferSize(),\n", 
            "-                    config.getFragmentSizeHint(),\n", 
            "-                    HeapByteBufferAllocator.INSTANCE,\n", 
            "-                    ConnSupport.createDecoder(config),\n", 
            "-                    ConnSupport.createEncoder(config),\n", 
            "-                    config.getMessageConstraints(),\n", 
            "-                    StrictContentLengthStrategy.INSTANCE,\n", 
            "-                    StrictContentLengthStrategy.INSTANCE,\n", 
            "-                    requestWriterFactory,\n", 
            "-                    responseParserFactory,\n", 
            "-                    targetConnLog);\n", 
            "-        } else {\n", 
            "-            return new DefaultNHttpClientConnection(\n", 
            "-                    session,\n", 
            "-                    config.getBufferSize(),\n", 
            "-                    config.getFragmentSizeHint(),\n", 
            "-                    HeapByteBufferAllocator.INSTANCE,\n", 
            "-                    ConnSupport.createDecoder(config),\n", 
            "-                    ConnSupport.createEncoder(config),\n", 
            "-                    config.getMessageConstraints(),\n", 
            "-                    StrictContentLengthStrategy.INSTANCE,\n", 
            "-                    StrictContentLengthStrategy.INSTANCE,\n", 
            "-                    requestWriterFactory,\n", 
            "-                    responseParserFactory);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    static class LoggingNHttpRequestWriterFactory implements NHttpMessageWriterFactory<HttpRequest> {\n", 
            "-        public NHttpMessageWriter<HttpRequest> create(SessionOutputBuffer sessionBuffer) {\n", 
            "-            return new LoggingNHttpRequestWriter(sessionBuffer);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    static class LoggingNHttpResponseParserFactory implements NHttpMessageParserFactory<HttpResponse> {\n", 
            "-        public NHttpMessageParser<HttpResponse> create(SessionInputBuffer sessionBuffer,\n", 
            "-                                                      MessageConstraints messageConstraints) {\n", 
            "-            return new LoggingNHttpResponseParser(sessionBuffer, messageConstraints);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    static class LoggingNHttpRequestWriter extends DefaultHttpRequestWriter {\n", 
            "-\n", 
            "-        public LoggingNHttpRequestWriter(SessionOutputBuffer buffer) {\n", 
            "-            super(buffer);\n", 
            "-        }\n", 
            "-\n", 
            "-        public void write(final HttpRequest request) throws IOException, HttpException {\n", 
            "-            if (request != null) {\n", 
            "-                if (targetHeaderLog.isDebugEnabled()) {\n", 
            "-                    targetHeaderLog.debug(\">> \" + request.getRequestLine().toString());\n", 
            "-                    Header[] headers = request.getAllHeaders();\n", 
            "-                    for (Header header : headers) {\n", 
            "-                        targetHeaderLog.debug(\">> \" + header.toString());\n", 
            "-                    }\n", 
            "-                }\n", 
            "-\n", 
            "-                if (AccessHandler.getAccessLog().isInfoEnabled()) {\n", 
            "-                    AccessHandler.getAccess().addAccessToQueue(request);\n", 
            "-                }\n", 
            "-            }\n", 
            "-            super.write(request);\n", 
            "-        }\n", 
            "-\n", 
            "-    }\n", 
            "-\n", 
            "-    static class LoggingNHttpResponseParser extends DefaultHttpResponseParser {\n", 
            "-\n", 
            "-        public LoggingNHttpResponseParser(SessionInputBuffer buffer, MessageConstraints constraints) {\n", 
            "-            super(buffer, constraints);\n", 
            "-        }\n", 
            "-\n", 
            "-        public HttpResponse parse() throws IOException, HttpException {\n", 
            "-            HttpResponse response = super.parse();\n", 
            "-            if (response != null) {\n", 
            "-                if (targetHeaderLog.isDebugEnabled()) {\n", 
            "-                    targetHeaderLog.debug(\"<< \" + response.getStatusLine().toString());\n", 
            "-                    Header[] headers = response.getAllHeaders();\n", 
            "-                    for (Header header : headers) {\n", 
            "-                        targetHeaderLog.debug(\"<< \" + header.toString());\n", 
            "-                    }\n", 
            "-                }\n", 
            "-\n", 
            "-                if (AccessHandler.getAccessLog().isInfoEnabled()) {\n", 
            "-                    AccessHandler.getAccess().addAccessToQueue(response);\n", 
            "-                }\n", 
            "-            }\n", 
            "-            return response;\n", 
            "-        }\n", 
            "-\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,80 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.utils.conn.logging;\n", 
            "-\n", 
            "-import org.apache.http.config.ConnectionConfig;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLMode;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-\n", 
            "-import javax.net.ssl.SSLContext;\n", 
            "-import java.net.InetSocketAddress;\n", 
            "-import java.util.Map;\n", 
            "-\n", 
            "-/**\n", 
            "- * The SSL-enabled version of the LoggingNHttpClientConnectionFactory. Identical in behavior\n", 
            "- * to the parent class, but wraps IOSession instances with SSLIOSession instances. This\n", 
            "- * implementation also supports using different SSLContext instances for different target\n", 
            "- * I/O sessions.\n", 
            "- */\n", 
            "-public class LoggingNHttpSSLClientConnectionFactory extends LoggingNHttpClientConnectionFactory {\n", 
            "-\n", 
            "-    private SSLContext sslContext;\n", 
            "-    private SSLSetupHandler sslSetupHandler;\n", 
            "-    private Map<String,SSLContext> customContexts;\n", 
            "-\n", 
            "-    public LoggingNHttpSSLClientConnectionFactory(ConnectionConfig config,\n", 
            "-                                                  SSLContext sslContext,\n", 
            "-                                                  SSLSetupHandler sslSetupHandler,\n", 
            "-                                                  Map<String, SSLContext> customContexts) {\n", 
            "-        super(config);\n", 
            "-        this.sslContext = sslContext;\n", 
            "-        this.sslSetupHandler = sslSetupHandler;\n", 
            "-        this.customContexts = customContexts;\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public DefaultNHttpClientConnection createConnection(IOSession session) {\n", 
            "-        final SSLIOSession ssliosession = new SSLIOSession(\n", 
            "-                session,\n", 
            "-                SSLMode.CLIENT,\n", 
            "-                getSSLContext(session),\n", 
            "-                sslSetupHandler);\n", 
            "-        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);\n", 
            "-        return super.createConnection(ssliosession);\n", 
            "-    }\n", 
            "-\n", 
            "-    private SSLContext getSSLContext(IOSession session) {\n", 
            "-        InetSocketAddress address = (InetSocketAddress) session.getRemoteAddress();\n", 
            "-        String host = address.getHostName() + \":\" + address.getPort();\n", 
            "-        SSLContext customContext = null;\n", 
            "-        if (customContexts != null) {\n", 
            "-            // See if there's a custom SSL profile configured for this server\n", 
            "-            customContext = customContexts.get(host);\n", 
            "-        }\n", 
            "-\n", 
            "-        if (customContext == null) {\n", 
            "-            customContext = sslContext;\n", 
            "-        }\n", 
            "-        return customContext;\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLClientConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpSSLClientConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,176", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.Header;\n", 
            "+import org.apache.http.HttpException;\n", 
            "+import org.apache.http.HttpRequest;\n", 
            "+import org.apache.http.HttpResponse;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            "+import org.apache.http.config.MessageConstraints;\n", 
            "+import org.apache.http.impl.ConnSupport;\n", 
            "+import org.apache.http.impl.entity.StrictContentLengthStrategy;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "+import org.apache.http.impl.nio.codecs.DefaultHttpRequestWriter;\n", 
            "+import org.apache.http.impl.nio.codecs.DefaultHttpResponseParser;\n", 
            "+import org.apache.http.nio.*;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            "+import org.apache.http.nio.reactor.SessionOutputBuffer;\n", 
            "+import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            "+import org.apache.synapse.transport.nhttp.AccessHandler;\n", 
            "+import org.apache.synapse.transport.utils.conn.SynapseNHttpClientConnection;\n", 
            "+import org.apache.synapse.transport.utils.conn.logging.LoggingConstants;\n", 
            "+import org.apache.synapse.transport.utils.conn.logging.LoggingIOSession;\n", 
            "+import org.apache.synapse.transport.utils.conn.logging.LoggingNHttpClientConnection;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+\n", 
            "+/**\n", 
            "+ * A connection factory implementation for DefaultNHttpClientConnection instances.\n", 
            "+ * Based on the current logging configuration, this factory decides whether to create\n", 
            "+ * regular SynapseNHttpClientConnection objects or to create LoggingNHttpClientConnection\n", 
            "+ * objects. Also, depending on the logging configuration, this factory may choose to\n", 
            "+ * wrap IOSession instances in LoggingIOSession objects.\n", 
            "+ */\n", 
            "+public class SynapseNHttpClientConnectionFactory implements NHttpConnectionFactory<DefaultNHttpClientConnection> {\n", 
            "+\n", 
            "+    private static final Log targetConnLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.TARGET_CONNECTION_LOG_ID);\n", 
            "+    private static final Log targetHeaderLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.TARGET_HEADER_LOG_ID);\n", 
            "+    private static final Log targetSessionLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.TARGET_SESSION_LOG_ID);\n", 
            "+    private static final Log targetWireLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.TARGET_WIRE_LOG_ID);\n", 
            "+\n", 
            "+    private static final NHttpMessageWriterFactory<HttpRequest> requestWriterFactory =\n", 
            "+            new LoggingNHttpRequestWriterFactory();\n", 
            "+    private static final NHttpMessageParserFactory<HttpResponse> responseParserFactory =\n", 
            "+            new LoggingNHttpResponseParserFactory();\n", 
            "+\n", 
            "+    private final ConnectionConfig config;\n", 
            "+\n", 
            "+    public SynapseNHttpClientConnectionFactory(ConnectionConfig config) {\n", 
            "+        this.config = config;\n", 
            "+    }\n", 
            "+\n", 
            "+    public DefaultNHttpClientConnection createConnection(IOSession session) {\n", 
            "+        if (targetSessionLog.isDebugEnabled() || targetWireLog.isDebugEnabled()) {\n", 
            "+            session = new LoggingIOSession(targetSessionLog, targetWireLog,\n", 
            "+                                           session, \"http-sender\");\n", 
            "+        }\n", 
            "+\n", 
            "+        if (targetConnLog.isDebugEnabled() || targetHeaderLog.isDebugEnabled()) {\n", 
            "+            return new LoggingNHttpClientConnection(\n", 
            "+                    session,\n", 
            "+                    config.getBufferSize(),\n", 
            "+                    config.getFragmentSizeHint(),\n", 
            "+                    HeapByteBufferAllocator.INSTANCE,\n", 
            "+                    ConnSupport.createDecoder(config),\n", 
            "+                    ConnSupport.createEncoder(config),\n", 
            "+                    config.getMessageConstraints(),\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    requestWriterFactory,\n", 
            "+                    responseParserFactory,\n", 
            "+                    targetConnLog);\n", 
            "+        } else {\n", 
            "+            return new SynapseNHttpClientConnection(\n", 
            "+                    session,\n", 
            "+                    config.getBufferSize(),\n", 
            "+                    config.getFragmentSizeHint(),\n", 
            "+                    HeapByteBufferAllocator.INSTANCE,\n", 
            "+                    ConnSupport.createDecoder(config),\n", 
            "+                    ConnSupport.createEncoder(config),\n", 
            "+                    config.getMessageConstraints(),\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    requestWriterFactory,\n", 
            "+                    responseParserFactory);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpRequestWriterFactory implements NHttpMessageWriterFactory<HttpRequest> {\n", 
            "+        public NHttpMessageWriter<HttpRequest> create(SessionOutputBuffer sessionBuffer) {\n", 
            "+            return new LoggingNHttpRequestWriter(sessionBuffer);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpResponseParserFactory implements NHttpMessageParserFactory<HttpResponse> {\n", 
            "+        public NHttpMessageParser<HttpResponse> create(SessionInputBuffer sessionBuffer,\n", 
            "+                                                      MessageConstraints messageConstraints) {\n", 
            "+            return new LoggingNHttpResponseParser(sessionBuffer, messageConstraints);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpRequestWriter extends DefaultHttpRequestWriter {\n", 
            "+\n", 
            "+        public LoggingNHttpRequestWriter(SessionOutputBuffer buffer) {\n", 
            "+            super(buffer);\n", 
            "+        }\n", 
            "+\n", 
            "+        public void write(final HttpRequest request) throws IOException, HttpException {\n", 
            "+            if (request != null) {\n", 
            "+                if (targetHeaderLog.isDebugEnabled()) {\n", 
            "+                    targetHeaderLog.debug(\">> \" + request.getRequestLine().toString());\n", 
            "+                    Header[] headers = request.getAllHeaders();\n", 
            "+                    for (Header header : headers) {\n", 
            "+                        targetHeaderLog.debug(\">> \" + header.toString());\n", 
            "+                    }\n", 
            "+                }\n", 
            "+\n", 
            "+                if (AccessHandler.getAccessLog().isInfoEnabled()) {\n", 
            "+                    AccessHandler.getAccess().addAccessToQueue(request);\n", 
            "+                }\n", 
            "+            }\n", 
            "+            super.write(request);\n", 
            "+        }\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpResponseParser extends DefaultHttpResponseParser {\n", 
            "+\n", 
            "+        public LoggingNHttpResponseParser(SessionInputBuffer buffer, MessageConstraints constraints) {\n", 
            "+            super(buffer, constraints);\n", 
            "+        }\n", 
            "+\n", 
            "+        public HttpResponse parse() throws IOException, HttpException {\n", 
            "+            HttpResponse response = super.parse();\n", 
            "+            if (response != null) {\n", 
            "+                if (targetHeaderLog.isDebugEnabled()) {\n", 
            "+                    targetHeaderLog.debug(\"<< \" + response.getStatusLine().toString());\n", 
            "+                    Header[] headers = response.getAllHeaders();\n", 
            "+                    for (Header header : headers) {\n", 
            "+                        targetHeaderLog.debug(\"<< \" + header.toString());\n", 
            "+                    }\n", 
            "+                }\n", 
            "+\n", 
            "+                if (AccessHandler.getAccessLog().isInfoEnabled()) {\n", 
            "+                    AccessHandler.getAccess().addAccessToQueue(response);\n", 
            "+                }\n", 
            "+            }\n", 
            "+            return response;\n", 
            "+        }\n", 
            "+\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpClientConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpClientConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,80", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn;\n", 
            "+\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLMode;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "+\n", 
            "+import javax.net.ssl.SSLContext;\n", 
            "+import java.net.InetSocketAddress;\n", 
            "+import java.util.Map;\n", 
            "+\n", 
            "+/**\n", 
            "+ * The SSL-enabled version of the SynapseNHttpClientConnectionFactory. Identical in behavior\n", 
            "+ * to the parent class, but wraps IOSession instances with SSLIOSession instances. This\n", 
            "+ * implementation also supports using different SSLContext instances for different target\n", 
            "+ * I/O sessions.\n", 
            "+ */\n", 
            "+public class SynapseNHttpSSLClientConnectionFactory extends SynapseNHttpClientConnectionFactory {\n", 
            "+\n", 
            "+    private SSLContext sslContext;\n", 
            "+    private SSLSetupHandler sslSetupHandler;\n", 
            "+    private Map<String,SSLContext> customContexts;\n", 
            "+\n", 
            "+    public SynapseNHttpSSLClientConnectionFactory(ConnectionConfig config,\n", 
            "+                                                  SSLContext sslContext,\n", 
            "+                                                  SSLSetupHandler sslSetupHandler,\n", 
            "+                                                  Map<String, SSLContext> customContexts) {\n", 
            "+        super(config);\n", 
            "+        this.sslContext = sslContext;\n", 
            "+        this.sslSetupHandler = sslSetupHandler;\n", 
            "+        this.customContexts = customContexts;\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public DefaultNHttpClientConnection createConnection(IOSession session) {\n", 
            "+        final SSLIOSession ssliosession = new SSLIOSession(\n", 
            "+                session,\n", 
            "+                SSLMode.CLIENT,\n", 
            "+                getSSLContext(session),\n", 
            "+                sslSetupHandler);\n", 
            "+        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);\n", 
            "+        return super.createConnection(ssliosession);\n", 
            "+    }\n", 
            "+\n", 
            "+    private SSLContext getSSLContext(IOSession session) {\n", 
            "+        InetSocketAddress address = (InetSocketAddress) session.getRemoteAddress();\n", 
            "+        String host = address.getHostName() + \":\" + address.getPort();\n", 
            "+        SSLContext customContext = null;\n", 
            "+        if (customContexts != null) {\n", 
            "+            // See if there's a custom SSL profile configured for this server\n", 
            "+            customContext = customContexts.get(host);\n", 
            "+        }\n", 
            "+\n", 
            "+        if (customContext == null) {\n", 
            "+            customContext = sslContext;\n", 
            "+        }\n", 
            "+        return customContext;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpSSLClientConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpSSLClientConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,84", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn;\n", 
            "+\n", 
            "+import org.apache.http.HttpException;\n", 
            "+import org.apache.http.HttpRequest;\n", 
            "+import org.apache.http.HttpResponse;\n", 
            "+import org.apache.http.config.MessageConstraints;\n", 
            "+import org.apache.http.entity.ContentLengthStrategy;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "+import org.apache.http.nio.NHttpMessageParserFactory;\n", 
            "+import org.apache.http.nio.NHttpMessageWriterFactory;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+import java.nio.charset.CharsetDecoder;\n", 
            "+import java.nio.charset.CharsetEncoder;\n", 
            "+\n", 
            "+/**\n", 
            "+ * An extension of the DefaultNHttpClientConnection class, that has some\n", 
            "+ * additional stuff related to synapse NHttp transport implementation\n", 
            "+ */\n", 
            "+public class SynapseNHttpClientConnection extends DefaultNHttpClientConnection {\n", 
            "+\n", 
            "+    public SynapseNHttpClientConnection(IOSession session,\n", 
            "+                                        int bufferSize,\n", 
            "+                                        int fragmentSizeHint,\n", 
            "+                                        ByteBufferAllocator allocator,\n", 
            "+                                        CharsetDecoder charDecoder,\n", 
            "+                                        CharsetEncoder charEncoder,\n", 
            "+                                        MessageConstraints constraints,\n", 
            "+                                        ContentLengthStrategy incomingContentStrategy,\n", 
            "+                                        ContentLengthStrategy outgoingContentStrategy,\n", 
            "+                                        NHttpMessageWriterFactory<HttpRequest> requestWriterFactory,\n", 
            "+                                        NHttpMessageParserFactory<HttpResponse> responseParserFactory) {\n", 
            "+        super(session, bufferSize, fragmentSizeHint, allocator,\n", 
            "+              charDecoder, charEncoder, constraints, incomingContentStrategy,\n", 
            "+              outgoingContentStrategy, requestWriterFactory, responseParserFactory);\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void close() throws IOException {\n", 
            "+        super.close();\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void shutdown() throws IOException {\n", 
            "+        super.shutdown();\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void submitRequest(final HttpRequest request) throws IOException, HttpException {\n", 
            "+        super.submitRequest(request);\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void consumeInput(final NHttpClientEventHandler handler) {\n", 
            "+        super.consumeInput(handler);\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void produceOutput(final NHttpClientEventHandler handler) {\n", 
            "+        super.produceOutput(handler);\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpClientConnection.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpClientConnection.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,173", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.Header;\n", 
            "+import org.apache.http.HttpException;\n", 
            "+import org.apache.http.HttpRequest;\n", 
            "+import org.apache.http.HttpResponse;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            "+import org.apache.http.config.MessageConstraints;\n", 
            "+import org.apache.http.impl.ConnSupport;\n", 
            "+import org.apache.http.impl.entity.StrictContentLengthStrategy;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "+import org.apache.http.impl.nio.codecs.DefaultHttpRequestParser;\n", 
            "+import org.apache.http.impl.nio.codecs.DefaultHttpResponseWriter;\n", 
            "+import org.apache.http.nio.*;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            "+import org.apache.http.nio.reactor.SessionOutputBuffer;\n", 
            "+import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            "+import org.apache.synapse.transport.nhttp.AccessHandler;\n", 
            "+import org.apache.synapse.transport.utils.conn.logging.LoggingConstants;\n", 
            "+import org.apache.synapse.transport.utils.conn.logging.LoggingIOSession;\n", 
            "+import org.apache.synapse.transport.utils.conn.logging.LoggingNHttpServerConnection;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+\n", 
            "+/**\n", 
            "+ * A connection factory implementation for DefaultNHttpServerConnection instances.\n", 
            "+ * Based on the current logging configuration, this factory decides whether to create\n", 
            "+ * regular DefaultNHttpServerConnection objects or to create LoggingNHttpServerConnection\n", 
            "+ * objects. Also, depending on the logging configuration, this factory may choose to\n", 
            "+ * wrap IOSession instances in LoggingIOSession objects.\n", 
            "+ */\n", 
            "+public class SynapseNHttpServerConnectionFactory implements NHttpConnectionFactory<DefaultNHttpServerConnection> {\n", 
            "+\n", 
            "+    private static final Log sourceConnLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.SOURCE_CONNECTION_LOG_ID);\n", 
            "+    private static final Log sourceHeaderLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.SOURCE_HEADER_LOG_ID);\n", 
            "+    private static final Log sourceSessionLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.SOURCE_SESSION_LOG_ID);\n", 
            "+    private static final Log sourceWireLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.SOURCE_WIRE_LOG_ID);\n", 
            "+\n", 
            "+    private static final NHttpMessageParserFactory<HttpRequest> requestParserFactory =\n", 
            "+            new LoggingNHttpRequestParserFactory();\n", 
            "+    private static final NHttpMessageWriterFactory<HttpResponse> responseWriterFactory =\n", 
            "+            new LoggingNHttpResponseWriterFactory();\n", 
            "+\n", 
            "+    private final ConnectionConfig config;\n", 
            "+\n", 
            "+    public SynapseNHttpServerConnectionFactory(ConnectionConfig config) {\n", 
            "+        this.config = config;\n", 
            "+    }\n", 
            "+\n", 
            "+    public DefaultNHttpServerConnection createConnection(IOSession session) {\n", 
            "+        if (sourceSessionLog.isDebugEnabled() || sourceWireLog.isDebugEnabled()) {\n", 
            "+            session = new LoggingIOSession(sourceSessionLog, sourceWireLog,\n", 
            "+                                           session, \"http-listener\");\n", 
            "+        }\n", 
            "+\n", 
            "+        if (sourceConnLog.isDebugEnabled()) {\n", 
            "+            return new LoggingNHttpServerConnection(\n", 
            "+                    session,\n", 
            "+                    config.getBufferSize(),\n", 
            "+                    config.getFragmentSizeHint(),\n", 
            "+                    HeapByteBufferAllocator.INSTANCE,\n", 
            "+                    ConnSupport.createDecoder(config),\n", 
            "+                    ConnSupport.createEncoder(config),\n", 
            "+                    config.getMessageConstraints(),\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    requestParserFactory,\n", 
            "+                    responseWriterFactory,\n", 
            "+                    sourceConnLog);\n", 
            "+        } else {\n", 
            "+            return new DefaultNHttpServerConnection(\n", 
            "+                    session,\n", 
            "+                    config.getBufferSize(),\n", 
            "+                    config.getFragmentSizeHint(),\n", 
            "+                    HeapByteBufferAllocator.INSTANCE,\n", 
            "+                    ConnSupport.createDecoder(config),\n", 
            "+                    ConnSupport.createEncoder(config),\n", 
            "+                    config.getMessageConstraints(),\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    requestParserFactory,\n", 
            "+                    responseWriterFactory);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpRequestParserFactory implements NHttpMessageParserFactory<HttpRequest> {\n", 
            "+        public NHttpMessageParser<HttpRequest> create(SessionInputBuffer sessionBuffer,\n", 
            "+                                                      MessageConstraints messageConstraints) {\n", 
            "+            return new LoggingNHttpRequestParser(sessionBuffer, messageConstraints);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpResponseWriterFactory implements NHttpMessageWriterFactory<HttpResponse> {\n", 
            "+        public NHttpMessageWriter<HttpResponse> create(SessionOutputBuffer sessionBuffer) {\n", 
            "+            return new LoggingNHttpResponseWriter(sessionBuffer);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpRequestParser extends DefaultHttpRequestParser {\n", 
            "+\n", 
            "+        public LoggingNHttpRequestParser(SessionInputBuffer buffer, MessageConstraints constraints) {\n", 
            "+            super(buffer, constraints);\n", 
            "+        }\n", 
            "+\n", 
            "+        public HttpRequest parse() throws IOException, HttpException {\n", 
            "+            HttpRequest request = super.parse();\n", 
            "+            if (request != null) {\n", 
            "+                if (sourceHeaderLog.isDebugEnabled()) {\n", 
            "+                    sourceHeaderLog.debug(\">> \" + request.getRequestLine().toString());\n", 
            "+                    Header[] headers = request.getAllHeaders();\n", 
            "+                    for (Header header : headers) {\n", 
            "+                        sourceHeaderLog.debug(\">> \" + header.toString());\n", 
            "+                    }\n", 
            "+                }\n", 
            "+\n", 
            "+                if (AccessHandler.getAccessLog().isInfoEnabled()) {\n", 
            "+                    AccessHandler.getAccess().addAccessToQueue(request);\n", 
            "+                }\n", 
            "+            }\n", 
            "+            return request;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpResponseWriter extends DefaultHttpResponseWriter {\n", 
            "+\n", 
            "+        public LoggingNHttpResponseWriter(SessionOutputBuffer buffer) {\n", 
            "+            super(buffer);\n", 
            "+        }\n", 
            "+\n", 
            "+        public void write(final HttpResponse response) throws IOException, HttpException {\n", 
            "+            if (response != null) {\n", 
            "+                if (response != null && sourceHeaderLog.isDebugEnabled()) {\n", 
            "+                    sourceHeaderLog.debug(\"<< \" + response.getStatusLine().toString());\n", 
            "+                    Header[] headers = response.getAllHeaders();\n", 
            "+                    for (Header header : headers) {\n", 
            "+                        sourceHeaderLog.debug(\"<< \" + header.toString());\n", 
            "+                    }\n", 
            "+                }\n", 
            "+\n", 
            "+                if (AccessHandler.getAccessLog().isInfoEnabled()) {\n", 
            "+                    AccessHandler.getAccess().addAccessToQueue(response);\n", 
            "+                }\n", 
            "+            }\n", 
            "+            super.write(response);\n", 
            "+        }\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpServerConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpServerConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,57", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.conn;\n", 
            "+\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLMode;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "+\n", 
            "+import javax.net.ssl.SSLContext;\n", 
            "+\n", 
            "+/**\n", 
            "+ * The SSL-enabled version of the SynapseNHttpServerConnectionFactory. Identical in behavior\n", 
            "+ * to the parent class, but wraps IOSession instances with SSLIOSession instances.\n", 
            "+ */\n", 
            "+public class SynapseNHttpSSLServerConnectionFactory extends SynapseNHttpServerConnectionFactory {\n", 
            "+\n", 
            "+    private SSLContext sslContext;\n", 
            "+    private SSLSetupHandler sslSetupHandler;\n", 
            "+\n", 
            "+    public SynapseNHttpSSLServerConnectionFactory(ConnectionConfig config, SSLContext sslContext,\n", 
            "+                                                  SSLSetupHandler sslSetupHandler) {\n", 
            "+        super(config);\n", 
            "+        this.sslContext = sslContext;\n", 
            "+        this.sslSetupHandler = sslSetupHandler;\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public DefaultNHttpServerConnection createConnection(IOSession session) {\n", 
            "+        final SSLIOSession ssliosession = new SSLIOSession(\n", 
            "+                session,\n", 
            "+                SSLMode.SERVER,\n", 
            "+                sslContext,\n", 
            "+                sslSetupHandler);\n", 
            "+        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);\n", 
            "+        return super.createConnection(ssliosession);\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpSSLServerConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/SynapseNHttpSSLServerConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,12 +25,12", 
          "lines": [
            " import org.apache.http.HttpResponse;\n", 
            " import org.apache.http.config.MessageConstraints;\n", 
            " import org.apache.http.entity.ContentLengthStrategy;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            " import org.apache.http.nio.NHttpClientEventHandler;\n", 
            " import org.apache.http.nio.NHttpMessageParserFactory;\n", 
            " import org.apache.http.nio.NHttpMessageWriterFactory;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            " import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "+import org.apache.synapse.transport.utils.conn.SynapseNHttpClientConnection;\n", 
            " \n", 
            " import java.io.IOException;\n", 
            " import java.nio.charset.CharsetDecoder;\n"
          ]
        }, 
        {
          "locn": "-41,7 +41,7", 
          "lines": [
            "  * additional logging features. This implementation enhances the default connection\n", 
            "  * class by logging all the major events that occur on the connection instance.\n", 
            "  */\n", 
            "-public class LoggingNHttpClientConnection extends DefaultNHttpClientConnection {\n", 
            "+public class LoggingNHttpClientConnection extends SynapseNHttpClientConnection {\n", 
            " \n", 
            "     private final Log log;\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnection.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingNHttpClientConnection.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-27,6 +27,10", 
          "lines": [
            " import org.apache.http.nio.NHttpClientEventHandler;\n", 
            " import org.apache.http.nio.NHttpServerEventHandler;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "+import org.apache.synapse.transport.utils.conn.SynapseNHttpClientConnectionFactory;\n", 
            "+import org.apache.synapse.transport.utils.conn.SynapseNHttpSSLClientConnectionFactory;\n", 
            "+import org.apache.synapse.transport.utils.conn.SynapseNHttpSSLServerConnectionFactory;\n", 
            "+import org.apache.synapse.transport.utils.conn.SynapseNHttpServerConnectionFactory;\n", 
            " \n", 
            " import javax.net.ssl.SSLContext;\n", 
            " import java.util.Map;\n"
          ]
        }, 
        {
          "locn": "-45,7 +49,7", 
          "lines": [
            "     public static DefaultHttpServerIODispatch getServerIODispatch(final NHttpServerEventHandler handler,\n", 
            "                                                                   final ConnectionConfig config) {\n", 
            "         return new DefaultHttpServerIODispatch(decorate(handler),\n", 
            "-                new LoggingNHttpServerConnectionFactory(config));\n", 
            "+                new SynapseNHttpServerConnectionFactory(config));\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-64,7 +68,7", 
          "lines": [
            "                                                                   final SSLContext sslContext,\n", 
            "                                                                   final SSLSetupHandler sslSetupHandler) {\n", 
            "         return new DefaultHttpServerIODispatch(decorate(handler),\n", 
            "-                new LoggingNHttpSSLServerConnectionFactory(config, sslContext, sslSetupHandler));\n", 
            "+                new SynapseNHttpSSLServerConnectionFactory(config, sslContext, sslSetupHandler));\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-79,7 +83,7", 
          "lines": [
            "     public static DefaultHttpClientIODispatch getClientIODispatch(final NHttpClientEventHandler handler,\n", 
            "                                                                   final ConnectionConfig config) {\n", 
            "         return new DefaultHttpClientIODispatch(decorate(handler),\n", 
            "-                new LoggingNHttpClientConnectionFactory(config));\n", 
            "+                new SynapseNHttpClientConnectionFactory(config));\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-100,7 +104,7", 
          "lines": [
            "                                                                   final SSLSetupHandler sslSetupHandler,\n", 
            "                                                                   Map<String, SSLContext> customContexts) {\n", 
            "         return new DefaultHttpClientIODispatch(decorate(handler),\n", 
            "-                new LoggingNHttpSSLClientConnectionFactory(config, sslContext, sslSetupHandler, customContexts));\n", 
            "+                new SynapseNHttpSSLClientConnectionFactory(config, sslContext, sslSetupHandler, customContexts));\n", 
            "     }\n", 
            " \n", 
            "     private static NHttpClientEventHandler decorate(NHttpClientEventHandler handler) {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingUtils.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/conn/logging/LoggingUtils.java"
    }
  ], 
  "id": "1776100"
}