{
  "when": "2013-08-01T23:46:36-04:00", 
  "who": "rajikak", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-37,6 +37,8", 
          "lines": [
            " import java.io.ByteArrayOutputStream;\n", 
            " import java.io.IOException;\n", 
            " import java.io.InputStream;\n", 
            "+import java.util.ArrayList;\n", 
            "+import java.util.List;\n", 
            " import java.util.Map;\n", 
            " import java.util.UUID;\n", 
            " import java.util.concurrent.*;\n"
          ]
        }, 
        {
          "locn": "-206,8 +208,9", 
          "lines": [
            " \n", 
            "     private String configuredContentType = AMQPTransportConstant.DEFAULT_CONTENT_TYPE;\n", 
            " \n", 
            "-    private ScheduledFuture<?> pollingTaskFuture;\n", 
            "+    private List<ScheduledFuture<?>> taskFutureList = new ArrayList<ScheduledFuture<?>>();\n", 
            " \n", 
            "+\n", 
            "     private AMQPTransportReconnectHandler haHandler;\n", 
            " \n", 
            "     public void setUseTx(boolean useTx) {\n"
          ]
        }, 
        {
          "locn": "-447,11 +450,13", 
          "lines": [
            "                 QueueingConsumer consumer = new QueueingConsumer(channel);\n", 
            "                 boolean isAutoAck = isUseTx == true ? false : true; // increase readability\n", 
            "                 channel.basicConsume(queueName, isAutoAck, consumer);\n", 
            "-                pollingTaskFuture = pollingTaskScheduler.scheduleWithFixedDelay(\n", 
            "+                ScheduledFuture<?> pollingTaskFuture = pollingTaskScheduler.scheduleWithFixedDelay(\n", 
            "                         new MessageIOTask(consumer, buffers, isUseTx),\n", 
            "                         scheduledTaskInitialDelay,\n", 
            "                         scheduledTaskDelay,\n", 
            "                         scheduledTaskTimeUnit);\n", 
            "+                taskFutureList.add(pollingTaskFuture);\n", 
            "+\n", 
            "             } catch (IOException e) {\n", 
            "                 handleException(e.getMessage(), e);\n", 
            "             }\n"
          ]
        }, 
        {
          "locn": "-464,10 +469,12", 
          "lines": [
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     * Stop the polling task\n", 
            "+     * Stop the polling tasks\n", 
            "      */\n", 
            "     public synchronized void stop() {\n", 
            "-        pollingTaskFuture.cancel(false);\n", 
            "+        for (ScheduledFuture<?> pollingTaskFuture : taskFutureList) {\n", 
            "+            pollingTaskFuture.cancel(false);\n", 
            "+        }\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-512,26 +519,38", 
          "lines": [
            "                 log.error(\"I/O error occurs for the polling tasks for service '\" + serviceName +\n", 
            "                         \"'\", e);\n", 
            "             } catch (ShutdownSignalException e) {\n", 
            "-                log.error(\"Polling task for service '\" + serviceName + \"' received a \" +\n", 
            "-                        \"shutdown signal\", e);\n", 
            "-                Semaphore available = new Semaphore(0, true);\n", 
            "-                String key = UUID.randomUUID().toString();\n", 
            "-                haHandler.getBlockedTasks().add(new AMQPTransportHAEntry(\n", 
            "-                        available, key, connectionFactoryName));\n", 
            "-                try {\n", 
            "-                    available.acquire();\n", 
            "-                } catch (InterruptedException ie) {\n", 
            "-                    log.error(\"The blocking semaphore received an interrupted\", e);\n", 
            "-                    Thread.currentThread().interrupt();\n", 
            "-                    return;\n", 
            "-                }\n", 
            " \n", 
            "-                AMQPTransportHABrokerEntry brokerEntry = haHandler.getConnectionMap().get(key);\n", 
            "-                if (brokerEntry == null) {\n", 
            "-                    log.error(\"No new connection factory were found for key '\" + key + \"'\");\n", 
            "+                if (e.isHardError()) {\n", 
            "+                    // broker is offline\n", 
            "+                    log.error(\"Polling task for service '\" + serviceName + \"' received a \" +\n", 
            "+                            \"shutdown signal\", e);\n", 
            "+                    Semaphore available = new Semaphore(0, true);\n", 
            "+                    String key = UUID.randomUUID().toString();\n", 
            "+                    haHandler.getBlockedTasks().add(new AMQPTransportHAEntry(\n", 
            "+                            available, key, connectionFactoryName));\n", 
            "+                    try {\n", 
            "+                        available.acquire();\n", 
            "+                    } catch (InterruptedException ie) {\n", 
            "+                        log.error(\"The blocking semaphore received an interrupted\", e);\n", 
            "+                        Thread.currentThread().interrupt();\n", 
            "+                        return;\n", 
            "+                    }\n", 
            "+\n", 
            "+                    AMQPTransportHABrokerEntry brokerEntry = haHandler.getConnectionMap().get(key);\n", 
            "+                    if (brokerEntry == null) {\n", 
            "+                        log.error(\"No new connection factory were found for key '\" + key + \"'\");\n", 
            "+                    } else {\n", 
            "+                        setChannel(brokerEntry.getChannel());\n", 
            "+                        stop();\n", 
            "+                        try {\n", 
            "+                            start();\n", 
            "+                            log.info(\"Polling task for service '\" + serviceName + \"' is re-deployed\");\n", 
            "+                        } catch (AMQPTransportException ex) {\n", 
            "+                            log.error(\"Start of polling tasks failed. System must be restarted!\");\n", 
            "+                        }\n", 
            "+                    }\n", 
            "                 } else {\n", 
            "-                    setChannel(brokerEntry.getChannel());\n", 
            "-                    this.queueingConsumer = new QueueingConsumer(channel);\n", 
            "+                    // this is a shutdown signal for ctrl+c\n", 
            "                 }\n", 
            " \n", 
            "             } catch (ConsumerCancelledException e) {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPTransportPollingTask.java", 
      "from": "java/modules/transports/optional/amqp/src/main/java/org/apache/synapse/transport/amqp/pollingtask/AMQPTransportPollingTask.java"
    }
  ], 
  "id": "1509528"
}