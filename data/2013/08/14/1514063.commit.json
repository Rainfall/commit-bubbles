{
  "when": "2013-08-14T17:54:44-04:00", 
  "message": "Handled the endOfInput event properly in the PT TargetHandler", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-241,9 +241,7", 
          "lines": [
            "                                                                                       \n", 
            "         } catch (Exception ex) {\n", 
            "             log.error(ex.getMessage(), ex);\n", 
            "-\n", 
            "             informReaderError(conn);\n", 
            "-\n", 
            "             TargetContext.updateState(conn, ProtocolState.CLOSED);\n", 
            "             targetConfiguration.getConnections().shutdownConnection(conn);\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-292,16 +290,12", 
          "lines": [
            " \t\t\t}\n", 
            "         } catch (IOException e) {\n", 
            "             logIOException(conn, e);\n", 
            "-\n", 
            "             informReaderError(conn);\n", 
            "-\n", 
            "             TargetContext.updateState(conn, ProtocolState.CLOSED);\n", 
            "             targetConfiguration.getConnections().shutdownConnection(conn);\n", 
            "         } catch (Exception ex) {\n", 
            "             log.error(ex.getMessage(), ex);\n", 
            "-\n", 
            "             informReaderError(conn);\n", 
            "-\n", 
            "             TargetContext.updateState(conn, ProtocolState.CLOSED);\n", 
            "             targetConfiguration.getConnections().shutdownConnection(conn);\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-318,15 +312,15", 
          "lines": [
            "             }\n", 
            "         } else if (state == ProtocolState.REQUEST_HEAD || state == ProtocolState.REQUEST_BODY) {\n", 
            "             informWriterError(conn);\n", 
            "-            log.warn(\"Connection closed by target host while sending the request\");\n", 
            "+            log.warn(\"Connection closed while sending the request\");\n", 
            "             sendFault = true;\n", 
            "         } else if (state == ProtocolState.RESPONSE_HEAD || state == ProtocolState.RESPONSE_BODY) {\n", 
            "             informReaderError(conn);\n", 
            "-            log.warn(\"Connection closed by target host while receiving the response\");\n", 
            "+            log.warn(\"Connection closed while receiving the response\");\n", 
            "             sendFault = false;\n", 
            "         } else if (state == ProtocolState.REQUEST_DONE) {\n", 
            "             informWriterError(conn);\n", 
            "-            log.warn(\"Connection closed by target host before receiving the request\");\n", 
            "+            log.warn(\"Connection closed before receiving the request\");\n", 
            "             sendFault = true;\n", 
            "         }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-343,8 +337,10", 
          "lines": [
            " \n", 
            "         metrics.disconnected();\n", 
            " \n", 
            "-        TargetContext.updateState(conn, ProtocolState.CLOSED);\n", 
            "-        targetConfiguration.getConnections().shutdownConnection(conn);\n", 
            "+        if (state != ProtocolState.CLOSED) {\n", 
            "+            TargetContext.updateState(conn, ProtocolState.CLOSED);\n", 
            "+            targetConfiguration.getConnections().shutdownConnection(conn);\n", 
            "+        }\n", 
            "     }\n", 
            " \n", 
            "     public void exception(NHttpClientConnection conn, IOException e) {\n"
          ]
        }, 
        {
          "locn": "-450,7 +446,40", 
          "lines": [
            "     }\n", 
            " \n", 
            "     public void endOfInput(NHttpClientConnection conn) throws IOException {\n", 
            "-        closed(conn);\n", 
            "+        ProtocolState state = TargetContext.getState(conn);\n", 
            "+        boolean sendFault = false;\n", 
            "+\n", 
            "+        if (state == ProtocolState.REQUEST_READY || state == ProtocolState.RESPONSE_DONE) {\n", 
            "+            if (log.isDebugEnabled()) {\n", 
            "+                log.debug(\"Keep-Alive Connection closed by the target host\");\n", 
            "+            }\n", 
            "+        } else if (state == ProtocolState.REQUEST_HEAD || state == ProtocolState.REQUEST_BODY) {\n", 
            "+            informWriterError(conn);\n", 
            "+            log.warn(\"Connection closed by the target host while sending the request\");\n", 
            "+            sendFault = true;\n", 
            "+        } else if (state == ProtocolState.RESPONSE_HEAD || state == ProtocolState.RESPONSE_BODY) {\n", 
            "+            informReaderError(conn);\n", 
            "+            log.warn(\"Connection closed by the target host while receiving the response\");\n", 
            "+            sendFault = false;\n", 
            "+        } else if (state == ProtocolState.REQUEST_DONE) {\n", 
            "+            informWriterError(conn);\n", 
            "+            log.warn(\"Connection closed by the target host before receiving the request\");\n", 
            "+            sendFault = true;\n", 
            "+        }\n", 
            "+\n", 
            "+        if (sendFault) {\n", 
            "+            MessageContext requestMsgCtx = TargetContext.get(conn).getRequestMsgCtx();\n", 
            "+            if (requestMsgCtx != null) {\n", 
            "+                targetErrorHandler.handleError(requestMsgCtx,\n", 
            "+                        ErrorCodes.CONNECTION_CLOSED,\n", 
            "+                        \"Error in Sender\",\n", 
            "+                        null,\n", 
            "+                        state);\n", 
            "+            }\n", 
            "+        }\n", 
            "+\n", 
            "+        TargetContext.updateState(conn, ProtocolState.CLOSED);\n", 
            "+        targetConfiguration.getConnections().shutdownConnection(conn);\n", 
            "     }\n", 
            " \n", 
            "     public void exception(NHttpClientConnection conn, Exception e) {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-108,7 +108,10", 
          "lines": [
            "     public void reset() {\n", 
            "         request = null;\n", 
            "         response = null;\n", 
            "-        state = ProtocolState.REQUEST_READY;\n", 
            "+        if (state != ProtocolState.CLOSED) {\n", 
            "+            // The connection is still not closed - Prepare to send more requests on this\n", 
            "+            state = ProtocolState.REQUEST_READY;\n", 
            "+        }\n", 
            " \n", 
            "         if (writer != null) {\n", 
            "             ByteBuffer buffer = writer.getBuffer();\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetContext.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetContext.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-261,14 +261,14", 
          "lines": [
            " \n", 
            "         if (state == ProtocolState.REQUEST_READY || state == ProtocolState.RESPONSE_DONE) {\n", 
            "             if (log.isDebugEnabled()) {\n", 
            "-                log.debug(\"Keep-Alive connection was closed at the remote end: \" + conn);\n", 
            "+                log.debug(\"Keep-Alive connection was closed by the client: \" + conn);\n", 
            "             }\n", 
            "         } else if (state == ProtocolState.REQUEST_BODY || state == ProtocolState.REQUEST_HEAD) {\n", 
            "             informReaderError(conn);\n", 
            "-            log.warn(\"Connection closed at the remote end while reading the request: \" + conn);\n", 
            "+            log.warn(\"Connection closed by the client while reading the request: \" + conn);\n", 
            "         } else if (state == ProtocolState.RESPONSE_BODY || state == ProtocolState.RESPONSE_HEAD) {\n", 
            "             informWriterError(conn);\n", 
            "-            log.warn(\"Connection closed at the remote end while writing the response: \" + conn);\n", 
            "+            log.warn(\"Connection closed by the client end while writing the response: \" + conn);\n", 
            "         } else if (state == ProtocolState.REQUEST_DONE) {\n", 
            "             log.warn(\"Connection closed by the client after request is read: \" + conn);\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-424,7 +424,7", 
          "lines": [
            "             informWriterError(conn);\n", 
            "             log.warn(\"Connection closed while writing the response: \" + conn);\n", 
            "         } else if (state == ProtocolState.REQUEST_DONE) {\n", 
            "-            log.warn(\"Connection closed by the client after request is read: \" + conn);\n", 
            "+            log.warn(\"Connection closed after request is read: \" + conn);\n", 
            "         }\n", 
            " \n", 
            "         metrics.disconnected();\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java"
    }
  ], 
  "id": "1514063"
}