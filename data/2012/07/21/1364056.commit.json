{
  "when": "2012-07-21T05:42:38-04:00", 
  "who": "sadeep", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-63,6 +63,8", 
          "lines": [
            "             case CREATE:\n", 
            "                 serializeCreateBeanCase(mediatorElem, mediator);\n", 
            "                 break;\n", 
            "+            case REMOVE:\n", 
            "+                break;\n", 
            "             case SET_PROPERTY:\n", 
            "                 serializeSetPropertyCase(mediatorElem, mediator);\n", 
            "                 break;\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/BeanMediatorSerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/BeanMediatorSerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,96", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.config.xml;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Tests Bean mediator serialization scenarios.\n", 
            "+ */\n", 
            "+public class BeanMediatorSerializationTest extends AbstractTestCase {\n", 
            "+\n", 
            "+    private BeanMediatorFactory beanMediatorFactory = new BeanMediatorFactory();\n", 
            "+    private BeanMediatorSerializer beanMediatorSerializer = new BeanMediatorSerializer();\n", 
            "+\n", 
            "+    public BeanMediatorSerializationTest() {\n", 
            "+        super(AbstractTestCase.class.getName());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testBeanMediatorCreateActionSerialization() throws Exception {\n", 
            "+\n", 
            "+        String inputXml = \"<bean action='CREATE' class='org.apache.synapse.mediators.bean.Quote' var='test_quote' \" +\n", 
            "+                \" xmlns='http://ws.apache.org/ns/synapse'/>\";\n", 
            "+\n", 
            "+        assertTrue(serialization(inputXml, beanMediatorFactory, beanMediatorSerializer));\n", 
            "+        assertTrue(serialization(inputXml, beanMediatorSerializer));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testBeanMediatorCreateNoReplaceActionSerialization() throws Exception {\n", 
            "+\n", 
            "+        String inputXml = \"<bean action='CREATE' class='org.apache.synapse.mediators.bean.Quote' var='test_quote' \" +\n", 
            "+                \"replace='false' xmlns='http://ws.apache.org/ns/synapse'/>\";\n", 
            "+\n", 
            "+        assertTrue(serialization(inputXml, beanMediatorFactory, beanMediatorSerializer));\n", 
            "+        assertTrue(serialization(inputXml, beanMediatorSerializer));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testBeanMediatorRemoveActionSerialization() throws Exception {\n", 
            "+\n", 
            "+        String inputXml = \"<bean action='REMOVE' var='test_quote' xmlns='http://ws.apache.org/ns/synapse'/>\";\n", 
            "+\n", 
            "+        assertTrue(serialization(inputXml, beanMediatorFactory, beanMediatorSerializer));\n", 
            "+        assertTrue(serialization(inputXml, beanMediatorSerializer));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testSetPropertyFromStaticValueActionSerialization() throws Exception {\n", 
            "+\n", 
            "+        String inputXml = \"<bean action='SET_PROPERTY' var='test_quote' property='symbol' value='IBM' \" +\n", 
            "+                \"xmlns='http://ws.apache.org/ns/synapse'/>\";\n", 
            "+\n", 
            "+        assertTrue(serialization(inputXml, beanMediatorFactory, beanMediatorSerializer));\n", 
            "+        assertTrue(serialization(inputXml, beanMediatorSerializer));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testSetPropertyFromXPathActionSerialization() throws Exception {\n", 
            "+\n", 
            "+        String inputXml = \"<bean action='SET_PROPERTY' var='test_quote' property='price' value='{//m:price}' \" +\n", 
            "+                \"xmlns:m='http://services.samples' xmlns='http://ws.apache.org/ns/synapse'/>\";\n", 
            "+\n", 
            "+        assertTrue(serialization(inputXml, beanMediatorFactory, beanMediatorSerializer));\n", 
            "+        assertTrue(serialization(inputXml, beanMediatorSerializer));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testGetPropertyToMCPropertyActionSerialization() throws Exception {\n", 
            "+\n", 
            "+        String inputXml = \"<bean action='GET_PROPERTY' var='test_quote' property='price' target='quote_price' \" +\n", 
            "+                \"xmlns='http://ws.apache.org/ns/synapse'/>\";\n", 
            "+\n", 
            "+        assertTrue(serialization(inputXml, beanMediatorFactory, beanMediatorSerializer));\n", 
            "+        assertTrue(serialization(inputXml, beanMediatorSerializer));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testGetPropertyToXPathActionSerialization() throws Exception {\n", 
            "+\n", 
            "+        String inputXml = \"<bean action='GET_PROPERTY' var='test_quote' property='symbol' \" +\n", 
            "+                \"target='{//m:QuoteResponse/m:symbol}' \" +\n", 
            "+                \"xmlns:m='http://services.samples' xmlns='http://ws.apache.org/ns/synapse'/>\";\n", 
            "+\n", 
            "+        assertTrue(serialization(inputXml, beanMediatorFactory, beanMediatorSerializer));\n", 
            "+        assertTrue(serialization(inputXml, beanMediatorSerializer));\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/config/xml/BeanMediatorSerializationTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/config/xml/BeanMediatorSerializationTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,85", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.config.xml;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Tests EJB mediator serialization scenarios.\n", 
            "+ */\n", 
            "+public class EJBMediatorSerializationTest extends AbstractTestCase {\n", 
            "+\n", 
            "+    private EJBMediatorFactory ejbMediatorFactory = new EJBMediatorFactory();\n", 
            "+    private EJBMediatorSerializer ejbMediatorSerializer = new EJBMediatorSerializer();\n", 
            "+\n", 
            "+    public EJBMediatorSerializationTest() {\n", 
            "+        super(AbstractTestCase.class.getName());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testEJBMediatorStatelessScenario1Serialization() throws Exception {\n", 
            "+\n", 
            "+        String inputXml = \"<ejb class='org.apache.synapse.mediators.bean.Quote' beanstalk='demo' method='setPrice' \" +\n", 
            "+                \"jndiName='jndi' xmlns='http://ws.apache.org/ns/synapse'>\" +\n", 
            "+                \"<args><arg value=\\\"{get-property('price')}\\\"/></args></ejb>\";\n", 
            "+\n", 
            "+        assertTrue(serialization(inputXml, ejbMediatorFactory, ejbMediatorSerializer));\n", 
            "+        assertTrue(serialization(inputXml, ejbMediatorSerializer));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testEJBMediatorStatelessScenario2Serialization() throws Exception {\n", 
            "+\n", 
            "+        String inputXml = \"<ejb class='org.apache.synapse.mediators.bean.Quote' beanstalk='demo' method='getPrice' \" +\n", 
            "+                \"target='{//m:Price}' xmlns:m='http://services.samples' xmlns='http://ws.apache.org/ns/synapse'/>\";\n", 
            "+\n", 
            "+        assertTrue(serialization(inputXml, ejbMediatorFactory, ejbMediatorSerializer));\n", 
            "+        assertTrue(serialization(inputXml, ejbMediatorSerializer));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testEJBMediatorStatelessScenario3Serialization() throws Exception {\n", 
            "+\n", 
            "+        String inputXml = \"<ejb class='org.apache.synapse.mediators.bean.Quote' beanstalk='demo' method='testMethod' \" +\n", 
            "+                \"target='bar' jndiName='jndi' xmlns='http://ws.apache.org/ns/synapse'>\" +\n", 
            "+                \"<args><arg value='100'/><arg value=\\\"{get-property('batz')}\\\"/></args></ejb>\";\n", 
            "+\n", 
            "+        assertTrue(serialization(inputXml, ejbMediatorFactory, ejbMediatorSerializer));\n", 
            "+        assertTrue(serialization(inputXml, ejbMediatorSerializer));\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public void testEJBMediatorStatefulScenario1Serialization() throws Exception {\n", 
            "+\n", 
            "+        String inputXml = \"<ejb class='org.apache.synapse.mediators.bean.Quote' beanstalk='demo' method='testMethod' \" +\n", 
            "+                \"target='bar' sessionId=\\\"{get-property('SESSION_ID')}\\\" jndiName='jndi' \" +\n", 
            "+                \"xmlns='http://ws.apache.org/ns/synapse'>\" +\n", 
            "+                \"<args><arg value='{//m:item//m:quantity}' xmlns:m='http://org.test.ejb'/>\" +\n", 
            "+                \"<arg value='{//m:item//m:id}' xmlns:m='http://org.test.ejb'/></args></ejb>\";\n", 
            "+\n", 
            "+        assertTrue(serialization(inputXml, ejbMediatorFactory, ejbMediatorSerializer));\n", 
            "+        assertTrue(serialization(inputXml, ejbMediatorSerializer));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testEJBMediatorStatefulScenario2Serialization() throws Exception {\n", 
            "+\n", 
            "+        String inputXml = \"<ejb class='org.apache.synapse.mediators.bean.Quote' beanstalk='demo' method='testMethod' \" +\n", 
            "+                \"target='bar' sessionId='1234' remove='true' xmlns='http://ws.apache.org/ns/synapse'>\" +\n", 
            "+                \"<args><arg value='100'/><arg value=\\\"{get-property('batz')}\\\"/></args></ejb>\";\n", 
            "+\n", 
            "+        assertTrue(serialization(inputXml, ejbMediatorFactory, ejbMediatorSerializer));\n", 
            "+        assertTrue(serialization(inputXml, ejbMediatorSerializer));\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/config/xml/EJBMediatorSerializationTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/config/xml/EJBMediatorSerializationTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,185", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.mediators.bean;\n", 
            "+\n", 
            "+import org.apache.synapse.Mediator;\n", 
            "+import org.apache.synapse.MessageContext;\n", 
            "+import org.apache.synapse.TestMessageContext;\n", 
            "+import org.apache.synapse.config.xml.MediatorFactoryFinder;\n", 
            "+import org.apache.synapse.mediators.AbstractMediatorTestCase;\n", 
            "+import org.apache.synapse.mediators.TestUtils;\n", 
            "+import org.apache.synapse.util.xpath.SynapseXPath;\n", 
            "+\n", 
            "+import java.util.Properties;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Tests Bean mediator's runtime behavior.\n", 
            "+ */\n", 
            "+public class BeanMediatorTest extends AbstractMediatorTestCase {\n", 
            "+\n", 
            "+    private static final String MESSAGE_BODY =\n", 
            "+            \"<m:QuoteResponse xmlns:m='http://services.samples'>\" +\n", 
            "+                    \"<m:symbol>SUN</m:symbol>\" +\n", 
            "+                    \"<m:price>20.5</m:price>\" +\n", 
            "+            \"</m:QuoteResponse>\";\n", 
            "+\n", 
            "+    private static final String VAR_NAME = \"test_quote\";\n", 
            "+\n", 
            "+    public void testCreateAction() throws Exception {\n", 
            "+\n", 
            "+        Mediator beanMediator = MediatorFactoryFinder.getInstance().getMediator(\n", 
            "+                createOMElement(\n", 
            "+                        \"<bean action='CREATE' class='org.apache.synapse.mediators.bean.Quote' var='test_quote' \" +\n", 
            "+                                \"xmlns='http://ws.apache.org/ns/synapse'/>\"),\n", 
            "+                new Properties());\n", 
            "+\n", 
            "+        MessageContext synCtx = new TestMessageContext();\n", 
            "+\n", 
            "+        assertTrue(beanMediator.mediate(synCtx));\n", 
            "+\n", 
            "+        assertNotNull(synCtx.getProperty(VAR_NAME));\n", 
            "+        assertTrue(synCtx.getProperty(VAR_NAME) instanceof Quote);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testCreateNoReplaceAction() throws Exception {\n", 
            "+\n", 
            "+        Mediator beanMediator = MediatorFactoryFinder.getInstance().getMediator(\n", 
            "+                createOMElement(\n", 
            "+                        \"<bean action='CREATE' class='org.apache.synapse.mediators.bean.Quote' var='test_quote' \" +\n", 
            "+                                \"replace='false' xmlns='http://ws.apache.org/ns/synapse'/>\"),\n", 
            "+                new Properties());\n", 
            "+\n", 
            "+        MessageContext synCtx = new TestMessageContext();\n", 
            "+        Quote existingQuote = new Quote();\n", 
            "+        synCtx.setProperty(VAR_NAME, existingQuote);\n", 
            "+\n", 
            "+        assertTrue(beanMediator.mediate(synCtx));\n", 
            "+\n", 
            "+        assertEquals(existingQuote, synCtx.getProperty(VAR_NAME));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testRemoveAction() throws Exception {\n", 
            "+\n", 
            "+        Mediator beanMediator = MediatorFactoryFinder.getInstance().getMediator(\n", 
            "+                createOMElement(\n", 
            "+                        \"<bean action='REMOVE' var='test_quote' xmlns='http://ws.apache.org/ns/synapse'/>\"),\n", 
            "+                new Properties());\n", 
            "+\n", 
            "+        MessageContext synCtx = new TestMessageContext();\n", 
            "+        synCtx.setProperty(VAR_NAME, new Quote());\n", 
            "+\n", 
            "+        assertTrue(beanMediator.mediate(synCtx));\n", 
            "+\n", 
            "+        assertNull(synCtx.getProperty(VAR_NAME));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testSetPropertyFromStaticValueAction() throws Exception {\n", 
            "+\n", 
            "+        Mediator beanMediator = MediatorFactoryFinder.getInstance().getMediator(\n", 
            "+                createOMElement(\n", 
            "+                        \"<bean action='SET_PROPERTY' var='test_quote' property='symbol' value='IBM' \" +\n", 
            "+                                \"xmlns='http://ws.apache.org/ns/synapse'/>\"),\n", 
            "+                new Properties());\n", 
            "+\n", 
            "+        MessageContext synCtx = TestUtils.getTestContext(MESSAGE_BODY);\n", 
            "+        synCtx.setProperty(VAR_NAME, new Quote());\n", 
            "+\n", 
            "+        assertTrue(beanMediator.mediate(synCtx));\n", 
            "+\n", 
            "+        assertEquals(\"IBM\", ((Quote) synCtx.getProperty(VAR_NAME)).getSymbol());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testSetPropertyFromMCPropertyAction() throws Exception {\n", 
            "+\n", 
            "+        Mediator beanMediator = MediatorFactoryFinder.getInstance().getMediator(\n", 
            "+                createOMElement(\n", 
            "+                        \"<bean action='SET_PROPERTY' var='test_quote' property='price' \" +\n", 
            "+                                \"value=\\\"{get-property('mc_property')}\\\" \" +\n", 
            "+                                \"xmlns:m='http://services.samples' xmlns='http://ws.apache.org/ns/synapse'/>\"),\n", 
            "+                new Properties());\n", 
            "+\n", 
            "+        MessageContext synCtx = TestUtils.getTestContext(MESSAGE_BODY);\n", 
            "+        synCtx.setProperty(VAR_NAME, new Quote());\n", 
            "+        float price = 30.0f;\n", 
            "+        synCtx.setProperty(\"mc_property\", price);\n", 
            "+\n", 
            "+        assertTrue(beanMediator.mediate(synCtx));\n", 
            "+\n", 
            "+        assertEquals(price, ((Quote) synCtx.getProperty(VAR_NAME)).getPrice());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testSetPropertyFromMessageBodyAction() throws Exception {\n", 
            "+\n", 
            "+        Mediator beanMediator = MediatorFactoryFinder.getInstance().getMediator(\n", 
            "+                createOMElement(\n", 
            "+                        \"<bean action='SET_PROPERTY' var='test_quote' property='price' value='{//m:price}' \" +\n", 
            "+                                \"xmlns:m='http://services.samples' xmlns='http://ws.apache.org/ns/synapse'/>\"),\n", 
            "+                new Properties());\n", 
            "+\n", 
            "+        MessageContext synCtx = TestUtils.getTestContext(MESSAGE_BODY);\n", 
            "+        synCtx.setProperty(VAR_NAME, new Quote());\n", 
            "+\n", 
            "+        assertTrue(beanMediator.mediate(synCtx));\n", 
            "+\n", 
            "+        assertEquals(new Float(\"20.5\"), ((Quote) synCtx.getProperty(VAR_NAME)).getPrice());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testGetPropertyToMCPropertyAction() throws Exception {\n", 
            "+\n", 
            "+        Mediator beanMediator = MediatorFactoryFinder.getInstance().getMediator(\n", 
            "+                createOMElement(\n", 
            "+                        \"<bean action='GET_PROPERTY' var='test_quote' property='price' target='mc_property' \" +\n", 
            "+                                \"xmlns='http://ws.apache.org/ns/synapse'/>\"),\n", 
            "+                new Properties());\n", 
            "+\n", 
            "+        MessageContext synCtx = TestUtils.getTestContext(MESSAGE_BODY);\n", 
            "+        Quote quote = new Quote();\n", 
            "+        Float price = 10.5f;\n", 
            "+        quote.setPrice(price);\n", 
            "+        synCtx.setProperty(VAR_NAME, quote);\n", 
            "+\n", 
            "+        assertTrue(beanMediator.mediate(synCtx));\n", 
            "+\n", 
            "+        assertEquals(price, synCtx.getProperty(\"mc_property\"));\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testGetPropertyToMessageBodyAction() throws Exception {\n", 
            "+\n", 
            "+        Mediator beanMediator = MediatorFactoryFinder.getInstance().getMediator(\n", 
            "+                createOMElement(\n", 
            "+                        \"<bean action='GET_PROPERTY' var='test_quote' property='symbol' \" +\n", 
            "+                                \"target='{//m:QuoteResponse/m:symbol/text()}' \" +\n", 
            "+                                \"xmlns:m='http://services.samples' xmlns='http://ws.apache.org/ns/synapse'/>\"),\n", 
            "+                new Properties());\n", 
            "+\n", 
            "+        MessageContext synCtx = TestUtils.getTestContext(MESSAGE_BODY);\n", 
            "+        Quote quote = new Quote();\n", 
            "+        String symbol = \"IBM\";\n", 
            "+        quote.setSymbol(symbol);\n", 
            "+        synCtx.setProperty(VAR_NAME, quote);\n", 
            "+\n", 
            "+        assertTrue(beanMediator.mediate(synCtx));\n", 
            "+\n", 
            "+        SynapseXPath xpath = new SynapseXPath(\"//m:QuoteResponse/m:symbol\");\n", 
            "+        xpath.addNamespace(\"m\", \"http://services.samples\");\n", 
            "+\n", 
            "+        assertEquals(symbol, xpath.stringValueOf(synCtx));\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/mediators/bean/BeanMediatorTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/mediators/bean/BeanMediatorTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,50", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.mediators.bean;\n", 
            "+\n", 
            "+/**\n", 
            "+ * Simple bean class for testing the Bean/EJB mediators.\n", 
            "+ */\n", 
            "+public class Quote {\n", 
            "+\n", 
            "+    private String symbol;\n", 
            "+\n", 
            "+    private float price;\n", 
            "+\n", 
            "+    public String getSymbol() {\n", 
            "+        return symbol;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setSymbol(String symbol) {\n", 
            "+        this.symbol = symbol;\n", 
            "+    }\n", 
            "+\n", 
            "+    public float getPrice() {\n", 
            "+        return price;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setPrice(float price) {\n", 
            "+        this.price = price;\n", 
            "+    }\n", 
            "+\n", 
            "+    public float testMethod(int i, String str) {\n", 
            "+        return i + str.length();\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/mediators/bean/Quote.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/mediators/bean/Quote.java"
    }
  ], 
  "id": "1364056"
}