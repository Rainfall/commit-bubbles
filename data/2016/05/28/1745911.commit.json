{
  "when": "2016-05-28T13:45:02-04:00", 
  "who": "isudana", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-29,12 +29,16", 
          "lines": [
            " import org.apache.synapse.MessageContext;\n", 
            " import org.apache.synapse.SynapseConstants;\n", 
            " import org.apache.synapse.SynapseLog;\n", 
            "+import org.apache.synapse.config.xml.XMLConfigConstants;\n", 
            "+import org.apache.synapse.core.axis2.Axis2MessageContext;\n", 
            " import org.apache.synapse.mediators.AbstractMediator;\n", 
            " import org.apache.synapse.util.xpath.SynapseXPath;\n", 
            " \n", 
            " import javax.xml.namespace.QName;\n", 
            " import java.util.ArrayList;\n", 
            "+import java.util.HashMap;\n", 
            " import java.util.List;\n", 
            "+import java.util.Map;\n", 
            " \n", 
            " /**\n", 
            "  * The header mediator is able to set a given value as a SOAP header, or remove a given\n"
          ]
        }, 
        {
          "locn": "-58,6 +62,8", 
          "lines": [
            "     private List<OMElement> embeddedXmlContent = new ArrayList<OMElement>();\n", 
            "     /** An expression which should be evaluated, and the result set as the header value */\n", 
            "     private SynapseXPath expression = null;\n", 
            "+    /** The scope that decides which header should be updated: SOAP or Transport. */\n", 
            "+    private String scope = null;\n", 
            " \n", 
            "     /**\n", 
            "      * Sets/Removes a SOAP header on the current message\n"
          ]
        }, 
        {
          "locn": "-77,16 +83,30", 
          "lines": [
            "             }\n", 
            "         }\n", 
            " \n", 
            "+        if (XMLConfigConstants.HEADER_SCOPE_TRANSPORT.equals(scope)) {\n", 
            "+            alterTransportHeader(synCtx);\n", 
            "+        } else {\n", 
            "+            alterSOAPOrKnownHeader(synCtx);\n", 
            "+        }\n", 
            "+\n", 
            "+        synLog.traceOrDebug(\"End : Header mediator\");\n", 
            "+        return true;\n", 
            "+    }\n", 
            "+\n", 
            "+    private void alterSOAPOrKnownHeader(MessageContext synCtx) {\n", 
            "+\n", 
            "+        SynapseLog synLog = getLog(synCtx);\n", 
            "+\n", 
            "         if (action == ACTION_SET) {\n", 
            " \n", 
            "-            String value = (getExpression() == null ? getValue() :\n", 
            "-                    expression.stringValueOf(synCtx));\n", 
            "+            String value = (getExpression() == null ? getValue() : expression.stringValueOf(synCtx));\n", 
            " \n", 
            "             if (synLog.isTraceOrDebugEnabled()) {\n", 
            "-                synLog.traceOrDebug(\"Set SOAP header : \" + qName + \" to : \" + value);\n", 
            "+                synLog.traceOrDebug(\"Setting header : \" + qName + \" to : \" + value);\n", 
            "             }\n", 
            " \n", 
            "-            if (!isImplicit() && (qName.getNamespaceURI() == null || \"\".equals(qName.getNamespaceURI()))) {\n", 
            "+            if (!isImplicit() &&\n", 
            "+                (qName.getNamespaceURI() == null || \"\".equals(qName.getNamespaceURI()))) {\n", 
            " \n", 
            "                 // is this a \"well known\" Synapse header?\n", 
            "                 if (SynapseConstants.HEADER_TO.equals(qName.getLocalPart())) {\n"
          ]
        }, 
        {
          "locn": "-111,7 +131,7", 
          "lines": [
            "         } else {\n", 
            " \n", 
            "             if (synLog.isTraceOrDebugEnabled()) {\n", 
            "-                synLog.traceOrDebug(\"Removing SOAP Header : \" + qName);\n", 
            "+                synLog.traceOrDebug(\"Removing Header : \" + qName);\n", 
            "             }\n", 
            " \n", 
            "             if (qName.getNamespaceURI() == null || \"\".equals(qName.getNamespaceURI())) {\n"
          ]
        }, 
        {
          "locn": "-151,9 +171,55", 
          "lines": [
            "                 }\n", 
            "             }\n", 
            "         }\n", 
            "+    }\n", 
            " \n", 
            "-        synLog.traceOrDebug(\"End : Header mediator\");\n", 
            "-        return true;\n", 
            "+    private void alterTransportHeader(MessageContext synCtx) {\n", 
            "+\n", 
            "+        SynapseLog synLog = getLog(synCtx);\n", 
            "+        String headerName = qName.getLocalPart();\n", 
            "+\n", 
            "+        String value = (getExpression() == null ? getValue() : expression.stringValueOf(synCtx));\n", 
            "+\n", 
            "+        if (action == ACTION_SET) {\n", 
            "+\n", 
            "+            if (synLog.isTraceOrDebugEnabled()) {\n", 
            "+                synLog.traceOrDebug(\"Setting Transport header : \" + headerName + \" to : \" + value);\n", 
            "+            }\n", 
            "+\n", 
            "+            //Setting Transport Headers\n", 
            "+            Axis2MessageContext axis2smc = (Axis2MessageContext) synCtx;\n", 
            "+            org.apache.axis2.context.MessageContext axis2MessageCtx =\n", 
            "+                    axis2smc.getAxis2MessageContext();\n", 
            "+            Object headers = axis2MessageCtx.\n", 
            "+                    getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n", 
            "+\n", 
            "+            if (headers != null && headers instanceof Map) {\n", 
            "+                Map headersMap = (Map) headers;\n", 
            "+                headersMap.put(headerName, value);\n", 
            "+            } else if (headers == null) {\n", 
            "+                Map headersMap = new HashMap();\n", 
            "+                headersMap.put(headerName, value);\n", 
            "+                axis2MessageCtx.setProperty(\n", 
            "+                        org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS, headersMap);\n", 
            "+            }\n", 
            "+        } else {\n", 
            "+            if (synLog.isTraceOrDebugEnabled()) {\n", 
            "+                synLog.traceOrDebug(\"Removing Transport Header : \" + qName);\n", 
            "+            }\n", 
            "+\n", 
            "+            // Removing transport headers\n", 
            "+            Axis2MessageContext axis2smc = (Axis2MessageContext) synCtx;\n", 
            "+            org.apache.axis2.context.MessageContext axis2MessageCtx =\n", 
            "+                    axis2smc.getAxis2MessageContext();\n", 
            "+            Object headers = axis2MessageCtx.getProperty(\n", 
            "+                    org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n", 
            "+            if (headers != null && headers instanceof Map) {\n", 
            "+                Map headersMap = (Map) headers;\n", 
            "+                headersMap.remove(headerName);\n", 
            "+            } else {\n", 
            "+                synLog.traceOrDebug(\"No transport headers found\");\n", 
            "+            }\n", 
            "+        }\n", 
            "     }\n", 
            " \n", 
            "     private void addCustomHeader(MessageContext synCtx, String value) {\n"
          ]
        }, 
        {
          "locn": "-244,4 +310,21", 
          "lines": [
            "     public void setExpression(SynapseXPath expression) {\n", 
            "         this.expression = expression;\n", 
            "     }\n", 
            "+\n", 
            "+    public String getScope() {\n", 
            "+        return scope;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setScope(String scope) {\n", 
            "+        this.scope = scope;\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public boolean isContentAware() {\n", 
            "+        if (XMLConfigConstants.SCOPE_TRANSPORT.equals(scope)) {\n", 
            "+            return false;\n", 
            "+        } else {\n", 
            "+            return true;\n", 
            "+        }\n", 
            "+    }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/transform/HeaderMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/transform/HeaderMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-47,10 +47,15", 
          "lines": [
            "     public static final String SCOPE_TRANSPORT = \"transport\";\n", 
            "     /** The scope name for registry properties */\n", 
            "     public static final String SCOPE_REGISTRY = \"registry\";\n", 
            "-\n", 
            "     /** The scope name for the system properties  */\n", 
            "     public static final String SCOPE_SYSTEM = \"system\";\n", 
            " \n", 
            "+    //-- HeaderMediator --\n", 
            "+    /** The scope name for SOAP headers */\n", 
            "+    public static final String HEADER_SCOPE_SOAP = \"soap\";\n", 
            "+    /** The scope name for Transport headers */\n", 
            "+    public static final String HEADER_SCOPE_TRANSPORT = \"transport\";\n", 
            "+\n", 
            "     public static final String KEY = \"key\";\n", 
            "     public static final String RECEIVE = \"receive\";\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/XMLConfigConstants.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/XMLConfigConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-76,6 +76,10", 
          "lines": [
            "             }\n", 
            "         }\n", 
            " \n", 
            "+        if (mediator.getScope() != null) {\n", 
            "+            header.addAttribute(fac.createOMAttribute(\"scope\", nullNS, mediator.getScope()));\n", 
            "+        }\n", 
            "+\n", 
            "         if (mediator.hasEmbeddedXml()) {\n", 
            "             for (OMElement e : mediator.getEmbeddedXml()) {\n", 
            "                 header.addChild(e);\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/HeaderMediatorSerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/HeaderMediatorSerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-48,6 +48,7", 
          "lines": [
            " \n", 
            "     private static final QName HEADER_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, \"header\");\n", 
            "     private static final QName ATT_ACTION = new QName(\"action\");\n", 
            "+    private static final QName ATT_SCOPE = new QName(\"scope\");\n", 
            " \n", 
            "     public Mediator createSpecificMediator(OMElement elem, Properties properties) {\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-56,40 +57,44", 
          "lines": [
            "         OMAttribute value  = elem.getAttribute(ATT_VALUE);\n", 
            "         OMAttribute exprn  = elem.getAttribute(ATT_EXPRN);\n", 
            "         OMAttribute action = elem.getAttribute(ATT_ACTION);\n", 
            "+        OMAttribute scope = elem.getAttribute(ATT_SCOPE);\n", 
            " \n", 
            "+        // Setting Header Name\n", 
            "         if (name == null || name.getAttributeValue() == null) {\n", 
            "-            if (elem.getChildElements() == null || !elem.getChildElements().hasNext()) {\n", 
            "-                String msg = \"A valid name attribute is required for the header mediator\";\n", 
            "-                log.error(msg);\n", 
            "-                throw new SynapseException(msg);\n", 
            "+            // Name is required unless otherwise we are setting an embedded XML\n", 
            "+            if (!isEmbeddedXML(elem)) {\n", 
            "+                handleException(\"A valid name attribute is required for the header mediator\");\n", 
            "             }\n", 
            "         } else {\n", 
            "-            String nameAtt = name.getAttributeValue();\n", 
            "-            int colonPos = nameAtt.indexOf(\":\");\n", 
            "-            if (colonPos != -1) {\n", 
            "-                // has a NS prefix.. find it and the NS it maps into\n", 
            "-                String prefix = nameAtt.substring(0, colonPos);\n", 
            "-                String namespaceURI = OMElementUtils.getNameSpaceWithPrefix(prefix, elem);\n", 
            "-                if (namespaceURI == null) {\n", 
            "-                    handleException(\"Invalid namespace prefix '\" + prefix + \"' in name attribute\");\n", 
            "+\n", 
            "+            if (scope == null) {\n", 
            "+                String nameAtt = name.getAttributeValue();\n", 
            "+\n", 
            "+                // Known Headers\n", 
            "+                if (SynapseConstants.HEADER_TO.equals(nameAtt) ||\n", 
            "+                    SynapseConstants.HEADER_FROM.equals(nameAtt) ||\n", 
            "+                    SynapseConstants.HEADER_ACTION.equals(nameAtt) ||\n", 
            "+                    SynapseConstants.HEADER_FAULT.equals(nameAtt) ||\n", 
            "+                    SynapseConstants.HEADER_REPLY_TO.equals(nameAtt) ||\n", 
            "+                    SynapseConstants.HEADER_RELATES_TO.equals(nameAtt)) {\n", 
            "+\n", 
            "+                    headerMediator.setQName(new QName(nameAtt));\n", 
            "                 } else {\n", 
            "-                \theaderMediator.setQName(new QName(namespaceURI, nameAtt.substring(colonPos+1),\n", 
            "-                            prefix));\n", 
            "+                    // SOAP Headers\n", 
            "+                    setSOAPHeader(headerMediator, elem, name);\n", 
            "                 }\n", 
            "             } else {\n", 
            "-                // no prefix\n", 
            "-                if (SynapseConstants.HEADER_TO.equals(nameAtt) ||\n", 
            "-                        SynapseConstants.HEADER_FROM.equals(nameAtt) ||\n", 
            "-                        SynapseConstants.HEADER_ACTION.equals(nameAtt) ||\n", 
            "-                        SynapseConstants.HEADER_FAULT.equals(nameAtt) ||\n", 
            "-                        SynapseConstants.HEADER_REPLY_TO.equals(nameAtt) ||\n", 
            "-                        SynapseConstants.HEADER_RELATES_TO.equals(nameAtt)) {\n", 
            "+                String scopeAttValue = scope.getAttributeValue();\n", 
            " \n", 
            "-                    headerMediator.setQName(new QName(nameAtt));\n", 
            "+                if (XMLConfigConstants.HEADER_SCOPE_SOAP.equalsIgnoreCase(scopeAttValue)) {\n", 
            "+                    setSOAPHeader(headerMediator, elem, name);\n", 
            "+                } else if (XMLConfigConstants.HEADER_SCOPE_TRANSPORT.equalsIgnoreCase(scopeAttValue)) {\n", 
            "+                    headerMediator.setQName(new QName(name.getAttributeValue()));\n", 
            "                 } else {\n", 
            "-                    handleException(\"Invalid SOAP header: \" + nameAtt + \" specified at the \" +\n", 
            "-                            \"header mediator. All SOAP headers must be namespace qualified.\");\n", 
            "+                    handleException(\"Unsupported Scope : \" + scopeAttValue + \" . Only \" + XMLConfigConstants.HEADER_SCOPE_SOAP\n", 
            "+                                    + \" and \" + XMLConfigConstants.HEADER_SCOPE_TRANSPORT + \" allowed\");\n", 
            "                 }\n", 
            "+                headerMediator.setScope(scopeAttValue);\n", 
            "             }\n", 
            "         }\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-132,6 +137,29", 
          "lines": [
            "         return headerMediator;\n", 
            "     }\n", 
            " \n", 
            "+    private void setSOAPHeader(HeaderMediator headerMediator, OMElement elem, OMAttribute name) {\n", 
            "+        String nameAtt = name.getAttributeValue();\n", 
            "+        int colonPos = nameAtt.indexOf(\":\");\n", 
            "+        if (colonPos != -1) {\n", 
            "+            // has a NS prefix.. find it and the NS it maps into\n", 
            "+            String prefix = nameAtt.substring(0, colonPos);\n", 
            "+            String namespaceURI = OMElementUtils.getNameSpaceWithPrefix(prefix, elem);\n", 
            "+            if (namespaceURI == null) {\n", 
            "+                handleException(\"Invalid namespace prefix '\" + prefix + \"' in name attribute\");\n", 
            "+            } else {\n", 
            "+                headerMediator.setQName(new QName(namespaceURI, nameAtt.substring(colonPos+1),\n", 
            "+                                                  prefix));\n", 
            "+            }\n", 
            "+        } else {\n", 
            "+            handleException(\"Invalid SOAP header: \" + nameAtt + \" specified at the \" +\n", 
            "+                            \"header mediator. All SOAP headers must be namespace qualified.\");\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    private boolean isEmbeddedXML(OMElement elem) {\n", 
            "+        return (elem.getChildElements() != null && elem.getChildElements().hasNext());\n", 
            "+    }\n", 
            "+\n", 
            "     public QName getTagQName() {\n", 
            "         return HEADER_Q;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/HeaderMediatorFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/HeaderMediatorFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-122,4 +122,40", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "+    public void testTransportScope() {\n", 
            "+        try {\n", 
            "+            String inputXml = \"<header xmlns=\\\"http://ws.apache.org/ns/synapse\\\" name=\\\"User-Agent\\\" value=\\\"SynapseUser\\\" scope=\\\"transport\\\"/>\";\n", 
            "+            HeaderMediatorFactory fac = new HeaderMediatorFactory();\n", 
            "+            fac.createMediator(AXIOMUtil.stringToOM(inputXml), new Properties());\n", 
            "+        } catch (XMLStreamException e) {\n", 
            "+            fail(\"Error while parsing header mediator configuration\");\n", 
            "+        }\n", 
            "+\n", 
            "+        try {\n", 
            "+            String inputXml = \"<header xmlns=\\\"http://ws.apache.org/ns/synapse\\\" name=\\\"User-Agent\\\" action=\\\"remove\\\" scope=\\\"transport\\\"/>\";\n", 
            "+            HeaderMediatorFactory fac = new HeaderMediatorFactory();\n", 
            "+            fac.createMediator(AXIOMUtil.stringToOM(inputXml), new Properties());\n", 
            "+        } catch (XMLStreamException e) {\n", 
            "+            fail(\"Error while parsing header mediator configuration\");\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testSOAPScopeScenario() {\n", 
            "+        try {\n", 
            "+            String inputXml = \"<header xmlns=\\\"http://ws.apache.org/ns/synapse\\\" xmlns:m=\\\"http://synapse.apache.org\\\" name=\\\"m:MyHeader\\\" value=\\\"MyValue\\\" scope=\\\"soap\\\"/>\";\n", 
            "+            HeaderMediatorFactory fac = new HeaderMediatorFactory();\n", 
            "+            fac.createMediator(AXIOMUtil.stringToOM(inputXml), new Properties());\n", 
            "+        } catch (XMLStreamException e) {\n", 
            "+            fail(\"Error while parsing header mediator configuration\");\n", 
            "+        }\n", 
            "+\n", 
            "+        try {\n", 
            "+            String inputXml = \"<header xmlns=\\\"http://ws.apache.org/ns/synapse\\\" xmlns:m=\\\"http://synapse.apache.org\\\" name=\\\"m:MyHeader\\\" action=\\\"remove\\\" scope=\\\"soap\\\"/>\";\n", 
            "+            HeaderMediatorFactory fac = new HeaderMediatorFactory();\n", 
            "+            fac.createMediator(AXIOMUtil.stringToOM(inputXml), new Properties());\n", 
            "+        } catch (XMLStreamException e) {\n", 
            "+            fail(\"Error while parsing header mediator configuration\");\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/config/xml/HeaderMediatorConfigurationTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/config/xml/HeaderMediatorConfigurationTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-45,4 +45,10", 
          "lines": [
            "         assertTrue(serialization(inputXml, headerMediatorFactory, headerMediatorSerializer));\n", 
            "         assertTrue(serialization(inputXml, headerMediatorSerializer));\n", 
            "     }\n", 
            "+\n", 
            "+    public void testHeaderMediatorSerializationSenarioThree() throws Exception {\n", 
            "+        String inputXml = \"<header xmlns=\\\"http://ws.apache.org/ns/synapse\\\" name=\\\"User-Agent\\\" value=\\\"SynapseUser\\\" scope=\\\"transport\\\"/>\";\n", 
            "+        assertTrue(serialization(inputXml, headerMediatorFactory, headerMediatorSerializer));\n", 
            "+        assertTrue(serialization(inputXml, headerMediatorSerializer));\n", 
            "+    }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/config/xml/HeaderMediatorSerializationTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/config/xml/HeaderMediatorSerializationTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-22,13 +22,17", 
          "lines": [
            " import junit.framework.TestCase;\n", 
            " import org.apache.axiom.om.OMElement;\n", 
            " import org.apache.axiom.om.util.AXIOMUtil;\n", 
            "+import org.apache.http.protocol.HTTP;\n", 
            " import org.apache.synapse.MessageContext;\n", 
            " import org.apache.synapse.SynapseConstants;\n", 
            " import org.apache.synapse.config.xml.HeaderMediatorFactory;\n", 
            "+import org.apache.synapse.config.xml.XMLConfigConstants;\n", 
            "+import org.apache.synapse.core.axis2.Axis2MessageContext;\n", 
            " import org.apache.synapse.mediators.TestUtils;\n", 
            " import org.apache.synapse.util.xpath.SynapseXPath;\n", 
            " \n", 
            " import javax.xml.namespace.QName;\n", 
            "+import java.util.Map;\n", 
            " import java.util.Properties;\n", 
            " \n", 
            " public class HeaderMediatorTest extends TestCase {\n"
          ]
        }, 
        {
          "locn": "-145,4 +149,45", 
          "lines": [
            "         assertEquals(\"complexHeader\", result.getLocalName());\n", 
            "         assertEquals(\"TEST\", result.getText());\n", 
            "     }\n", 
            "+\n", 
            "+    public void testTransportHeaderSetAndRemove() throws Exception {\n", 
            "+\n", 
            "+        String SYNAPSE_USER = \"SynapseUser\";\n", 
            "+\n", 
            "+        HeaderMediator headerMediator = new HeaderMediator();\n", 
            "+        headerMediator.setQName(new QName(HTTP.USER_AGENT));\n", 
            "+        headerMediator.setValue(SYNAPSE_USER);\n", 
            "+        headerMediator.setScope(XMLConfigConstants.HEADER_SCOPE_TRANSPORT);\n", 
            "+\n", 
            "+        // invoke transformation, with static envelope\n", 
            "+        MessageContext synCtx = TestUtils.createLightweightSynapseMessageContext(\"<empty/>\");\n", 
            "+        headerMediator.mediate(synCtx);\n", 
            "+\n", 
            "+        // get transport header and assert\n", 
            "+        org.apache.axis2.context.MessageContext axisCtx =\n", 
            "+                ((Axis2MessageContext) synCtx).getAxis2MessageContext();\n", 
            "+        Object transportHeaders = axisCtx.getProperty(\n", 
            "+                org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n", 
            "+        if (transportHeaders == null || !(transportHeaders instanceof Map)) {\n", 
            "+            fail(\"HeaderMediator Transport headers not found\");\n", 
            "+        } else {\n", 
            "+            assertTrue(SYNAPSE_USER.equals(((Map) transportHeaders).get(HTTP.USER_AGENT)));\n", 
            "+        }\n", 
            "+\n", 
            "+        // Removing headers\n", 
            "+        headerMediator.setAction(HeaderMediator.ACTION_REMOVE);\n", 
            "+        headerMediator.mediate(synCtx);\n", 
            "+\n", 
            "+        // get transport header and assert\n", 
            "+        org.apache.axis2.context.MessageContext axisCtx2 =\n", 
            "+                ((Axis2MessageContext) synCtx).getAxis2MessageContext();\n", 
            "+        transportHeaders = axisCtx2.getProperty(\n", 
            "+                org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n", 
            "+        if (transportHeaders == null || !(transportHeaders instanceof Map)) {\n", 
            "+            fail(\"HeaderMediator Transport headers not found\");\n", 
            "+        } else {\n", 
            "+            assertTrue(((Map)transportHeaders).get(HTTP.USER_AGENT) == null);\n", 
            "+        }\n", 
            "+\n", 
            "+    }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/mediators/transform/HeaderMediatorTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/mediators/transform/HeaderMediatorTest.java"
    }
  ], 
  "id": "1745911"
}