{
  "when": "2013-08-10T23:22:44-04:00", 
  "message": "1. Upgrading to HTTP Core 4.3 (Migrated both NHTTP and PTT transports out of deprecated APIs)\n2. Unified the logging mechanism used by NHTTP and PTT transports\n3. Improved the HTTP transport logging mechanism, to make the configuration more fine grained\n4. Unified the configuration mechanism used by NHTTP and PTT transports\n\n", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-1,61 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.passthru;\n", 
            "-\n", 
            "-import org.apache.http.HttpResponseFactory;\n", 
            "-import org.apache.http.impl.nio.DefaultHttpClientIODispatch;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpClientConnectionFactory;\n", 
            "-import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-import org.apache.synapse.transport.passthru.logging.LoggingUtils;\n", 
            "-\n", 
            "-/**\n", 
            "- * This is a factory for creating the logging sessions or non-logging sessions.\n", 
            "- */\n", 
            "-public class TargetIOEventDispatch extends DefaultHttpClientIODispatch {\n", 
            "-\n", 
            "-    public TargetIOEventDispatch(final NHttpClientEventHandler handler, final HttpParams params) {\n", 
            "-        super(LoggingUtils.decorate(handler), new TargetConnectionFactory(params));\n", 
            "-    }\n", 
            "-\n", 
            "-    private static class TargetConnectionFactory extends DefaultNHttpClientConnectionFactory {\n", 
            "-\n", 
            "-        public TargetConnectionFactory(HttpParams params) {\n", 
            "-            super(params);\n", 
            "-        }\n", 
            "-\n", 
            "-        @Override\n", 
            "-        protected DefaultNHttpClientConnection createConnection(IOSession session,\n", 
            "-                                                                HttpResponseFactory responseFactory,\n", 
            "-                                                                ByteBufferAllocator allocator,\n", 
            "-                                                                HttpParams params) {\n", 
            "-            session = LoggingUtils.decorate(session, \"client\");\n", 
            "-            return LoggingUtils.createClientConnection(\n", 
            "-                    session,\n", 
            "-                    responseFactory,\n", 
            "-                    allocator,\n", 
            "-                    params);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,228 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.passthru.logging;\n", 
            "-\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.SessionBufferStatus;\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-\n", 
            "-import java.util.concurrent.atomic.AtomicLong;\n", 
            "-import java.nio.channels.ByteChannel;\n", 
            "-import java.nio.channels.SelectionKey;\n", 
            "-import java.nio.ByteBuffer;\n", 
            "-import java.net.SocketAddress;\n", 
            "-import java.io.IOException;\n", 
            "-\n", 
            "-class LoggingIOSession implements IOSession {\n", 
            "-\n", 
            "-    private static AtomicLong COUNT = new AtomicLong(0);\n", 
            "-\n", 
            "-    private final Log log;\n", 
            "-    private final Wire wirelog;\n", 
            "-    private final IOSession session;\n", 
            "-    private final ByteChannel channel;\n", 
            "-    private final String id;\n", 
            "-\n", 
            "-    public LoggingIOSession(            \n", 
            "-            final Log wirelog,\n", 
            "-            final IOSession session,\n", 
            "-            final String id) {\n", 
            "-        super();\n", 
            "-        if (session == null) {\n", 
            "-            throw new IllegalArgumentException(\"I/O session may not be null\");\n", 
            "-        }\n", 
            "-        this.session = session;\n", 
            "-        this.channel = new LoggingByteChannel();\n", 
            "-        this.id = id + \"-\" + COUNT.incrementAndGet();\n", 
            "-        this.log = LogFactory.getLog(session.getClass());\n", 
            "-        this.wirelog = new Wire(wirelog);\n", 
            "-    }\n", 
            "-\n", 
            "-    public int getStatus() {\n", 
            "-        return this.session.getStatus();\n", 
            "-    }\n", 
            "-\n", 
            "-    public ByteChannel channel() {\n", 
            "-        return this.channel;\n", 
            "-    }\n", 
            "-\n", 
            "-    public SocketAddress getLocalAddress() {\n", 
            "-        return this.session.getLocalAddress();\n", 
            "-    }\n", 
            "-\n", 
            "-    public SocketAddress getRemoteAddress() {\n", 
            "-        return this.session.getRemoteAddress();\n", 
            "-    }\n", 
            "-\n", 
            "-    public int getEventMask() {\n", 
            "-        return this.session.getEventMask();\n", 
            "-    }\n", 
            "-\n", 
            "-    private static String formatOps(int ops) {\n", 
            "-        StringBuffer buffer = new StringBuffer(6);\n", 
            "-        buffer.append('[');\n", 
            "-        if ((ops & SelectionKey.OP_READ) > 0) {\n", 
            "-            buffer.append('r');\n", 
            "-        }\n", 
            "-        if ((ops & SelectionKey.OP_WRITE) > 0) {\n", 
            "-            buffer.append('w');\n", 
            "-        }\n", 
            "-        if ((ops & SelectionKey.OP_ACCEPT) > 0) {\n", 
            "-            buffer.append('a');\n", 
            "-        }\n", 
            "-        if ((ops & SelectionKey.OP_CONNECT) > 0) {\n", 
            "-            buffer.append('c');\n", 
            "-        }\n", 
            "-        buffer.append(']');\n", 
            "-        return buffer.toString();\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setEventMask(int ops) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"I/O session \" + this.id + \" \" + this.session + \": Set event mask \"\n", 
            "-                    + formatOps(ops));\n", 
            "-        }\n", 
            "-        this.session.setEventMask(ops);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setEvent(int op) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"I/O session \" + this.id + \" \" + this.session + \": Set event \"\n", 
            "-                    + formatOps(op));\n", 
            "-        }\n", 
            "-        this.session.setEvent(op);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void clearEvent(int op) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"I/O session \" + this.id + \" \" + this.session + \": Clear event \"\n", 
            "-                    + formatOps(op));\n", 
            "-        }\n", 
            "-        this.session.clearEvent(op);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void close() {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"I/O session \" + this.id + \" \" + this.session + \": Close\");\n", 
            "-        }\n", 
            "-        this.session.close();\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean isClosed() {\n", 
            "-        return this.session.isClosed();\n", 
            "-    }\n", 
            "-\n", 
            "-    public void shutdown() {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"I/O session \" + this.id + \" \" + this.session + \": Shutdown\");\n", 
            "-        }\n", 
            "-        this.session.shutdown();\n", 
            "-    }\n", 
            "-\n", 
            "-    public int getSocketTimeout() {\n", 
            "-        return this.session.getSocketTimeout();\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setSocketTimeout(int timeout) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"I/O session \" + this.id + \" \" + this.session + \": Set timeout \"\n", 
            "-                    + timeout);\n", 
            "-        }\n", 
            "-        this.session.setSocketTimeout(timeout);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setBufferStatus(final SessionBufferStatus status) {\n", 
            "-        this.session.setBufferStatus(status);\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean hasBufferedInput() {\n", 
            "-        return this.session.hasBufferedInput();\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean hasBufferedOutput() {\n", 
            "-        return this.session.hasBufferedOutput();\n", 
            "-    }\n", 
            "-\n", 
            "-    public Object getAttribute(final String name) {\n", 
            "-        return this.session.getAttribute(name);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setAttribute(final String name, final Object obj) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"I/O session \" + this.id + \" \" + this.session + \": Set attribute \"\n", 
            "-                    + name);\n", 
            "-        }\n", 
            "-        this.session.setAttribute(name, obj);\n", 
            "-    }\n", 
            "-\n", 
            "-    public Object removeAttribute(final String name) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"I/O session \" + this.id + \" \" + this.session + \": Remove attribute \"\n", 
            "-                    + name);\n", 
            "-        }\n", 
            "-        return this.session.removeAttribute(name);\n", 
            "-    }\n", 
            "-\n", 
            "-    class LoggingByteChannel implements ByteChannel {\n", 
            "-\n", 
            "-        public int read(final ByteBuffer dst) throws IOException {\n", 
            "-            int bytesRead = session.channel().read(dst);\n", 
            "-            if (log.isDebugEnabled()) {\n", 
            "-                log.debug(\"I/O session \" + id + \" \" + session + \": \" + bytesRead + \" bytes read\");\n", 
            "-            }\n", 
            "-            if (bytesRead > 0 && wirelog.isEnabled()) {\n", 
            "-                ByteBuffer b = dst.duplicate();\n", 
            "-                int p = b.position();\n", 
            "-                b.limit(p);\n", 
            "-                b.position(p - bytesRead);\n", 
            "-                wirelog.input(b);\n", 
            "-            }\n", 
            "-            return bytesRead;\n", 
            "-        }\n", 
            "-\n", 
            "-        public int write(final ByteBuffer src) throws IOException {\n", 
            "-            int byteWritten = session.channel().write(src);\n", 
            "-            if (log.isDebugEnabled()) {\n", 
            "-                log.debug(\"I/O session \" + id + \" \" + session + \": \" + byteWritten + \" bytes written\");\n", 
            "-            }\n", 
            "-            if (byteWritten > 0 && wirelog.isEnabled()) {\n", 
            "-                ByteBuffer b = src.duplicate();\n", 
            "-                int p = b.position();\n", 
            "-                b.limit(p);\n", 
            "-                b.position(p - byteWritten);\n", 
            "-                wirelog.output(b);\n", 
            "-            }\n", 
            "-            return byteWritten;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void close() throws IOException {\n", 
            "-            if (log.isDebugEnabled()) {\n", 
            "-                log.debug(\"I/O session \" + id + \" \" + session + \": Channel close\");\n", 
            "-            }\n", 
            "-            session.channel().close();\n", 
            "-        }\n", 
            "-\n", 
            "-        public boolean isOpen() {\n", 
            "-            return session.channel().isOpen();\n", 
            "-        }\n", 
            "-\n", 
            "-    }       \n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingIOSession.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingIOSession.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,158 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.passthru.logging;\n", 
            "-\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "-import org.apache.http.nio.NHttpServerEventHandler;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.SessionOutputBuffer;\n", 
            "-import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-import org.apache.http.nio.NHttpMessageWriter;\n", 
            "-import org.apache.http.nio.NHttpMessageParser;\n", 
            "-import org.apache.http.*;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-import java.nio.channels.ReadableByteChannel;\n", 
            "-\n", 
            "-public class LoggingNHttpSourceConnection extends DefaultNHttpServerConnection {\n", 
            "-    private final Log log;\n", 
            "-    private final Log headerLog;\n", 
            "-\n", 
            "-    public LoggingNHttpSourceConnection(\n", 
            "-            final Log log,\n", 
            "-            final Log headerLog,\n", 
            "-            final IOSession session,\n", 
            "-            final HttpRequestFactory requestFactory,\n", 
            "-            final ByteBufferAllocator allocator,\n", 
            "-            final HttpParams params) {\n", 
            "-        super(session, requestFactory, allocator, params);\n", 
            "-        this.log = log;\n", 
            "-        this.headerLog = headerLog;\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void close() throws IOException {\n", 
            "-        this.log.debug(\"Close connection\");\n", 
            "-        super.close();\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void shutdown() throws IOException {\n", 
            "-        this.log.debug(\"Shutdown connection\");\n", 
            "-        super.shutdown();\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void submitResponse(final HttpResponse response) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + this + \": \"  + response.getStatusLine().toString());\n", 
            "-        }\n", 
            "-        super.submitResponse(response);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void consumeInput(final NHttpServerEventHandler handler) {\n", 
            "-        this.log.debug(\"Consume input\");\n", 
            "-        super.consumeInput(handler);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void produceOutput(final NHttpServerEventHandler handler) {\n", 
            "-        this.log.debug(\"Produce output\");\n", 
            "-        super.produceOutput(handler);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    protected NHttpMessageWriter<HttpResponse> createResponseWriter(\n", 
            "-            final SessionOutputBuffer buffer,\n", 
            "-            final HttpParams params) {\n", 
            "-        return new LoggingNHttpMessageWriter(\n", 
            "-                super.createResponseWriter(buffer, params));\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    protected NHttpMessageParser<HttpRequest> createRequestParser(\n", 
            "-            final SessionInputBuffer buffer,\n", 
            "-            final HttpRequestFactory requestFactory,\n", 
            "-            final HttpParams params) {\n", 
            "-        return new LoggingNHttpMessageParser(\n", 
            "-                super.createRequestParser(buffer, requestFactory, params));\n", 
            "-    }\n", 
            "-\n", 
            "-    class LoggingNHttpMessageWriter implements NHttpMessageWriter<HttpResponse> {\n", 
            "-\n", 
            "-        private final NHttpMessageWriter<HttpResponse> writer;\n", 
            "-\n", 
            "-        public LoggingNHttpMessageWriter(final NHttpMessageWriter<HttpResponse> writer) {\n", 
            "-            super();\n", 
            "-            this.writer = writer;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void reset() {\n", 
            "-            this.writer.reset();\n", 
            "-        }\n", 
            "-\n", 
            "-        public void write(final HttpResponse response) throws IOException, HttpException {\n", 
            "-            if (response != null && headerLog.isDebugEnabled()) {\n", 
            "-                headerLog.debug(\"<< \" + response.getStatusLine().toString());\n", 
            "-                Header[] headers = response.getAllHeaders();\n", 
            "-                for (Header header : headers) {\n", 
            "-                    headerLog.debug(\"<< \" + header.toString());\n", 
            "-                }\n", 
            "-            }\n", 
            "-            this.writer.write(response);\n", 
            "-        }\n", 
            "-\n", 
            "-    }\n", 
            "-\n", 
            "-    class LoggingNHttpMessageParser implements NHttpMessageParser<HttpRequest> {\n", 
            "-\n", 
            "-        private final NHttpMessageParser<HttpRequest> parser;\n", 
            "-\n", 
            "-        public LoggingNHttpMessageParser(final NHttpMessageParser<HttpRequest> parser) {\n", 
            "-            super();\n", 
            "-            this.parser = parser;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void reset() {\n", 
            "-            this.parser.reset();\n", 
            "-        }\n", 
            "-\n", 
            "-        public int fillBuffer(final ReadableByteChannel channel) throws IOException {\n", 
            "-            return this.parser.fillBuffer(channel);\n", 
            "-        }\n", 
            "-\n", 
            "-        public HttpRequest parse() throws IOException, HttpException {\n", 
            "-            HttpRequest request = this.parser.parse();\n", 
            "-            if (request != null && headerLog.isDebugEnabled()) {\n", 
            "-                headerLog.debug(\">> \" + request.getRequestLine().toString());\n", 
            "-                Header[] headers = request.getAllHeaders();\n", 
            "-                for (Header header : headers) {\n", 
            "-                    headerLog.debug(\">> \" + header.toString());\n", 
            "-                }\n", 
            "-            }\n", 
            "-            return request;\n", 
            "-        }\n", 
            "-    }\n", 
            "-}\n", 
            "-\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingNHttpSourceConnection.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingNHttpSourceConnection.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,129 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-package org.apache.synapse.transport.passthru.logging;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.nio.*;\n", 
            "-import org.apache.http.ConnectionClosedException;\n", 
            "-import org.apache.http.HttpException;\n", 
            "-import org.apache.http.HttpRequest;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-\n", 
            "-public class LoggingSourceHandler implements NHttpServerEventHandler {\n", 
            "-\n", 
            "-    private final Log log;\n", 
            "-\n", 
            "-    private final NHttpServerEventHandler handler;\n", 
            "-\n", 
            "-    public LoggingSourceHandler (final NHttpServerEventHandler handler) {\n", 
            "-        super();\n", 
            "-        if (handler == null) {\n", 
            "-            throw new IllegalArgumentException(\"HTTP service handler may not be null\");\n", 
            "-        }\n", 
            "-        this.handler = handler;\n", 
            "-        this.log = LogFactory.getLog(handler.getClass());\n", 
            "-    }\n", 
            "-\n", 
            "-    public void connected(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Connected\");\n", 
            "-        }\n", 
            "-        this.handler.connected(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void closed(final NHttpServerConnection conn) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Closed\");\n", 
            "-        }\n", 
            "-        this.handler.closed(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void endOfInput(NHttpServerConnection conn) throws IOException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Closed at the remote end\");\n", 
            "-        }\n", 
            "-        this.handler.endOfInput(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void exception(NHttpServerConnection conn, Exception ex) {\n", 
            "-        if (ex.getMessage() == null) {\n", 
            "-            ex.printStackTrace();\n", 
            "-            return;\n", 
            "-        }\n", 
            "-        if (ex instanceof ConnectionClosedException ||\n", 
            "-                ex.getMessage().contains(\"Connection reset by peer\") ||\n", 
            "-                ex.getMessage().contains(\"forcibly closed\")) {\n", 
            "-            if (this.log.isDebugEnabled()) {\n", 
            "-                this.log.debug(\"HTTP connection \" + conn + \": \" + ex.getMessage() +\n", 
            "-                        \" (Probably the keep-alive connection was closed)\");\n", 
            "-            }\n", 
            "-        } else if (ex instanceof HttpException) {\n", 
            "-            this.log.error(\"HTTP Error occurred on connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "-            this.handler.exception(conn, ex);\n", 
            "-        } else {\n", 
            "-            this.log.error(\"IO Error occurred on HTTP connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "-        }\n", 
            "-        this.handler.exception(conn, ex);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void requestReceived(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "-        HttpRequest request = conn.getHttpRequest();\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP InRequest Received on connection \" + conn + \": \"\n", 
            "-                    + request.getRequestLine());\n", 
            "-        }\n", 
            "-        this.handler.requestReceived(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void outputReady(final NHttpServerConnection conn, final ContentEncoder encoder) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Output ready\");\n", 
            "-        }\n", 
            "-        this.handler.outputReady(conn, encoder);\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Content encoder \" + encoder);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void responseReady(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Response ready\");\n", 
            "-        }\n", 
            "-        this.handler.responseReady(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void inputReady(final NHttpServerConnection conn, final ContentDecoder decoder) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Input ready\");\n", 
            "-        }\n", 
            "-        this.handler.inputReady(conn, decoder);\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Content decoder \" + decoder);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void timeout(final NHttpServerConnection conn) throws IOException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Timeout\");\n", 
            "-        }\n", 
            "-        this.handler.timeout(conn);\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingSourceHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingSourceHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,109 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-package org.apache.synapse.transport.passthru.logging;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-\n", 
            "-import java.nio.ByteBuffer;\n", 
            "-\n", 
            "-public class Wire {\n", 
            "-    private final Log log;\n", 
            "-\n", 
            "-    public Wire(final Log log) {\n", 
            "-        super();\n", 
            "-        this.log = log;\n", 
            "-    }\n", 
            "-\n", 
            "-    private void wire(final String header, final byte[] b, int pos, int off) {\n", 
            "-        StringBuilder buffer = new StringBuilder();\n", 
            "-        for (int i = 0; i < off; i++) {\n", 
            "-            int ch = b[pos + i];\n", 
            "-            if (ch == 13) {\n", 
            "-                buffer.append(\"[\\\\r]\");\n", 
            "-            } else if (ch == 10) {\n", 
            "-                    buffer.append(\"[\\\\n]\\\"\");\n", 
            "-                    buffer.insert(0, \"\\\"\");\n", 
            "-                    buffer.insert(0, header);\n", 
            "-                    this.log.debug(buffer.toString());\n", 
            "-                    buffer.setLength(0);\n", 
            "-            } else if ((ch < 32) || (ch > 127)) {\n", 
            "-                buffer.append(\"[0x\");\n", 
            "-                buffer.append(Integer.toHexString(ch));\n", 
            "-                buffer.append(\"]\");\n", 
            "-            } else {\n", 
            "-                buffer.append((char) ch);\n", 
            "-            }\n", 
            "-        }\n", 
            "-        if (buffer.length() > 0) {\n", 
            "-            buffer.append('\\\"');\n", 
            "-            buffer.insert(0, '\\\"');\n", 
            "-            buffer.insert(0, header);\n", 
            "-            this.log.debug(buffer.toString());\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-\n", 
            "-    public boolean isEnabled() {\n", 
            "-        return this.log.isDebugEnabled();\n", 
            "-    }\n", 
            "-\n", 
            "-    public void output(final byte[] b, int pos, int off) {\n", 
            "-        wire(\"<< \", b, pos, off);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void input(final byte[] b, int pos, int off) {\n", 
            "-        wire(\">> \", b, pos, off);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void output(byte[] b) {\n", 
            "-        output(b, 0, b.length);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void input(byte[] b) {\n", 
            "-        input(b, 0, b.length);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void output(int b) {\n", 
            "-        output(new byte[] {(byte) b});\n", 
            "-    }\n", 
            "-\n", 
            "-    public void input(int b) {\n", 
            "-        input(new byte[] {(byte) b});\n", 
            "-    }\n", 
            "-\n", 
            "-    public void output(final ByteBuffer b) {\n", 
            "-        if (b.hasArray()) {\n", 
            "-            output(b.array(), b.arrayOffset() + b.position(), b.remaining());\n", 
            "-        } else {\n", 
            "-            byte[] tmp = new byte[b.remaining()];\n", 
            "-            b.get(tmp);\n", 
            "-            output(tmp);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void input(final ByteBuffer b) {\n", 
            "-        if (b.hasArray()) {\n", 
            "-            input(b.array(), b.arrayOffset() + b.position(), b.remaining());\n", 
            "-        } else {\n", 
            "-            byte[] tmp = new byte[b.remaining()];\n", 
            "-            b.get(tmp);\n", 
            "-            input(tmp);\n", 
            "-        }\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/Wire.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/Wire.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,111 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.passthru.logging;\n", 
            "-\n", 
            "-import org.apache.http.nio.*;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-import org.apache.http.HttpResponseFactory;\n", 
            "-import org.apache.http.HttpRequestFactory;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-\n", 
            "-public class LoggingUtils {\n", 
            "-\n", 
            "-    public final static String HEADER_LOG_ID = \"org.wso2.carbon.transport.passthru.headers\";\n", 
            "-    public final static String WIRE_LOG_ID = \"org.wso2.carbon.transport.passthru.wire\";\n", 
            "-\n", 
            "-    public static IOSession decorate(IOSession session, final String id) {\n", 
            "-        Log log = LogFactory.getLog(session.getClass());\n", 
            "-        Log wireLog = LogFactory.getLog(WIRE_LOG_ID);\n", 
            "-        if (wireLog.isDebugEnabled() || log.isDebugEnabled()) {\n", 
            "-            session = new LoggingIOSession(wireLog, session, id);\n", 
            "-        }\n", 
            "-        return session;\n", 
            "-    }\n", 
            "-\n", 
            "-    public static NHttpClientEventHandler decorate(NHttpClientEventHandler handler) {\n", 
            "-        Log log = LogFactory.getLog(handler.getClass());\n", 
            "-        if (log.isDebugEnabled()) {\n", 
            "-            handler = new LoggingTargetHandler(handler);\n", 
            "-        }\n", 
            "-        return handler;\n", 
            "-    }\n", 
            "-\n", 
            "-    public static NHttpServerEventHandler decorate(NHttpServerEventHandler handler) {\n", 
            "-        Log log = LogFactory.getLog(handler.getClass());\n", 
            "-        if (log.isDebugEnabled()) {\n", 
            "-            handler = new LoggingSourceHandler(handler);\n", 
            "-        }\n", 
            "-        return handler;\n", 
            "-    }\n", 
            "-\n", 
            "-    public static DefaultNHttpClientConnection createClientConnection(\n", 
            "-            final IOSession iosession,\n", 
            "-            final HttpResponseFactory responseFactory,\n", 
            "-            final ByteBufferAllocator allocator,\n", 
            "-            final HttpParams params) {\n", 
            "-        Log log = LogFactory.getLog(DefaultNHttpClientConnection.class);\n", 
            "-        Log headerLog = LogFactory.getLog(HEADER_LOG_ID);\n", 
            "-        if (headerLog.isDebugEnabled() || log.isDebugEnabled()) {\n", 
            "-            return new LoggingNHttpTargetConnection(\n", 
            "-                    log,\n", 
            "-                    headerLog,\n", 
            "-                    iosession,\n", 
            "-                    responseFactory,\n", 
            "-                    allocator,\n", 
            "-                    params);\n", 
            "-        } else {\n", 
            "-            return new DefaultNHttpClientConnection(\n", 
            "-                    iosession,\n", 
            "-                    responseFactory,\n", 
            "-                    allocator,\n", 
            "-                    params);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public static DefaultNHttpServerConnection createServerConnection(\n", 
            "-            final IOSession iosession,\n", 
            "-            final HttpRequestFactory requestFactory,\n", 
            "-            final ByteBufferAllocator allocator,\n", 
            "-            final HttpParams params) {\n", 
            "-        Log log = LogFactory.getLog(DefaultNHttpClientConnection.class);\n", 
            "-        Log headerLog = LogFactory.getLog(HEADER_LOG_ID);\n", 
            "-        if (headerLog.isDebugEnabled() || log.isDebugEnabled()) {\n", 
            "-            return new LoggingNHttpSourceConnection(\n", 
            "-                    log,\n", 
            "-                    headerLog,\n", 
            "-                    iosession,\n", 
            "-                    requestFactory,\n", 
            "-                    allocator,\n", 
            "-                    params);\n", 
            "-        } else {\n", 
            "-            return new DefaultNHttpServerConnection(\n", 
            "-                    iosession,\n", 
            "-                    requestFactory,\n", 
            "-                    allocator,\n", 
            "-                    params);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingUtils.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,159 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.passthru.logging;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.SessionOutputBuffer;\n", 
            "-import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-import org.apache.http.nio.NHttpMessageWriter;\n", 
            "-import org.apache.http.nio.NHttpMessageParser;\n", 
            "-import org.apache.http.*;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-import java.nio.channels.ReadableByteChannel;\n", 
            "-\n", 
            "-public class LoggingNHttpTargetConnection extends DefaultNHttpClientConnection {\n", 
            "-\n", 
            "-    private final Log log;\n", 
            "-    private final Log headerLog;\n", 
            "-\n", 
            "-    public LoggingNHttpTargetConnection(\n", 
            "-            final Log log,\n", 
            "-            final Log headerLog,\n", 
            "-            final IOSession iosession,\n", 
            "-            final HttpResponseFactory responseFactory,\n", 
            "-            final ByteBufferAllocator allocator,\n", 
            "-            final HttpParams params) {\n", 
            "-        super(iosession, responseFactory, allocator, params);\n", 
            "-        this.log = log;\n", 
            "-        this.headerLog = headerLog;\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void close() throws IOException {\n", 
            "-        this.log.debug(\"Close connection\");\n", 
            "-        super.close();\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void shutdown() throws IOException {\n", 
            "-        this.log.debug(\"Shutdown connection\");\n", 
            "-        super.shutdown();\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void submitRequest(final HttpRequest request) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + this + \": \"  + request.getRequestLine().toString());\n", 
            "-        }\n", 
            "-        super.submitRequest(request);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void consumeInput(final NHttpClientEventHandler handler) {\n", 
            "-        this.log.debug(\"Consume input\");\n", 
            "-        super.consumeInput(handler);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void produceOutput(final NHttpClientEventHandler handler) {\n", 
            "-        this.log.debug(\"Produce output\");\n", 
            "-        super.produceOutput(handler);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    protected NHttpMessageWriter<HttpRequest> createRequestWriter(\n", 
            "-            final SessionOutputBuffer buffer,\n", 
            "-            final HttpParams params) {\n", 
            "-        return new LoggingNHttpMessageWriter(\n", 
            "-                super.createRequestWriter(buffer, params));\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    protected NHttpMessageParser<HttpResponse> createResponseParser(\n", 
            "-            final SessionInputBuffer buffer,\n", 
            "-            final HttpResponseFactory responseFactory,\n", 
            "-            final HttpParams params) {\n", 
            "-        return new LoggingNHttpMessageParser(\n", 
            "-                super.createResponseParser(buffer, responseFactory, params));\n", 
            "-    }\n", 
            "-\n", 
            "-    class LoggingNHttpMessageWriter implements NHttpMessageWriter<HttpRequest> {\n", 
            "-\n", 
            "-        private final NHttpMessageWriter<HttpRequest> writer;\n", 
            "-\n", 
            "-        public LoggingNHttpMessageWriter(final NHttpMessageWriter<HttpRequest> writer) {\n", 
            "-            super();\n", 
            "-            this.writer = writer;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void reset() {\n", 
            "-            this.writer.reset();\n", 
            "-        }\n", 
            "-\n", 
            "-        public void write(final HttpRequest request) throws IOException, HttpException {\n", 
            "-            if (request != null && headerLog.isDebugEnabled()) {\n", 
            "-                headerLog.debug(\">> \" + request.getRequestLine().toString());\n", 
            "-                Header[] headers = request.getAllHeaders();\n", 
            "-                for (Header header : headers) {\n", 
            "-                    headerLog.debug(\">> \" + header.toString());\n", 
            "-                }\n", 
            "-            }\n", 
            "-            this.writer.write(request);\n", 
            "-        }\n", 
            "-\n", 
            "-    }\n", 
            "-\n", 
            "-    class LoggingNHttpMessageParser implements NHttpMessageParser<HttpResponse> {\n", 
            "-\n", 
            "-        private final NHttpMessageParser<HttpResponse> parser;\n", 
            "-\n", 
            "-        public LoggingNHttpMessageParser(final NHttpMessageParser<HttpResponse> parser) {\n", 
            "-            super();\n", 
            "-            this.parser = parser;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void reset() {\n", 
            "-            this.parser.reset();\n", 
            "-        }\n", 
            "-\n", 
            "-        public int fillBuffer(final ReadableByteChannel channel) throws IOException {\n", 
            "-            return this.parser.fillBuffer(channel);\n", 
            "-        }\n", 
            "-\n", 
            "-        public HttpResponse parse() throws IOException, HttpException {\n", 
            "-            HttpResponse response = this.parser.parse();\n", 
            "-            if (response != null && headerLog.isDebugEnabled()) {\n", 
            "-                headerLog.debug(\"<< \" + response.getStatusLine().toString());\n", 
            "-                Header[] headers = response.getAllHeaders();\n", 
            "-                for (Header header : headers) {\n", 
            "-                    headerLog.debug(\"<< \" + header.toString());\n", 
            "-                }\n", 
            "-            }\n", 
            "-            return response;\n", 
            "-        }\n", 
            "-\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingNHttpTargetConnection.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingNHttpTargetConnection.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,122 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.passthru.logging;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.nio.*;\n", 
            "-import org.apache.http.HttpException;\n", 
            "-import org.apache.http.HttpResponse;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-\n", 
            "-public class LoggingTargetHandler implements NHttpClientEventHandler {\n", 
            "-\n", 
            "-    private final Log log;\n", 
            "-    \n", 
            "-    private final NHttpClientEventHandler handler;\n", 
            "-\n", 
            "-    public LoggingTargetHandler(final NHttpClientEventHandler handler) {\n", 
            "-        super();\n", 
            "-        if (handler == null) {\n", 
            "-            throw new IllegalArgumentException(\"HTTP client handler may not be null\");\n", 
            "-        }\n", 
            "-        this.handler = handler;\n", 
            "-        this.log = LogFactory.getLog(handler.getClass());\n", 
            "-    }\n", 
            "-\n", 
            "-    public void connected(final NHttpClientConnection conn, final Object attachment) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Connected (\" + attachment + \")\");\n", 
            "-        }\n", 
            "-        this.handler.connected(conn, attachment);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void closed(final NHttpClientConnection conn) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Closed\");\n", 
            "-        }\n", 
            "-        this.handler.closed(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void endOfInput(NHttpClientConnection conn) throws IOException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Closed at remote end\");\n", 
            "-        }\n", 
            "-        this.handler.endOfInput(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void exception(NHttpClientConnection conn, Exception ex) {\n", 
            "-        this.log.error(\"HTTP connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "-        this.handler.exception(conn, ex);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void requestReady(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": InRequest ready\" + getRequestMessageID(conn));\n", 
            "-        }\n", 
            "-        this.handler.requestReady(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void outputReady(final NHttpClientConnection conn, final ContentEncoder encoder) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Output ready\" + getRequestMessageID(conn));\n", 
            "-        }\n", 
            "-        this.handler.outputReady(conn, encoder);\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Content encoder \" + encoder);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void responseReceived(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "-        HttpResponse response = conn.getHttpResponse();\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \" : \"\n", 
            "-                    + response.getStatusLine() + getRequestMessageID(conn));\n", 
            "-        }\n", 
            "-        this.handler.responseReceived(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void inputReady(final NHttpClientConnection conn, final ContentDecoder decoder) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Input ready\" + getRequestMessageID(conn));\n", 
            "-        }\n", 
            "-        this.handler.inputReady(conn, decoder);\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Content decoder \" + decoder);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void timeout(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Timeout\" + getRequestMessageID(conn));\n", 
            "-        }\n", 
            "-        this.handler.timeout(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    private static String getRequestMessageID(final NHttpClientConnection conn) {\n", 
            "-        /*Axis2HttpRequest axis2Request = (Axis2HttpRequest)\n", 
            "-                conn.getContext().getAttribute(ClientHandler.AXIS2_HTTP_REQUEST);\n", 
            "-        if (axis2Request != null) {\n", 
            "-            return \" [InRequest Message ID : \" + axis2Request.getMsgContext().getMessageID() + \"]\";\n", 
            "-        }*/        \n", 
            "-        return \"\";\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingTargetHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/logging/LoggingTargetHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,62 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.passthru;\n", 
            "-\n", 
            "-import org.apache.http.HttpRequestFactory;\n", 
            "-import org.apache.http.impl.nio.DefaultHttpServerIODispatch;\n", 
            "-\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpServerConnectionFactory;\n", 
            "-import org.apache.http.nio.NHttpServerEventHandler;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-import org.apache.synapse.transport.passthru.logging.LoggingUtils;\n", 
            "-\n", 
            "-/**\n", 
            "- * This is a factory for creating the logging sessions or non-logging sessions.\n", 
            "- */\n", 
            "-public class SourceIOEventDispatch extends DefaultHttpServerIODispatch {\n", 
            "-\n", 
            "-    public SourceIOEventDispatch(final NHttpServerEventHandler handler, final HttpParams params) {\n", 
            "-        super(LoggingUtils.decorate(handler), new SourceConnectionFactory(params));\n", 
            "-    }\n", 
            "-\n", 
            "-    private static class SourceConnectionFactory extends DefaultNHttpServerConnectionFactory {\n", 
            "-\n", 
            "-        public SourceConnectionFactory(HttpParams params) {\n", 
            "-            super(params);\n", 
            "-        }\n", 
            "-\n", 
            "-        @Override\n", 
            "-        protected DefaultNHttpServerConnection createConnection(IOSession session,\n", 
            "-                                                                HttpRequestFactory requestFactory,\n", 
            "-                                                                ByteBufferAllocator allocator,\n", 
            "-                                                                HttpParams params) {\n", 
            "-            session = LoggingUtils.decorate(session, \"server\");\n", 
            "-            return LoggingUtils.createServerConnection(\n", 
            "-                    session,\n", 
            "-                    requestFactory,\n", 
            "-                    allocator,\n", 
            "-                    params);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,137 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.passthru;\n", 
            "-\n", 
            "-import org.apache.http.HttpResponseFactory;\n", 
            "-import org.apache.http.impl.DefaultHttpResponseFactory;\n", 
            "-import org.apache.http.impl.nio.DefaultHttpClientIODispatch;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "-import org.apache.http.nio.NHttpConnectionFactory;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLMode;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            "-import org.apache.http.params.HttpConnectionParams;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-import org.apache.synapse.transport.passthru.logging.LoggingUtils;\n", 
            "-\n", 
            "-import javax.net.ssl.SSLContext;\n", 
            "-import java.net.InetSocketAddress;\n", 
            "-import java.util.Map;\n", 
            "-\n", 
            "-public class SSLTargetIOEventDispatch extends DefaultHttpClientIODispatch {\n", 
            "-\n", 
            "-    public SSLTargetIOEventDispatch(NHttpClientEventHandler handler,\n", 
            "-                                    SSLContext sslcontext,\n", 
            "-                                    Map<String,SSLContext> customContexts,\n", 
            "-                                    SSLSetupHandler sslHandler,\n", 
            "-                                    HttpParams params) {\n", 
            "-        super(handler,\n", 
            "-                new SSLTargetConnectionFactory(sslcontext, customContexts, sslHandler, params));\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Custom NHttpClientConnectionFactory implementation. Most of this code has been borrowed\n", 
            "-     * from the SSLNHttpClientConnectionFactory class of HttpCore-NIO. This custom implementation\n", 
            "-     * allows using different SSLContext instances for different target endpoints (custom SSL\n", 
            "-     * profiles feature). Hopefully a future HttpCore-NIO API will provide an easier way to\n", 
            "-     * customize the way SSLIOSession instances are created and we will be able to get rid of this.\n", 
            "-     */\n", 
            "-    private static class SSLTargetConnectionFactory\n", 
            "-            implements NHttpConnectionFactory<DefaultNHttpClientConnection> {\n", 
            "-\n", 
            "-        private final HttpResponseFactory responseFactory;\n", 
            "-        private final ByteBufferAllocator allocator;\n", 
            "-        private final SSLContext sslcontext;\n", 
            "-        private final SSLSetupHandler sslHandler;\n", 
            "-        private final HttpParams params;\n", 
            "-        private final Map<String,SSLContext> contextMap;\n", 
            "-\n", 
            "-        public SSLTargetConnectionFactory(\n", 
            "-                final SSLContext sslcontext,\n", 
            "-                final Map<String,SSLContext> contextMap,\n", 
            "-                final SSLSetupHandler sslHandler,\n", 
            "-                final HttpParams params) {\n", 
            "-\n", 
            "-            if (params == null) {\n", 
            "-                throw new IllegalArgumentException(\"HTTP parameters may not be null\");\n", 
            "-            }\n", 
            "-            this.sslcontext = sslcontext;\n", 
            "-            this.contextMap = contextMap;\n", 
            "-            this.sslHandler = sslHandler;\n", 
            "-            this.responseFactory = new DefaultHttpResponseFactory();\n", 
            "-            this.allocator = new HeapByteBufferAllocator();\n", 
            "-            this.params = params;\n", 
            "-        }\n", 
            "-\n", 
            "-        protected DefaultNHttpClientConnection createConnection(IOSession session,\n", 
            "-                                                                HttpResponseFactory responseFactory,\n", 
            "-                                                                ByteBufferAllocator allocator,\n", 
            "-                                                                HttpParams params) {\n", 
            "-            session = LoggingUtils.decorate(session, \"sslclient\");\n", 
            "-            return LoggingUtils.createClientConnection(\n", 
            "-                    session,\n", 
            "-                    responseFactory,\n", 
            "-                    allocator,\n", 
            "-                    params);\n", 
            "-        }\n", 
            "-\n", 
            "-        private SSLContext getDefaultSSLContext() {\n", 
            "-            SSLContext sslcontext;\n", 
            "-            try {\n", 
            "-                sslcontext = SSLContext.getInstance(\"TLS\");\n", 
            "-                sslcontext.init(null, null, null);\n", 
            "-            } catch (Exception ex) {\n", 
            "-                throw new IllegalStateException(\"Failure initializing default SSL context\", ex);\n", 
            "-            }\n", 
            "-            return sslcontext;\n", 
            "-        }\n", 
            "-\n", 
            "-        private SSLContext getSSLContext(IOSession session) {\n", 
            "-            InetSocketAddress address = (InetSocketAddress) session.getRemoteAddress();\n", 
            "-            String host = address.getHostName() + \":\" + address.getPort();\n", 
            "-            SSLContext customContext = null;\n", 
            "-            if (contextMap != null) {\n", 
            "-                // See if there's a custom SSL profile configured for this server\n", 
            "-                customContext = contextMap.get(host);\n", 
            "-            }\n", 
            "-\n", 
            "-            if (customContext == null) {\n", 
            "-                customContext = this.sslcontext != null ? this.sslcontext : getDefaultSSLContext();\n", 
            "-            }\n", 
            "-            return customContext;\n", 
            "-        }\n", 
            "-\n", 
            "-        public DefaultNHttpClientConnection createConnection(final IOSession session) {\n", 
            "-            SSLContext sslcontext = getSSLContext(session);\n", 
            "-            SSLIOSession ssliosession = new SSLIOSession(session, SSLMode.CLIENT,\n", 
            "-                    sslcontext, this.sslHandler);\n", 
            "-            session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);\n", 
            "-            DefaultNHttpClientConnection conn = createConnection(\n", 
            "-                    ssliosession, this.responseFactory, this.allocator, this.params);\n", 
            "-            int timeout = HttpConnectionParams.getSoTimeout(this.params);\n", 
            "-            conn.setSocketTimeout(timeout);\n", 
            "-            return conn;\n", 
            "-        }\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SSLTargetIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SSLTargetIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,62 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-package org.apache.synapse.transport.passthru;\n", 
            "-\n", 
            "-import org.apache.http.HttpRequestFactory;\n", 
            "-import org.apache.http.impl.nio.DefaultHttpServerIODispatch;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "-import org.apache.http.impl.nio.SSLNHttpServerConnectionFactory;\n", 
            "-import org.apache.http.nio.NHttpServerEventHandler;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-import org.apache.synapse.transport.passthru.logging.LoggingUtils;\n", 
            "-\n", 
            "-import javax.net.ssl.SSLContext;\n", 
            "-\n", 
            "-public class SSLSourceIOEventDispatch extends DefaultHttpServerIODispatch {\n", 
            "-\n", 
            "-    public SSLSourceIOEventDispatch(NHttpServerEventHandler handler,\n", 
            "-                                    SSLContext sslcontext,\n", 
            "-                                    SSLSetupHandler sslHandler,\n", 
            "-                                    HttpParams params) {\n", 
            "-        super(handler, new SSLSourceConnectionFactory(sslcontext, sslHandler, params));\n", 
            "-    }\n", 
            "-\n", 
            "-    private static class SSLSourceConnectionFactory extends SSLNHttpServerConnectionFactory {\n", 
            "-\n", 
            "-        public SSLSourceConnectionFactory(SSLContext sslcontext, SSLSetupHandler sslHandler, HttpParams params) {\n", 
            "-            super(sslcontext, sslHandler, params);\n", 
            "-        }\n", 
            "-\n", 
            "-        @Override\n", 
            "-        protected DefaultNHttpServerConnection createConnection(IOSession session,\n", 
            "-                                                                HttpRequestFactory requestFactory,\n", 
            "-                                                                ByteBufferAllocator allocator,\n", 
            "-                                                                HttpParams params) {\n", 
            "-            session = LoggingUtils.decorate(session, \"sslserver\");\n", 
            "-            return LoggingUtils.createServerConnection(\n", 
            "-                    session,\n", 
            "-                    requestFactory,\n", 
            "-                    allocator,\n", 
            "-                    params);\n", 
            "-        }\n", 
            "-    }\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SSLSourceIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SSLSourceIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,196 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.nhttp;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-import java.nio.channels.ReadableByteChannel;\n", 
            "-import java.util.concurrent.atomic.AtomicLong;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.Header;\n", 
            "-import org.apache.http.HttpException;\n", 
            "-import org.apache.http.HttpRequest;\n", 
            "-import org.apache.http.HttpResponse;\n", 
            "-import org.apache.http.HttpResponseFactory;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "-import org.apache.http.nio.NHttpMessageParser;\n", 
            "-import org.apache.http.nio.NHttpMessageWriter;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            "-import org.apache.http.nio.reactor.SessionOutputBuffer;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-\n", 
            "-public class LoggingNHttpClientConnection extends DefaultNHttpClientConnection {\n", 
            "-\n", 
            "-    private static final AtomicLong COUNT = new AtomicLong();\n", 
            "-\n", 
            "-    private final Log log;\n", 
            "-    private final Log iolog;\n", 
            "-    private final Log headerlog;\n", 
            "-    private final Log wirelog;\n", 
            "-    private final Log accesslog;\n", 
            "-    private final String id;\n", 
            "-\n", 
            "-    public LoggingNHttpClientConnection(\n", 
            "-            final IOSession session,\n", 
            "-            final HttpResponseFactory responseFactory,\n", 
            "-            final ByteBufferAllocator allocator,\n", 
            "-            final HttpParams params) {\n", 
            "-        super(session, responseFactory, allocator, params);\n", 
            "-        this.log = LogFactory.getLog(getClass());\n", 
            "-        this.iolog = LogFactory.getLog(session.getClass());\n", 
            "-        this.headerlog = LogFactory.getLog(LoggingUtils.HEADER_LOG_ID);\n", 
            "-        this.wirelog = LogFactory.getLog(LoggingUtils.WIRE_LOG_ID);\n", 
            "-        this.accesslog = LogFactory.getLog(LoggingUtils.ACCESS_LOG_ID);\n", 
            "-        this.id = \"http-outgoing-\" + COUNT.incrementAndGet();\n", 
            "-        if (this.iolog.isDebugEnabled() || this.wirelog.isDebugEnabled()) {\n", 
            "-            this.session = new LoggingIOSession(session, this.id, this.iolog, this.wirelog);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void close() throws IOException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \": Close connection\");\n", 
            "-        }\n", 
            "-        super.close();\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void shutdown() throws IOException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \": Shutdown connection\");\n", 
            "-        }\n", 
            "-        super.shutdown();\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void submitRequest(final HttpRequest request) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \": \"  + request.getRequestLine().toString());\n", 
            "-        }\n", 
            "-        super.submitRequest(request);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void consumeInput(final NHttpClientEventHandler handler) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \": Consume input\");\n", 
            "-        }\n", 
            "-        super.consumeInput(handler);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void produceOutput(final NHttpClientEventHandler handler) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \": Produce output\");\n", 
            "-        }\n", 
            "-        super.produceOutput(handler);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    protected NHttpMessageWriter<HttpRequest> createRequestWriter(\n", 
            "-            final SessionOutputBuffer buffer,\n", 
            "-            final HttpParams params) {\n", 
            "-        return new LoggingNHttpMessageWriter(\n", 
            "-                super.createRequestWriter(buffer, params));\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    protected NHttpMessageParser<HttpResponse> createResponseParser(\n", 
            "-            final SessionInputBuffer buffer,\n", 
            "-            final HttpResponseFactory responseFactory,\n", 
            "-            final HttpParams params) {\n", 
            "-        return new LoggingNHttpMessageParser(\n", 
            "-                super.createResponseParser(buffer, responseFactory, params));\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public String toString() {\n", 
            "-        return this.id;\n", 
            "-    }\n", 
            "-\n", 
            "-    class LoggingNHttpMessageWriter implements NHttpMessageWriter<HttpRequest> {\n", 
            "-\n", 
            "-        private final NHttpMessageWriter<HttpRequest> writer;\n", 
            "-\n", 
            "-        public LoggingNHttpMessageWriter(final NHttpMessageWriter<HttpRequest> writer) {\n", 
            "-            super();\n", 
            "-            this.writer = writer;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void reset() {\n", 
            "-            this.writer.reset();\n", 
            "-        }\n", 
            "-\n", 
            "-        public void write(final HttpRequest message) throws IOException, HttpException {\n", 
            "-            if (message != null && headerlog.isDebugEnabled()) {\n", 
            "-                headerlog.debug(id + \" >> \" + message.getRequestLine().toString());\n", 
            "-                Header[] headers = message.getAllHeaders();\n", 
            "-                for (Header header : headers) {\n", 
            "-                    headerlog.debug(id + \" >> \" + header.toString());\n", 
            "-                }\n", 
            "-            }\n", 
            "-            if (message != null && accesslog.isInfoEnabled()) {\n", 
            "-                AccessHandler.getAccess().addAccessToQueue(message);\n", 
            "-            }\n", 
            "-            this.writer.write(message);\n", 
            "-        }\n", 
            "-\n", 
            "-    }\n", 
            "-\n", 
            "-    class LoggingNHttpMessageParser implements NHttpMessageParser<HttpResponse> {\n", 
            "-\n", 
            "-        private final NHttpMessageParser<HttpResponse> parser;\n", 
            "-\n", 
            "-        public LoggingNHttpMessageParser(final NHttpMessageParser<HttpResponse> parser) {\n", 
            "-            super();\n", 
            "-            this.parser = parser;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void reset() {\n", 
            "-            this.parser.reset();\n", 
            "-        }\n", 
            "-\n", 
            "-        public int fillBuffer(final ReadableByteChannel channel) throws IOException {\n", 
            "-            return this.parser.fillBuffer(channel);\n", 
            "-        }\n", 
            "-\n", 
            "-        public HttpResponse parse() throws IOException, HttpException {\n", 
            "-            HttpResponse message = this.parser.parse();\n", 
            "-            if (message != null && headerlog.isDebugEnabled()) {\n", 
            "-                headerlog.debug(id + \" << \" + message.getStatusLine().toString());\n", 
            "-                Header[] headers = message.getAllHeaders();\n", 
            "-                for (Header header : headers) {\n", 
            "-                    headerlog.debug(id + \" << \" + header.toString());\n", 
            "-                }\n", 
            "-            }\n", 
            "-            if (message != null && accesslog.isInfoEnabled()) {\n", 
            "-                AccessHandler.getAccess().addAccessToQueue(message);\n", 
            "-            }\n", 
            "-            return message;\n", 
            "-        }\n", 
            "-\n", 
            "-    }\n", 
            "-\n", 
            "-}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpClientConnection.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpClientConnection.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,79 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.nhttp;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.HttpRequestFactory;\n", 
            "-import org.apache.http.HttpResponseFactory;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "-import org.apache.http.nio.*;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-\n", 
            "-class LoggingUtils {\n", 
            "-    \n", 
            "-    public final static String HEADER_LOG_ID = \"org.apache.synapse.transport.nhttp.headers\"; \n", 
            "-    public final static String WIRE_LOG_ID = \"org.apache.synapse.transport.nhttp.wire\";\n", 
            "-    public final static String ACCESS_LOG_ID = \"org.apache.synapse.transport.nhttp.access\";\n", 
            "-\n", 
            "-    public static NHttpClientEventHandler decorate(NHttpClientEventHandler handler) {\n", 
            "-        Log log = LogFactory.getLog(handler.getClass());\n", 
            "-        if (log.isDebugEnabled()) {\n", 
            "-            handler = new LoggingNHttpClientHandler(log, handler);\n", 
            "-        }\n", 
            "-        return handler;\n", 
            "-    }\n", 
            "-\n", 
            "-    public static NHttpServerEventHandler decorate(NHttpServerEventHandler handler) {\n", 
            "-        Log log = LogFactory.getLog(handler.getClass());\n", 
            "-        if (log.isDebugEnabled()) {\n", 
            "-            handler = new LoggingNHttpServiceHandler(log, handler);\n", 
            "-        }\n", 
            "-        return handler;\n", 
            "-    }\n", 
            "-\n", 
            "-    public static DefaultNHttpClientConnection createClientConnection(\n", 
            "-            final IOSession iosession,\n", 
            "-            final HttpResponseFactory responseFactory,\n", 
            "-            final ByteBufferAllocator allocator,\n", 
            "-            final HttpParams params) {\n", 
            "-        return new LoggingNHttpClientConnection(\n", 
            "-                iosession, \n", 
            "-                responseFactory,\n", 
            "-                allocator,\n", 
            "-                params);\n", 
            "-    }\n", 
            "-\n", 
            "-    public static DefaultNHttpServerConnection createServerConnection(\n", 
            "-            final IOSession iosession,\n", 
            "-            final HttpRequestFactory requestFactory,\n", 
            "-            final ByteBufferAllocator allocator,\n", 
            "-            final HttpParams params) {\n", 
            "-        return new LoggingNHttpServerConnection(\n", 
            "-                iosession, \n", 
            "-                requestFactory,\n", 
            "-                allocator,\n", 
            "-                params);\n", 
            "-    }\n", 
            "-    \n", 
            "-}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingUtils.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,144 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.nhttp;\n", 
            "-\n", 
            "-import javax.net.ssl.SSLContext;\n", 
            "-\n", 
            "-import org.apache.http.HttpResponseFactory;\n", 
            "-import org.apache.http.impl.DefaultHttpResponseFactory;\n", 
            "-import org.apache.http.impl.nio.DefaultHttpClientIODispatch;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "-import org.apache.http.nio.NHttpConnectionFactory;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLMode;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            "-import org.apache.http.params.HttpConnectionParams;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-\n", 
            "-import java.net.InetSocketAddress;\n", 
            "-import java.util.Map;\n", 
            "-\n", 
            "-/**\n", 
            "- * This custom SSLClientIOEventDispatch can keep a map of SSLContexts and use the correct\n", 
            "- * SSLContext when connecting to different servers. If a SSLContext cannot be found for a\n", 
            "- * particular server from the specified map it uses the default SSLContext.\n", 
            "- */\n", 
            "-public class SSLClientIOEventDispatch extends DefaultHttpClientIODispatch {\n", 
            "-\n", 
            "-    public SSLClientIOEventDispatch(\n", 
            "-            final NHttpClientEventHandler handler,\n", 
            "-            final SSLContext sslcontext,\n", 
            "-            final Map<String, SSLContext> contextMap,\n", 
            "-            final SSLSetupHandler sslHandler,\n", 
            "-            final HttpParams params) {\n", 
            "-        super(LoggingUtils.decorate(handler),\n", 
            "-                new SSLClientConnectionFactory(sslcontext, contextMap, sslHandler, params));\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Custom NHttpClientConnectionFactory implementation. Most of this code has been borrowed\n", 
            "-     * from the SSLNHttpClientConnectionFactory class of HttpCore-NIO. This custom implementation\n", 
            "-     * allows using different SSLContext instances for different target endpoints (custom SSL\n", 
            "-     * profiles feature). Hopefully a future HttpCore-NIO API will provide an easier way to\n", 
            "-     * customize the way SSLIOSession instances are created and we will be able to get rid of this.\n", 
            "-     */\n", 
            "-    private static class SSLClientConnectionFactory\n", 
            "-            implements NHttpConnectionFactory<DefaultNHttpClientConnection> {\n", 
            "-\n", 
            "-        private final HttpResponseFactory responseFactory;\n", 
            "-        private final ByteBufferAllocator allocator;\n", 
            "-        private final SSLContext sslcontext;\n", 
            "-        private final SSLSetupHandler sslHandler;\n", 
            "-        private final HttpParams params;\n", 
            "-        private final Map<String,SSLContext> contextMap;\n", 
            "-\n", 
            "-        public SSLClientConnectionFactory(\n", 
            "-                final SSLContext sslcontext,\n", 
            "-                final Map<String,SSLContext> contextMap,\n", 
            "-                final SSLSetupHandler sslHandler,\n", 
            "-                final HttpParams params) {\n", 
            "-\n", 
            "-            if (params == null) {\n", 
            "-                throw new IllegalArgumentException(\"HTTP parameters may not be null\");\n", 
            "-            }\n", 
            "-            this.sslcontext = sslcontext;\n", 
            "-            this.contextMap = contextMap;\n", 
            "-            this.sslHandler = sslHandler;\n", 
            "-            this.responseFactory = new DefaultHttpResponseFactory();\n", 
            "-            this.allocator = new HeapByteBufferAllocator();\n", 
            "-            this.params = params;\n", 
            "-        }\n", 
            "-\n", 
            "-        protected DefaultNHttpClientConnection createConnection(IOSession session,\n", 
            "-                                                                HttpResponseFactory responseFactory,\n", 
            "-                                                                ByteBufferAllocator allocator,\n", 
            "-                                                                HttpParams params) {\n", 
            "-            session = org.apache.synapse.transport.passthru.logging.LoggingUtils.decorate(session, \"sslclient\");\n", 
            "-            return LoggingUtils.createClientConnection(\n", 
            "-                    session,\n", 
            "-                    responseFactory,\n", 
            "-                    allocator,\n", 
            "-                    params);\n", 
            "-        }\n", 
            "-\n", 
            "-        private SSLContext getDefaultSSLContext() {\n", 
            "-            SSLContext sslcontext;\n", 
            "-            try {\n", 
            "-                sslcontext = SSLContext.getInstance(\"TLS\");\n", 
            "-                sslcontext.init(null, null, null);\n", 
            "-            } catch (Exception ex) {\n", 
            "-                throw new IllegalStateException(\"Failure initializing default SSL context\", ex);\n", 
            "-            }\n", 
            "-            return sslcontext;\n", 
            "-        }\n", 
            "-\n", 
            "-        private SSLContext getSSLContext(IOSession session) {\n", 
            "-            InetSocketAddress address = (InetSocketAddress) session.getRemoteAddress();\n", 
            "-            String host = address.getHostName() + \":\" + address.getPort();\n", 
            "-            SSLContext customContext = null;\n", 
            "-            if (contextMap != null) {\n", 
            "-                // See if there's a custom SSL profile configured for this server\n", 
            "-                customContext = contextMap.get(host);\n", 
            "-            }\n", 
            "-\n", 
            "-            if (customContext == null) {\n", 
            "-                customContext = this.sslcontext != null ? this.sslcontext : getDefaultSSLContext();\n", 
            "-            }\n", 
            "-            return customContext;\n", 
            "-        }\n", 
            "-\n", 
            "-        public DefaultNHttpClientConnection createConnection(final IOSession session) {\n", 
            "-            SSLContext sslcontext = getSSLContext(session);\n", 
            "-            SSLIOSession ssliosession = new SSLIOSession(session, SSLMode.CLIENT,\n", 
            "-                    sslcontext, this.sslHandler);\n", 
            "-            session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);\n", 
            "-            DefaultNHttpClientConnection conn = createConnection(\n", 
            "-                    ssliosession, this.responseFactory, this.allocator, this.params);\n", 
            "-            int timeout = HttpConnectionParams.getSoTimeout(this.params);\n", 
            "-            conn.setSocketTimeout(timeout);\n", 
            "-            return conn;\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/SSLClientIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/SSLClientIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,199 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.nhttp;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-import java.nio.channels.ReadableByteChannel;\n", 
            "-import java.util.concurrent.atomic.AtomicLong;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.Header;\n", 
            "-import org.apache.http.HttpException;\n", 
            "-import org.apache.http.HttpRequest;\n", 
            "-import org.apache.http.HttpRequestFactory;\n", 
            "-import org.apache.http.HttpResponse;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "-import org.apache.http.nio.NHttpMessageParser;\n", 
            "-import org.apache.http.nio.NHttpMessageWriter;\n", 
            "-import org.apache.http.nio.NHttpServerEventHandler;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            "-import org.apache.http.nio.reactor.SessionOutputBuffer;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-\n", 
            "-public class LoggingNHttpServerConnection extends DefaultNHttpServerConnection {\n", 
            "-\n", 
            "-    private static final AtomicLong COUNT = new AtomicLong();\n", 
            "-\n", 
            "-    private final Log log;\n", 
            "-    private final Log iolog;\n", 
            "-    private final Log headerlog;\n", 
            "-    private final Log accesslog;\n", 
            "-    private final Log wirelog;\n", 
            "-    private final String id;\n", 
            "-\n", 
            "-    public LoggingNHttpServerConnection(\n", 
            "-            final IOSession session,\n", 
            "-            final HttpRequestFactory requestFactory,\n", 
            "-            final ByteBufferAllocator allocator,\n", 
            "-            final HttpParams params) {\n", 
            "-        super(session, requestFactory, allocator, params);\n", 
            "-        this.log = LogFactory.getLog(getClass());\n", 
            "-        this.iolog = LogFactory.getLog(session.getClass());\n", 
            "-        this.headerlog = LogFactory.getLog(LoggingUtils.HEADER_LOG_ID);\n", 
            "-        this.wirelog = LogFactory.getLog(LoggingUtils.WIRE_LOG_ID);\n", 
            "-        this.accesslog = LogFactory.getLog(LoggingUtils.ACCESS_LOG_ID);\n", 
            "-        this.id = \"http-incoming-\" + COUNT.incrementAndGet();\n", 
            "-        if (this.iolog.isDebugEnabled() || this.wirelog.isDebugEnabled()) {\n", 
            "-            this.session = new LoggingIOSession(session, this.id, this.iolog, this.wirelog);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void close() throws IOException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \": Close connection\");\n", 
            "-        }\n", 
            "-        super.close();\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void shutdown() throws IOException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \": Shutdown connection\");\n", 
            "-        }\n", 
            "-        super.shutdown();\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void submitResponse(final HttpResponse response) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \": \"  + response.getStatusLine().toString());\n", 
            "-        }\n", 
            "-        super.submitResponse(response);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void consumeInput(final NHttpServerEventHandler handler) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \": Consume input\");\n", 
            "-        }\n", 
            "-        super.consumeInput(handler);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public void produceOutput(final NHttpServerEventHandler handler) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \": Produce output\");\n", 
            "-        }\n", 
            "-        super.produceOutput(handler);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    protected NHttpMessageWriter<HttpResponse> createResponseWriter(\n", 
            "-            final SessionOutputBuffer buffer,\n", 
            "-            final HttpParams params) {\n", 
            "-        return new LoggingNHttpMessageWriter(\n", 
            "-                super.createResponseWriter(buffer, params));\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    protected NHttpMessageParser<HttpRequest> createRequestParser(\n", 
            "-            final SessionInputBuffer buffer,\n", 
            "-            final HttpRequestFactory requestFactory,\n", 
            "-            final HttpParams params) {\n", 
            "-        return new LoggingNHttpMessageParser(\n", 
            "-                super.createRequestParser(buffer, requestFactory, params));\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public String toString() {\n", 
            "-        return this.id;\n", 
            "-    }\n", 
            "-\n", 
            "-    class LoggingNHttpMessageWriter implements NHttpMessageWriter<HttpResponse> {\n", 
            "-\n", 
            "-        private final NHttpMessageWriter<HttpResponse> writer;\n", 
            "-\n", 
            "-        public LoggingNHttpMessageWriter(final NHttpMessageWriter<HttpResponse> writer) {\n", 
            "-            super();\n", 
            "-            this.writer = writer;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void reset() {\n", 
            "-            this.writer.reset();\n", 
            "-        }\n", 
            "-\n", 
            "-        public void write(final HttpResponse message) throws IOException, HttpException {\n", 
            "-            if (message != null && headerlog.isDebugEnabled()) {\n", 
            "-                headerlog.debug(id + \" << \" + message.getStatusLine().toString());\n", 
            "-                Header[] headers = message.getAllHeaders();\n", 
            "-                for (Header header : headers) {\n", 
            "-                    headerlog.debug(id + \" << \" + header.toString());\n", 
            "-                }\n", 
            "-            }\n", 
            "-\n", 
            "-            if (message != null && accesslog.isInfoEnabled()) {\n", 
            "-                AccessHandler.getAccess().addAccessToQueue(message);\n", 
            "-            }\n", 
            "-\n", 
            "-            this.writer.write(message);\n", 
            "-        }\n", 
            "-\n", 
            "-    }\n", 
            "-\n", 
            "-    class LoggingNHttpMessageParser implements NHttpMessageParser<HttpRequest> {\n", 
            "-\n", 
            "-        private final NHttpMessageParser<HttpRequest> parser;\n", 
            "-\n", 
            "-        public LoggingNHttpMessageParser(final NHttpMessageParser<HttpRequest> parser) {\n", 
            "-            super();\n", 
            "-            this.parser = parser;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void reset() {\n", 
            "-            this.parser.reset();\n", 
            "-        }\n", 
            "-\n", 
            "-        public int fillBuffer(final ReadableByteChannel channel) throws IOException {\n", 
            "-            return this.parser.fillBuffer(channel);\n", 
            "-        }\n", 
            "-\n", 
            "-        public HttpRequest parse() throws IOException, HttpException {\n", 
            "-            HttpRequest message = this.parser.parse();\n", 
            "-            if (message != null && headerlog.isDebugEnabled()) {\n", 
            "-                headerlog.debug(id + \" >> \" + message.getRequestLine().toString());\n", 
            "-                Header[] headers = message.getAllHeaders();\n", 
            "-                for (Header header : headers) {\n", 
            "-                    headerlog.debug(id + \" >> \" + header.toString());\n", 
            "-                }\n", 
            "-            }\n", 
            "-            if (message != null && accesslog.isInfoEnabled()) {\n", 
            "-                AccessHandler.getAccess().addAccessToQueue(message);\n", 
            "-            }\n", 
            "-\n", 
            "-            return message;\n", 
            "-        }\n", 
            "-\n", 
            "-    }\n", 
            "-\n", 
            "-}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpServerConnection.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpServerConnection.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,56 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.nhttp;\n", 
            "-\n", 
            "-import org.apache.http.HttpResponseFactory;\n", 
            "-import org.apache.http.impl.nio.DefaultHttpClientIODispatch;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpClientConnectionFactory;\n", 
            "-import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-\n", 
            "-public class PlainClientIOEventDispatch extends DefaultHttpClientIODispatch {\n", 
            "-\n", 
            "-    public PlainClientIOEventDispatch(final NHttpClientEventHandler handler, final HttpParams params) {\n", 
            "-        super(LoggingUtils.decorate(handler), new TargetConnectionFactory(params));\n", 
            "-    }\n", 
            "-\n", 
            "-    private static class TargetConnectionFactory extends DefaultNHttpClientConnectionFactory {\n", 
            "-\n", 
            "-        public TargetConnectionFactory(HttpParams params) {\n", 
            "-            super(params);\n", 
            "-        }\n", 
            "-\n", 
            "-        @Override\n", 
            "-        protected DefaultNHttpClientConnection createConnection(IOSession session,\n", 
            "-                                                                HttpResponseFactory responseFactory,\n", 
            "-                                                                ByteBufferAllocator allocator,\n", 
            "-                                                                HttpParams params) {\n", 
            "-            return LoggingUtils.createClientConnection(\n", 
            "-                    session,\n", 
            "-                    responseFactory,\n", 
            "-                    allocator,\n", 
            "-                    params);\n", 
            "-        }\n", 
            "-    }\n", 
            "-    \n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/PlainClientIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/PlainClientIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,224 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-package org.apache.synapse.transport.nhttp;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-import java.net.SocketAddress;\n", 
            "-import java.nio.ByteBuffer;\n", 
            "-import java.nio.channels.ByteChannel;\n", 
            "-import java.nio.channels.SelectionKey;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.SessionBufferStatus;\n", 
            "-\n", 
            "-/**\n", 
            "- * Decorator class intended to transparently extend an {@link IOSession} \n", 
            "- * with basic event logging capabilities using Commons Logging. \n", 
            "- */\n", 
            "-class LoggingIOSession implements IOSession {\n", 
            "-\n", 
            "-    private final Log log;\n", 
            "-    private final Wire wirelog;\n", 
            "-    private final String id;\n", 
            "-    private final IOSession session;\n", 
            "-    private final ByteChannel channel;\n", 
            "-\n", 
            "-    public LoggingIOSession(final IOSession session, final String id, final Log log, final Log wirelog) {\n", 
            "-        super();\n", 
            "-        if (session == null) {\n", 
            "-            throw new IllegalArgumentException(\"I/O session may not be null\");\n", 
            "-        }\n", 
            "-        this.session = session;\n", 
            "-        this.channel = new LoggingByteChannel();\n", 
            "-        this.id = id;\n", 
            "-        this.log = log;\n", 
            "-        this.wirelog = new Wire(wirelog, this.id);\n", 
            "-    }\n", 
            "-\n", 
            "-    public ByteChannel channel() {\n", 
            "-        return this.channel;\n", 
            "-    }\n", 
            "-\n", 
            "-    public SocketAddress getLocalAddress() {\n", 
            "-        return this.session.getLocalAddress();\n", 
            "-    }\n", 
            "-\n", 
            "-    public SocketAddress getRemoteAddress() {\n", 
            "-        return this.session.getRemoteAddress();\n", 
            "-    }\n", 
            "-\n", 
            "-    public int getEventMask() {\n", 
            "-        return this.session.getEventMask();\n", 
            "-    }\n", 
            "-\n", 
            "-    private static String formatOps(int ops) {\n", 
            "-        StringBuilder buffer = new StringBuilder(6);\n", 
            "-        buffer.append('[');\n", 
            "-        if ((ops & SelectionKey.OP_READ) > 0) {\n", 
            "-            buffer.append('r');\n", 
            "-        }\n", 
            "-        if ((ops & SelectionKey.OP_WRITE) > 0) {\n", 
            "-            buffer.append('w');\n", 
            "-        }\n", 
            "-        if ((ops & SelectionKey.OP_ACCEPT) > 0) {\n", 
            "-            buffer.append('a');\n", 
            "-        }\n", 
            "-        if ((ops & SelectionKey.OP_CONNECT) > 0) {\n", 
            "-            buffer.append('c');\n", 
            "-        }\n", 
            "-        buffer.append(']');\n", 
            "-        return buffer.toString();\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setEventMask(int ops) {\n", 
            "-        this.session.setEventMask(ops);\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \" \" + this.session + \": Event mask set \" + formatOps(ops));\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setEvent(int op) {\n", 
            "-        this.session.setEvent(op);\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \" \" + this.session + \": Event set \" + formatOps(op));\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void clearEvent(int op) {\n", 
            "-        this.session.clearEvent(op);\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \" \" + this.session + \": Event cleared \" + formatOps(op));\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void close() {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \" \" + this.session + \": Close\");\n", 
            "-        }\n", 
            "-        this.session.close();\n", 
            "-    }\n", 
            "-\n", 
            "-    public int getStatus() {\n", 
            "-        return this.session.getStatus();\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean isClosed() {\n", 
            "-        return this.session.isClosed();\n", 
            "-    }\n", 
            "-\n", 
            "-    public void shutdown() {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \" \" + this.session + \": Shutdown\");\n", 
            "-        }\n", 
            "-        this.session.shutdown();\n", 
            "-    }\n", 
            "-\n", 
            "-    public int getSocketTimeout() {\n", 
            "-        return this.session.getSocketTimeout();\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setSocketTimeout(int timeout) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \" \" + this.session + \": Set timeout \" + timeout);\n", 
            "-        }\n", 
            "-        this.session.setSocketTimeout(timeout);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setBufferStatus(final SessionBufferStatus status) {\n", 
            "-        this.session.setBufferStatus(status);\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean hasBufferedInput() {\n", 
            "-        return this.session.hasBufferedInput();\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean hasBufferedOutput() {\n", 
            "-        return this.session.hasBufferedOutput();\n", 
            "-    }\n", 
            "-\n", 
            "-    public Object getAttribute(final String name) {\n", 
            "-        return this.session.getAttribute(name);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void setAttribute(final String name, final Object obj) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \" \" + this.session + \": Set attribute \" + name);\n", 
            "-        }\n", 
            "-        this.session.setAttribute(name, obj);\n", 
            "-    }\n", 
            "-\n", 
            "-    public Object removeAttribute(final String name) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(this.id + \" \" + this.session + \": Remove attribute \" + name);\n", 
            "-        }\n", 
            "-        return this.session.removeAttribute(name);\n", 
            "-    }\n", 
            "-\n", 
            "-    @Override\n", 
            "-    public String toString() {\n", 
            "-        return this.id + \" \" + this.session.toString();\n", 
            "-    }\n", 
            "-\n", 
            "-    class LoggingByteChannel implements ByteChannel {\n", 
            "-\n", 
            "-        public int read(final ByteBuffer dst) throws IOException {\n", 
            "-            int bytesRead = session.channel().read(dst);\n", 
            "-            if (log.isDebugEnabled()) {\n", 
            "-                log.debug(id + \" \" + session + \": \" + bytesRead + \" bytes read\");\n", 
            "-            }\n", 
            "-            if (bytesRead > 0 && wirelog.isEnabled()) {\n", 
            "-                ByteBuffer b = dst.duplicate();\n", 
            "-                int p = b.position();\n", 
            "-                b.limit(p);\n", 
            "-                b.position(p - bytesRead);\n", 
            "-                wirelog.input(b);\n", 
            "-            }\n", 
            "-            return bytesRead;\n", 
            "-        }\n", 
            "-\n", 
            "-        public int write(final ByteBuffer src) throws IOException {\n", 
            "-            int byteWritten = session.channel().write(src);\n", 
            "-            if (log.isDebugEnabled()) {\n", 
            "-                log.debug(id + \" \" + session + \": \" + byteWritten + \" bytes written\");\n", 
            "-            }\n", 
            "-            if (byteWritten > 0 && wirelog.isEnabled()) {\n", 
            "-                ByteBuffer b = src.duplicate();\n", 
            "-                int p = b.position();\n", 
            "-                b.limit(p);\n", 
            "-                b.position(p - byteWritten);\n", 
            "-                wirelog.output(b);\n", 
            "-            }\n", 
            "-            return byteWritten;\n", 
            "-        }\n", 
            "-\n", 
            "-        public void close() throws IOException {\n", 
            "-            if (log.isDebugEnabled()) {\n", 
            "-                log.debug(id + \" \" + session + \": Channel close\");\n", 
            "-            }\n", 
            "-            session.channel().close();\n", 
            "-        }\n", 
            "-\n", 
            "-        public boolean isOpen() {\n", 
            "-            return session.channel().isOpen();\n", 
            "-        }\n", 
            "-\n", 
            "-    }\n", 
            "-\n", 
            "-}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingIOSession.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingIOSession.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,131 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.nhttp;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.HttpException;\n", 
            "-import org.apache.http.HttpRequest;\n", 
            "-import org.apache.http.ConnectionClosedException;\n", 
            "-import org.apache.http.nio.*;\n", 
            "-\n", 
            "-/**\n", 
            "- * Decorator class intended to transparently extend an {@link NHttpServerEventHandler}\n", 
            "- * with basic event logging capabilities using Commons Logging. \n", 
            "- */\n", 
            "-class LoggingNHttpServiceHandler implements NHttpServerEventHandler {\n", 
            "-\n", 
            "-    private final Log log;\n", 
            "-    private final NHttpServerEventHandler handler;\n", 
            "-    \n", 
            "-    public LoggingNHttpServiceHandler(\n", 
            "-            final Log log, \n", 
            "-            final NHttpServerEventHandler handler) {\n", 
            "-        super();\n", 
            "-        if (handler == null) {\n", 
            "-            throw new IllegalArgumentException(\"HTTP service handler may not be null\");\n", 
            "-        }\n", 
            "-        this.handler = handler;\n", 
            "-        this.log = LogFactory.getLog(handler.getClass());\n", 
            "-    }\n", 
            "-    \n", 
            "-    public void connected(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Connected\");\n", 
            "-        }\n", 
            "-        this.handler.connected(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void closed(final NHttpServerConnection conn) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Closed\");\n", 
            "-        }\n", 
            "-        this.handler.closed(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void endOfInput(NHttpServerConnection conn) throws IOException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Closed at remote end\");\n", 
            "-        }\n", 
            "-        this.handler.endOfInput(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void exception(NHttpServerConnection conn, Exception ex) {\n", 
            "-        if (ex instanceof ConnectionClosedException ||\n", 
            "-                ex.getMessage().contains(\"Connection reset by peer\") ||\n", 
            "-                ex.getMessage().contains(\"forcibly closed\")) {\n", 
            "-            if (this.log.isDebugEnabled()) {\n", 
            "-                this.log.debug(\"HTTP connection \" + conn + \": \" + ex.getMessage() +\n", 
            "-                        \" (Probably the keepalive connection was closed)\");\n", 
            "-            }\n", 
            "-        } else if (ex instanceof HttpException) {\n", 
            "-            this.log.error(\"HTTP connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "-            this.handler.exception(conn, ex);\n", 
            "-        } else {\n", 
            "-            this.log.error(\"HTTP connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "-        }\n", 
            "-        this.handler.exception(conn, ex);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void requestReceived(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "-        HttpRequest request = conn.getHttpRequest();\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": \" + request.getRequestLine());\n", 
            "-        }\n", 
            "-        this.handler.requestReceived(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void outputReady(final NHttpServerConnection conn, final ContentEncoder encoder) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Output ready\");\n", 
            "-        }\n", 
            "-        this.handler.outputReady(conn, encoder);\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Content encoder \" + encoder);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void responseReady(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Response ready\");\n", 
            "-        }\n", 
            "-        this.handler.responseReady(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void inputReady(final NHttpServerConnection conn, final ContentDecoder decoder) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Input ready\");\n", 
            "-        }\n", 
            "-        this.handler.inputReady(conn, decoder);\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Content decoder \" + decoder);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void timeout(final NHttpServerConnection conn) throws IOException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Timeout\");\n", 
            "-        }\n", 
            "-        this.handler.timeout(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpServiceHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpServiceHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,127 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.nhttp;\n", 
            "-\n", 
            "-import java.io.IOException;\n", 
            "-\n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.HttpException;\n", 
            "-import org.apache.http.HttpResponse;\n", 
            "-import org.apache.http.nio.*;\n", 
            "-\n", 
            "-/**\n", 
            "- * Decorator class intended to transparently extend an {@link NHttpClientEventHandler}\n", 
            "- * with basic event logging capabilities using Commons Logging. \n", 
            "- */\n", 
            "-class LoggingNHttpClientHandler implements NHttpClientEventHandler {\n", 
            "-\n", 
            "-    private final Log log;\n", 
            "-    private final NHttpClientEventHandler handler;\n", 
            "-    \n", 
            "-    public LoggingNHttpClientHandler(\n", 
            "-            final Log log, \n", 
            "-            final NHttpClientEventHandler handler) {\n", 
            "-        super();\n", 
            "-        if (handler == null) {\n", 
            "-            throw new IllegalArgumentException(\"HTTP client handler may not be null\");\n", 
            "-        }\n", 
            "-        this.handler = handler;\n", 
            "-        this.log = LogFactory.getLog(handler.getClass());\n", 
            "-    }\n", 
            "-    \n", 
            "-    public void connected(final NHttpClientConnection conn, final Object attachment) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Connected (\" + attachment + \")\");\n", 
            "-        }\n", 
            "-        this.handler.connected(conn, attachment);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void closed(final NHttpClientConnection conn) {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Closed\");\n", 
            "-        }\n", 
            "-        this.handler.closed(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void endOfInput(NHttpClientConnection conn) throws IOException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Closed at remote end\");\n", 
            "-        }\n", 
            "-        this.handler.endOfInput(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void exception(NHttpClientConnection conn, Exception ex) {\n", 
            "-        this.log.error(\"HTTP connection \" + conn + \": \" + ex.getMessage(), ex);\n", 
            "-        this.handler.exception(conn, ex);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void requestReady(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Request ready\" + getRequestMessageID(conn));\n", 
            "-        }\n", 
            "-        this.handler.requestReady(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void outputReady(final NHttpClientConnection conn, final ContentEncoder encoder) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Output ready\" + getRequestMessageID(conn));\n", 
            "-        }\n", 
            "-        this.handler.outputReady(conn, encoder);\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Content encoder \" + encoder);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void responseReceived(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "-        HttpResponse response = conn.getHttpResponse();\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \" : \"\n", 
            "-                    + response.getStatusLine() + getRequestMessageID(conn));\n", 
            "-        }\n", 
            "-        this.handler.responseReceived(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    public void inputReady(final NHttpClientConnection conn, final ContentDecoder decoder) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Input ready\" + getRequestMessageID(conn));\n", 
            "-        }\n", 
            "-        this.handler.inputReady(conn, decoder);\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Content decoder \" + decoder);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    public void timeout(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "-        if (this.log.isDebugEnabled()) {\n", 
            "-            this.log.debug(\"HTTP connection \" + conn + \": Timeout\" + getRequestMessageID(conn));\n", 
            "-        }\n", 
            "-        this.handler.timeout(conn);\n", 
            "-    }\n", 
            "-\n", 
            "-    private static String getRequestMessageID(final NHttpClientConnection conn) {\n", 
            "-        Axis2HttpRequest axis2Request = (Axis2HttpRequest)\n", 
            "-                conn.getContext().getAttribute(ClientHandler.AXIS2_HTTP_REQUEST);\n", 
            "-        if (axis2Request != null) {\n", 
            "-            return \" [Request Message ID : \" + axis2Request.getMsgContext().getMessageID() + \"]\";\n", 
            "-        }\n", 
            "-        return \"\";\n", 
            "-    }\n", 
            "-}\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpClientHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/LoggingNHttpClientHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,64 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.nhttp;\n", 
            "-\n", 
            "-import javax.net.ssl.SSLContext;\n", 
            "-\n", 
            "-import org.apache.http.HttpRequestFactory;\n", 
            "-import org.apache.http.impl.nio.DefaultHttpServerIODispatch;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "-import org.apache.http.impl.nio.SSLNHttpServerConnectionFactory;\n", 
            "-import org.apache.http.nio.NHttpServerEventHandler;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-\n", 
            "-public class SSLServerIOEventDispatch\n", 
            "-        extends DefaultHttpServerIODispatch {\n", 
            "-\n", 
            "-    public SSLServerIOEventDispatch(\n", 
            "-            final NHttpServerEventHandler handler,\n", 
            "-            final SSLContext sslcontext,\n", 
            "-            final SSLSetupHandler sslHandler,\n", 
            "-            final HttpParams params) {\n", 
            "-        super(LoggingUtils.decorate(handler), new SSLSourceConnectionFactory(sslcontext, sslHandler, params));\n", 
            "-    }\n", 
            "-\n", 
            "-    private static class SSLSourceConnectionFactory extends SSLNHttpServerConnectionFactory {\n", 
            "-\n", 
            "-        public SSLSourceConnectionFactory(SSLContext sslcontext, SSLSetupHandler sslHandler, HttpParams params) {\n", 
            "-            super(sslcontext, sslHandler, params);\n", 
            "-        }\n", 
            "-\n", 
            "-        @Override\n", 
            "-        protected DefaultNHttpServerConnection createConnection(IOSession session,\n", 
            "-                                                                HttpRequestFactory requestFactory,\n", 
            "-                                                                ByteBufferAllocator allocator,\n", 
            "-                                                                HttpParams params) {\n", 
            "-            return LoggingUtils.createServerConnection(\n", 
            "-                    session,\n", 
            "-                    requestFactory,\n", 
            "-                    allocator,\n", 
            "-                    params);\n", 
            "-        }\n", 
            "-    }\n", 
            "-    \n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/SSLServerIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/SSLServerIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,56 +0,0", 
          "lines": [
            "-/*\n", 
            "- *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "- *  or more contributor license agreements.  See the NOTICE file\n", 
            "- *  distributed with this work for additional information\n", 
            "- *  regarding copyright ownership.  The ASF licenses this file\n", 
            "- *  to you under the Apache License, Version 2.0 (the\n", 
            "- *  \"License\"); you may not use this file except in compliance\n", 
            "- *  with the License.  You may obtain a copy of the License at\n", 
            "- *\n", 
            "- *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "- *\n", 
            "- *  Unless required by applicable law or agreed to in writing,\n", 
            "- *  software distributed under the License is distributed on an\n", 
            "- *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "- *  KIND, either express or implied.  See the License for the\n", 
            "- *  specific language governing permissions and limitations\n", 
            "- *  under the License.\n", 
            "- */\n", 
            "-\n", 
            "-package org.apache.synapse.transport.nhttp;\n", 
            "-\n", 
            "-import org.apache.http.HttpRequestFactory;\n", 
            "-import org.apache.http.impl.nio.DefaultHttpServerIODispatch;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "-import org.apache.http.impl.nio.DefaultNHttpServerConnectionFactory;\n", 
            "-import org.apache.http.nio.NHttpServerEventHandler;\n", 
            "-import org.apache.http.nio.reactor.IOSession;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-\n", 
            "-public class PlainServerIOEventDispatch extends DefaultHttpServerIODispatch {\n", 
            "-\n", 
            "-    public PlainServerIOEventDispatch(NHttpServerEventHandler handler, HttpParams params) {\n", 
            "-        super(LoggingUtils.decorate(handler), new SourceConnectionFactory(params));\n", 
            "-    }\n", 
            "-\n", 
            "-    private static class SourceConnectionFactory extends DefaultNHttpServerConnectionFactory {\n", 
            "-\n", 
            "-        public SourceConnectionFactory(HttpParams params) {\n", 
            "-            super(params);\n", 
            "-        }\n", 
            "-\n", 
            "-        @Override\n", 
            "-        protected DefaultNHttpServerConnection createConnection(IOSession session,\n", 
            "-                                                                HttpRequestFactory requestFactory,\n", 
            "-                                                                ByteBufferAllocator allocator,\n", 
            "-                                                                HttpParams params) {\n", 
            "-            return LoggingUtils.createServerConnection(\n", 
            "-                    session,\n", 
            "-                    requestFactory,\n", 
            "-                    allocator,\n", 
            "-                    params);\n", 
            "-        }\n", 
            "-    }\n", 
            "-    \n", 
            "-}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/PlainServerIOEventDispatch.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/PlainServerIOEventDispatch.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-53,13 +53,13", 
          "lines": [
            " \n", 
            "     private NhttpConnectionDebugConfig() {\n", 
            " \n", 
            "-        this.keyValueSeparator = NHttpConfiguration.getInstance().getStringValue(\n", 
            "+        this.keyValueSeparator = NHttpConfiguration.getInstance().getStringProperty(\n", 
            "                 KEY_VALUE_SEPARATOR_PROPERTY, DEFAULT_KEY_VALUE_SEPARATOR);\n", 
            "-        this.fieldSeparator = NHttpConfiguration.getInstance().getStringValue(\n", 
            "+        this.fieldSeparator = NHttpConfiguration.getInstance().getStringProperty(\n", 
            "                 FIELD_SEPARATOR_PROPERTY, DEFAULT_FIELD_SEPARATOR);\n", 
            "-        this.statementSeparator = NHttpConfiguration.getInstance().getStringValue(\n", 
            "+        this.statementSeparator = NHttpConfiguration.getInstance().getStringProperty(\n", 
            "                 STATEMENT_SEPARATOR_PROPERTY, DEFAULT_STATEMENT_SEPARATOR);\n", 
            "-        String headerSet = NHttpConfiguration.getInstance().getStringValue(\n", 
            "+        String headerSet = NHttpConfiguration.getInstance().getStringProperty(\n", 
            "                 HEADER_INFO_PROPERTY, HEADER_INFO_ALL);\n", 
            "         if (HEADER_INFO_NONE.equals(headerSet)) {\n", 
            "             this.noHeaders = true;\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/debug/NhttpConnectionDebugConfig.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/debug/NhttpConnectionDebugConfig.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-21,16 +21,17", 
          "lines": [
            " \n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.commons.logging.Log;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            " import org.apache.http.nio.NHttpClientEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOEventDispatch;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            " import org.apache.axis2.AxisFault;\n", 
            " import org.apache.axis2.description.Parameter;\n", 
            " import org.apache.axis2.description.TransportOutDescription;\n", 
            " import org.apache.axis2.transport.base.ParamUtils;\n", 
            " import org.apache.axiom.om.OMElement;\n", 
            "+import org.apache.synapse.transport.utils.logging.LoggingUtils;\n", 
            " import org.apache.synapse.transport.utils.sslcert.CertificateVerificationConfig;\n", 
            " import org.apache.synapse.transport.utils.sslcert.CertificateVerificationException;\n", 
            " import org.apache.synapse.transport.utils.sslcert.adaptor.SynapseAdaptorForOcspCrl;\n"
          ]
        }, 
        {
          "locn": "-54,11 +55,10", 
          "lines": [
            "     private static final SynapseAdaptorForOcspCrl ocspCrl = new SynapseAdaptorForOcspCrl();\n", 
            " \n", 
            "     protected IOEventDispatch getEventDispatch(NHttpClientEventHandler handler, SSLContext sslContext,\n", 
            "-        SSLSetupHandler sslIOSessionHandler, HttpParams params,\n", 
            "+        SSLSetupHandler sslSetupHandler, ConnectionConfig config,\n", 
            "         TransportOutDescription transportOut) throws AxisFault {\n", 
            "-\n", 
            "-        return new SSLClientIOEventDispatch(handler, sslContext,\n", 
            "-                getCustomSSLContexts(transportOut), sslIOSessionHandler, params);\n", 
            "+        return LoggingUtils.getClientIODispatch(handler, config, sslContext,\n", 
            "+                sslSetupHandler, getCustomSSLContexts(transportOut));\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-41,11 +41,12", 
          "lines": [
            " import org.apache.axis2.description.TransportInDescription;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            " import org.apache.http.nio.NHttpServerEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOEventDispatch;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "+import org.apache.synapse.transport.utils.logging.LoggingUtils;\n", 
            " \n", 
            " public class HttpCoreNIOSSLListener extends HttpCoreNIOListener {\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-53,14 +54,10", 
          "lines": [
            " \n", 
            "     protected IOEventDispatch getEventDispatch(\n", 
            "         NHttpServerEventHandler handler, SSLContext sslContext,\n", 
            "-        SSLSetupHandler sslIOSessionHandler, HttpParams params) {\n", 
            "-        return new SSLServerIOEventDispatch(handler, sslContext, sslIOSessionHandler, params);\n", 
            "+        SSLSetupHandler sslSetupHandler, ConnectionConfig config) {\n", 
            "+        return LoggingUtils.getServerIODispatch(handler, config, sslContext, sslSetupHandler);\n", 
            "     }\n", 
            " \n", 
            "-    /**\n", 
            "-     * Return the EPR prefix for services made available over this transport\n", 
            "-     * @return\n", 
            "-     */\n", 
            "     protected String getServiceEPRPrefix(ConfigurationContext cfgCtx, String host, int port) {\n", 
            "         return \"https://\" + host + (port == 443 ? \"\" : \":\" + port) +\n", 
            "             (!cfgCtx.getServiceContextPath().startsWith(\"/\") ? \"/\" : \"\") +\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLListener.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSSLListener.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-285,7 +285,7", 
          "lines": [
            "             RequestURIBasedDispatcher requestDispatcher = new RequestURIBasedDispatcher();\n", 
            "             AxisService axisService = requestDispatcher.findService(msgContext);\n", 
            "             if (axisService == null) {\n", 
            "-                String defaultSvcName = NHttpConfiguration.getInstance().getStringValue(\n", 
            "+                String defaultSvcName = NHttpConfiguration.getInstance().getStringProperty(\n", 
            "                         \"nhttp.default.service\", \"__SynapseService\");\n", 
            "                 axisService = msgContext.getConfigurationContext()\n", 
            "                         .getAxisConfiguration().getService(defaultSvcName);\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/util/RESTUtil.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/util/RESTUtil.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,37", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.config;\n", 
            "+\n", 
            "+public class HttpConfigConstants {\n", 
            "+\n", 
            "+    public static final String CONNECTION_TIMEOUT = \"http.connection.timeout\";\n", 
            "+    public static final String INTEREST_OPS_QUEUEING = \"http.nio.interest-ops-queueing\";\n", 
            "+    public static final String TCP_NODELAY = \"http.tcp.nodelay\";\n", 
            "+    public static final String SOCKET_BUFFER_SIZE = \"http.socket.buffer-size\";\n", 
            "+    public static final String SOCKET_RCV_BUFFER_SIZE = \"http.socket.rcv-buffer-size\";\n", 
            "+    public static final String SOCKET_SND_BUFFER_SIZE = \"http.socket.snd-buffer-size\";\n", 
            "+    public static final String SO_LINGER = \"http.socket.linger\";\n", 
            "+    public static final String SO_REUSEADDR = \"http.socket.reuseaddr\";\n", 
            "+    public static final String SO_TIMEOUT = \"http.socket.timeout\";\n", 
            "+    public static final String SELECT_INTERVAL = \"http.nio.select-interval\";\n", 
            "+\n", 
            "+    public static final String HTTP_MALFORMED_INPUT_ACTION = \"http.malformed.input.action\";\n", 
            "+    public static final String HTTP_UNMAPPABLE_INPUT_ACTION = \"http.unmappable.input.action\";\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/config/HttpConfigConstants.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/config/HttpConfigConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,53", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.logging;\n", 
            "+\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLMode;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "+\n", 
            "+import javax.net.ssl.SSLContext;\n", 
            "+\n", 
            "+public class LoggingNHttpSSLServerConnectionFactory extends LoggingNHttpServerConnectionFactory {\n", 
            "+\n", 
            "+    private SSLContext sslContext;\n", 
            "+    private SSLSetupHandler sslSetupHandler;\n", 
            "+\n", 
            "+    public LoggingNHttpSSLServerConnectionFactory(ConnectionConfig config, SSLContext sslContext,\n", 
            "+                                                  SSLSetupHandler sslSetupHandler) {\n", 
            "+        super(config);\n", 
            "+        this.sslContext = sslContext;\n", 
            "+        this.sslSetupHandler = sslSetupHandler;\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public DefaultNHttpServerConnection createConnection(IOSession session) {\n", 
            "+        final SSLIOSession ssliosession = new SSLIOSession(\n", 
            "+                session,\n", 
            "+                SSLMode.SERVER,\n", 
            "+                sslContext,\n", 
            "+                sslSetupHandler);\n", 
            "+        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);\n", 
            "+        return super.createConnection(ssliosession);\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpSSLServerConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpSSLServerConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,152", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.Header;\n", 
            "+import org.apache.http.HttpException;\n", 
            "+import org.apache.http.HttpRequest;\n", 
            "+import org.apache.http.HttpResponse;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            "+import org.apache.http.config.MessageConstraints;\n", 
            "+import org.apache.http.impl.ConnSupport;\n", 
            "+import org.apache.http.impl.entity.StrictContentLengthStrategy;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "+import org.apache.http.impl.nio.codecs.DefaultHttpRequestWriter;\n", 
            "+import org.apache.http.impl.nio.codecs.DefaultHttpResponseParser;\n", 
            "+import org.apache.http.nio.*;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            "+import org.apache.http.nio.reactor.SessionOutputBuffer;\n", 
            "+import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+\n", 
            "+public class LoggingNHttpClientConnectionFactory implements NHttpConnectionFactory<DefaultNHttpClientConnection> {\n", 
            "+\n", 
            "+    private static final Log targetConnLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.TARGET_CONNECTION_LOG_ID);\n", 
            "+    private static final Log targetHeaderLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.TARGET_HEADER_LOG_ID);\n", 
            "+    private static final Log targetSessionLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.TARGET_SESSION_LOG_ID);\n", 
            "+    private static final Log targetWireLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.TARGET_WIRE_LOG_ID);\n", 
            "+\n", 
            "+    private static final NHttpMessageWriterFactory<HttpRequest> requestWriterFactory =\n", 
            "+            new LoggingNHttpRequestWriterFactory();\n", 
            "+    private static final NHttpMessageParserFactory<HttpResponse> responseParserFactory =\n", 
            "+            new LoggingNHttpResponseParserFactory();\n", 
            "+\n", 
            "+    private final ConnectionConfig config;\n", 
            "+\n", 
            "+    public LoggingNHttpClientConnectionFactory(ConnectionConfig config) {\n", 
            "+        this.config = config;\n", 
            "+    }\n", 
            "+\n", 
            "+    public DefaultNHttpClientConnection createConnection(IOSession session) {\n", 
            "+        if (targetSessionLog.isDebugEnabled() || targetWireLog.isDebugEnabled()) {\n", 
            "+            session = new LoggingIOSession(targetSessionLog, targetWireLog,\n", 
            "+                    session, \"http-sender\");\n", 
            "+        }\n", 
            "+\n", 
            "+        if (targetConnLog.isDebugEnabled() || targetHeaderLog.isDebugEnabled()) {\n", 
            "+            return new LoggingNHttpClientConnection(\n", 
            "+                    session,\n", 
            "+                    config.getBufferSize(),\n", 
            "+                    config.getFragmentSizeHint(),\n", 
            "+                    HeapByteBufferAllocator.INSTANCE,\n", 
            "+                    ConnSupport.createDecoder(config),\n", 
            "+                    ConnSupport.createEncoder(config),\n", 
            "+                    config.getMessageConstraints(),\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    requestWriterFactory,\n", 
            "+                    responseParserFactory,\n", 
            "+                    targetConnLog);\n", 
            "+        } else {\n", 
            "+            return new DefaultNHttpClientConnection(\n", 
            "+                    session,\n", 
            "+                    config.getBufferSize(),\n", 
            "+                    config.getFragmentSizeHint(),\n", 
            "+                    HeapByteBufferAllocator.INSTANCE,\n", 
            "+                    ConnSupport.createDecoder(config),\n", 
            "+                    ConnSupport.createEncoder(config),\n", 
            "+                    config.getMessageConstraints(),\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    requestWriterFactory,\n", 
            "+                    responseParserFactory);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpRequestWriterFactory implements NHttpMessageWriterFactory<HttpRequest> {\n", 
            "+        public NHttpMessageWriter<HttpRequest> create(SessionOutputBuffer sessionBuffer) {\n", 
            "+            return new LoggingNHttpRequestWriter(sessionBuffer);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpResponseParserFactory implements NHttpMessageParserFactory<HttpResponse> {\n", 
            "+        public NHttpMessageParser<HttpResponse> create(SessionInputBuffer sessionBuffer,\n", 
            "+                                                      MessageConstraints messageConstraints) {\n", 
            "+            return new LoggingNHttpResponseParser(sessionBuffer, messageConstraints);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpRequestWriter extends DefaultHttpRequestWriter {\n", 
            "+\n", 
            "+        public LoggingNHttpRequestWriter(SessionOutputBuffer buffer) {\n", 
            "+            super(buffer);\n", 
            "+        }\n", 
            "+\n", 
            "+        public void write(final HttpRequest request) throws IOException, HttpException {\n", 
            "+            if (request != null && targetHeaderLog.isDebugEnabled()) {\n", 
            "+                targetHeaderLog.debug(\">> \" + request.getRequestLine().toString());\n", 
            "+                Header[] headers = request.getAllHeaders();\n", 
            "+                for (Header header : headers) {\n", 
            "+                    targetHeaderLog.debug(\">> \" + header.toString());\n", 
            "+                }\n", 
            "+            }\n", 
            "+            super.write(request);\n", 
            "+        }\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpResponseParser extends DefaultHttpResponseParser {\n", 
            "+\n", 
            "+        public LoggingNHttpResponseParser(SessionInputBuffer buffer, MessageConstraints constraints) {\n", 
            "+            super(buffer, constraints);\n", 
            "+        }\n", 
            "+\n", 
            "+        public HttpResponse parse() throws IOException, HttpException {\n", 
            "+            HttpResponse response = super.parse();\n", 
            "+            if (response != null && targetHeaderLog.isDebugEnabled()) {\n", 
            "+                targetHeaderLog.debug(\"<< \" + response.getStatusLine().toString());\n", 
            "+                Header[] headers = response.getAllHeaders();\n", 
            "+                for (Header header : headers) {\n", 
            "+                    targetHeaderLog.debug(\"<< \" + header.toString());\n", 
            "+                }\n", 
            "+            }\n", 
            "+            return response;\n", 
            "+        }\n", 
            "+\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpClientConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpClientConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,117", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.HttpException;\n", 
            "+import org.apache.http.HttpRequest;\n", 
            "+import org.apache.http.nio.ContentDecoder;\n", 
            "+import org.apache.http.nio.ContentEncoder;\n", 
            "+import org.apache.http.nio.NHttpServerConnection;\n", 
            "+import org.apache.http.nio.NHttpServerEventHandler;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+\n", 
            "+public class LoggingServerEventHandler implements NHttpServerEventHandler {\n", 
            "+\n", 
            "+    private final Log log;\n", 
            "+\n", 
            "+    private final NHttpServerEventHandler handler;\n", 
            "+\n", 
            "+    public LoggingServerEventHandler(final NHttpServerEventHandler handler) {\n", 
            "+        super();\n", 
            "+        if (handler == null) {\n", 
            "+            throw new IllegalArgumentException(\"HTTP service handler may not be null\");\n", 
            "+        }\n", 
            "+        this.handler = handler;\n", 
            "+        this.log = LogFactory.getLog(handler.getClass());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void connected(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Connected\");\n", 
            "+        }\n", 
            "+        this.handler.connected(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void closed(final NHttpServerConnection conn) {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Closed\");\n", 
            "+        }\n", 
            "+        this.handler.closed(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void endOfInput(NHttpServerConnection conn) throws IOException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Closed at the remote end\");\n", 
            "+        }\n", 
            "+        this.handler.endOfInput(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void exception(NHttpServerConnection conn, Exception ex) {\n", 
            "+        // No need to log errors at this level - Actual handler implementation\n", 
            "+        // should take care of that\n", 
            "+        this.handler.exception(conn, ex);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void requestReceived(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "+        HttpRequest request = conn.getHttpRequest();\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP InRequest Received on connection \" + conn + \": \"\n", 
            "+                    + request.getRequestLine());\n", 
            "+        }\n", 
            "+        this.handler.requestReceived(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void outputReady(final NHttpServerConnection conn, final ContentEncoder encoder) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Output ready\");\n", 
            "+        }\n", 
            "+        this.handler.outputReady(conn, encoder);\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Content encoder \" + encoder);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void responseReady(final NHttpServerConnection conn) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Response ready\");\n", 
            "+        }\n", 
            "+        this.handler.responseReady(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void inputReady(final NHttpServerConnection conn, final ContentDecoder decoder) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Input ready\");\n", 
            "+        }\n", 
            "+        this.handler.inputReady(conn, decoder);\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Content decoder \" + decoder);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void timeout(final NHttpServerConnection conn) throws IOException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Timeout\");\n", 
            "+        }\n", 
            "+        this.handler.timeout(conn);\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingServerEventHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingServerEventHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,187", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.config;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            "+import org.apache.http.impl.nio.reactor.IOReactorConfig;\n", 
            "+import org.apache.synapse.commons.util.MiscellaneousUtil;\n", 
            "+\n", 
            "+import java.nio.charset.CodingErrorAction;\n", 
            "+import java.util.Properties;\n", 
            "+\n", 
            "+public abstract class HttpTransportConfiguration {\n", 
            "+\n", 
            "+    protected Log log = LogFactory.getLog(this.getClass());\n", 
            "+\n", 
            "+    private Properties props;\n", 
            "+\n", 
            "+    public HttpTransportConfiguration(String fileName) {\n", 
            "+        try {\n", 
            "+            props = MiscellaneousUtil.loadProperties(fileName + \".properties\");\n", 
            "+        } catch (Exception ignored) {}\n", 
            "+    }\n", 
            "+\n", 
            "+    abstract protected int getThreadsPerReactor();\n", 
            "+\n", 
            "+    public IOReactorConfig getReactorConfig() {\n", 
            "+        IOReactorConfig.Builder builder = IOReactorConfig.custom()\n", 
            "+                .setIoThreadCount(getThreadsPerReactor())\n", 
            "+                .setSoTimeout(getIntProperty(HttpConfigConstants.SO_TIMEOUT, 60000))\n", 
            "+                .setConnectTimeout(getIntProperty(HttpConfigConstants.CONNECTION_TIMEOUT, 0))\n", 
            "+                .setInterestOpQueued(getBooleanProperty(HttpConfigConstants.INTEREST_OPS_QUEUEING, false))\n", 
            "+                .setTcpNoDelay(getBooleanProperty(HttpConfigConstants.TCP_NODELAY, true))\n", 
            "+                .setRcvBufSize(getIntProperty(HttpConfigConstants.SOCKET_RCV_BUFFER_SIZE, 8 * 1024))\n", 
            "+                .setSndBufSize(getIntProperty(HttpConfigConstants.SOCKET_SND_BUFFER_SIZE, 8 * 1024));\n", 
            "+\n", 
            "+        if (getIntProperty(HttpConfigConstants.SO_LINGER) != null) {\n", 
            "+            builder.setSoLinger(getIntProperty(HttpConfigConstants.SO_LINGER));\n", 
            "+        }\n", 
            "+\n", 
            "+        if (getBooleanProperty(HttpConfigConstants.SO_REUSEADDR) != null) {\n", 
            "+            builder.setSoReuseAddress(getBooleanProperty(HttpConfigConstants.SO_REUSEADDR));\n", 
            "+        }\n", 
            "+\n", 
            "+        if (getIntProperty(HttpConfigConstants.SELECT_INTERVAL) != null) {\n", 
            "+            builder.setSelectInterval(getIntProperty(HttpConfigConstants.SELECT_INTERVAL));\n", 
            "+        }\n", 
            "+        return builder.build();\n", 
            "+    }\n", 
            "+\n", 
            "+    public ConnectionConfig getConnectionConfig() {\n", 
            "+        return ConnectionConfig.custom()\n", 
            "+                .setBufferSize(getIntProperty(HttpConfigConstants.SOCKET_BUFFER_SIZE, 8 * 1024))\n", 
            "+                .setMalformedInputAction(getMalformedInputActionValue())\n", 
            "+                .setUnmappableInputAction(getUnMappableInputActionValue())\n", 
            "+                .build();\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Get an int property that tunes the http transport. Prefer system properties\n", 
            "+     *\n", 
            "+     * @param name name of the system/config property\n", 
            "+     * @param def  default value to return if the property is not set\n", 
            "+     * @return the value of the property to be used\n", 
            "+     */\n", 
            "+    public Integer getIntProperty(String name, Integer def) {\n", 
            "+        String val = System.getProperty(name);\n", 
            "+        if (val == null) {\n", 
            "+            val = props.getProperty(name);\n", 
            "+        }\n", 
            "+\n", 
            "+        if (val != null) {\n", 
            "+            int intVal;\n", 
            "+            try {\n", 
            "+                intVal = Integer.valueOf(val);\n", 
            "+            } catch (NumberFormatException e) {\n", 
            "+                log.warn(\"Invalid http tuning property value. \" + name + \" must be an integer\");\n", 
            "+                return def;\n", 
            "+            }\n", 
            "+            if (log.isDebugEnabled()) {\n", 
            "+                log.debug(\"Using http tuning parameter : \" + name + \" = \" + val);\n", 
            "+            }\n", 
            "+            return intVal;\n", 
            "+        }\n", 
            "+\n", 
            "+        return def;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Get an int property that tunes the http transport. Prefer system properties\n", 
            "+     *\n", 
            "+     * @param name name of the system/config property\n", 
            "+     * @return the value of the property, null if the property is not found\n", 
            "+     */\n", 
            "+    public Integer getIntProperty(String name) {\n", 
            "+        return getIntProperty(name, null);\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Get a boolean property that tunes the http transport. Prefer system properties\n", 
            "+     *\n", 
            "+     * @param name name of the system/config property\n", 
            "+     * @param def  default value to return if the property is not set\n", 
            "+     * @return the value of the property to be used\n", 
            "+     */\n", 
            "+    public Boolean getBooleanProperty(String name, Boolean def) {\n", 
            "+        String val = System.getProperty(name);\n", 
            "+        if (val == null) {\n", 
            "+            val = props.getProperty(name);\n", 
            "+        }\n", 
            "+\n", 
            "+        if (val != null) {\n", 
            "+            if (log.isDebugEnabled()) {\n", 
            "+                log.debug(\"Using http tuning parameter : \" + name + \" = \" + val);\n", 
            "+            }\n", 
            "+            return Boolean.valueOf(val);\n", 
            "+        }\n", 
            "+\n", 
            "+        return def;\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Get a Boolean property that tunes the http transport. Prefer system properties\n", 
            "+     *\n", 
            "+     * @param name name of the system/config property\n", 
            "+     * @return the value of the property, null if the property is not found\n", 
            "+     */\n", 
            "+    public Boolean getBooleanProperty(String name) {\n", 
            "+        return getBooleanProperty(name, null);\n", 
            "+    }\n", 
            "+\n", 
            "+    /**\n", 
            "+     * Get a String property that tunes the http transport. Prefer system properties\n", 
            "+     *\n", 
            "+     * @param name name of the system/config property\n", 
            "+     * @param def  default value to return if the property is not set\n", 
            "+     * @return the value of the property to be used\n", 
            "+     */\n", 
            "+    public String getStringProperty(String name, String def) {\n", 
            "+        String val = System.getProperty(name);\n", 
            "+        if (val == null) {\n", 
            "+            val = props.getProperty(name);\n", 
            "+        }\n", 
            "+\n", 
            "+        return val == null ? def : val;\n", 
            "+    }\n", 
            "+\n", 
            "+    private CodingErrorAction getMalformedInputActionValue() {\n", 
            "+        String val = getStringProperty(HttpConfigConstants.HTTP_MALFORMED_INPUT_ACTION, \"report\");\n", 
            "+        return getCodingErrorAction(val);\n", 
            "+    }\n", 
            "+\n", 
            "+    private CodingErrorAction getUnMappableInputActionValue() {\n", 
            "+        String val = getStringProperty(HttpConfigConstants.HTTP_UNMAPPABLE_INPUT_ACTION, \"report\");\n", 
            "+        return getCodingErrorAction(val);\n", 
            "+    }\n", 
            "+\n", 
            "+    private CodingErrorAction getCodingErrorAction(String action) {\n", 
            "+        if (\"report\".equals(action)) {\n", 
            "+            return CodingErrorAction.REPORT;\n", 
            "+        } else if (\"ignore\".equals(action)) {\n", 
            "+            return CodingErrorAction.IGNORE;\n", 
            "+        } else if (\"replace\".equals(action)) {\n", 
            "+            return CodingErrorAction.REPLACE;\n", 
            "+        } else {\n", 
            "+            return CodingErrorAction.REPORT;\n", 
            "+        }\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/config/HttpTransportConfiguration.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/config/HttpTransportConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,111", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+\n", 
            "+import java.nio.ByteBuffer;\n", 
            "+\n", 
            "+public class Wire {\n", 
            "+\n", 
            "+    private final Log log;\n", 
            "+\n", 
            "+    public Wire(final Log log) {\n", 
            "+        super();\n", 
            "+        this.log = log;\n", 
            "+    }\n", 
            "+\n", 
            "+    private void wire(final String header, final byte[] b, int pos, int off) {\n", 
            "+        StringBuilder buffer = new StringBuilder();\n", 
            "+        for (int i = 0; i < off; i++) {\n", 
            "+            int ch = b[pos + i];\n", 
            "+            if (ch == 13) {\n", 
            "+                buffer.append(\"[\\\\r]\");\n", 
            "+            } else if (ch == 10) {\n", 
            "+                buffer.append(\"[\\\\n]\\\"\");\n", 
            "+                buffer.insert(0, \"\\\"\");\n", 
            "+                buffer.insert(0, header);\n", 
            "+                this.log.debug(buffer.toString());\n", 
            "+                buffer.setLength(0);\n", 
            "+            } else if ((ch < 32) || (ch > 127)) {\n", 
            "+                buffer.append(\"[0x\");\n", 
            "+                buffer.append(Integer.toHexString(ch));\n", 
            "+                buffer.append(\"]\");\n", 
            "+            } else {\n", 
            "+                buffer.append((char) ch);\n", 
            "+            }\n", 
            "+        }\n", 
            "+        if (buffer.length() > 0) {\n", 
            "+            buffer.append('\\\"');\n", 
            "+            buffer.insert(0, '\\\"');\n", 
            "+            buffer.insert(0, header);\n", 
            "+            this.log.debug(buffer.toString());\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+\n", 
            "+    public boolean isEnabled() {\n", 
            "+        return this.log.isDebugEnabled();\n", 
            "+    }\n", 
            "+\n", 
            "+    public void output(final byte[] b, int pos, int off) {\n", 
            "+        wire(\"<< \", b, pos, off);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void input(final byte[] b, int pos, int off) {\n", 
            "+        wire(\">> \", b, pos, off);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void output(byte[] b) {\n", 
            "+        output(b, 0, b.length);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void input(byte[] b) {\n", 
            "+        input(b, 0, b.length);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void output(int b) {\n", 
            "+        output(new byte[] {(byte) b});\n", 
            "+    }\n", 
            "+\n", 
            "+    public void input(int b) {\n", 
            "+        input(new byte[] {(byte) b});\n", 
            "+    }\n", 
            "+\n", 
            "+    public void output(final ByteBuffer b) {\n", 
            "+        if (b.hasArray()) {\n", 
            "+            output(b.array(), b.arrayOffset() + b.position(), b.remaining());\n", 
            "+        } else {\n", 
            "+            byte[] tmp = new byte[b.remaining()];\n", 
            "+            b.get(tmp);\n", 
            "+            output(tmp);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void input(final ByteBuffer b) {\n", 
            "+        if (b.hasArray()) {\n", 
            "+            input(b.array(), b.arrayOffset() + b.position(), b.remaining());\n", 
            "+        } else {\n", 
            "+            byte[] tmp = new byte[b.remaining()];\n", 
            "+            b.get(tmp);\n", 
            "+            input(tmp);\n", 
            "+        }\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/Wire.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/Wire.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,93", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.http.HttpException;\n", 
            "+import org.apache.http.HttpRequest;\n", 
            "+import org.apache.http.HttpResponse;\n", 
            "+import org.apache.http.config.MessageConstraints;\n", 
            "+import org.apache.http.entity.ContentLengthStrategy;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "+import org.apache.http.nio.NHttpMessageParserFactory;\n", 
            "+import org.apache.http.nio.NHttpMessageWriterFactory;\n", 
            "+import org.apache.http.nio.NHttpServerEventHandler;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+import java.nio.charset.CharsetDecoder;\n", 
            "+import java.nio.charset.CharsetEncoder;\n", 
            "+\n", 
            "+public class LoggingNHttpServerConnection extends DefaultNHttpServerConnection {\n", 
            "+\n", 
            "+    private final Log log;\n", 
            "+\n", 
            "+    public LoggingNHttpServerConnection(IOSession session,\n", 
            "+                                        int bufferSize,\n", 
            "+                                        int fragmentSizeHint,\n", 
            "+                                        ByteBufferAllocator allocator,\n", 
            "+                                        CharsetDecoder charDecoder,\n", 
            "+                                        CharsetEncoder charEncoder,\n", 
            "+                                        MessageConstraints constraints,\n", 
            "+                                        ContentLengthStrategy incomingContentStrategy,\n", 
            "+                                        ContentLengthStrategy outgoingContentStrategy,\n", 
            "+                                        NHttpMessageParserFactory<HttpRequest> requestParserFactory,\n", 
            "+                                        NHttpMessageWriterFactory<HttpResponse> responseWriterFactory,\n", 
            "+                                        Log log) {\n", 
            "+        super(session, bufferSize, fragmentSizeHint, allocator,\n", 
            "+                charDecoder, charEncoder, constraints, incomingContentStrategy,\n", 
            "+                outgoingContentStrategy, requestParserFactory, responseWriterFactory);\n", 
            "+        this.log = log;\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void close() throws IOException {\n", 
            "+        this.log.debug(\"Close connection\");\n", 
            "+        super.close();\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void shutdown() throws IOException {\n", 
            "+        this.log.debug(\"Shutdown connection\");\n", 
            "+        super.shutdown();\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void submitResponse(final HttpResponse response) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + this + \": \"  + response.getStatusLine().toString());\n", 
            "+        }\n", 
            "+        super.submitResponse(response);\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void consumeInput(final NHttpServerEventHandler handler) {\n", 
            "+        this.log.debug(\"Consume input\");\n", 
            "+        super.consumeInput(handler);\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void produceOutput(final NHttpServerEventHandler handler) {\n", 
            "+        this.log.debug(\"Produce output\");\n", 
            "+        super.produceOutput(handler);\n", 
            "+    }\n", 
            "+\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpServerConnection.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpServerConnection.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,232", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.SessionBufferStatus;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+import java.net.SocketAddress;\n", 
            "+import java.nio.ByteBuffer;\n", 
            "+import java.nio.channels.ByteChannel;\n", 
            "+import java.nio.channels.SelectionKey;\n", 
            "+import java.util.concurrent.atomic.AtomicLong;\n", 
            "+\n", 
            "+public class LoggingIOSession implements IOSession {\n", 
            "+\n", 
            "+    private static AtomicLong COUNT = new AtomicLong(0);\n", 
            "+\n", 
            "+    private final Log sessionLog;\n", 
            "+    private final Wire wireLog;\n", 
            "+    private final IOSession session;\n", 
            "+    private final ByteChannel channel;\n", 
            "+    private final String id;\n", 
            "+\n", 
            "+    public LoggingIOSession(\n", 
            "+            final Log sessionLog,\n", 
            "+            final Log wireLog,\n", 
            "+            final IOSession session,\n", 
            "+            final String id) {\n", 
            "+        super();\n", 
            "+        if (session == null) {\n", 
            "+            throw new IllegalArgumentException(\"I/O session may not be null\");\n", 
            "+        }\n", 
            "+        this.session = session;\n", 
            "+        this.channel = new LoggingByteChannel();\n", 
            "+        this.id = id + \"-\" + COUNT.incrementAndGet();\n", 
            "+        this.sessionLog = sessionLog;\n", 
            "+        this.wireLog = new Wire(wireLog);\n", 
            "+    }\n", 
            "+\n", 
            "+    public int getStatus() {\n", 
            "+        return this.session.getStatus();\n", 
            "+    }\n", 
            "+\n", 
            "+    public ByteChannel channel() {\n", 
            "+        return this.channel;\n", 
            "+    }\n", 
            "+\n", 
            "+    public SocketAddress getLocalAddress() {\n", 
            "+        return this.session.getLocalAddress();\n", 
            "+    }\n", 
            "+\n", 
            "+    public SocketAddress getRemoteAddress() {\n", 
            "+        return this.session.getRemoteAddress();\n", 
            "+    }\n", 
            "+\n", 
            "+    public int getEventMask() {\n", 
            "+        return this.session.getEventMask();\n", 
            "+    }\n", 
            "+\n", 
            "+    private static String formatOps(int ops) {\n", 
            "+        StringBuilder buffer = new StringBuilder(6);\n", 
            "+        buffer.append('[');\n", 
            "+        if ((ops & SelectionKey.OP_READ) > 0) {\n", 
            "+            buffer.append('r');\n", 
            "+        }\n", 
            "+        if ((ops & SelectionKey.OP_WRITE) > 0) {\n", 
            "+            buffer.append('w');\n", 
            "+        }\n", 
            "+        if ((ops & SelectionKey.OP_ACCEPT) > 0) {\n", 
            "+            buffer.append('a');\n", 
            "+        }\n", 
            "+        if ((ops & SelectionKey.OP_CONNECT) > 0) {\n", 
            "+            buffer.append('c');\n", 
            "+        }\n", 
            "+        buffer.append(']');\n", 
            "+        return buffer.toString();\n", 
            "+    }\n", 
            "+\n", 
            "+    private String getPreamble() {\n", 
            "+        String preamble = \"I/O session \" + this.id + \" \" + this.session;\n", 
            "+        if (this.session instanceof SSLIOSession) {\n", 
            "+            return \"SSL \" + preamble;\n", 
            "+        } else {\n", 
            "+            return preamble;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setEventMask(int ops) {\n", 
            "+        if (sessionLog.isDebugEnabled()) {\n", 
            "+            sessionLog.debug(getPreamble() + \": Set event mask \" + formatOps(ops));\n", 
            "+        }\n", 
            "+        this.session.setEventMask(ops);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setEvent(int op) {\n", 
            "+        if (sessionLog.isDebugEnabled()) {\n", 
            "+            sessionLog.debug(getPreamble() + \": Set event \" + formatOps(op));\n", 
            "+        }\n", 
            "+        this.session.setEvent(op);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void clearEvent(int op) {\n", 
            "+        if (sessionLog.isDebugEnabled()) {\n", 
            "+            sessionLog.debug(getPreamble() + \": Clear event \" + formatOps(op));\n", 
            "+        }\n", 
            "+        this.session.clearEvent(op);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void close() {\n", 
            "+        if (sessionLog.isDebugEnabled()) {\n", 
            "+            sessionLog.debug(getPreamble() + \": Close\");\n", 
            "+        }\n", 
            "+        this.session.close();\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean isClosed() {\n", 
            "+        return this.session.isClosed();\n", 
            "+    }\n", 
            "+\n", 
            "+    public void shutdown() {\n", 
            "+        if (sessionLog.isDebugEnabled()) {\n", 
            "+            sessionLog.debug(getPreamble() + \": Shutdown\");\n", 
            "+        }\n", 
            "+        this.session.shutdown();\n", 
            "+    }\n", 
            "+\n", 
            "+    public int getSocketTimeout() {\n", 
            "+        return this.session.getSocketTimeout();\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setSocketTimeout(int timeout) {\n", 
            "+        if (sessionLog.isDebugEnabled()) {\n", 
            "+            sessionLog.debug(getPreamble() + \": Set timeout \" + timeout);\n", 
            "+        }\n", 
            "+        this.session.setSocketTimeout(timeout);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setBufferStatus(final SessionBufferStatus status) {\n", 
            "+        this.session.setBufferStatus(status);\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean hasBufferedInput() {\n", 
            "+        return this.session.hasBufferedInput();\n", 
            "+    }\n", 
            "+\n", 
            "+    public boolean hasBufferedOutput() {\n", 
            "+        return this.session.hasBufferedOutput();\n", 
            "+    }\n", 
            "+\n", 
            "+    public Object getAttribute(final String name) {\n", 
            "+        return this.session.getAttribute(name);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setAttribute(final String name, final Object obj) {\n", 
            "+        if (sessionLog.isDebugEnabled()) {\n", 
            "+            sessionLog.debug(getPreamble() + \": Set attribute \" + name);\n", 
            "+        }\n", 
            "+        this.session.setAttribute(name, obj);\n", 
            "+    }\n", 
            "+\n", 
            "+    public Object removeAttribute(final String name) {\n", 
            "+        if (sessionLog.isDebugEnabled()) {\n", 
            "+            sessionLog.debug(getPreamble() + \": Remove attribute \" + name);\n", 
            "+        }\n", 
            "+        return this.session.removeAttribute(name);\n", 
            "+    }\n", 
            "+\n", 
            "+    class LoggingByteChannel implements ByteChannel {\n", 
            "+\n", 
            "+        public int read(final ByteBuffer dst) throws IOException {\n", 
            "+            int bytesRead = session.channel().read(dst);\n", 
            "+            if (sessionLog.isDebugEnabled()) {\n", 
            "+                sessionLog.debug(getPreamble() + \": \" + bytesRead + \" bytes read\");\n", 
            "+            }\n", 
            "+            if (bytesRead > 0 && wireLog.isEnabled()) {\n", 
            "+                ByteBuffer b = dst.duplicate();\n", 
            "+                int p = b.position();\n", 
            "+                b.limit(p);\n", 
            "+                b.position(p - bytesRead);\n", 
            "+                wireLog.input(b);\n", 
            "+            }\n", 
            "+            return bytesRead;\n", 
            "+        }\n", 
            "+\n", 
            "+        public int write(final ByteBuffer src) throws IOException {\n", 
            "+            int byteWritten = session.channel().write(src);\n", 
            "+            if (sessionLog.isDebugEnabled()) {\n", 
            "+                sessionLog.debug(getPreamble() + \": \" + byteWritten + \" bytes written\");\n", 
            "+            }\n", 
            "+            if (byteWritten > 0 && wireLog.isEnabled()) {\n", 
            "+                ByteBuffer b = src.duplicate();\n", 
            "+                int p = b.position();\n", 
            "+                b.limit(p);\n", 
            "+                b.position(p - byteWritten);\n", 
            "+                wireLog.output(b);\n", 
            "+            }\n", 
            "+            return byteWritten;\n", 
            "+        }\n", 
            "+\n", 
            "+        public void close() throws IOException {\n", 
            "+            if (sessionLog.isDebugEnabled()) {\n", 
            "+                sessionLog.debug(getPreamble() + \": Channel close\");\n", 
            "+            }\n", 
            "+            session.channel().close();\n", 
            "+        }\n", 
            "+\n", 
            "+        public boolean isOpen() {\n", 
            "+            return session.channel().isOpen();\n", 
            "+        }\n", 
            "+\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingIOSession.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingIOSession.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,150", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.Header;\n", 
            "+import org.apache.http.HttpException;\n", 
            "+import org.apache.http.HttpRequest;\n", 
            "+import org.apache.http.HttpResponse;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            "+import org.apache.http.config.MessageConstraints;\n", 
            "+import org.apache.http.impl.ConnSupport;\n", 
            "+import org.apache.http.impl.entity.StrictContentLengthStrategy;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpServerConnection;\n", 
            "+import org.apache.http.impl.nio.codecs.DefaultHttpRequestParser;\n", 
            "+import org.apache.http.impl.nio.codecs.DefaultHttpResponseWriter;\n", 
            "+import org.apache.http.nio.*;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.SessionInputBuffer;\n", 
            "+import org.apache.http.nio.reactor.SessionOutputBuffer;\n", 
            "+import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+\n", 
            "+public class LoggingNHttpServerConnectionFactory implements NHttpConnectionFactory<DefaultNHttpServerConnection> {\n", 
            "+\n", 
            "+    private static final Log sourceConnLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.SOURCE_CONNECTION_LOG_ID);\n", 
            "+    private static final Log sourceHeaderLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.SOURCE_HEADER_LOG_ID);\n", 
            "+    private static final Log sourceSessionLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.SOURCE_SESSION_LOG_ID);\n", 
            "+    private static final Log sourceWireLog = LogFactory.getLog(\n", 
            "+            LoggingConstants.SOURCE_WIRE_LOG_ID);\n", 
            "+\n", 
            "+    private static final NHttpMessageParserFactory<HttpRequest> requestParserFactory =\n", 
            "+            new LoggingNHttpRequestParserFactory();\n", 
            "+    private static final NHttpMessageWriterFactory<HttpResponse> responseWriterFactory =\n", 
            "+            new LoggingNHttpResponseWriterFactory();\n", 
            "+\n", 
            "+    private final ConnectionConfig config;\n", 
            "+\n", 
            "+    public LoggingNHttpServerConnectionFactory(ConnectionConfig config) {\n", 
            "+        this.config = config;\n", 
            "+    }\n", 
            "+\n", 
            "+    public DefaultNHttpServerConnection createConnection(IOSession session) {\n", 
            "+        if (sourceSessionLog.isDebugEnabled() || sourceWireLog.isDebugEnabled()) {\n", 
            "+            session = new LoggingIOSession(sourceSessionLog, sourceWireLog,\n", 
            "+                    session, \"http-listener\");\n", 
            "+        }\n", 
            "+\n", 
            "+        if (sourceConnLog.isDebugEnabled()) {\n", 
            "+            return new LoggingNHttpServerConnection(\n", 
            "+                    session,\n", 
            "+                    config.getBufferSize(),\n", 
            "+                    config.getFragmentSizeHint(),\n", 
            "+                    HeapByteBufferAllocator.INSTANCE,\n", 
            "+                    ConnSupport.createDecoder(config),\n", 
            "+                    ConnSupport.createEncoder(config),\n", 
            "+                    config.getMessageConstraints(),\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    requestParserFactory,\n", 
            "+                    responseWriterFactory,\n", 
            "+                    sourceConnLog);\n", 
            "+        } else {\n", 
            "+            return new DefaultNHttpServerConnection(\n", 
            "+                    session,\n", 
            "+                    config.getBufferSize(),\n", 
            "+                    config.getFragmentSizeHint(),\n", 
            "+                    HeapByteBufferAllocator.INSTANCE,\n", 
            "+                    ConnSupport.createDecoder(config),\n", 
            "+                    ConnSupport.createEncoder(config),\n", 
            "+                    config.getMessageConstraints(),\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    StrictContentLengthStrategy.INSTANCE,\n", 
            "+                    requestParserFactory,\n", 
            "+                    responseWriterFactory);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpRequestParserFactory implements NHttpMessageParserFactory<HttpRequest> {\n", 
            "+        public NHttpMessageParser<HttpRequest> create(SessionInputBuffer sessionBuffer,\n", 
            "+                                                      MessageConstraints messageConstraints) {\n", 
            "+            return new LoggingNHttpRequestParser(sessionBuffer, messageConstraints);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpResponseWriterFactory implements NHttpMessageWriterFactory<HttpResponse> {\n", 
            "+        public NHttpMessageWriter<HttpResponse> create(SessionOutputBuffer sessionBuffer) {\n", 
            "+            return new LoggingNHttpResponseWriter(sessionBuffer);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpRequestParser extends DefaultHttpRequestParser {\n", 
            "+\n", 
            "+        public LoggingNHttpRequestParser(SessionInputBuffer buffer, MessageConstraints constraints) {\n", 
            "+            super(buffer, constraints);\n", 
            "+        }\n", 
            "+\n", 
            "+        public HttpRequest parse() throws IOException, HttpException {\n", 
            "+            HttpRequest request = super.parse();\n", 
            "+            if (request != null && sourceHeaderLog.isDebugEnabled()) {\n", 
            "+                sourceHeaderLog.debug(\">> \" + request.getRequestLine().toString());\n", 
            "+                Header[] headers = request.getAllHeaders();\n", 
            "+                for (Header header : headers) {\n", 
            "+                    sourceHeaderLog.debug(\">> \" + header.toString());\n", 
            "+                }\n", 
            "+            }\n", 
            "+            return request;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    static class LoggingNHttpResponseWriter extends DefaultHttpResponseWriter {\n", 
            "+\n", 
            "+        public LoggingNHttpResponseWriter(SessionOutputBuffer buffer) {\n", 
            "+            super(buffer);\n", 
            "+        }\n", 
            "+\n", 
            "+        public void write(final HttpResponse response) throws IOException, HttpException {\n", 
            "+            if (response != null && sourceHeaderLog.isDebugEnabled()) {\n", 
            "+                sourceHeaderLog.debug(\"<< \" + response.getStatusLine().toString());\n", 
            "+                Header[] headers = response.getAllHeaders();\n", 
            "+                for (Header header : headers) {\n", 
            "+                    sourceHeaderLog.debug(\"<< \" + header.toString());\n", 
            "+                }\n", 
            "+            }\n", 
            "+            super.write(response);\n", 
            "+        }\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpServerConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpServerConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,92", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.http.HttpException;\n", 
            "+import org.apache.http.HttpRequest;\n", 
            "+import org.apache.http.HttpResponse;\n", 
            "+import org.apache.http.config.MessageConstraints;\n", 
            "+import org.apache.http.entity.ContentLengthStrategy;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "+import org.apache.http.nio.NHttpMessageParserFactory;\n", 
            "+import org.apache.http.nio.NHttpMessageWriterFactory;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+import java.nio.charset.CharsetDecoder;\n", 
            "+import java.nio.charset.CharsetEncoder;\n", 
            "+\n", 
            "+public class LoggingNHttpClientConnection extends DefaultNHttpClientConnection {\n", 
            "+\n", 
            "+    private final Log log;\n", 
            "+\n", 
            "+    public LoggingNHttpClientConnection(IOSession session,\n", 
            "+                                        int bufferSize,\n", 
            "+                                        int fragmentSizeHint,\n", 
            "+                                        ByteBufferAllocator allocator,\n", 
            "+                                        CharsetDecoder charDecoder,\n", 
            "+                                        CharsetEncoder charEncoder,\n", 
            "+                                        MessageConstraints constraints,\n", 
            "+                                        ContentLengthStrategy incomingContentStrategy,\n", 
            "+                                        ContentLengthStrategy outgoingContentStrategy,\n", 
            "+                                        NHttpMessageWriterFactory<HttpRequest> requestWriterFactory,\n", 
            "+                                        NHttpMessageParserFactory<HttpResponse> responseParserFactory,\n", 
            "+                                        Log log) {\n", 
            "+        super(session, bufferSize, fragmentSizeHint, allocator,\n", 
            "+                charDecoder, charEncoder, constraints, incomingContentStrategy,\n", 
            "+                outgoingContentStrategy, requestWriterFactory, responseParserFactory);\n", 
            "+        this.log = log;\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void close() throws IOException {\n", 
            "+        this.log.debug(\"Close connection\");\n", 
            "+        super.close();\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void shutdown() throws IOException {\n", 
            "+        this.log.debug(\"Shutdown connection\");\n", 
            "+        super.shutdown();\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void submitRequest(final HttpRequest request) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + this + \": \"  + request.getRequestLine().toString());\n", 
            "+        }\n", 
            "+        super.submitRequest(request);\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void consumeInput(final NHttpClientEventHandler handler) {\n", 
            "+        this.log.debug(\"Consume input\");\n", 
            "+        super.consumeInput(handler);\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public void produceOutput(final NHttpClientEventHandler handler) {\n", 
            "+        this.log.debug(\"Produce output\");\n", 
            "+        super.produceOutput(handler);\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpClientConnection.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpClientConnection.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1121,7 +1121,7", 
          "lines": [
            "         <truezip.version>6.6</truezip.version>\n", 
            "         <jsch.version>0.1.31</jsch.version>\n", 
            "         <jms-1.1-spec.version>1.1</jms-1.1-spec.version>\n", 
            "-        <httpcore.nio.version>4.2.4</httpcore.nio.version>\n", 
            "+        <httpcore.nio.version>4.3</httpcore.nio.version>\n", 
            "         <http.client.version>4.1</http.client.version>\n", 
            "         <aspectj.version>1.6.1</aspectj.version>\n", 
            "         <qfj.version>1.4.0</qfj.version>\n"
          ]
        }
      ], 
      "to": "java/pom.xml", 
      "from": "java/pom.xml"
    }, 
    {
      "chunks": [
        {
          "locn": "-21,18 +21,22", 
          "lines": [
            " \n", 
            " #http.socket.timeout=60000\n", 
            " #http.socket.buffer-size=8192\n", 
            "-#http.tcp.nodelay=1\n", 
            "+#http.socket.rcv-buffer-size=8192\n", 
            "+#http.socket.snd-buffer-size=8192\n", 
            "+#http.tcp.nodelay=true\n", 
            " #http.connection.stalecheck=0\n", 
            " \n", 
            " # Uncomment the following property for an AIX based deployment\n", 
            " #http.nio.interest-ops-queueing=true\n", 
            " \n", 
            "+# Number of I/O dispatcher threads that should be used by each IOReactor\n", 
            "+#io_threads_per_reactor=2\n", 
            "+\n", 
            " # HTTP Listener thread pool parameters\n", 
            " #snd_t_core=20\n", 
            " #snd_t_max=100\n", 
            " #snd_alive_sec=5\n", 
            " #snd_qlen=-1\n", 
            "-#snd_io_threads=2\n", 
            " \n", 
            " # HTTP Sender thread pool parameters\n", 
            " #lst_t_core=20\n"
          ]
        }, 
        {
          "locn": "-39,4 +43,3", 
          "lines": [
            " #lst_t_max=100\n", 
            " #lst_alive_sec=5\n", 
            " #lst_qlen=-1\n", 
            "-#lst_io_threads=2\n"
          ]
        }
      ], 
      "to": "java/repository/conf/nhttp.properties", 
      "from": "java/repository/conf/nhttp.properties"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,83", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.config;\n", 
            "+\n", 
            "+import junit.framework.TestCase;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            "+import org.apache.http.impl.nio.reactor.IOReactorConfig;\n", 
            "+\n", 
            "+import java.nio.charset.CodingErrorAction;\n", 
            "+\n", 
            "+public class HttpTransportConfigurationTest extends TestCase {\n", 
            "+\n", 
            "+    public void testDefaults() {\n", 
            "+        HttpTransportConfiguration config = new SimpleHttpTransportConfiguration(\"bogus\");\n", 
            "+        assertEquals(10, (int) config.getIntProperty(\"foo\", 10));\n", 
            "+        assertEquals(\"barValue\", config.getStringProperty(\"bar\", \"barValue\"));\n", 
            "+        assertEquals(true, (boolean) config.getBooleanProperty(\"baz\", true));\n", 
            "+\n", 
            "+        IOReactorConfig reactorConfig = config.getReactorConfig();\n", 
            "+        assertEquals(2, reactorConfig.getIoThreadCount());\n", 
            "+        assertEquals(0, reactorConfig.getConnectTimeout());\n", 
            "+        assertEquals(1024 * 8, reactorConfig.getRcvBufSize());\n", 
            "+        assertEquals(1024 * 8, reactorConfig.getSndBufSize());\n", 
            "+        assertEquals(60000, reactorConfig.getSoTimeout());\n", 
            "+        assertEquals(true, reactorConfig.isTcpNoDelay());\n", 
            "+        assertEquals(false, reactorConfig.isInterestOpQueued());\n", 
            "+\n", 
            "+        ConnectionConfig connConfig = config.getConnectionConfig();\n", 
            "+        assertEquals(1024 * 8, connConfig.getBufferSize());\n", 
            "+        assertEquals(CodingErrorAction.REPORT, connConfig.getMalformedInputAction());\n", 
            "+        assertEquals(CodingErrorAction.REPORT, connConfig.getUnmappableInputAction());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void testNHttp() {\n", 
            "+        HttpTransportConfiguration config = new SimpleHttpTransportConfiguration(\"nhttp\");\n", 
            "+        assertEquals(1000, (int) config.getIntProperty(\"test.foo\", -1));\n", 
            "+        assertEquals(\"Testing\", config.getStringProperty(\"test.bar\", \"NotTesting\"));\n", 
            "+        assertEquals(true, (boolean) config.getBooleanProperty(\"test.baz\", false));\n", 
            "+\n", 
            "+        IOReactorConfig reactorConfig = config.getReactorConfig();\n", 
            "+        assertEquals(true, reactorConfig.isSoReuseAddress());\n", 
            "+        assertEquals(2, reactorConfig.getIoThreadCount());\n", 
            "+        assertEquals(0, reactorConfig.getConnectTimeout());\n", 
            "+        assertEquals(1024 * 8, reactorConfig.getRcvBufSize());\n", 
            "+        assertEquals(1024 * 8, reactorConfig.getSndBufSize());\n", 
            "+        assertEquals(60000, reactorConfig.getSoTimeout());\n", 
            "+        assertEquals(true, reactorConfig.isTcpNoDelay());\n", 
            "+        assertEquals(false, reactorConfig.isInterestOpQueued());\n", 
            "+\n", 
            "+        ConnectionConfig connConfig = config.getConnectionConfig();\n", 
            "+        assertEquals(1024 * 8, connConfig.getBufferSize());\n", 
            "+        assertEquals(CodingErrorAction.REPORT, connConfig.getMalformedInputAction());\n", 
            "+        assertEquals(CodingErrorAction.REPORT, connConfig.getUnmappableInputAction());\n", 
            "+    }\n", 
            "+\n", 
            "+    class SimpleHttpTransportConfiguration extends HttpTransportConfiguration {\n", 
            "+        public SimpleHttpTransportConfiguration(String fileName) {\n", 
            "+            super(fileName);\n", 
            "+        }\n", 
            "+\n", 
            "+        @Override\n", 
            "+        protected int getThreadsPerReactor() {\n", 
            "+            return 2;\n", 
            "+        }\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/test/java/org/apache/synapse/transport/utils/config/HttpTransportConfigurationTest.java", 
      "from": "java/modules/transports/core/nhttp/src/test/java/org/apache/synapse/transport/utils/config/HttpTransportConfigurationTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,8 +1,13", 
          "lines": [
            " http.socket.timeout=60000\n", 
            " http.connection.timeout=0\n", 
            "-http.socket.buffer-size=8096\n", 
            "-http.tcp.nodelay=1\n", 
            "+http.socket.buffer-size=8192\n", 
            "+http.tcp.nodelay=true\n", 
            " http.nio.interest-ops-queueing=false\n", 
            " \n", 
            " # This property is crucial for automated tests\n", 
            "-http.socket.reuseaddr=true\n", 
            "\\ No newline at end of file\n", 
            "+http.socket.reuseaddr=true\n", 
            "+\n", 
            "+# Used by HttpTransportConfiguration tests\n", 
            "+test.foo=1000\n", 
            "+test.bar=Testing\n", 
            "+test.baz=true\n", 
            "\\ No newline at end of file\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/test/resources/nhttp.properties", 
      "from": "java/modules/transports/core/nhttp/src/test/resources/nhttp.properties"
    }, 
    {
      "chunks": [
        {
          "locn": "-37,6 +37,7", 
          "lines": [
            " import org.apache.axis2.util.JavaUtils;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            " import org.apache.http.impl.nio.reactor.DefaultListeningIOReactor;\n", 
            " import org.apache.http.nio.NHttpServerEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOEventDispatch;\n"
          ]
        }, 
        {
          "locn": "-44,11 +45,11", 
          "lines": [
            " import org.apache.http.nio.reactor.IOReactorExceptionHandler;\n", 
            " import org.apache.http.nio.reactor.ListenerEndpoint;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            " import org.apache.synapse.commons.jmx.MBeanRegistrar;\n", 
            " import org.apache.synapse.transport.passthru.config.SourceConfiguration;\n", 
            " import org.apache.synapse.transport.passthru.jmx.PassThroughTransportMetricsCollector;\n", 
            " import org.apache.synapse.transport.passthru.jmx.TransportView;\n", 
            "+import org.apache.synapse.transport.utils.logging.LoggingUtils;\n", 
            " \n", 
            " import javax.net.ssl.SSLContext;\n", 
            " import java.io.IOException;\n"
          ]
        }, 
        {
          "locn": "-111,12 +112,10", 
          "lines": [
            "         // is this a SSL listener?\n", 
            "         sslContext = getSSLContext(transportInDescription);\n", 
            "         sslSetupHandler = getSSLSetupHandler(transportInDescription);\n", 
            "-\n", 
            "         namePrefix = (sslContext == null) ? \"HTTP\" : \"HTTPS\";\n", 
            " \n", 
            "-        sourceConfiguration = new SourceConfiguration(cfgCtx, transportInDescription, workerPool);\n", 
            "-        sourceConfiguration.setSsl(sslContext != null);\n", 
            "-        sourceConfiguration.build();\n", 
            "+        sourceConfiguration = new SourceConfiguration(cfgCtx, transportInDescription,\n", 
            "+                workerPool, sslContext != null);\n", 
            " \n", 
            "         // register to receive updates on services for lifetime management\n", 
            "         cfgCtx.getAxisConfiguration().addObservers(axisObserver);\n"
          ]
        }, 
        {
          "locn": "-164,7 +163,7", 
          "lines": [
            " \n", 
            "         SourceHandler handler = new SourceHandler(sourceConfiguration);\n", 
            "         final IOEventDispatch ioEventDispatch = getEventDispatch(handler, sslContext,\n", 
            "-                sslSetupHandler, sourceConfiguration.getHttpParameters());\n", 
            "+                sslSetupHandler, sourceConfiguration.getConnectionConfig());\n", 
            " \n", 
            "         ListenerEndpoint endpoint = ioReactor.listen(new InetSocketAddress(\n", 
            "                 sourceConfiguration.getPort()));\n"
          ]
        }, 
        {
          "locn": "-320,9 +319,8", 
          "lines": [
            "         public void init(AxisConfiguration axisConfig) {}\n", 
            " \n", 
            "         public void serviceUpdate(AxisEvent event, AxisService service) {\n", 
            "-            if (!ignoreService(service)\n", 
            "-                    && BaseUtils.isUsingTransport(service,\n", 
            "-                    sourceConfiguration.getInDescription().getName())) {\n", 
            "+            if (!ignoreService(service) && BaseUtils.isUsingTransport(\n", 
            "+                    service, sourceConfiguration.getTransportName())) {\n", 
            "                 switch (event.getEventType()) {\n", 
            "                     case AxisEvent.SERVICE_DEPLOY :\n", 
            "                         addToServiceURIMap(service);\n"
          ]
        }, 
        {
          "locn": "-375,8 +373,8", 
          "lines": [
            " \n", 
            "     protected IOEventDispatch getEventDispatch(\n", 
            "             NHttpServerEventHandler handler, SSLContext sslContext,\n", 
            "-            SSLSetupHandler sslSetupHandler, HttpParams params) {\n", 
            "-        return new SourceIOEventDispatch(handler, params);\n", 
            "+            SSLSetupHandler sslSetupHandler, ConnectionConfig config) {\n", 
            "+        return LoggingUtils.getServerIODispatch(handler, config);\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpListener.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpListener.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-24,7 +24,6", 
          "lines": [
            " import org.apache.http.impl.DefaultConnectionReuseStrategy;\n", 
            " import org.apache.http.nio.ContentEncoder;\n", 
            " import org.apache.http.nio.NHttpServerConnection;\n", 
            "-import org.apache.http.params.DefaultedHttpParams;\n", 
            " import org.apache.http.protocol.ExecutionContext;\n", 
            " import org.apache.http.protocol.HTTP;\n", 
            " import org.apache.synapse.transport.passthru.config.SourceConfiguration;\n"
          ]
        }, 
        {
          "locn": "-127,9 +126,6", 
          "lines": [
            "             }\n", 
            "         }\n", 
            " \n", 
            "-        response.setParams(new DefaultedHttpParams(response.getParams(),\n", 
            "-                sourceConfiguration.getHttpParameters()));\n", 
            "-\n", 
            "         SourceContext.updateState(conn, ProtocolState.RESPONSE_HEAD);\n", 
            " \n", 
            "         // Pre-process HTTP response\n"
          ]
        }, 
        {
          "locn": "-165,7 +161,6", 
          "lines": [
            " \n", 
            "             if (!this.connStrategy.keepAlive(response, conn.getContext())) {\n", 
            "                 SourceContext.updateState(conn, ProtocolState.CLOSING);\n", 
            "-\n", 
            "                 sourceConfiguration.getSourceConnections().closeConnection(conn);\n", 
            "             } else if (SourceContext.get(conn).isShutDown()) {\n", 
            "                 // we need to shut down if the shutdown flag is set\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceResponse.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceResponse.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-459,6 +459,7", 
          "lines": [
            "         } else if (e instanceof IOException) {\n", 
            "             exception(conn, (IOException) e);\n", 
            "         } else {\n", 
            "+            log.error(\"Unexpected exception encountered in TargetHandler\", e);\n", 
            "             ProtocolState state = TargetContext.getState(conn);\n", 
            "             MessageContext requestMsgCtx = TargetContext.get(conn).getRequestMsgCtx();\n", 
            "             if (requestMsgCtx != null) {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-19,19 +19,14", 
          "lines": [
            " \n", 
            " package org.apache.synapse.transport.passthru.config;\n", 
            " \n", 
            "-import org.apache.axis2.AxisFault;\n", 
            " import org.apache.axis2.context.ConfigurationContext;\n", 
            " import org.apache.axis2.description.ParameterInclude;\n", 
            " import org.apache.axis2.transport.base.threads.WorkerPool;\n", 
            " import org.apache.axis2.transport.base.threads.WorkerPoolFactory;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            " import org.apache.http.impl.nio.reactor.IOReactorConfig;\n", 
            "-import org.apache.http.nio.params.NIOReactorPNames;\n", 
            "-import org.apache.http.nio.params.NIOReactorParams;\n", 
            " import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            "-import org.apache.http.params.BasicHttpParams;\n", 
            "-import org.apache.http.params.HttpConnectionParams;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-import org.apache.http.params.HttpProtocolParams;\n", 
            "+import org.apache.http.protocol.HttpProcessor;\n", 
            " import org.apache.synapse.transport.passthru.jmx.PassThroughTransportMetricsCollector;\n", 
            " import org.apache.synapse.transport.passthru.util.BufferFactory;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-49,16 +44,13", 
          "lines": [
            "     private WorkerPool workerPool = null;\n", 
            " \n", 
            "     /** The Axis2 ConfigurationContext */\n", 
            "-    protected ConfigurationContext configurationContext = null;\n", 
            "+    private ConfigurationContext configurationContext = null;\n", 
            " \n", 
            "-    /** Default http parameters */\n", 
            "-    protected HttpParams httpParameters = null;\n", 
            "+    private BufferFactory bufferFactory = null;\n", 
            " \n", 
            "-    protected BufferFactory bufferFactory = null;\n", 
            "-\n", 
            "     private PassThroughTransportMetricsCollector metrics = null;\n", 
            " \n", 
            "-    private int iOThreadsPerReactor;\n", 
            "+    private HttpProcessor httpProcessor;\n", 
            " \n", 
            "     protected PassThroughConfiguration conf = PassThroughConfiguration.getInstance();\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-66,56 +58,32", 
          "lines": [
            "                              ParameterInclude parameters,\n", 
            "                              WorkerPool workerPool) {\n", 
            "         this.parameters = parameters;\n", 
            "-        this.workerPool = workerPool;\n", 
            "         this.configurationContext = configurationContext;\n", 
            "-    }\n", 
            "-\n", 
            "-    public void build() throws AxisFault {\n", 
            "-        iOThreadsPerReactor = conf.getIOThreadsPerReactor();\n", 
            "-\n", 
            "         if (workerPool == null) {\n", 
            "-            workerPool = WorkerPoolFactory.getWorkerPool(\n", 
            "-                            conf.getWorkerPoolCoreSize(),\n", 
            "-                            conf.getWorkerPoolMaxSize(),\n", 
            "-                            conf.getWorkerThreadKeepaliveSec(),\n", 
            "-                            conf.getWorkerPoolQueueLen(),\n", 
            "-                            \"Pass-through Message Processing Thread Group\",\n", 
            "-                            \"PassThroughMessageProcessor\");\n", 
            "+            this.workerPool = WorkerPoolFactory.getWorkerPool(\n", 
            "+                    conf.getWorkerPoolCoreSize(),\n", 
            "+                    conf.getWorkerPoolMaxSize(),\n", 
            "+                    conf.getWorkerThreadKeepaliveSec(),\n", 
            "+                    conf.getWorkerPoolQueueLen(),\n", 
            "+                    \"Pass-through Message Processing Thread Group\",\n", 
            "+                    \"PassThroughMessageProcessor\");\n", 
            "+        } else {\n", 
            "+            this.workerPool = workerPool;\n", 
            "         }\n", 
            " \n", 
            "-        httpParameters = retrieveHttpParameters();\n", 
            "-        bufferFactory = new BufferFactory(conf.getIOBufferSize(), new HeapByteBufferAllocator(), 512);\n", 
            "+        int bufferSize = conf.getIntProperty(PassThroughConfigPNames.IO_BUFFER_SIZE, 1024 * 8);\n", 
            "+        bufferFactory = new BufferFactory(bufferSize, HeapByteBufferAllocator.INSTANCE, 512);\n", 
            "+        httpProcessor = initHttpProcessor();\n", 
            "     }\n", 
            " \n", 
            "+    abstract protected HttpProcessor initHttpProcessor();\n", 
            "+\n", 
            "     public IOReactorConfig getReactorConfig() {\n", 
            "-        IOReactorConfig config = new IOReactorConfig();\n", 
            "-        config.setIoThreadCount(iOThreadsPerReactor);\n", 
            "-        config.setSoTimeout(\n", 
            "-                conf.getIntProperty(HttpConnectionParams.SO_TIMEOUT, 60000));\n", 
            "-        config.setConnectTimeout(\n", 
            "-                conf.getIntProperty(HttpConnectionParams.CONNECTION_TIMEOUT, 0));\n", 
            "-        config.setRcvBufSize(\n", 
            "-                conf.getIntProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));\n", 
            "-        config.setSndBufSize(\n", 
            "-                conf.getIntProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));\n", 
            "-        config.setTcpNoDelay(\n", 
            "-                conf.getBooleanProperty(HttpConnectionParams.TCP_NODELAY, true));\n", 
            "-        config.setInterestOpQueued(\n", 
            "-                conf.getBooleanProperty(NIOReactorParams.INTEREST_OPS_QUEUEING, false));\n", 
            "+        return conf.getReactorConfig();\n", 
            "+    }\n", 
            " \n", 
            "-        if (conf.getIntProperty(HttpConnectionParams.SO_LINGER) != null) {\n", 
            "-            config.setSoLinger(conf.getIntProperty(HttpConnectionParams.SO_LINGER));\n", 
            "-        }\n", 
            "-\n", 
            "-        if (conf.getBooleanProperty(HttpConnectionParams.SO_REUSEADDR) != null) {\n", 
            "-            config.setSoReuseAddress(conf.getBooleanProperty(HttpConnectionParams.SO_REUSEADDR));\n", 
            "-        }\n", 
            "-\n", 
            "-        if (conf.getIntProperty(NIOReactorPNames.SELECT_INTERVAL) != null) {\n", 
            "-            config.setSelectInterval(conf.getIntProperty(NIOReactorPNames.SELECT_INTERVAL));\n", 
            "-        }\n", 
            "-\n", 
            "-        return config;\n", 
            "+    public ConnectionConfig getConnectionConfig() {\n", 
            "+        return conf.getConnectionConfig();\n", 
            "     }\n", 
            " \n", 
            "     public WorkerPool getWorkerPool() {\n"
          ]
        }, 
        {
          "locn": "-126,51 +94,14", 
          "lines": [
            "         return configurationContext;\n", 
            "     }\n", 
            " \n", 
            "-    protected HttpParams retrieveHttpParameters() throws AxisFault {\n", 
            "-        HttpParams params = new BasicHttpParams();\n", 
            "-        params.\n", 
            "-            setIntParameter(HttpConnectionParams.SO_TIMEOUT,\n", 
            "-                    conf.getIntProperty(HttpConnectionParams.SO_TIMEOUT, 60000)).\n", 
            "-            setIntParameter(HttpConnectionParams.CONNECTION_TIMEOUT,\n", 
            "-                    conf.getIntProperty(HttpConnectionParams.CONNECTION_TIMEOUT, 0)).\n", 
            "-            setIntParameter(HttpConnectionParams.SOCKET_BUFFER_SIZE,\n", 
            "-                    conf.getIntProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024)).\n", 
            "-            setBooleanParameter(HttpConnectionParams.STALE_CONNECTION_CHECK,\n", 
            "-                    conf.getBooleanProperty(HttpConnectionParams.STALE_CONNECTION_CHECK, false)).\n", 
            "-            setBooleanParameter(HttpConnectionParams.TCP_NODELAY,\n", 
            "-                    conf.getBooleanProperty(HttpConnectionParams.TCP_NODELAY, true)).\n", 
            "-            setBooleanParameter(NIOReactorPNames.INTEREST_OPS_QUEUEING,\n", 
            "-                    conf.getBooleanProperty(NIOReactorParams.INTEREST_OPS_QUEUEING, false)).\n", 
            "-            setParameter(HttpProtocolParams.ORIGIN_SERVER,\n", 
            "-                    conf.getStringProperty(HttpProtocolParams.ORIGIN_SERVER, \"Synapse-PassThrough-HTTP\")).\n", 
            "-            setParameter(HttpProtocolParams.HTTP_MALFORMED_INPUT_ACTION,\n", 
            "-                    conf.getMalformedInputActionValue()).\n", 
            "-            setParameter(HttpProtocolParams.HTTP_UNMAPPABLE_INPUT_ACTION,\n", 
            "-                    conf.getUnMappableInputActionValue());\n", 
            "-        /* Set advanced tuning params only if they are explicitly set so that we are not loosing\n", 
            "-           internal defaults of HttpCore-NIO */\n", 
            "-        if (conf.getIntProperty(HttpConnectionParams.SO_LINGER) != null) {\n", 
            "-            HttpConnectionParams.setLinger(params,\n", 
            "-                    conf.getIntProperty(HttpConnectionParams.SO_LINGER));\n", 
            "-        }\n", 
            "-\n", 
            "-        if (conf.getBooleanProperty(HttpConnectionParams.SO_REUSEADDR) != null) {\n", 
            "-            HttpConnectionParams.setSoReuseaddr(params,\n", 
            "-                    conf.getBooleanProperty(HttpConnectionParams.SO_REUSEADDR));\n", 
            "-        }\n", 
            "-\n", 
            "-        if (conf.getIntProperty(NIOReactorPNames.SELECT_INTERVAL) != null) {\n", 
            "-            NIOReactorParams.setSelectInterval(params,\n", 
            "-                    conf.getIntProperty(NIOReactorPNames.SELECT_INTERVAL));\n", 
            "-        }\n", 
            "-\n", 
            "-        return params;\n", 
            "-    }\n", 
            "-\n", 
            "     public BufferFactory getBufferFactory() {\n", 
            "         return bufferFactory;\n", 
            "     }\n", 
            " \n", 
            "+    public HttpProcessor getHttpProcessor() {\n", 
            "+        return httpProcessor;\n", 
            "+    }\n", 
            "+\n", 
            "     public PassThroughTransportMetricsCollector getMetrics() {\n", 
            "         return metrics;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/BaseConfiguration.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/BaseConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-25,10 +25,8", 
          "lines": [
            " import org.apache.axis2.transport.TransportListener;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.params.*;\n", 
            " import org.apache.http.protocol.*;\n", 
            " import org.apache.http.HttpResponseFactory;\n", 
            "-import org.apache.http.HttpResponseInterceptor;\n", 
            " import org.apache.http.impl.DefaultHttpResponseFactory;\n", 
            " import org.apache.axis2.transport.base.threads.WorkerPool;\n", 
            " import org.apache.axis2.transport.base.ParamUtils;\n"
          ]
        }, 
        {
          "locn": "-48,9 +46,6", 
          "lines": [
            " \n", 
            "     private Log log = LogFactory.getLog(SourceConfiguration.class);\n", 
            " \n", 
            "-    /** This is used to process HTTP responses */\n", 
            "-    private HttpProcessor httpProcessor = null;\n", 
            "-\n", 
            "     /** Response factory used for creating HTTP Responses */\n", 
            "     private HttpResponseFactory responseFactory = null;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-60,46 +55,34", 
          "lines": [
            "     /** Object to manage the source connections */\n", 
            "     private SourceConnections sourceConnections = null;\n", 
            " \n", 
            "-    private TransportInDescription inDescription;\n", 
            "-\n", 
            "     private String host;\n", 
            " \n", 
            "+    private String transportName;\n", 
            "+\n", 
            "     /** The EPR prefix for services available over this transport */\n", 
            "     private String serviceEPRPrefix;\n", 
            "+\n", 
            "     /** The EPR prefix for services with custom URI available over this transport */\n", 
            "     private String customEPRPrefix;\n", 
            "     \n", 
            "     /** SSLContext if this listener is a SSL listener */\n", 
            "     private boolean ssl = false;\n", 
            "-    \n", 
            "-    \n", 
            "+\n", 
            "     /** WSDL processor for Get requests*/\n", 
            "     private HttpGetRequestProcessor httpGetRequestProcessor = null;\n", 
            " \n", 
            "-\n", 
            "     public SourceConfiguration(ConfigurationContext configurationContext,\n", 
            "                                TransportInDescription description,\n", 
            "-                               WorkerPool pool) {\n", 
            "+                               WorkerPool pool, boolean ssl) throws AxisFault {\n", 
            "+\n", 
            "         super(configurationContext, description, pool);\n", 
            "-        this.inDescription = description;\n", 
            "-        httpProcessor = new ImmutableHttpProcessor(\n", 
            "-                new HttpResponseInterceptor[]{\n", 
            "-                        new ResponseDate(),\n", 
            "-                        new ResponseServer(),\n", 
            "-                        new ResponseContent(),\n", 
            "-                        new ResponseConnControl()});\n", 
            "+        this.transportName = description.getName();\n", 
            "+        this.ssl = ssl;\n", 
            "+        this.responseFactory = new DefaultHttpResponseFactory();\n", 
            "+        this.sourceConnections = new SourceConnections();\n", 
            "+        this.port = ParamUtils.getRequiredParamInt(parameters, \"port\");\n", 
            " \n", 
            "-        responseFactory = new DefaultHttpResponseFactory();\n", 
            "-\n", 
            "-        sourceConnections = new SourceConnections();\n", 
            "-    }\n", 
            "-\n", 
            "-    public void build() throws AxisFault {\n", 
            "-        super.build();\n", 
            "-\n", 
            "-        port = ParamUtils.getRequiredParamInt(parameters, \"port\");\n", 
            "-\n", 
            "-        Parameter hostParameter = inDescription.getParameter(TransportListener.HOST_ADDRESS);\n", 
            "+        Parameter hostParameter = parameters.getParameter(TransportListener.HOST_ADDRESS);\n", 
            "         if (hostParameter != null) {\n", 
            "             host = ((String) hostParameter.getValue()).trim();\n", 
            "         } else {\n"
          ]
        }, 
        {
          "locn": "-110,34 +93,35", 
          "lines": [
            "             }\n", 
            "         }\n", 
            " \n", 
            "-        Parameter param = inDescription.getParameter(PassThroughConstants.WSDL_EPR_PREFIX);\n", 
            "+        Parameter param = parameters.getParameter(PassThroughConstants.WSDL_EPR_PREFIX);\n", 
            "         if (param != null) {\n", 
            "             serviceEPRPrefix = getServiceEPRPrefix(configurationContext, (String) param.getValue());\n", 
            "             customEPRPrefix = (String) param.getValue();\n", 
            "         } else {\n", 
            "             serviceEPRPrefix = getServiceEPRPrefix(configurationContext, host, port);\n", 
            "-            customEPRPrefix = inDescription.getName() + \"://\" + host + \":\" +\n", 
            "+            customEPRPrefix = transportName + \"://\" + host + \":\" +\n", 
            "                     (port == 80 ? \"\" : port) + \"/\";\n", 
            "         }\n", 
            "-        \n", 
            "+\n", 
            "         // create http Get processor\n", 
            "-        param = inDescription.getParameter(NhttpConstants.HTTP_GET_PROCESSOR);\n", 
            "+        param = parameters.getParameter(NhttpConstants.HTTP_GET_PROCESSOR);\n", 
            "         if (param != null && param.getValue() != null) {\n", 
            "             httpGetRequestProcessor = createHttpGetProcessor(param.getValue().toString());\n", 
            "             if (httpGetRequestProcessor == null) {\n", 
            "                 handleException(\"Cannot create HttpGetRequestProcessor\");\n", 
            "             }\n", 
            "-        } \n", 
            "+        }\n", 
            "     }\n", 
            " \n", 
            "-    public HttpParams getHttpParameters() {\n", 
            "-        return httpParameters;\n", 
            "+    @Override\n", 
            "+    protected HttpProcessor initHttpProcessor() {\n", 
            "+        return new ImmutableHttpProcessor(\n", 
            "+                new ResponseDate(),\n", 
            "+                new ResponseServer(\"Synapse-PassThrough-Http\"),\n", 
            "+                new ResponseContent(),\n", 
            "+                new ResponseConnControl());\n", 
            "     }\n", 
            " \n", 
            "-    public HttpProcessor getHttpProcessor() {\n", 
            "-        return httpProcessor;\n", 
            "-    }\n", 
            "-\n", 
            "     public HttpResponseFactory getResponseFactory() {\n", 
            "         return responseFactory;\n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-150,8 +134,8", 
          "lines": [
            "         return sourceConnections;\n", 
            "     }\n", 
            " \n", 
            "-    public TransportInDescription getInDescription() {\n", 
            "-        return inDescription;\n", 
            "+    public String getTransportName() {\n", 
            "+        return transportName;\n", 
            "     }\n", 
            " \n", 
            "     public String getServiceEPRPrefix() {\n"
          ]
        }, 
        {
          "locn": "-161,19 +145,11", 
          "lines": [
            "     public String getCustomEPRPrefix() {\n", 
            "         return customEPRPrefix;\n", 
            "     }\n", 
            "-    \n", 
            "-    \n", 
            "-    \n", 
            "+\n", 
            "     public boolean isSsl() {\n", 
            " \t\treturn ssl;\n", 
            " \t}\n", 
            " \n", 
            "-\tpublic void setSsl(boolean ssl) {\n", 
            "-\t\tthis.ssl = ssl;\n", 
            "-\t}\n", 
            "-\t\n", 
            "-\t\n", 
            "-\t\n", 
            " \tpublic HttpGetRequestProcessor getHttpGetRequestProcessor() {\n", 
            " \t\treturn httpGetRequestProcessor;\n", 
            " \t}\n"
          ]
        }, 
        {
          "locn": "-221,8 +197,6", 
          "lines": [
            " \t\t}\n", 
            " \t}\n", 
            "     \n", 
            "-    \n", 
            "-    \n", 
            "     private HttpGetRequestProcessor createHttpGetProcessor(String str) throws AxisFault {\n", 
            "         Object obj = null;\n", 
            "         try {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/SourceConfiguration.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/SourceConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-19,12 +19,9", 
          "lines": [
            " \n", 
            " package org.apache.synapse.transport.passthru.config;\n", 
            " \n", 
            "-import org.apache.axis2.AxisFault;\n", 
            " import org.apache.axis2.context.ConfigurationContext;\n", 
            " import org.apache.axis2.description.ParameterInclude;\n", 
            " import org.apache.axis2.transport.base.threads.WorkerPool;\n", 
            "-import org.apache.http.HttpRequestInterceptor;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            " import org.apache.http.protocol.*;\n", 
            " import org.apache.synapse.transport.passthru.connections.TargetConnections;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-33,13 +30,12", 
          "lines": [
            "  */\n", 
            " public class TargetConfiguration extends BaseConfiguration {\n", 
            " \n", 
            "-    private HttpProcessor httpProcessor = null;\n", 
            "-\n", 
            "     private int maxConnections = Integer.MAX_VALUE;\n", 
            " \n", 
            "-    /** Weather User-Agent header coming from client should be preserved */\n", 
            "+    /** Whether User-Agent header coming from client should be preserved */\n", 
            "     private boolean preserveUserAgentHeader = false;\n", 
            "-    /** Weather Server header coming from server should be preserved */\n", 
            "+\n", 
            "+    /** Whether Server header coming from server should be preserved */\n", 
            "     private boolean preserveServerHeader = true;\n", 
            " \n", 
            "     private TargetConnections connections = null;\n"
          ]
        }, 
        {
          "locn": "-48,34 +44,25", 
          "lines": [
            "                                ParameterInclude parameters,\n", 
            "                                WorkerPool pool) {\n", 
            "         super(configurationContext, parameters, pool);\n", 
            "-\n", 
            "-        httpProcessor = new ImmutableHttpProcessor(\n", 
            "-                new HttpRequestInterceptor[] {\n", 
            "-                        new RequestContent(),\n", 
            "-                        new RequestTargetHost(),\n", 
            "-                        new RequestConnControl(),\n", 
            "-                        new RequestUserAgent(),\n", 
            "-                        new RequestExpectContinue()\n", 
            "-         });\n", 
            "-    }\n", 
            "-\n", 
            "-    public void build() throws AxisFault {\n", 
            "-        super.build();\n", 
            "-\n", 
            "-        maxConnections = conf.getIntProperty(PassThroughConfigPNames.MAX_CONNECTION_PER_HOST_PORT,\n", 
            "+        maxConnections = conf.getIntProperty(\n", 
            "+                PassThroughConfigPNames.MAX_CONNECTION_PER_HOST_PORT,\n", 
            "                 Integer.MAX_VALUE);\n", 
            "-        preserveUserAgentHeader = conf.isPreserveUserAgentHeader();\n", 
            "-        preserveServerHeader = conf.isPreserveServerHeader();\n", 
            "+        preserveUserAgentHeader = conf.getBooleanProperty(\n", 
            "+                PassThroughConfigPNames.USER_AGENT_HEADER_PRESERVE, false);\n", 
            "+        preserveServerHeader = conf.getBooleanProperty(\n", 
            "+                PassThroughConfigPNames.SERVER_HEADER_PRESERVE, true);\n", 
            "     }\n", 
            " \n", 
            "-    public HttpParams getHttpParameters() {\n", 
            "-        return httpParameters;\n", 
            "+    @Override\n", 
            "+    protected HttpProcessor initHttpProcessor() {\n", 
            "+        return new ImmutableHttpProcessor(\n", 
            "+                new RequestContent(),\n", 
            "+                new RequestTargetHost(),\n", 
            "+                new RequestConnControl(),\n", 
            "+                new RequestUserAgent(),\n", 
            "+                new RequestExpectContinue(false));\n", 
            "     }\n", 
            " \n", 
            "-    public HttpProcessor getHttpProcessor() {\n", 
            "-        return httpProcessor;\n", 
            "-    }\n", 
            "-\n", 
            "     public int getMaxConnections() {\n", 
            "         return maxConnections;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/TargetConfiguration.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/TargetConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-19,19 +19,13", 
          "lines": [
            " \n", 
            " package org.apache.synapse.transport.passthru.config;\n", 
            " \n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.params.HttpProtocolParams;\n", 
            "-import org.apache.synapse.commons.util.MiscellaneousUtil;\n", 
            "+import org.apache.synapse.transport.utils.config.HttpTransportConfiguration;\n", 
            " \n", 
            "-import java.nio.charset.CodingErrorAction;\n", 
            "-import java.util.Properties;\n", 
            "-\n", 
            " /**\n", 
            "  * This class encapsulates pass-through http transport tuning configurations specified via a\n", 
            "  * configurations file or system properties.\n", 
            "  */\n", 
            "-public class PassThroughConfiguration {\n", 
            "+public class PassThroughConfiguration extends HttpTransportConfiguration {\n", 
            " \n", 
            "     /**\n", 
            "      * Default tuning parameter values\n"
          ]
        }, 
        {
          "locn": "-40,20 +34,12", 
          "lines": [
            "     private static final int DEFAULT_WORKER_POOL_SIZE_MAX        = 200;\n", 
            "     private static final int DEFAULT_WORKER_THREAD_KEEPALIVE_SEC = 60;\n", 
            "     private static final int DEFAULT_WORKER_POOL_QUEUE_LENGTH    = -1;\n", 
            "-    private static final int DEFAULT_IO_BUFFER_SIZE              = 8 * 1024;\n", 
            "-    private static final int DEFAULT_IO_THREADS_PER_REACTOR      =\n", 
            "-                                                         Runtime.getRuntime().availableProcessors();\n", 
            "+    private static final int DEFAULT_IO_THREADS_PER_REACTOR      = Runtime.getRuntime().availableProcessors();\n", 
            " \n", 
            "-    private static final Log log = LogFactory.getLog(PassThroughConfiguration.class);\n", 
            "-\n", 
            "     private static PassThroughConfiguration _instance = new PassThroughConfiguration();\n", 
            " \n", 
            "-    private Properties props;\n", 
            "-\n", 
            "     private PassThroughConfiguration() {\n", 
            "-        try {\n", 
            "-            props = MiscellaneousUtil.loadProperties(\"passthru-http.properties\");\n", 
            "-        } catch (Exception ignored) {}\n", 
            "+        super(\"passthru-http\") ;\n", 
            "     }\n", 
            " \n", 
            "     public static PassThroughConfiguration getInstance() {\n"
          ]
        }, 
        {
          "locn": "-80,138 +66,9", 
          "lines": [
            "                 DEFAULT_WORKER_POOL_QUEUE_LENGTH);\n", 
            "     }\n", 
            " \n", 
            "-    public int getIOThreadsPerReactor() {\n", 
            "+    protected int getThreadsPerReactor() {\n", 
            "         return getIntProperty(PassThroughConfigPNames.IO_THREADS_PER_REACTOR,\n", 
            "                 DEFAULT_IO_THREADS_PER_REACTOR);\n", 
            "     }\n", 
            " \n", 
            "-    public int getIOBufferSize() {\n", 
            "-        return getIntProperty(PassThroughConfigPNames.IO_BUFFER_SIZE,\n", 
            "-                DEFAULT_IO_BUFFER_SIZE);\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean isKeepAliveDisabled() {\n", 
            "-        return getBooleanProperty(PassThroughConfigPNames.DISABLE_KEEPALIVE, false);\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean isPreserveUserAgentHeader() {\n", 
            "-        return getBooleanProperty(PassThroughConfigPNames.USER_AGENT_HEADER_PRESERVE, false);\n", 
            "-    }\n", 
            "-\n", 
            "-    public boolean isPreserveServerHeader() {\n", 
            "-        return getBooleanProperty(PassThroughConfigPNames.SERVER_HEADER_PRESERVE, true);\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Get an int property that tunes pass-through http transport. Prefer system properties\n", 
            "-     *\n", 
            "-     * @param name name of the system/config property\n", 
            "-     * @param def  default value to return if the property is not set\n", 
            "-     * @return the value of the property to be used\n", 
            "-     */\n", 
            "-    public Integer getIntProperty(String name, Integer def) {\n", 
            "-        String val = System.getProperty(name);\n", 
            "-        if (val == null) {\n", 
            "-            val = props.getProperty(name);\n", 
            "-        }\n", 
            "-\n", 
            "-        if (val != null) {\n", 
            "-            int intVal;\n", 
            "-            try {\n", 
            "-                intVal = Integer.valueOf(val);\n", 
            "-            } catch (NumberFormatException e) {\n", 
            "-                log.warn(\"Invalid pass-through http tuning property value. \" + name +\n", 
            "-                        \" must be an integer\");\n", 
            "-                return def;\n", 
            "-            }\n", 
            "-            if (log.isDebugEnabled()) {\n", 
            "-                log.debug(\"Using pass-through http tuning parameter : \" + name + \" = \" + val);\n", 
            "-            }\n", 
            "-            return intVal;\n", 
            "-        }\n", 
            "-\n", 
            "-        return def;\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Get an int property that tunes pass-through http transport. Prefer system properties\n", 
            "-     *\n", 
            "-     * @param name name of the system/config property\n", 
            "-     * @return the value of the property, null if the property is not found\n", 
            "-     */\n", 
            "-    public Integer getIntProperty(String name) {\n", 
            "-        return getIntProperty(name, null);\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Get a boolean property that tunes pass-through http transport. Prefer system properties\n", 
            "-     *\n", 
            "-     * @param name name of the system/config property\n", 
            "-     * @param def  default value to return if the property is not set\n", 
            "-     * @return the value of the property to be used\n", 
            "-     */\n", 
            "-    public Boolean getBooleanProperty(String name, Boolean def) {\n", 
            "-        String val = System.getProperty(name);\n", 
            "-        if (val == null) {\n", 
            "-            val = props.getProperty(name);\n", 
            "-        }\n", 
            "-\n", 
            "-        if (val != null) {\n", 
            "-            if (log.isDebugEnabled()) {\n", 
            "-                log.debug(\"Using pass-through http tuning parameter : \" + name + \" = \" + val);\n", 
            "-            }\n", 
            "-            return Boolean.valueOf(val);\n", 
            "-        }\n", 
            "-\n", 
            "-        return def;\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Get a Boolean property that tunes pass-through http transport. Prefer system properties\n", 
            "-     *\n", 
            "-     * @param name name of the system/config property\n", 
            "-     * @return the value of the property, null if the property is not found\n", 
            "-     */\n", 
            "-    public Boolean getBooleanProperty(String name) {\n", 
            "-        return getBooleanProperty(name, null);\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Get a String property that tunes pass-through http transport. Prefer system properties\n", 
            "-     *\n", 
            "-     * @param name name of the system/config property\n", 
            "-     * @param def  default value to return if the property is not set\n", 
            "-     * @return the value of the property to be used\n", 
            "-     */\n", 
            "-    public String getStringProperty(String name, String def) {\n", 
            "-        String val = System.getProperty(name);\n", 
            "-        if (val == null) {\n", 
            "-            val = props.getProperty(name);\n", 
            "-        }\n", 
            "-\n", 
            "-        return val == null ? def : val;\n", 
            "-    }\n", 
            "-\n", 
            "-    public CodingErrorAction getMalformedInputActionValue() {\n", 
            "-        String val = getStringProperty(HttpProtocolParams.HTTP_MALFORMED_INPUT_ACTION, \"report\");\n", 
            "-        return getCodingErrorAction(val);\n", 
            "-    }\n", 
            "-\n", 
            "-    public CodingErrorAction getUnMappableInputActionValue() {\n", 
            "-        String val = getStringProperty(HttpProtocolParams.HTTP_UNMAPPABLE_INPUT_ACTION, \"report\");\n", 
            "-        return getCodingErrorAction(val);\n", 
            "-    }\n", 
            "-\n", 
            "-    private CodingErrorAction getCodingErrorAction(String action) {\n", 
            "-        if (\"report\".equals(action)) {\n", 
            "-            return CodingErrorAction.REPORT;\n", 
            "-        } else if (\"ignore\".equals(action)) {\n", 
            "-            return CodingErrorAction.IGNORE;\n", 
            "-        } else if (\"replace\".equals(action)) {\n", 
            "-            return CodingErrorAction.REPLACE;\n", 
            "-        } else {\n", 
            "-            return CodingErrorAction.REPORT;\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/PassThroughConfiguration.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/PassThroughConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,6 +16,7", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.passthru;\n", 
            " \n", 
            " import org.apache.axis2.AxisFault;\n"
          ]
        }, 
        {
          "locn": "-25,8 +26,6", 
          "lines": [
            " import org.apache.http.HttpResponse;\n", 
            " import org.apache.http.nio.NHttpServerConnection;\n", 
            " \n", 
            "-import java.io.OutputStream;\n", 
            "-\n", 
            " /**\n", 
            "  * This PassThrough transport level interface is used for plugging in different implementations\n", 
            "  * for special processing of some HTTP GET requests.\n"
          ]
        }, 
        {
          "locn": "-54,7 +53,6", 
          "lines": [
            "      * @param response      The HttpResponse\n", 
            "      * @param msgContext    The MessageContext\n", 
            "      * @param conn          The NHttpServerConnection\n", 
            "-     * @param os            The OutputStream\n", 
            "      * @param isRestDispatching Rest dispatching\n", 
            "      */\n", 
            "     void process(HttpRequest request,\n"
          ]
        }, 
        {
          "locn": "-61,7 +59,6", 
          "lines": [
            "                  HttpResponse response,\n", 
            "                  MessageContext msgContext,\n", 
            "                  NHttpServerConnection conn,\n", 
            "-                 OutputStream os,\n", 
            "                  boolean isRestDispatching);\n", 
            " \n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/HttpGetRequestProcessor.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/HttpGetRequestProcessor.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-43,6 +43,8", 
          "lines": [
            " import org.apache.http.HttpResponse;\n", 
            " import org.apache.http.HttpStatus;\n", 
            " import org.apache.http.nio.NHttpServerConnection;\n", 
            "+import org.apache.http.nio.entity.ContentOutputStream;\n", 
            "+import org.apache.http.nio.util.SimpleOutputBuffer;\n", 
            " import org.apache.http.protocol.HTTP;\n", 
            " import org.apache.synapse.transport.nhttp.NHttpConfiguration;\n", 
            " import org.apache.synapse.transport.nhttp.NhttpConstants;\n"
          ]
        }, 
        {
          "locn": "-51,6 +53,7", 
          "lines": [
            " import org.apache.synapse.transport.passthru.ProtocolState;\n", 
            " import org.apache.synapse.transport.passthru.SourceContext;\n", 
            " import org.apache.synapse.transport.passthru.SourceHandler;\n", 
            "+import org.apache.synapse.transport.passthru.config.PassThroughConfiguration;\n", 
            " import org.apache.ws.commons.schema.XmlSchema;\n", 
            " \n", 
            " public class PassThroughNHttpGetProcessor implements HttpGetRequestProcessor {\n"
          ]
        }, 
        {
          "locn": "-76,7 +79,7", 
          "lines": [
            " \n", 
            " \tpublic void process(HttpRequest request, HttpResponse response,\n", 
            " \t\t\tMessageContext msgContext, NHttpServerConnection conn,\n", 
            "-\t\t\tOutputStream os, boolean isRestDispatching) {\n", 
            "+\t\t\tboolean isRestDispatching) {\n", 
            " \n", 
            " \t\tString uri = request.getRequestLine().getUri();\n", 
            " \t\tString serviceName = getServiceName(request);\n"
          ]
        }, 
        {
          "locn": "-101,6 +104,10", 
          "lines": [
            " \t\t\tmsgContext.setTo(new EndpointReference(uri));\n", 
            " \t\t}\n", 
            " \n", 
            "+        SimpleOutputBuffer outputBuffer = (SimpleOutputBuffer) conn.getContext().getAttribute(\n", 
            "+                PassThroughConstants.PASS_THROUGH_RESPONSE_SOURCE_BUFFER);\n", 
            "+        ContentOutputStream os = new ContentOutputStream(outputBuffer);\n", 
            "+\n", 
            " \t\tif (isServiceListBlocked(uri)) {\n", 
            "             sendResponseAndFinish(response, HttpStatus.SC_FORBIDDEN, conn, os, msgContext);\n", 
            " \t\t} else if (uri.equals(\"/favicon.ico\")) {\n"
          ]
        }, 
        {
          "locn": "-132,7 +139,7", 
          "lines": [
            "                                        MessageContext msgContext) throws IOException {\n", 
            "         SourceContext.updateState(conn, ProtocolState.GET_REQUEST_COMPLETE);\n", 
            "         sourceHandler.commitResponseHideExceptions(conn, response);\n", 
            "-        os.write(data);\n", 
            "+        write(conn, os, data);\n", 
            "         closeOutputStream(os);\n", 
            "         msgContext.setProperty(PassThroughConstants.GET_REQUEST_HANDLED, Boolean.TRUE);\n", 
            "     }\n"
          ]
        }, 
        {
          "locn": "-181,7 +188,7", 
          "lines": [
            "                 sendResponseAndFinish(response, output.toByteArray(), conn, os, msgContext);\n", 
            " \n", 
            " \t\t\t} catch (Exception e) {\n", 
            "-\t\t\t\thandleBrowserException(response, conn, os,\n", 
            "+\t\t\t\thandleBrowserException(response, msgContext, conn, os,\n", 
            " \t\t\t\t\t\t\"Error generating ?wsdl output for service : \" + serviceName, e);\n", 
            " \t\t\t}\n", 
            " \t\t} else {\n"
          ]
        }, 
        {
          "locn": "-216,7 +223,7", 
          "lines": [
            " \t\t\t\t\t.getParameterValue(\"serviceType\");\n", 
            " \t\t\tif (\"proxy\".equals(parameterValue)\n", 
            " \t\t\t\t\t&& !isWSDLProvidedForProxyService(service)) {\n", 
            "-\t\t\t\thandleBrowserException(response, conn, os,\n", 
            "+\t\t\t\thandleBrowserException(response, msgContext, conn, os,\n", 
            " \t\t\t\t\t\t\"No WSDL was provided for the Service \" + serviceName\n", 
            " \t\t\t\t\t\t\t\t+ \". A WSDL cannot be generated.\", null);\n", 
            " \t\t\t}\n"
          ]
        }, 
        {
          "locn": "-226,7 +233,7", 
          "lines": [
            " \t\t\t\tresponse.addHeader(CONTENT_TYPE, TEXT_XML);\n", 
            "                 sendResponseAndFinish(response, output.toByteArray(), conn, os, msgContext);\n", 
            " \t\t\t} catch (Exception e) {\n", 
            "-\t\t\t\thandleBrowserException(response, conn, os,\n", 
            "+\t\t\t\thandleBrowserException(response, msgContext, conn, os,\n", 
            " \t\t\t\t\t\t\"Error generating ?wsdl2 output for service : \"\n", 
            " \t\t\t\t\t\t\t\t+ serviceName, e);\n", 
            " \t\t\t}\n"
          ]
        }, 
        {
          "locn": "-316,7 +323,7", 
          "lines": [
            " \t\t\t\t\tresponse.addHeader(CONTENT_TYPE, TEXT_XML);\n", 
            "                     sendResponseAndFinish(response, output.toByteArray(), conn, os, msgContext);\n", 
            " \t\t\t\t} catch (Exception e) {\n", 
            "-\t\t\t\t\thandleBrowserException(response, conn, os,\n", 
            "+\t\t\t\t\thandleBrowserException(response, msgContext, conn, os,\n", 
            " \t\t\t\t\t\t\t\"Error generating ?xsd output for service : \"\n", 
            " \t\t\t\t\t\t\t\t\t+ serviceName, e);\n", 
            " \t\t\t\t}\n"
          ]
        }, 
        {
          "locn": "-351,11 +358,11", 
          "lines": [
            " \t\t\t\t\t\tresponse.addHeader(CONTENT_TYPE, TEXT_XML);\n", 
            " \t\t\t\t\t\tsourceHandler.commitResponseHideExceptions(conn,\n", 
            " \t\t\t\t\t\t\t\tresponse);\n", 
            "-\t\t\t\t\t\tos.write(output.toByteArray());\n", 
            "+                        write(conn, os, output.toByteArray());\n", 
            " \t\t\t\t\t\tcloseOutputStream(os);\n", 
            "                         msgContext.setProperty(PassThroughConstants.GET_REQUEST_HANDLED, Boolean.TRUE);\n", 
            " \t\t\t\t\t} catch (Exception e) {\n", 
            "-\t\t\t\t\t\thandleBrowserException(response, conn, os,\n", 
            "+\t\t\t\t\t\thandleBrowserException(response, msgContext, conn, os,\n", 
            " \t\t\t\t\t\t\t\t\"Error generating named ?xsd output for service : \"\n", 
            " \t\t\t\t\t\t\t\t\t\t+ serviceName, e);\n", 
            " \t\t\t\t\t}\n"
          ]
        }, 
        {
          "locn": "-372,7 +379,6", 
          "lines": [
            " \t\t}\n", 
            " \t}\n", 
            " \n", 
            "-\t\n", 
            " \t/**\n", 
            "      * Handles browser exception.\n", 
            "      *\n"
          ]
        }, 
        {
          "locn": "-382,7 +388,7", 
          "lines": [
            "      * @param msg      message\n", 
            "      * @param e        Exception\n", 
            "      */\n", 
            "-    protected void handleBrowserException(HttpResponse response,\n", 
            "+    protected void handleBrowserException(HttpResponse response, MessageContext msgContext,\n", 
            "                                           NHttpServerConnection conn, OutputStream os,\n", 
            "                                           String msg, Exception e) {\n", 
            "         if (e == null) {\n"
          ]
        }, 
        {
          "locn": "-397,7 +403,7", 
          "lines": [
            "             response.addHeader(CONTENT_TYPE, TEXT_HTML);\n", 
            "             sourceHandler.commitResponseHideExceptions(conn, response);\n", 
            "             try {\n", 
            "-                os.write(msg.getBytes());\n", 
            "+                write(conn, os, msg.getBytes());\n", 
            "                 os.close();\n", 
            "             } catch (IOException ignore) {\n", 
            "             }\n"
          ]
        }, 
        {
          "locn": "-409,6 +415,7", 
          "lines": [
            "             } catch (IOException ignore) {\n", 
            "             }\n", 
            "         }\n", 
            "+        msgContext.setProperty(PassThroughConstants.GET_REQUEST_HANDLED, Boolean.TRUE);\n", 
            "     }\n", 
            "     \n", 
            "     \n"
          ]
        }, 
        {
          "locn": "-421,8 +428,7", 
          "lines": [
            " \t * @return whether to proceed with incomingURI\n", 
            " \t */\n", 
            " \tprotected boolean isServiceListBlocked(String incomingURI) {\n", 
            "-\t\tString isBlocked = NHttpConfiguration.getInstance()\n", 
            "-\t\t\t\t.isServiceListBlocked();\n", 
            "+\t\tString isBlocked = NHttpConfiguration.getInstance().isServiceListBlocked();\n", 
            " \n", 
            " \t\treturn ((\"/services\").equals(incomingURI) || (\"/services\" + \"/\")\n", 
            " \t\t\t\t.equals(incomingURI)) && Boolean.parseBoolean(isBlocked);\n"
          ]
        }, 
        {
          "locn": "-474,4 +480,15", 
          "lines": [
            "         return hostAddress.split(\"[.]\").length == 4;\n", 
            "     }\n", 
            " \n", 
            "+    private void write(NHttpServerConnection conn, OutputStream os,\n", 
            "+                       byte[] data) throws IOException {\n", 
            "+        synchronized (conn.getContext()) {\n", 
            "+            // The SimpleOutputBuffer on which this output stream is based is not thread safe.\n", 
            "+            // Explicit synchronization required.\n", 
            "+            // Do not worry about running out of buffer space.\n", 
            "+            // SimpleOutputBuffer expands to fit the data.\n", 
            "+            os.write(data);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/api/PassThroughNHttpGetProcessor.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/api/PassThroughNHttpGetProcessor.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-24,11 +24,12", 
          "lines": [
            " import org.apache.axis2.description.Parameter;\n", 
            " import org.apache.axis2.description.TransportOutDescription;\n", 
            " import org.apache.axis2.transport.base.ParamUtils;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            " import org.apache.http.nio.NHttpClientEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOEventDispatch;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "+import org.apache.synapse.transport.utils.logging.LoggingUtils;\n", 
            " import org.apache.synapse.transport.utils.sslcert.CertificateVerificationConfig;\n", 
            " import org.apache.synapse.transport.utils.sslcert.CertificateVerificationException;\n", 
            " import org.apache.synapse.transport.utils.sslcert.adaptor.SynapseAdaptorForOcspCrl;\n"
          ]
        }, 
        {
          "locn": "-53,12 +54,12", 
          "lines": [
            " \n", 
            "     protected IOEventDispatch getEventDispatch(NHttpClientEventHandler handler,\n", 
            "                                                SSLContext sslContext,\n", 
            "-                                               SSLSetupHandler sslIOSessionHandler,\n", 
            "-                                               HttpParams params,\n", 
            "+                                               SSLSetupHandler sslSetupHandler,\n", 
            "+                                               ConnectionConfig config,\n", 
            "                                                TransportOutDescription transportOut) throws AxisFault {\n", 
            " \n", 
            "-        return new SSLTargetIOEventDispatch(handler, sslContext, getCustomSSLContexts(transportOut),\n", 
            "-                sslIOSessionHandler, params);\n", 
            "+        return LoggingUtils.getClientIODispatch(handler, config, sslContext, sslSetupHandler,\n", 
            "+                getCustomSSLContexts(transportOut));\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-42,7 +42,7", 
          "lines": [
            "         if (allocator != null) {\n", 
            "             this.allocator = allocator;\n", 
            "         } else {\n", 
            "-            this.allocator = new HeapByteBufferAllocator();\n", 
            "+            this.allocator = HeapByteBufferAllocator.INSTANCE;\n", 
            "         }\n", 
            " \n", 
            "         buffers = new ByteBuffer[size];\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/BufferFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/BufferFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,6 +16,7", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.passthru.util;\n", 
            " \n", 
            " import org.apache.axiom.om.OMElement;\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/RelayUtils.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/util/RelayUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-20,13 +20,11", 
          "lines": [
            " package org.apache.synapse.transport.passthru;\n", 
            " \n", 
            " import org.apache.http.nio.*;\n", 
            "-import org.apache.http.nio.entity.ContentOutputStream;\n", 
            " import org.apache.http.nio.util.ContentOutputBuffer;\n", 
            " import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            "+import org.apache.http.*;\n", 
            " import org.apache.http.nio.util.SimpleOutputBuffer;\n", 
            "-import org.apache.http.*;\n", 
            " import org.apache.http.protocol.*;\n", 
            "-import org.apache.http.params.DefaultedHttpParams;\n", 
            " import org.apache.http.message.BasicHttpResponse;\n", 
            " import org.apache.axis2.AxisFault;\n", 
            " import org.apache.commons.logging.Log;\n"
          ]
        }, 
        {
          "locn": "-36,7 +34,6", 
          "lines": [
            " import org.apache.synapse.transport.passthru.jmx.PassThroughTransportMetricsCollector;\n", 
            " \n", 
            " import java.io.IOException;\n", 
            "-import java.io.OutputStream;\n", 
            " \n", 
            " /**\n", 
            "  * This is the class where transport interacts with the client. This class\n"
          ]
        }, 
        {
          "locn": "-100,17 +97,16", 
          "lines": [
            " \n", 
            "             String method = request.getRequest() != null ?\n", 
            "                     request.getRequest().getRequestLine().getMethod().toUpperCase() : \"\";\n", 
            "-            OutputStream os = null;\n", 
            " \t\t\tif (\"GET\".equals(method)) {\n", 
            " \t\t\t\tHttpContext context = request.getConnection().getContext();\n", 
            " \t\t\t\tContentOutputBuffer outputBuffer = new SimpleOutputBuffer(8192,\n", 
            "-                        new HeapByteBufferAllocator());\n", 
            "-\t\t\t\tcontext.setAttribute(\"synapse.response-source-buffer\",outputBuffer);\n", 
            "-\t\t\t\tos = new ContentOutputStream(outputBuffer);\n", 
            "+                        HeapByteBufferAllocator.INSTANCE);\n", 
            "+\t\t\t\tcontext.setAttribute(PassThroughConstants.PASS_THROUGH_RESPONSE_SOURCE_BUFFER,\n", 
            "+                        outputBuffer);\n", 
            " \t\t\t} \n", 
            " \n", 
            "             sourceConfiguration.getWorkerPool().execute(\n", 
            "-                    new ServerWorker(request, sourceConfiguration,os));\n", 
            "+                    new ServerWorker(request, sourceConfiguration));\n", 
            " \n", 
            "         } catch (HttpException e) {\n", 
            "             log.error(\"HTTP exception while processing request\", e);\n"
          ]
        }, 
        {
          "locn": "-186,31 +182,32", 
          "lines": [
            "         }\n", 
            "     }\n", 
            " \n", 
            "-    public void outputReady(NHttpServerConnection conn,\n", 
            "-                            ContentEncoder encoder) {\n", 
            "+    public void outputReady(NHttpServerConnection conn, ContentEncoder encoder) {\n", 
            "         try {\n", 
            "             ProtocolState protocolState = SourceContext.getState(conn);\n", 
            "-            \n", 
            "-            //special case to handle WSDLs\n", 
            "-            if(protocolState == ProtocolState.GET_REQUEST_COMPLETE){\n", 
            "-            \t// we need to shut down if the shutdown flag is set\n", 
            "-            \t HttpContext context = conn.getContext();\n", 
            "-            \t ContentOutputBuffer outBuf = (ContentOutputBuffer) context.getAttribute(\n", 
            "-                         \"synapse.response-source-buffer\");\n", 
            "-            \t  int bytesWritten = outBuf.produceContent(encoder);\n", 
            "-                  if (metrics != null && bytesWritten > 0) {\n", 
            "-                      metrics.incrementBytesSent(bytesWritten);\n", 
            "-                  }\n", 
            "-                \n", 
            "-                  conn.requestInput();\n", 
            "-                  if(outBuf instanceof SimpleOutputBuffer && !((SimpleOutputBuffer)outBuf).hasData()){\n", 
            "-                \t  sourceConfiguration.getSourceConnections().releaseConnection(conn);\n", 
            "-                  }\n", 
            "-                  \n", 
            "-            \treturn;\n", 
            "+\n", 
            "+            // special case to handle WSDLs\n", 
            "+            if (protocolState == ProtocolState.GET_REQUEST_COMPLETE) {\n", 
            "+                SimpleOutputBuffer outBuf = (SimpleOutputBuffer) conn.getContext().getAttribute(\n", 
            "+                        PassThroughConstants.PASS_THROUGH_RESPONSE_SOURCE_BUFFER);\n", 
            "+                synchronized (conn.getContext()) {\n", 
            "+                    // SimpleOutputBuffer is not thread safe\n", 
            "+                    // Explicit synchronization required\n", 
            "+                    int bytesWritten = outBuf.produceContent(encoder);\n", 
            "+                    if (metrics != null && bytesWritten > 0) {\n", 
            "+                        metrics.incrementBytesSent(bytesWritten);\n", 
            "+                    }\n", 
            "+\n", 
            "+                    conn.requestInput();\n", 
            "+                    if (!outBuf.hasData()) {\n", 
            "+                        // We are done - At this point the entire response payload has been\n", 
            "+                        // written out to the SimpleOutputBuffer\n", 
            "+                        sourceConfiguration.getSourceConnections().releaseConnection(conn);\n", 
            "+                    }\n", 
            "+                }\n", 
            "+                return;\n", 
            "             }\n", 
            "-            \n", 
            "-                        \n", 
            "+\n", 
            "             if (protocolState != ProtocolState.RESPONSE_HEAD\n", 
            "                     && protocolState != ProtocolState.RESPONSE_BODY) {\n", 
            "                 log.warn(\"Illegal incoming connection state: \"\n"
          ]
        }, 
        {
          "locn": "-222,7 +219,6", 
          "lines": [
            "             }\n", 
            " \n", 
            "             SourceContext.updateState(conn, ProtocolState.RESPONSE_BODY);\n", 
            "-\n", 
            "             SourceResponse response = SourceContext.getResponse(conn);\n", 
            " \n", 
            "             int bytesSent = response.write(conn, encoder);\n"
          ]
        }, 
        {
          "locn": "-272,6 +268,7", 
          "lines": [
            "         } else if (e instanceof IOException) {\n", 
            "             exception(conn, (IOException) e);\n", 
            "         } else {\n", 
            "+            log.error(\"Unexpected exception encountered in SourceHandler\", e);\n", 
            "             metrics.incrementFaultsReceiving();\n", 
            " \n", 
            "             ProtocolState state = SourceContext.getState(conn);\n"
          ]
        }, 
        {
          "locn": "-337,38 +334,37", 
          "lines": [
            "             metrics.incrementFaultsReceiving();\n", 
            "         } else {\n", 
            "             log.error(\"Unexpected I/O error: \" + e.getClass().getName(), e);\n", 
            "-\n", 
            "             metrics.incrementFaultsReceiving();\n", 
            "         }\n", 
            "     }\n", 
            " \n", 
            "     public void exception(NHttpServerConnection conn, HttpException e) {\n", 
            "-        try {\n", 
            "-            if (conn.isResponseSubmitted()) {\n", 
            "-                sourceConfiguration.getSourceConnections().shutDownConnection(conn);\n", 
            "-                return;\n", 
            "-            }\n", 
            "-            HttpContext httpContext = conn.getContext();\n", 
            "+        if (log.isDebugEnabled()) {\n", 
            "+            log.debug(\"HTTP protocol error encountered in SourceHandler\", e);\n", 
            "+        }\n", 
            " \n", 
            "-            HttpResponse response = new BasicHttpResponse(\n", 
            "-                    HttpVersion.HTTP_1_1, HttpStatus.SC_BAD_REQUEST, \"Bad request\");\n", 
            "-            response.setParams(\n", 
            "-                    new DefaultedHttpParams(sourceConfiguration.getHttpParameters(),\n", 
            "-                            response.getParams()));\n", 
            "-            response.addHeader(HTTP.CONN_DIRECTIVE, HTTP.CONN_CLOSE);\n", 
            "+        if (conn.isResponseSubmitted()) {\n", 
            "+            sourceConfiguration.getSourceConnections().shutDownConnection(conn);\n", 
            "+            return;\n", 
            "+        }\n", 
            "+        HttpContext httpContext = conn.getContext();\n", 
            " \n", 
            "-            // Pre-process HTTP request\n", 
            "-            httpContext.setAttribute(ExecutionContext.HTTP_CONNECTION, conn);\n", 
            "-            httpContext.setAttribute(ExecutionContext.HTTP_REQUEST, null);\n", 
            "-            httpContext.setAttribute(ExecutionContext.HTTP_RESPONSE, response);\n", 
            "+        HttpResponse response = new BasicHttpResponse(\n", 
            "+                HttpVersion.HTTP_1_1, HttpStatus.SC_BAD_REQUEST, \"Bad request\");\n", 
            "+        response.addHeader(HTTP.CONN_DIRECTIVE, HTTP.CONN_CLOSE);\n", 
            " \n", 
            "+        // Pre-process HTTP request\n", 
            "+        httpContext.setAttribute(ExecutionContext.HTTP_CONNECTION, conn);\n", 
            "+        httpContext.setAttribute(ExecutionContext.HTTP_REQUEST, null);\n", 
            "+        httpContext.setAttribute(ExecutionContext.HTTP_RESPONSE, response);\n", 
            "+\n", 
            "+        try {\n", 
            "             sourceConfiguration.getHttpProcessor().process(response, httpContext);\n", 
            "-\n", 
            "-            conn.submitResponse(response);            \n", 
            "+            conn.submitResponse(response);\n", 
            "             SourceContext.updateState(conn, ProtocolState.CLOSED);\n", 
            "             conn.close();\n", 
            "-        } catch (Exception e1) {\n", 
            "-            log.error(e.getMessage(), e);\n", 
            "+        } catch (Exception ex) {\n", 
            "+            log.error(\"Error while handling HttpException\", ex);\n", 
            "             SourceContext.updateState(conn, ProtocolState.CLOSED);\n", 
            "             sourceConfiguration.getSourceConnections().shutDownConnection(conn);\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-31,7 +31,6", 
          "lines": [
            " import org.apache.http.message.BasicHttpRequest;\n", 
            " import org.apache.http.nio.ContentEncoder;\n", 
            " import org.apache.http.nio.NHttpClientConnection;\n", 
            "-import org.apache.http.params.DefaultedHttpParams;\n", 
            " import org.apache.http.protocol.ExecutionContext;\n", 
            " import org.apache.http.protocol.HTTP;\n", 
            " import org.apache.synapse.transport.nhttp.NhttpConstants;\n"
          ]
        }, 
        {
          "locn": "-203,24 +202,15", 
          "lines": [
            "                     MessageFormatterDecoratorFactory.createMessageFormatterDecorator(requestMsgCtx);\n", 
            "                 request.setHeader(HTTPConstants.HEADER_SOAP_ACTION,\n", 
            "                         messageFormatter.formatSOAPAction(requestMsgCtx, null, soapAction));\n", 
            "-                request.setHeader(HTTPConstants.USER_AGENT,\"Synapse-PT-HttpComponents-NIO\");\n", 
            "+                request.setHeader(HttpHeaders.USER_AGENT, \"Synapse-PT-HttpComponents-NIO\");\n", 
            "             }\n", 
            "     \t}\n", 
            " \n", 
            "-        request.setParams(new DefaultedHttpParams(request.getParams(),\n", 
            "-                targetConfiguration.getHttpParameters()));\n", 
            "-        \n", 
            "-        \n", 
            "-\t\n", 
            "-\t\t\n", 
            "-\t\tthis.processChunking(conn, requestMsgCtx);\n", 
            "-\t\t\n", 
            "+        this.processChunking(conn, requestMsgCtx);\n", 
            " \n", 
            "         if (!keepAlive) {\n", 
            "             request.setHeader(HTTP.CONN_DIRECTIVE, HTTP.CONN_CLOSE);\n", 
            "         }\n", 
            "-        \n", 
            "-       \n", 
            " \n", 
            "         // Pre-process HTTP request\n", 
            "         conn.getContext().setAttribute(ExecutionContext.HTTP_CONNECTION, conn);\n"
          ]
        }, 
        {
          "locn": "-230,8 +220,7", 
          "lines": [
            " \n", 
            "         // start the request\n", 
            "         targetConfiguration.getHttpProcessor().process(request, conn.getContext());\n", 
            "-        \n", 
            "-        \n", 
            "+\n", 
            "         conn.submitRequest(request);\n", 
            " \n", 
            "         if (hasEntityBody) {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/TargetRequest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-23,11 +23,12", 
          "lines": [
            " import org.apache.axis2.AxisFault;\n", 
            " import org.apache.axis2.description.Parameter;\n", 
            " import org.apache.axis2.description.TransportInDescription;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            " import org.apache.http.nio.NHttpServerEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOEventDispatch;\n", 
            " import org.apache.http.nio.reactor.IOSession;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "+import org.apache.synapse.transport.utils.logging.LoggingUtils;\n", 
            " \n", 
            " import javax.net.ssl.*;\n", 
            " import javax.xml.namespace.QName;\n"
          ]
        }, 
        {
          "locn": "-40,8 +41,8", 
          "lines": [
            " \n", 
            "     @Override\n", 
            "     protected IOEventDispatch getEventDispatch(NHttpServerEventHandler handler, SSLContext sslContext,\n", 
            "-                                               SSLSetupHandler sslSetupHandler, HttpParams params) {\n", 
            "-        return new SSLSourceIOEventDispatch(handler, sslContext, sslSetupHandler, params);\n", 
            "+                                               SSLSetupHandler sslSetupHandler, ConnectionConfig config) {\n", 
            "+        return LoggingUtils.getServerIODispatch(handler, config, sslContext, sslSetupHandler);\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLListener.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSSLListener.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-19,7 +19,6", 
          "lines": [
            " \n", 
            " package org.apache.synapse.transport.passthru;\n", 
            " \n", 
            "-import java.io.OutputStream;\n", 
            " import java.net.InetAddress;\n", 
            " import java.util.Comparator;\n", 
            " import java.util.Map;\n"
          ]
        }, 
        {
          "locn": "-60,10 +59,10", 
          "lines": [
            " import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            " import org.apache.http.protocol.HTTP;\n", 
            " import org.apache.synapse.transport.nhttp.HttpCoreRequestResponseTransport;\n", 
            "-import org.apache.synapse.transport.nhttp.NHttpConfiguration;\n", 
            " import org.apache.synapse.transport.nhttp.NhttpConstants;\n", 
            " import org.apache.synapse.transport.nhttp.util.NhttpUtil;\n", 
            " import org.apache.synapse.transport.nhttp.util.RESTUtil;\n", 
            "+import org.apache.synapse.transport.passthru.config.PassThroughConfiguration;\n", 
            " import org.apache.synapse.transport.passthru.config.SourceConfiguration;\n", 
            " import org.apache.synapse.transport.passthru.util.SourceResponseFactory;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-89,18 +88,14", 
          "lines": [
            "     private HttpGetRequestProcessor httpGetRequestProcessor = null;\n", 
            "     \n", 
            "     private boolean isHttps = false;\n", 
            "-    \n", 
            "-    \n", 
            "-    private OutputStream os; //only used for WSDL  requests..\n", 
            "   \n", 
            "     public ServerWorker(final SourceRequest request,\n", 
            "-                        final SourceConfiguration sourceConfiguration, final OutputStream os) {\n", 
            "+                        final SourceConfiguration sourceConfiguration) {\n", 
            "         this.request = request;\n", 
            "         this.sourceConfiguration = sourceConfiguration;\n", 
            "         this.isHttps = sourceConfiguration.isSsl();\n", 
            "         this.msgContext = createMessageContext(request);\n", 
            "         this.httpGetRequestProcessor = sourceConfiguration.getHttpGetRequestProcessor();\n", 
            "-        this.os = os;\n", 
            " \n", 
            "         // set these properties to be accessed by the engine\n", 
            "         msgContext.setProperty(\n"
          ]
        }, 
        {
          "locn": "-180,7 +175,7", 
          "lines": [
            "             response.setEntity(entity);\n", 
            "             \n", 
            " \t\t\thttpGetRequestProcessor.process(request.getRequest(), response, msgContext,\n", 
            "-\t\t\t\t\trequest.getConnection(), os, true);\n", 
            "+\t\t\t\t\trequest.getConnection(), true);\n", 
            " \t\t} \n", 
            " \t\t\n", 
            " \t\t//need special case to handle REST\n"
          ]
        }, 
        {
          "locn": "-258,7 +253,7", 
          "lines": [
            " \t\t\t\t// Dispatcher Service.\n", 
            " \n", 
            " \t\t\t\tif (axisService == null) {\n", 
            "-\t\t\t\t\tString defaultSvcName = NHttpConfiguration.getInstance().getStringValue(\n", 
            "+\t\t\t\t\tString defaultSvcName = PassThroughConfiguration.getInstance().getStringProperty(\n", 
            "                             \"nhttp.default.service\", \"__SynapseService\");\n", 
            " \t\t\t\t\taxisService =  msgContext.getConfigurationContext().getAxisConfiguration()\n", 
            " \t\t\t\t\t                        .getService(defaultSvcName);\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ServerWorker.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/ServerWorker.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-145,7 +145,7", 
          "lines": [
            "      */\n", 
            "     public void closeConnection(NHttpServerConnection conn) {\n", 
            "         if (log.isDebugEnabled()) {\n", 
            "-            log.debug(\"Shutting down connection forcefully \" + conn);\n", 
            "+            log.debug(\"Closing connection forcefully \" + conn);\n", 
            "         }\n", 
            "         lock.lock();\n", 
            "         try {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/connections/SourceConnections.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/connections/SourceConnections.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-21,9 +21,6", 
          "lines": [
            " \n", 
            " public class PassThroughConstants {\n", 
            " \n", 
            "-    public static final int DEFAULT_IO_THREAD_COUNT = Runtime.getRuntime().availableProcessors();\n", 
            "-    public static final int DEFAULT_MAX_CONN_PER_HOST_PORT = Integer.MAX_VALUE;\n", 
            "-    \n", 
            "     public static final String REQUEST_MESSAGE_CONTEXT = \"REQUEST_MESSAGE_CONTEXT\";\n", 
            "     public static final String CONNECTION_POOL = \"CONNECTION_POOL\";\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-84,6 +81,8", 
          "lines": [
            "     protected static final String PASS_THROUGH_TARGET_CONNECTION = \"pass-through.Target-Connection\";\n", 
            "     protected static final String PASS_THROUGH_TARGET_RESPONSE = \"pass-through.Target-Response\";\n", 
            " \n", 
            "+    public static final String PASS_THROUGH_RESPONSE_SOURCE_BUFFER = \"synapse.response-source-buffer\";\n", 
            "+\n", 
            "     public static final String PASS_THROUGH_PIPE = \"pass-through.pipe\";\n", 
            " \n", 
            "     // used to define the default content type as a parameter in the axis2.xml\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughConstants.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-42,6 +42,7", 
          "lines": [
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.http.HttpException;\n", 
            " import org.apache.http.HttpStatus;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            " import org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor;\n", 
            " import org.apache.http.nio.NHttpClientEventHandler;\n", 
            " import org.apache.http.nio.NHttpServerConnection;\n"
          ]
        }, 
        {
          "locn": "-49,7 +50,6", 
          "lines": [
            " import org.apache.http.nio.reactor.IOReactorException;\n", 
            " import org.apache.http.nio.reactor.IOReactorExceptionHandler;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            " import org.apache.synapse.commons.jmx.MBeanRegistrar;\n", 
            " import org.apache.synapse.transport.nhttp.NhttpConstants;\n", 
            " import org.apache.synapse.transport.nhttp.util.MessageFormatterDecoratorFactory;\n"
          ]
        }, 
        {
          "locn": "-61,6 +61,7", 
          "lines": [
            " import org.apache.synapse.transport.passthru.jmx.TransportView;\n", 
            " import org.apache.synapse.transport.passthru.util.PassThroughTransportUtils;\n", 
            " import org.apache.synapse.transport.passthru.util.SourceResponseFactory;\n", 
            "+import org.apache.synapse.transport.utils.logging.LoggingUtils;\n", 
            " \n", 
            " import javax.net.ssl.SSLContext;\n", 
            " import java.io.ByteArrayOutputStream;\n"
          ]
        }, 
        {
          "locn": "-159,7 +160,6", 
          "lines": [
            " \n", 
            "         targetConfiguration = new TargetConfiguration(configurationContext,\n", 
            "                 transportOutDescription, workerPool);\n", 
            "-        targetConfiguration.build();\n", 
            "         configurationContext.setProperty(PassThroughConstants.PASS_THROUGH_TRANSPORT_WORKER_POOL,\n", 
            "                 targetConfiguration.getWorkerPool());\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-211,7 +211,7", 
          "lines": [
            "         TargetHandler handler = new TargetHandler(deliveryAgent, targetConfiguration);\n", 
            "         final IOEventDispatch ioEventDispatch =\n", 
            "                 getEventDispatch(handler, sslContext, sslSetupHandler,\n", 
            "-                        targetConfiguration.getHttpParameters(), transportOutDescription);\n", 
            "+                        targetConfiguration.getConnectionConfig(), transportOutDescription);\n", 
            " \n", 
            "         // start the sender in a separate thread\n", 
            "         Thread t = new Thread(new Runnable() {\n"
          ]
        }, 
        {
          "locn": "-429,7 +429,7", 
          "lines": [
            "      * @param handler The passthru target handler instance\n", 
            "      * @param sslContext SSL context used by the sender or null\n", 
            "      * @param sslIOSessionHandler SSL session handler or null\n", 
            "-     * @param params HTTP parameters\n", 
            "+     * @param config ConnectionConfig instance\n", 
            "      * @param trpOut Transport out description\n", 
            "      * @return an IOEventDispatch instance\n", 
            "      * @throws AxisFault on error\n"
          ]
        }, 
        {
          "locn": "-437,10 +437,10", 
          "lines": [
            "     protected IOEventDispatch getEventDispatch(NHttpClientEventHandler handler,\n", 
            "                                                SSLContext sslContext,\n", 
            "                                                SSLSetupHandler sslIOSessionHandler,\n", 
            "-                                               HttpParams params,\n", 
            "+                                               ConnectionConfig config,\n", 
            "                                                TransportOutDescription trpOut) throws AxisFault {\n", 
            " \n", 
            "-        return new TargetIOEventDispatch(handler, params);\n", 
            "+        return LoggingUtils.getClientIODispatch(handler, config);\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/PassThroughHttpSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-30,7 +30,6", 
          "lines": [
            " import org.apache.http.impl.DefaultConnectionReuseStrategy;\n", 
            " import org.apache.http.impl.DefaultHttpResponseFactory;\n", 
            " import org.apache.http.nio.*;\n", 
            "-import org.apache.http.nio.util.ByteBufferAllocator;\n", 
            " import org.apache.http.nio.util.HeapByteBufferAllocator;\n", 
            " import org.apache.http.nio.util.ContentOutputBuffer;\n", 
            " import org.apache.http.nio.util.ContentInputBuffer;\n"
          ]
        }, 
        {
          "locn": "-38,7 +37,6", 
          "lines": [
            " import org.apache.http.nio.util.SharedOutputBuffer;\n", 
            " import org.apache.http.nio.entity.ContentInputStream;\n", 
            " import org.apache.http.nio.entity.ContentOutputStream;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            " import org.apache.http.protocol.*;\n", 
            " import org.apache.http.util.EncodingUtils;\n", 
            " import org.apache.commons.logging.Log;\n"
          ]
        }, 
        {
          "locn": "-68,8 +66,6", 
          "lines": [
            " \n", 
            "     private static final Log log = LogFactory.getLog(ServerHandler.class);\n", 
            " \n", 
            "-    /** the HTTP protocol parameters to adhere to */\n", 
            "-    private final HttpParams params;\n", 
            "     /** the factory to create HTTP responses */\n", 
            "     private final HttpResponseFactory responseFactory;\n", 
            "     /** the HTTP response processor */\n"
          ]
        }, 
        {
          "locn": "-76,15 +72,11", 
          "lines": [
            "     private final HttpProcessor httpProcessor;\n", 
            "     /** the strategy to re-use connections */\n", 
            "     private final ConnectionReuseStrategy connStrategy;\n", 
            "-    /** the buffer allocator */\n", 
            "-    private final ByteBufferAllocator allocator;\n", 
            " \n", 
            "     /** the Axis2 configuration context */\n", 
            "     ConfigurationContext cfgCtx = null;\n", 
            "     /** the nhttp configuration */\n", 
            "     private NHttpConfiguration cfg = null;\n", 
            "-    /** is this https? */\n", 
            "-    private boolean isHttps = false;\n", 
            " \n", 
            "     /** the thread pool to process requests */\n", 
            "     private WorkerPool workerPool = null;\n"
          ]
        }, 
        {
          "locn": "-95,22 +87,17", 
          "lines": [
            "     private volatile List<NHttpServerConnection> activeConnections = null;\n", 
            " \n", 
            "     /**\n", 
            "-     * This parset is used by the priority executor to parse a given HTTP message and\n", 
            "+     * This parser is used by the priority executor to parse a given HTTP message and\n", 
            "      * determine the priority of the message\n", 
            "      */\n", 
            "     private Parser parser = null;\n", 
            " \n", 
            "-    /** WSDL processor for Get requests*/\n", 
            "-    private HttpGetRequestProcessor httpGetRequestProcessor = null;\n", 
            "-\n", 
            "     /**\n", 
            "-     * An executor capable of exucuting the Server Worker according the priority assigned\n", 
            "+     * An executor capable of executing the Server Worker according the priority assigned\n", 
            "      * to a particular message\n", 
            "      */\n", 
            "     private PriorityExecutor executor = null;\n", 
            " \n", 
            "-    private boolean restDispatching = true;\n", 
            "-    \n", 
            "     private LatencyView latencyView = null;\n", 
            "     private LatencyView s2sLatencyView = null;\n", 
            "     private ThreadingView threadingView = null;\n"
          ]
        }, 
        {
          "locn": "-126,18 +113,14", 
          "lines": [
            "         super();\n", 
            "         this.listenerContext = listenerContext;\n", 
            "         this.cfgCtx = listenerContext.getCfgCtx();\n", 
            "-        this.params = listenerContext.getParams();\n", 
            "-        this.isHttps = listenerContext.isSsl();\n", 
            "         this.metrics = listenerContext.getMetrics();\n", 
            "         this.responseFactory = new DefaultHttpResponseFactory();\n", 
            "         this.httpProcessor = getHttpProcessor();\n", 
            "         this.connStrategy = new DefaultConnectionReuseStrategy();\n", 
            "-        this.allocator = new HeapByteBufferAllocator();\n", 
            "         this.activeConnections = new ArrayList<NHttpServerConnection>();\n", 
            "         this.latencyView = new LatencyView(\"NHTTPLatencyView\", listenerContext.getTransportIn().getName());\n", 
            "         this.s2sLatencyView = new LatencyView(\"NHTTPS2SLatencyView\", listenerContext.getTransportIn().getName());\n", 
            "         this.threadingView = new ThreadingView(\"HttpServerWorker\", true, 50);\n", 
            "-        this.restDispatching = listenerContext.isRestDispatching();\n", 
            " \n", 
            "         this.cfg = NHttpConfiguration.getInstance();\n", 
            "         if (listenerContext.getExecutor() == null)  {\n"
          ]
        }, 
        {
          "locn": "-151,8 +134,6", 
          "lines": [
            "             this.executor = listenerContext.getExecutor();\n", 
            "             this.parser = listenerContext.getParser();\n", 
            "         }\n", 
            "-\n", 
            "-        this.httpGetRequestProcessor = listenerContext.getHttpGetRequestProcessor();\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-179,7 +160,7", 
          "lines": [
            "                 conn.getContext().setAttribute(NhttpConstants.REQUEST_READ, Boolean.FALSE);\n", 
            "                 \n", 
            "                 ContentInputBuffer inputBuffer\n", 
            "-                        = new SharedInputBuffer(cfg.getBufferSize(), conn, allocator);\n", 
            "+                        = new SharedInputBuffer(cfg.getBufferSize(), HeapByteBufferAllocator.INSTANCE);\n", 
            "                 context.setAttribute(REQUEST_SINK_BUFFER, inputBuffer);\n", 
            "                 is = new ContentInputStream(inputBuffer);\n", 
            "             } else {\n"
          ]
        }, 
        {
          "locn": "-188,7 +169,7", 
          "lines": [
            "             }\n", 
            "             \n", 
            "             ContentOutputBuffer outputBuffer\n", 
            "-                    = new SharedOutputBuffer(cfg.getBufferSize(), conn, allocator);\n", 
            "+                    = new SharedOutputBuffer(cfg.getBufferSize(), HeapByteBufferAllocator.INSTANCE);\n", 
            "             context.setAttribute(RESPONSE_SOURCE_BUFFER, outputBuffer);\n", 
            "             OutputStream os = new ContentOutputStream(outputBuffer);\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-196,7 +177,6", 
          "lines": [
            "             ProtocolVersion httpVersion = request.getRequestLine().getProtocolVersion();\n", 
            "             HttpResponse response = responseFactory.newHttpResponse(\n", 
            "                 httpVersion, HttpStatus.SC_OK, context);\n", 
            "-            response.setParams(this.params);\n", 
            " \n", 
            "             // create a basic HttpEntity using the source channel of the response pipe\n", 
            "             BasicHttpEntity entity = new BasicHttpEntity();\n"
          ]
        }, 
        {
          "locn": "-243,11 +223,11", 
          "lines": [
            "     public void inputReady(final NHttpServerConnection conn, final ContentDecoder decoder) {\n", 
            " \n", 
            "         HttpContext context = conn.getContext();\n", 
            "-        ContentInputBuffer inBuf\n", 
            "-                = (ContentInputBuffer) context.getAttribute(REQUEST_SINK_BUFFER);\n", 
            "+        SharedInputBuffer inBuf\n", 
            "+                = (SharedInputBuffer) context.getAttribute(REQUEST_SINK_BUFFER);\n", 
            " \n", 
            "         try {\n", 
            "-            int bytesRead = inBuf.consumeContent(decoder);\n", 
            "+            int bytesRead = inBuf.consumeContent(decoder, conn);\n", 
            "             if (metrics != null && bytesRead > 0) {\n", 
            "                 metrics.incrementBytesReceived(bytesRead);\n", 
            "             }\n"
          ]
        }, 
        {
          "locn": "-278,17 +258,17", 
          "lines": [
            " \n", 
            "         HttpContext context = conn.getContext();\n", 
            "         HttpResponse response = conn.getHttpResponse();\n", 
            "-        ContentOutputBuffer outBuf = (ContentOutputBuffer) context.getAttribute(\n", 
            "+        SharedOutputBuffer outBuf = (SharedOutputBuffer) context.getAttribute(\n", 
            "                 RESPONSE_SOURCE_BUFFER);\n", 
            " \n", 
            "         if (outBuf == null) {\n", 
            "-            // fix for SYNAPSE 584. This is a temporaly fix becuase of HTTPCORE-208\n", 
            "+            // fix for SYNAPSE 584. This is a temporarily fix because of HTTPCORE-208\n", 
            "             shutdownConnection(conn);\n", 
            "             return;\n", 
            "         }\n", 
            " \n", 
            "         try {\n", 
            "-            int bytesWritten = outBuf.produceContent(encoder);\n", 
            "+            int bytesWritten = outBuf.produceContent(encoder, conn);\n", 
            "             if (metrics != null && bytesWritten > 0) {\n", 
            "                 metrics.incrementBytesSent(bytesWritten);\n", 
            "             }\n"
          ]
        }, 
        {
          "locn": "-490,6 +470,9", 
          "lines": [
            "      * @param e the exception encountered\n", 
            "      */\n", 
            "     public void exception(final NHttpServerConnection conn, final HttpException e) {\n", 
            "+        if (log.isDebugEnabled()) {\n", 
            "+            log.debug(\"HTTP protocol error encountered in ServerHandler\", e);\n", 
            "+        }\n", 
            "         if (metrics != null) {\n", 
            "             metrics.incrementFaultsReceiving();\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-522,7 +505,7", 
          "lines": [
            "         } else if (e instanceof IOException) {\n", 
            "             exception(conn, (IOException) e);\n", 
            "         } else {\n", 
            "-            log.error(\"Unexpected I/O error: \" + e.getClass().getName(), e);\n", 
            "+            log.error(\"Unexpected error: \" + e.getClass().getName(), e);\n", 
            "             if (metrics != null) {\n", 
            "                 metrics.incrementFaultsReceiving();\n", 
            "             }\n"
          ]
        }, 
        {
          "locn": "-609,12 +592,11", 
          "lines": [
            "      * @return the HttpProcessor that processes HttpResponses of this server\n", 
            "      */\n", 
            "     private HttpProcessor getHttpProcessor() {\n", 
            "-        BasicHttpProcessor httpProcessor = new BasicHttpProcessor();\n", 
            "-        httpProcessor.addInterceptor(new ResponseDate());\n", 
            "-        httpProcessor.addInterceptor(new ResponseServer());\n", 
            "-        httpProcessor.addInterceptor(new ResponseContent());\n", 
            "-        httpProcessor.addInterceptor(new ResponseConnControl());\n", 
            "-        return httpProcessor;\n", 
            "+        return new ImmutableHttpProcessor(\n", 
            "+                new ResponseDate(),\n", 
            "+                new ResponseServer(\"Synapse-HttpComponents-NIO\"),\n", 
            "+                new ResponseContent(),\n", 
            "+                new ResponseConnControl());\n", 
            "     }\n", 
            " \n", 
            "     public int getActiveCount() {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ServerHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ServerHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-35,6 +35,7", 
          "lines": [
            " import org.apache.axis2.util.JavaUtils;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            " import org.apache.http.impl.nio.reactor.DefaultListeningIOReactor;\n", 
            " import org.apache.http.nio.NHttpServerEventHandler;\n", 
            " import org.apache.http.nio.reactor.IOEventDispatch;\n"
          ]
        }, 
        {
          "locn": "-41,8 +42,8", 
          "lines": [
            " import org.apache.http.nio.reactor.IOReactorExceptionHandler;\n", 
            " import org.apache.http.nio.reactor.ListenerEndpoint;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            " import org.apache.synapse.transport.nhttp.util.NhttpMetricsCollector;\n", 
            "+import org.apache.synapse.transport.utils.logging.LoggingUtils;\n", 
            " \n", 
            " import javax.net.ssl.SSLContext;\n", 
            " import java.io.IOException;\n"
          ]
        }, 
        {
          "locn": "-89,8 +90,8", 
          "lines": [
            " \n", 
            "     protected IOEventDispatch getEventDispatch(\n", 
            "         NHttpServerEventHandler handler, SSLContext sslContext,\n", 
            "-        SSLSetupHandler setupHandler, HttpParams params) {\n", 
            "-        return new PlainServerIOEventDispatch(handler, params);\n", 
            "+        SSLSetupHandler setupHandler, ConnectionConfig config) {\n", 
            "+        return LoggingUtils.getServerIODispatch(handler, config);\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-197,7 +198,6", 
          "lines": [
            "         }\n", 
            "         \n", 
            "         // configure the IO reactor on the specified port\n", 
            "-        HttpParams params = listenerContext.getParams();\n", 
            "         try {\n", 
            "             String prefix = (sslContext == null ? \"http\" : \"https\") + \"-Listener I/O dispatcher\";\n", 
            "             ioReactor = new DefaultListeningIOReactor(\n"
          ]
        }, 
        {
          "locn": "-229,7 +229,7", 
          "lines": [
            " \n", 
            "         handler = new ServerHandler(listenerContext);\n", 
            "         final IOEventDispatch ioEventDispatch = getEventDispatch(handler,\n", 
            "-                sslContext, sslSetupHandler, params);\n", 
            "+                sslContext, sslSetupHandler, listenerContext.getConnectionConfig());\n", 
            "         state = BaseConstants.STARTED;\n", 
            " \n", 
            "         listenerContext.getHttpGetRequestProcessor().init(cfgCtx, handler);\n"
          ]
        }, 
        {
          "locn": "-354,7 +354,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     * Returns the number of requestes queued in the thread pool\n", 
            "+     * Returns the number of requests queued in the thread pool\n", 
            "      * @return queue size\n", 
            "      */\n", 
            "     public int getQueueSize() {\n"
          ]
        }, 
        {
          "locn": "-383,34 +383,6", 
          "lines": [
            " \n", 
            " \n", 
            "     /**\n", 
            "-     * Return the EPR for the given service (implements deprecated method temporarily)\n", 
            "-     */\n", 
            "-    public EndpointReference getEPRForService(String serviceName, String ip) throws AxisFault {\n", 
            "-\n", 
            "-        String trailer = \"\";\n", 
            "-        //Strip out the operation name\n", 
            "-        if (serviceName.indexOf('/') != -1) {\n", 
            "-            trailer += serviceName.substring(serviceName.indexOf(\"/\"));\n", 
            "-            serviceName = serviceName.substring(0, serviceName.indexOf('/'));\n", 
            "-        }\n", 
            "-        // strip out the endpoint name if present\n", 
            "-        if (serviceName.indexOf('.') != -1) {\n", 
            "-            trailer += serviceName.substring(serviceName.indexOf(\".\"));\n", 
            "-            serviceName = serviceName.substring(0, serviceName.indexOf('.'));\n", 
            "-        }\n", 
            "-\n", 
            "-        if (serviceNameToEPRMap.containsKey(serviceName)) {\n", 
            "-            return new EndpointReference(\n", 
            "-                    customEPRPrefix + serviceNameToEPRMap.get(serviceName) + trailer);\n", 
            "-        } else {\n", 
            "-            if (serviceEPRPrefix == null) {\n", 
            "-                return null;\n", 
            "-            }\n", 
            "-            return new EndpointReference(serviceEPRPrefix + serviceName + trailer);\n", 
            "-        }\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "      * Return the EPRs for the given service over this transport\n", 
            "      * @param serviceName name of the service\n", 
            "      * @param ip IP address\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOListener.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOListener.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-16,6 +16,7", 
          "lines": [
            "  *  specific language governing permissions and limitations\n", 
            "  *  under the License.\n", 
            "  */\n", 
            "+\n", 
            " package org.apache.synapse.transport.nhttp;\n", 
            " \n", 
            " import org.apache.axiom.om.OMAbstractFactory;\n"
          ]
        }, 
        {
          "locn": "-49,8 +50,6", 
          "lines": [
            " import org.apache.http.nio.util.SharedInputBuffer;\n", 
            " import org.apache.http.nio.util.SharedOutputBuffer;\n", 
            " import org.apache.http.nio.entity.ContentInputStream;\n", 
            "-import org.apache.http.params.DefaultedHttpParams;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            " import org.apache.http.protocol.*;\n", 
            " import org.apache.synapse.transport.nhttp.debug.ClientConnectionDebug;\n", 
            " import org.apache.synapse.transport.nhttp.util.NhttpMetricsCollector;\n"
          ]
        }, 
        {
          "locn": "-76,8 +75,6", 
          "lines": [
            " \n", 
            "     private static final Log log = LogFactory.getLog(ClientHandler.class);\n", 
            " \n", 
            "-    /** the HTTP protocol parameters to adhere to for outgoing messages */\n", 
            "-    private final HttpParams params;\n", 
            "     /** the HttpProcessor for response messages received */\n", 
            "     private final HttpProcessor httpProcessor;\n", 
            "     /** the connection re-use strategy */\n"
          ]
        }, 
        {
          "locn": "-122,15 +119,12", 
          "lines": [
            "      * context and Http protocol parameters given\n", 
            "      * \n", 
            "      * @param cfgCtx the Axis2 configuration context\n", 
            "-     * @param params the Http protocol parameters to adhere to\n", 
            "      * @param metrics statistics collection metrics\n", 
            "      */\n", 
            "-    public ClientHandler(final ConfigurationContext cfgCtx, final HttpParams params,\n", 
            "-        final NhttpMetricsCollector metrics) {\n", 
            "+    public ClientHandler(final ConfigurationContext cfgCtx, final NhttpMetricsCollector metrics) {\n", 
            "         \n", 
            "         super();\n", 
            "         this.cfgCtx = cfgCtx;\n", 
            "-        this.params = params;\n", 
            "         this.httpProcessor = getHttpProcessor();\n", 
            "         this.connStrategy = new DefaultConnectionReuseStrategy();\n", 
            "         this.metrics = metrics;\n"
          ]
        }, 
        {
          "locn": "-228,7 +222,7", 
          "lines": [
            " \n", 
            "             HttpContext context = conn.getContext();\n", 
            "             ContentOutputBuffer outputBuffer\n", 
            "-                    = new SharedOutputBuffer(cfg.getBufferSize(), conn, allocator);\n", 
            "+                    = new SharedOutputBuffer(cfg.getBufferSize(), allocator);\n", 
            "             axis2Req.setOutputBuffer(outputBuffer);\n", 
            "             context.setAttribute(REQUEST_SOURCE_BUFFER, outputBuffer);\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-238,7 +232,6", 
          "lines": [
            "             context.setAttribute(OUTGOING_MESSAGE_CONTEXT, axis2Req.getMsgContext());\n", 
            " \n", 
            "             HttpRequest request = axis2Req.getRequest();\n", 
            "-            request.setParams(new DefaultedHttpParams(request.getParams(), this.params));\n", 
            "             this.httpProcessor.process(request, context);\n", 
            "             if (axis2Req.getTimeout() > 0) {\n", 
            "                 conn.setSocketTimeout(axis2Req.getTimeout());\n"
          ]
        }, 
        {
          "locn": "-521,10 +514,10", 
          "lines": [
            "     public void inputReady(final NHttpClientConnection conn, final ContentDecoder decoder) {\n", 
            "         HttpContext context = conn.getContext();\n", 
            "         HttpResponse response = conn.getHttpResponse();\n", 
            "-        ContentInputBuffer inBuf = (ContentInputBuffer) context.getAttribute(RESPONSE_SINK_BUFFER);\n", 
            "+        SharedInputBuffer inBuf = (SharedInputBuffer) context.getAttribute(RESPONSE_SINK_BUFFER);\n", 
            " \n", 
            "         try {\n", 
            "-            int bytesRead = inBuf.consumeContent(decoder);\n", 
            "+            int bytesRead = inBuf.consumeContent(decoder, conn);\n", 
            "             if (metrics != null && bytesRead > 0) {\n", 
            "                 if (metrics.getLevel() == MetricsCollector.LEVEL_FULL) {\n", 
            "                     metrics.incrementBytesReceived(getMessageContext(conn), bytesRead);\n"
          ]
        }, 
        {
          "locn": "-598,12 +591,12", 
          "lines": [
            "     public void outputReady(final NHttpClientConnection conn, final ContentEncoder encoder) {\n", 
            "         HttpContext context = conn.getContext();\n", 
            " \n", 
            "-        ContentOutputBuffer outBuf\n", 
            "-                = (ContentOutputBuffer) context.getAttribute(REQUEST_SOURCE_BUFFER);\n", 
            "+        SharedOutputBuffer outBuf\n", 
            "+                = (SharedOutputBuffer) context.getAttribute(REQUEST_SOURCE_BUFFER);\n", 
            "         if (outBuf == null) return;\n", 
            " \n", 
            "         try {\n", 
            "-            int bytesWritten = outBuf.produceContent(encoder);\n", 
            "+            int bytesWritten = outBuf.produceContent(encoder, conn);\n", 
            "             if (metrics != null) {\n", 
            "                 if (bytesWritten > 0) {\n", 
            "                     if (metrics.getLevel() == MetricsCollector.LEVEL_FULL) {\n"
          ]
        }, 
        {
          "locn": "-711,7 +704,7", 
          "lines": [
            " \n", 
            "                 // sometimes, some http clients sends an \"\\r\\n\" as the content body with a\n", 
            "                 // HTTP 202 OK.. we will just get it into this temp buffer and ignore it..\n", 
            "-                ContentInputBuffer inputBuffer = new SharedInputBuffer(8, conn, allocator);\n", 
            "+                ContentInputBuffer inputBuffer = new SharedInputBuffer(8, allocator);\n", 
            "                 context.setAttribute(RESPONSE_SINK_BUFFER, inputBuffer);\n", 
            " \n", 
            "                 // create a dummy message with an empty SOAP envelope and a property\n"
          ]
        }, 
        {
          "locn": "-954,8 +947,7", 
          "lines": [
            "         }\n", 
            " \n", 
            "         if (expectEntityBody) {\n", 
            "-            inputBuffer\n", 
            "-                = new SharedInputBuffer(cfg.getBufferSize(), conn, allocator);\n", 
            "+            inputBuffer = new SharedInputBuffer(cfg.getBufferSize(), allocator);\n", 
            "             context.setAttribute(RESPONSE_SINK_BUFFER, inputBuffer);\n", 
            " \n", 
            "             BasicHttpEntity entity = new BasicHttpEntity();\n"
          ]
        }, 
        {
          "locn": "-1116,13 +1108,11", 
          "lines": [
            "      * @return the HttpProcessor that processes requests\n", 
            "      */\n", 
            "     private HttpProcessor getHttpProcessor() {\n", 
            "-        BasicHttpProcessor httpProcessor = new BasicHttpProcessor();\n", 
            "-        httpProcessor.addInterceptor(new RequestContent());\n", 
            "-        httpProcessor.addInterceptor(new RequestTargetHost());\n", 
            "-        httpProcessor.addInterceptor(new RequestConnControl());\n", 
            "-        httpProcessor.addInterceptor(new RequestUserAgent());\n", 
            "-        httpProcessor.addInterceptor(new RequestExpectContinue());\n", 
            "-        return httpProcessor;\n", 
            "+        return new ImmutableHttpProcessor(new RequestContent(),\n", 
            "+                new RequestTargetHost(),\n", 
            "+                new RequestConnControl(),\n", 
            "+                new RequestUserAgent(),\n", 
            "+                new RequestExpectContinue(false));\n", 
            "     }\n", 
            " \n", 
            "     public int getActiveCount() {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ClientHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ClientHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-19,20 +19,15", 
          "lines": [
            " \n", 
            " package org.apache.synapse.transport.nhttp;\n", 
            " \n", 
            "-import org.apache.commons.logging.Log;\n", 
            "-import org.apache.commons.logging.LogFactory;\n", 
            "-import org.apache.http.params.HttpProtocolParams;\n", 
            "-import org.apache.synapse.commons.util.MiscellaneousUtil;\n", 
            "+import org.apache.synapse.transport.utils.config.HttpTransportConfiguration;\n", 
            " \n", 
            "-import java.nio.charset.CodingErrorAction;\n", 
            " import java.util.ArrayList;\n", 
            " import java.util.List;\n", 
            "-import java.util.Properties;\n", 
            " \n", 
            " /**\n", 
            "  * Store and manage properties that tune the nhttp transport\n", 
            "  */\n", 
            "-public final class NHttpConfiguration {\n", 
            "+public final class NHttpConfiguration extends HttpTransportConfiguration {\n", 
            " \n", 
            "     // defaults\n", 
            "     private static final int WORKERS_CORE_THREADS  = 20;\n"
          ]
        }, 
        {
          "locn": "-47,7 +42,6", 
          "lines": [
            "     private static final String S_T_MAX      = \"snd_t_max\";\n", 
            "     private static final String S_T_ALIVE    = \"snd_alive_sec\";\n", 
            "     private static final String S_T_QLEN     = \"snd_qlen\";\n", 
            "-    private static final String S_IO_WORKERS = \"snd_io_threads\";\n", 
            " \n", 
            "     // client sender\n", 
            "     private static final String C_T_CORE     = \"lst_t_core\";\n"
          ]
        }, 
        {
          "locn": "-54,16 +48,15", 
          "lines": [
            "     private static final String C_T_MAX      = \"lst_t_max\";\n", 
            "     private static final String C_T_ALIVE    = \"lst_alive_sec\";\n", 
            "     private static final String C_T_QLEN     = \"lst_qlen\";\n", 
            "-    private static final String C_IO_WORKERS = \"lst_io_threads\";\n", 
            " \n", 
            "+    private static final String IO_WORKERS = \"io_threads_per_reactor\";\n", 
            "+\n", 
            "     // general\n", 
            "     private static final String G_BUFFER_SIZE  = \"nhttp_buffer_size\";\n", 
            "     private static final String G_DISABLED_HTTP_METHODS = \"nhttp_disabled_methods\";\n", 
            " \n", 
            "-    private static final Log log = LogFactory.getLog(NHttpConfiguration.class);\n", 
            "     private static NHttpConfiguration _instance = new NHttpConfiguration();\n", 
            "-    private Properties props;\n", 
            "-    List<String> methods;\n", 
            "+    private List<String> methods;\n", 
            " \n", 
            "     /** Comma separated list of blocked uris*/\n", 
            "     public static final String BLOCK_SERVICE_LIST = \"http.block_service_list\";\n"
          ]
        }, 
        {
          "locn": "-71,146 +64,78", 
          "lines": [
            "     public static final String BLOCK_SERVICE_LIST_DEFAULT = \"false\";\n", 
            "     \n", 
            "     private NHttpConfiguration() {\n", 
            "-        try {\n", 
            "-            props = MiscellaneousUtil.loadProperties(\"nhttp.properties\");\n", 
            "-        } catch (Exception ignore) {}\n", 
            "+        super(\"nhttp\");\n", 
            "     }\n", 
            " \n", 
            "+    @Override\n", 
            "+    protected int getThreadsPerReactor() {\n", 
            "+        return getIntProperty(IO_WORKERS, IO_WORKER_COUNT);\n", 
            "+    }\n", 
            "+\n", 
            "     public static NHttpConfiguration getInstance() {\n", 
            "         return _instance;\n", 
            "     }\n", 
            " \n", 
            "     public int getServerCoreThreads() {\n", 
            "-        return getProperty(S_T_CORE, WORKERS_CORE_THREADS);\n", 
            "+        return getIntProperty(S_T_CORE, WORKERS_CORE_THREADS);\n", 
            "     }\n", 
            " \n", 
            "     public int getServerMaxThreads() {\n", 
            "-        return getProperty(S_T_MAX, WORKERS_MAX_THREADS);\n", 
            "+        return getIntProperty(S_T_MAX, WORKERS_MAX_THREADS);\n", 
            "     }\n", 
            " \n", 
            "     public int getServerKeepalive() {\n", 
            "-        return getProperty(S_T_ALIVE, WORKER_KEEP_ALIVE);\n", 
            "+        return getIntProperty(S_T_ALIVE, WORKER_KEEP_ALIVE);\n", 
            "     }\n", 
            " \n", 
            "     public int getServerQueueLen() {\n", 
            "-        return getProperty(S_T_QLEN, BLOCKING_QUEUE_LENGTH);\n", 
            "+        return getIntProperty(S_T_QLEN, BLOCKING_QUEUE_LENGTH);\n", 
            "     }\n", 
            " \n", 
            "-    public int getServerIOWorkers() {\n", 
            "-        return getProperty(S_IO_WORKERS, IO_WORKER_COUNT);\n", 
            "-    }\n", 
            "-\n", 
            "-\n", 
            "     public int getClientCoreThreads() {\n", 
            "-        return getProperty(C_T_CORE, WORKERS_CORE_THREADS);\n", 
            "+        return getIntProperty(C_T_CORE, WORKERS_CORE_THREADS);\n", 
            "     }\n", 
            " \n", 
            "     public int getClientMaxThreads() {\n", 
            "-        return getProperty(C_T_MAX, WORKERS_MAX_THREADS);\n", 
            "+        return getIntProperty(C_T_MAX, WORKERS_MAX_THREADS);\n", 
            "     }\n", 
            " \n", 
            "     public int getClientKeepalive() {\n", 
            "-        return getProperty(C_T_ALIVE, WORKER_KEEP_ALIVE);\n", 
            "+        return getIntProperty(C_T_ALIVE, WORKER_KEEP_ALIVE);\n", 
            "     }\n", 
            " \n", 
            "     public int getClientQueueLen() {\n", 
            "-        return getProperty(C_T_QLEN, BLOCKING_QUEUE_LENGTH);\n", 
            "+        return getIntProperty(C_T_QLEN, BLOCKING_QUEUE_LENGTH);\n", 
            "     }\n", 
            " \n", 
            "-    public int getClientIOWorkers() {\n", 
            "-        return getProperty(C_IO_WORKERS, IO_WORKER_COUNT);\n", 
            "-    }\n", 
            "-\n", 
            "     public int getBufferSize() {\n", 
            "-        return getProperty(G_BUFFER_SIZE, BUFFER_SIZE);\n", 
            "+        return getIntProperty(G_BUFFER_SIZE, BUFFER_SIZE);\n", 
            "     }\n", 
            " \n", 
            "     public boolean isKeepAliveDisabled() {\n", 
            "-        return getProperty(NhttpConstants.DISABLE_KEEPALIVE, 0) == 1;\n", 
            "+        return getIntProperty(NhttpConstants.DISABLE_KEEPALIVE, 0) == 1;\n", 
            "     }\n", 
            " \n", 
            "     public boolean isPreserveUserAgentHeader() {\n", 
            "-        return getBooleanValue(NhttpConstants.USER_AGENT_HEADER_PRESERVE, false);\n", 
            "+        return getBooleanProperty(NhttpConstants.USER_AGENT_HEADER_PRESERVE, false);\n", 
            "     }\n", 
            " \n", 
            "     public boolean isPreserveServerHeader() {\n", 
            "-        return getBooleanValue(NhttpConstants.SERVER_HEADER_PRESERVE, true);\n", 
            "+        return getBooleanProperty(NhttpConstants.SERVER_HEADER_PRESERVE, true);\n", 
            "     }\n", 
            " \n", 
            "     public boolean isCountConnections() {\n", 
            "-        return getBooleanValue(NhttpConstants.COUNT_CONNECTIONS, false);\n", 
            "+        return getBooleanProperty(NhttpConstants.COUNT_CONNECTIONS, false);\n", 
            "     }\n", 
            " \n", 
            "     public String isServiceListBlocked() {\n", 
            "-        return getStringValue(BLOCK_SERVICE_LIST, BLOCK_SERVICE_LIST_DEFAULT);\n", 
            "+        return getStringProperty(BLOCK_SERVICE_LIST, BLOCK_SERVICE_LIST_DEFAULT);\n", 
            "     }\n", 
            " \n", 
            "-    /**\n", 
            "-     * Get properties that tune nhttp transport. Preference to system properties\n", 
            "-     * @param name name of the system/config property\n", 
            "-     * @param def default value to return if the property is not set\n", 
            "-     * @return the value of the property to be used\n", 
            "-     */\n", 
            "-    public int getProperty(String name, int def) {\n", 
            "-        String val = System.getProperty(name);\n", 
            "-        if (val == null) {\n", 
            "-            val = props.getProperty(name);\n", 
            "-        }\n", 
            "-\n", 
            "-        if (val != null && Integer.valueOf(val) > 0) {\n", 
            "-            if (log.isDebugEnabled()) {\n", 
            "-                log.debug(\"Using nhttp tuning parameter : \" + name + \" = \" + val);\n", 
            "-            }\n", 
            "-            return Integer.valueOf(val);\n", 
            "-        }        \n", 
            "-        return def;\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Get properties that tune nhttp transport. Preference to system properties\n", 
            "-     * @param name name of the system/config property\n", 
            "-     * @param def default value to return if the property is not set\n", 
            "-     * @return the value of the property to be used\n", 
            "-     */\n", 
            "-    public boolean getBooleanValue(String name, boolean def) {\n", 
            "-        String val = System.getProperty(name);\n", 
            "-        if (val == null) {\n", 
            "-            val = props.getProperty(name);\n", 
            "-        }\n", 
            "-\n", 
            "-        if (val != null && Boolean.parseBoolean(val)) {\n", 
            "-            if (log.isDebugEnabled()) {\n", 
            "-                log.debug(\"Using nhttp tuning parameter : \" + name);\n", 
            "-            }\n", 
            "-            return true;\n", 
            "-        } else if (val != null && !Boolean.parseBoolean(val)) {\n", 
            "-            if (log.isDebugEnabled()) {\n", 
            "-                log.debug(\"Using nhttp tuning parameter : \" + name);\n", 
            "-            }\n", 
            "-            return false;\n", 
            "-        }\n", 
            "-        return def;\n", 
            "-    }\n", 
            "-\n", 
            "-    /**\n", 
            "-     * Get properties that tune nhttp transport. Preference to system properties\n", 
            "-     * @param name name of the system/config property\n", 
            "-     * @param def default value to return if the property is not set\n", 
            "-     * @return the value of the property to be used\n", 
            "-     */\n", 
            "-    public String getStringValue(String name, String def) {\n", 
            "-        String val = System.getProperty(name);\n", 
            "-        if (val == null) {\n", 
            "-            val = props.getProperty(name);\n", 
            "-        }\n", 
            "-\n", 
            "-        return val == null ? def : val;\n", 
            "-    }\n", 
            "-\n", 
            "     public boolean isHttpMethodDisabled(String method) {\n", 
            "         if (methods == null) {\n", 
            "             methods = new ArrayList<String>();\n", 
            "-            String methodsString = getStringValue(G_DISABLED_HTTP_METHODS, \"\");\n", 
            "+            String methodsString = getStringProperty(G_DISABLED_HTTP_METHODS, \"\");\n", 
            "             for (String methodStr : methodsString.split(\",\")) {\n", 
            "                 methods.add(methodStr.trim().toUpperCase());\n", 
            "             }\n"
          ]
        }, 
        {
          "locn": "-218,25 +143,4", 
          "lines": [
            "         return methods.contains(method);\n", 
            "     }\n", 
            " \n", 
            "-    public CodingErrorAction getMalformedInputActionValue() {\n", 
            "-        String val = getStringValue(HttpProtocolParams.HTTP_MALFORMED_INPUT_ACTION, \"report\");\n", 
            "-        return getCodingErrorAction(val);\n", 
            "-    }\n", 
            "-\n", 
            "-    public CodingErrorAction getUnMappableInputActionValue() {\n", 
            "-        String val = getStringValue(HttpProtocolParams.HTTP_UNMAPPABLE_INPUT_ACTION, \"report\");\n", 
            "-        return getCodingErrorAction(val);\n", 
            "-    }\n", 
            "-\n", 
            "-    private CodingErrorAction getCodingErrorAction(String action) {\n", 
            "-        if (\"report\".equals(action)) {\n", 
            "-            return CodingErrorAction.REPORT;\n", 
            "-        } else if (\"ignore\".equals(action)) {\n", 
            "-            return CodingErrorAction.IGNORE;\n", 
            "-        } else if (\"replace\".equals(action)) {\n", 
            "-            return CodingErrorAction.REPLACE;\n", 
            "-        } else {\n", 
            "-            return CodingErrorAction.REPORT;\n", 
            "-        }\n", 
            "-    }\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/NHttpConfiguration.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/NHttpConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-31,12 +31,8", 
          "lines": [
            " import org.apache.axis2.transport.base.endpoint.config.URLEndpointsConfigurationFactory;\n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            " import org.apache.http.impl.nio.reactor.IOReactorConfig;\n", 
            "-import org.apache.http.nio.params.NIOReactorPNames;\n", 
            "-import org.apache.http.params.BasicHttpParams;\n", 
            "-import org.apache.http.params.HttpConnectionParams;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-import org.apache.http.params.HttpProtocolParams;\n", 
            " import org.apache.synapse.commons.evaluators.EvaluatorConstants;\n", 
            " import org.apache.synapse.commons.evaluators.EvaluatorException;\n", 
            " import org.apache.synapse.commons.evaluators.Parser;\n"
          ]
        }, 
        {
          "locn": "-83,8 +79,6", 
          "lines": [
            "     /** The bind addresses as (address, port) pairs */\n", 
            "     private String bindAddress = null;\n", 
            " \n", 
            "-    private HttpParams params = null;\n", 
            "-\n", 
            "     /** Endpoints configuration for specific HTTP Urls */\n", 
            "     private URLEndpointsConfiguration endpoints = null;\n", 
            " \n"
          ]
        }, 
        {
          "locn": "-155,9 +149,6", 
          "lines": [
            "             httpGetRequestProcessor = new DefaultHttpGetProcessor();\n", 
            "         }\n", 
            " \n", 
            "-        params = getListenerParameters();\n", 
            "-\n", 
            "-\n", 
            "         param = transportIn.getParameter(NhttpConstants.ENDPOINTS_CONFIGURATION);\n", 
            "         if (param != null && param.getValue() != null) {\n", 
            "             endpoints = new URLEndpointsConfigurationFactory().create(param.getValue().toString());\n"
          ]
        }, 
        {
          "locn": "-171,7 +162,7", 
          "lines": [
            "      * @throws org.apache.axis2.AxisFault if an error occurs\n", 
            "      */\n", 
            "     private void createPriorityConfiguration(String fileName) throws AxisFault {\n", 
            "-        OMElement definitions = null;\n", 
            "+        OMElement definitions;\n", 
            "         try {\n", 
            "             FileInputStream fis = new FileInputStream(fileName);\n", 
            "             definitions = new StAXOMBuilder(fis).getDocumentElement();\n"
          ]
        }, 
        {
          "locn": "-179,8 +170,10", 
          "lines": [
            "             definitions.build();\n", 
            "         } catch (FileNotFoundException e) {\n", 
            "             handleException(\"Priority configuration file cannot be found : \" + fileName, e);\n", 
            "+            return;\n", 
            "         } catch (XMLStreamException e) {\n", 
            "             handleException(\"Error parsing priority configuration xml file \" + fileName, e);\n", 
            "+            return;\n", 
            "         }\n", 
            " \n", 
            "         OMElement executorElem = definitions.getFirstChildWithName(\n"
          ]
        }, 
        {
          "locn": "-243,51 +236,14", 
          "lines": [
            "         return null;\n", 
            "     }\n", 
            " \n", 
            "-    /**\n", 
            "-     * get HTTP protocol parameters to which the listener must adhere to\n", 
            "-     * @return the applicable HTTP protocol parameters\n", 
            "-     */\n", 
            "-    private HttpParams getListenerParameters() {\n", 
            "-        HttpParams params = new BasicHttpParams();\n", 
            "+    public ConnectionConfig getConnectionConfig() {\n", 
            "         NHttpConfiguration cfg = NHttpConfiguration.getInstance();\n", 
            "-        params\n", 
            "-            .setIntParameter(HttpConnectionParams.SO_TIMEOUT,\n", 
            "-                cfg.getProperty(NhttpConstants.SO_TIMEOUT_RECEIVER, 60000))\n", 
            "-            .setIntParameter(HttpConnectionParams.SOCKET_BUFFER_SIZE,\n", 
            "-                cfg.getProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024))\n", 
            "-            .setBooleanParameter(HttpConnectionParams.STALE_CONNECTION_CHECK,\n", 
            "-                cfg.getProperty(HttpConnectionParams.STALE_CONNECTION_CHECK, 0) == 1)\n", 
            "-            .setBooleanParameter(HttpConnectionParams.TCP_NODELAY,\n", 
            "-                cfg.getProperty(HttpConnectionParams.TCP_NODELAY, 1) == 1)\n", 
            "-            .setParameter(HttpProtocolParams.ORIGIN_SERVER, \"Synapse-HttpComponents-NIO\")\n", 
            "-            .setParameter(\n", 
            "-                    HttpProtocolParams.HTTP_MALFORMED_INPUT_ACTION,\n", 
            "-                    cfg.getMalformedInputActionValue())\n", 
            "-            .setParameter(\n", 
            "-                    HttpProtocolParams.HTTP_UNMAPPABLE_INPUT_ACTION,\n", 
            "-                    cfg.getUnMappableInputActionValue());\n", 
            "-\n", 
            "-        if (cfg.getBooleanValue(NIOReactorPNames.INTEREST_OPS_QUEUEING, false)) {\n", 
            "-            params.setBooleanParameter(NIOReactorPNames.INTEREST_OPS_QUEUEING, true);\n", 
            "-        }\n", 
            "-        return params;\n", 
            "+        return cfg.getConnectionConfig();\n", 
            "     }\n", 
            " \n", 
            "     public IOReactorConfig getReactorConfig() {\n", 
            "-        IOReactorConfig config = new IOReactorConfig();\n", 
            "         NHttpConfiguration cfg = NHttpConfiguration.getInstance();\n", 
            "-        config.setIoThreadCount(cfg.getServerIOWorkers());\n", 
            "-        config.setSoTimeout(cfg.getProperty(NhttpConstants.SO_TIMEOUT_RECEIVER, 60000));\n", 
            "-        config.setSndBufSize(cfg.getProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));\n", 
            "-        config.setRcvBufSize(cfg.getProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));\n", 
            "-        config.setTcpNoDelay(cfg.getProperty(HttpConnectionParams.TCP_NODELAY, 1) == 1);\n", 
            "-        if (cfg.getBooleanValue(NIOReactorPNames.INTEREST_OPS_QUEUEING, false)) {\n", 
            "-            config.setInterestOpQueued(true);\n", 
            "-        }\n", 
            "-        if (cfg.getBooleanValue(HttpConnectionParams.SO_REUSEADDR, false)) {\n", 
            "-            config.setSoReuseAddress(true);\n", 
            "-        }\n", 
            "-        return config;\n", 
            "+        return cfg.getReactorConfig();\n", 
            "     }\n", 
            " \n", 
            "     public ConfigurationContext getCfgCtx() {\n"
          ]
        }, 
        {
          "locn": "-334,10 +290,6", 
          "lines": [
            "         return bindAddress;\n", 
            "     }\n", 
            " \n", 
            "-    public HttpParams getParams() {\n", 
            "-        return params;\n", 
            "-    }\n", 
            "-\n", 
            "     public URLEndpointsConfiguration getEndpoints() {\n", 
            "         return endpoints;\n", 
            "     }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ListenerContext.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/ListenerContext.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-41,21 +41,17", 
          "lines": [
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            " import org.apache.http.*;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            " import org.apache.http.entity.BasicHttpEntity;\n", 
            " import org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor;\n", 
            " import org.apache.http.impl.nio.reactor.IOReactorConfig;\n", 
            " import org.apache.http.nio.NHttpClientConnection;\n", 
            " import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "-import org.apache.http.nio.params.NIOReactorPNames;\n", 
            " import org.apache.http.nio.reactor.IOEventDispatch;\n", 
            " import org.apache.http.nio.reactor.IOReactorExceptionHandler;\n", 
            " import org.apache.http.nio.reactor.SessionRequest;\n", 
            " import org.apache.http.nio.reactor.SessionRequestCallback;\n", 
            " import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "-import org.apache.http.params.BasicHttpParams;\n", 
            "-import org.apache.http.params.HttpConnectionParams;\n", 
            "-import org.apache.http.params.HttpParams;\n", 
            "-import org.apache.http.params.HttpProtocolParams;\n", 
            " import org.apache.http.protocol.HTTP;\n", 
            " import org.apache.axis2.transport.base.threads.NativeThreadFactory;\n", 
            " import org.apache.synapse.transport.nhttp.debug.ClientConnectionDebug;\n"
          ]
        }, 
        {
          "locn": "-63,6 +59,7", 
          "lines": [
            " import org.apache.synapse.transport.nhttp.util.MessageFormatterDecoratorFactory;\n", 
            " import org.apache.synapse.transport.nhttp.util.NhttpUtil;\n", 
            " import org.apache.synapse.transport.nhttp.util.NhttpMetricsCollector;\n", 
            "+import org.apache.synapse.transport.utils.logging.LoggingUtils;\n", 
            " \n", 
            " import javax.net.ssl.SSLContext;\n", 
            " import java.io.IOException;\n"
          ]
        }, 
        {
          "locn": "-158,7 +155,6", 
          "lines": [
            "         preserveUserAgentHeader = NHttpConfiguration.getInstance().isPreserveUserAgentHeader();\n", 
            "         preserveServerHeader = NHttpConfiguration.getInstance().isPreserveServerHeader();\n", 
            " \n", 
            "-        HttpParams params = getClientParameters();\n", 
            "         try {\n", 
            "             String prefix = (sslContext == null ? \"http\" : \"https\") + \"-Sender I/O dispatcher\";\n", 
            "             ioReactor = new DefaultConnectingIOReactor(\n"
          ]
        }, 
        {
          "locn": "-182,9 +178,9", 
          "lines": [
            "         }\n", 
            " \n", 
            "         metrics = new NhttpMetricsCollector(false, transportOut.getName());\n", 
            "-        handler = new ClientHandler(cfgCtx, params, metrics);\n", 
            "+        handler = new ClientHandler(cfgCtx, metrics);\n", 
            "         final IOEventDispatch ioEventDispatch = getEventDispatch(\n", 
            "-            handler, sslContext, sslSetupHandler, params, transportOut);\n", 
            "+            handler, sslContext, sslSetupHandler, getConnectionConfig(), transportOut);\n", 
            " \n", 
            "         // start the Sender in a new seperate thread\n", 
            "         Thread t = new Thread(new Runnable() {\n"
          ]
        }, 
        {
          "locn": "-216,16 +212,15", 
          "lines": [
            "      * @param handler The NHTTP client handler instance\n", 
            "      * @param sslContext SSL context used by the sender or null\n", 
            "      * @param sslIOSessionHandler SSL session handler or null\n", 
            "-     * @param params HTTP parameters\n", 
            "+     * @param config ConnectionConfig object\n", 
            "      * @param trpOut Transport out description\n", 
            "      * @return an IOEventDispatch instance\n", 
            "      * @throws AxisFault on error\n", 
            "      */\n", 
            "     protected IOEventDispatch getEventDispatch(NHttpClientEventHandler handler, SSLContext sslContext,\n", 
            "-        SSLSetupHandler sslIOSessionHandler, HttpParams params,\n", 
            "+        SSLSetupHandler sslIOSessionHandler, ConnectionConfig config,\n", 
            "         TransportOutDescription trpOut) throws AxisFault {\n", 
            "-\n", 
            "-        return new PlainClientIOEventDispatch(handler, params);\n", 
            "+        return LoggingUtils.getClientIODispatch(handler, config);\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }, 
        {
          "locn": "-253,47 +248,14", 
          "lines": [
            "      * get HTTP protocol parameters to which the sender must adhere to\n", 
            "      * @return the applicable HTTP protocol parameters\n", 
            "      */\n", 
            "-    private HttpParams getClientParameters() {\n", 
            "+    private ConnectionConfig getConnectionConfig() {\n", 
            "         NHttpConfiguration cfg = NHttpConfiguration.getInstance();\n", 
            "-        HttpParams params = new BasicHttpParams();\n", 
            "-        params\n", 
            "-            .setIntParameter(HttpConnectionParams.SO_TIMEOUT,\n", 
            "-                cfg.getProperty(NhttpConstants.SO_TIMEOUT_SENDER, 60000))\n", 
            "-            .setIntParameter(HttpConnectionParams.CONNECTION_TIMEOUT,\n", 
            "-                cfg.getProperty(HttpConnectionParams.CONNECTION_TIMEOUT, 10000))\n", 
            "-            .setIntParameter(HttpConnectionParams.SOCKET_BUFFER_SIZE,\n", 
            "-                cfg.getProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024))\n", 
            "-            .setBooleanParameter(HttpConnectionParams.STALE_CONNECTION_CHECK,\n", 
            "-                cfg.getProperty(HttpConnectionParams.STALE_CONNECTION_CHECK, 0) == 1)\n", 
            "-            .setBooleanParameter(HttpConnectionParams.TCP_NODELAY,\n", 
            "-                cfg.getProperty(HttpConnectionParams.TCP_NODELAY, 1) == 1)\n", 
            "-            .setParameter(HttpProtocolParams.USER_AGENT, \"Synapse-HttpComponents-NIO\")\n", 
            "-            .setParameter(\n", 
            "-                    HttpProtocolParams.HTTP_MALFORMED_INPUT_ACTION,\n", 
            "-                    cfg.getMalformedInputActionValue())\n", 
            "-            .setParameter(\n", 
            "-                    HttpProtocolParams.HTTP_UNMAPPABLE_INPUT_ACTION,\n", 
            "-                    cfg.getUnMappableInputActionValue());\n", 
            "-\n", 
            "-        if (cfg.getBooleanValue(NIOReactorPNames.INTEREST_OPS_QUEUEING, false)) {\n", 
            "-            params.setBooleanParameter(NIOReactorPNames.INTEREST_OPS_QUEUEING, true);\n", 
            "-        }\n", 
            "-        return params;\n", 
            "+        return cfg.getConnectionConfig();\n", 
            "     }\n", 
            " \n", 
            "     private IOReactorConfig getReactorConfig() {\n", 
            "-        IOReactorConfig config = new IOReactorConfig();\n", 
            "         NHttpConfiguration cfg = NHttpConfiguration.getInstance();\n", 
            "-        config.setIoThreadCount(cfg.getClientIOWorkers());\n", 
            "-        config.setSoTimeout(cfg.getProperty(NhttpConstants.SO_TIMEOUT_SENDER, 60000));\n", 
            "-        config.setConnectTimeout(cfg.getProperty(HttpConnectionParams.CONNECTION_TIMEOUT, 10000));\n", 
            "-        config.setSndBufSize(cfg.getProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));\n", 
            "-        config.setRcvBufSize(cfg.getProperty(HttpConnectionParams.SOCKET_BUFFER_SIZE, 8 * 1024));\n", 
            "-        config.setTcpNoDelay(cfg.getProperty(HttpConnectionParams.TCP_NODELAY, 1) == 1);\n", 
            "-        if (cfg.getBooleanValue(NIOReactorPNames.INTEREST_OPS_QUEUEING, false)) {\n", 
            "-            config.setInterestOpQueued(true);\n", 
            "-        }\n", 
            "-        return config;\n", 
            "+        return cfg.getReactorConfig();\n", 
            "     }\n", 
            " \n", 
            "     /**\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/nhttp/HttpCoreNIOSender.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,125", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.HttpException;\n", 
            "+import org.apache.http.HttpResponse;\n", 
            "+import org.apache.http.nio.ContentDecoder;\n", 
            "+import org.apache.http.nio.ContentEncoder;\n", 
            "+import org.apache.http.nio.NHttpClientConnection;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "+\n", 
            "+import java.io.IOException;\n", 
            "+\n", 
            "+public class LoggingClientEventHandler implements NHttpClientEventHandler {\n", 
            "+\n", 
            "+    private final Log log;\n", 
            "+\n", 
            "+    private final NHttpClientEventHandler handler;\n", 
            "+\n", 
            "+    public LoggingClientEventHandler(final NHttpClientEventHandler handler) {\n", 
            "+        super();\n", 
            "+        if (handler == null) {\n", 
            "+            throw new IllegalArgumentException(\"HTTP client handler may not be null\");\n", 
            "+        }\n", 
            "+        this.handler = handler;\n", 
            "+        this.log = LogFactory.getLog(handler.getClass());\n", 
            "+    }\n", 
            "+\n", 
            "+    public void connected(final NHttpClientConnection conn, final Object attachment) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Connected (\" + attachment + \")\");\n", 
            "+        }\n", 
            "+        this.handler.connected(conn, attachment);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void closed(final NHttpClientConnection conn) {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Closed\");\n", 
            "+        }\n", 
            "+        this.handler.closed(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void endOfInput(NHttpClientConnection conn) throws IOException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Closed at remote end\");\n", 
            "+        }\n", 
            "+        this.handler.endOfInput(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void exception(NHttpClientConnection conn, Exception ex) {\n", 
            "+        // Do not log errors at this level - Actual handler implementation should do that\n", 
            "+        this.handler.exception(conn, ex);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void requestReady(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": InRequest ready\" + getRequestMessageID(conn));\n", 
            "+        }\n", 
            "+        this.handler.requestReady(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void outputReady(final NHttpClientConnection conn, final ContentEncoder encoder) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Output ready\" + getRequestMessageID(conn));\n", 
            "+        }\n", 
            "+        this.handler.outputReady(conn, encoder);\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Content encoder \" + encoder);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void responseReceived(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "+        HttpResponse response = conn.getHttpResponse();\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \" : \"\n", 
            "+                    + response.getStatusLine() + getRequestMessageID(conn));\n", 
            "+        }\n", 
            "+        this.handler.responseReceived(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    public void inputReady(final NHttpClientConnection conn, final ContentDecoder decoder) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Input ready\" + getRequestMessageID(conn));\n", 
            "+        }\n", 
            "+        this.handler.inputReady(conn, decoder);\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Content decoder \" + decoder);\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            "+    public void timeout(final NHttpClientConnection conn) throws IOException, HttpException {\n", 
            "+        if (this.log.isDebugEnabled()) {\n", 
            "+            this.log.debug(\"HTTP connection \" + conn + \": Timeout\" + getRequestMessageID(conn));\n", 
            "+        }\n", 
            "+        this.handler.timeout(conn);\n", 
            "+    }\n", 
            "+\n", 
            "+    private static String getRequestMessageID(final NHttpClientConnection conn) {\n", 
            "+        /*Axis2HttpRequest axis2Request = (Axis2HttpRequest)\n", 
            "+                conn.getContext().getAttribute(ClientHandler.AXIS2_HTTP_REQUEST);\n", 
            "+        if (axis2Request != null) {\n", 
            "+            return \" [InRequest Message ID : \" + axis2Request.getMsgContext().getMessageID() + \"]\";\n", 
            "+        }*/\n", 
            "+        return \"\";\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingClientEventHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingClientEventHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,80", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.logging;\n", 
            "+\n", 
            "+import org.apache.commons.logging.Log;\n", 
            "+import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            "+import org.apache.http.impl.nio.DefaultHttpClientIODispatch;\n", 
            "+import org.apache.http.impl.nio.DefaultHttpServerIODispatch;\n", 
            "+import org.apache.http.nio.NHttpClientEventHandler;\n", 
            "+import org.apache.http.nio.NHttpServerEventHandler;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "+\n", 
            "+import javax.net.ssl.SSLContext;\n", 
            "+import java.util.Map;\n", 
            "+\n", 
            "+public class LoggingUtils {\n", 
            "+\n", 
            "+    private static NHttpClientEventHandler decorate(NHttpClientEventHandler handler) {\n", 
            "+        Log log = LogFactory.getLog(handler.getClass());\n", 
            "+        if (log.isDebugEnabled()) {\n", 
            "+            handler = new LoggingClientEventHandler(handler);\n", 
            "+        }\n", 
            "+        return handler;\n", 
            "+    }\n", 
            "+\n", 
            "+    private static NHttpServerEventHandler decorate(NHttpServerEventHandler handler) {\n", 
            "+        Log log = LogFactory.getLog(handler.getClass());\n", 
            "+        if (log.isDebugEnabled()) {\n", 
            "+            handler = new LoggingServerEventHandler(handler);\n", 
            "+        }\n", 
            "+        return handler;\n", 
            "+    }\n", 
            "+\n", 
            "+    public static DefaultHttpServerIODispatch getServerIODispatch(final NHttpServerEventHandler handler,\n", 
            "+                                                                  final ConnectionConfig config) {\n", 
            "+        return new DefaultHttpServerIODispatch(decorate(handler),\n", 
            "+                new LoggingNHttpServerConnectionFactory(config));\n", 
            "+    }\n", 
            "+\n", 
            "+    public static DefaultHttpServerIODispatch getServerIODispatch(final NHttpServerEventHandler handler,\n", 
            "+                                                                  final ConnectionConfig config,\n", 
            "+                                                                  final SSLContext sslContext,\n", 
            "+                                                                  final SSLSetupHandler sslSetupHandler) {\n", 
            "+        return new DefaultHttpServerIODispatch(decorate(handler),\n", 
            "+                new LoggingNHttpSSLServerConnectionFactory(config, sslContext, sslSetupHandler));\n", 
            "+    }\n", 
            "+\n", 
            "+    public static DefaultHttpClientIODispatch getClientIODispatch(final NHttpClientEventHandler handler,\n", 
            "+                                                                  final ConnectionConfig config) {\n", 
            "+        return new DefaultHttpClientIODispatch(decorate(handler),\n", 
            "+                new LoggingNHttpClientConnectionFactory(config));\n", 
            "+    }\n", 
            "+\n", 
            "+    public static DefaultHttpClientIODispatch getClientIODispatch(final NHttpClientEventHandler handler,\n", 
            "+                                                                  final ConnectionConfig config,\n", 
            "+                                                                  final SSLContext sslContext,\n", 
            "+                                                                  final SSLSetupHandler sslSetupHandler,\n", 
            "+                                                                  Map<String, SSLContext> customContexts) {\n", 
            "+        return new DefaultHttpClientIODispatch(decorate(handler),\n", 
            "+                new LoggingNHttpSSLClientConnectionFactory(config, sslContext, sslSetupHandler, customContexts));\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingUtils.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingUtils.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,74", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.logging;\n", 
            "+\n", 
            "+import org.apache.http.config.ConnectionConfig;\n", 
            "+import org.apache.http.impl.nio.DefaultNHttpClientConnection;\n", 
            "+import org.apache.http.nio.reactor.IOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLIOSession;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLMode;\n", 
            "+import org.apache.http.nio.reactor.ssl.SSLSetupHandler;\n", 
            "+\n", 
            "+import javax.net.ssl.SSLContext;\n", 
            "+import java.net.InetSocketAddress;\n", 
            "+import java.util.Map;\n", 
            "+\n", 
            "+public class LoggingNHttpSSLClientConnectionFactory extends LoggingNHttpClientConnectionFactory {\n", 
            "+\n", 
            "+    private SSLContext sslContext;\n", 
            "+    private SSLSetupHandler sslSetupHandler;\n", 
            "+    private Map<String,SSLContext> customContexts;\n", 
            "+\n", 
            "+    public LoggingNHttpSSLClientConnectionFactory(ConnectionConfig config,\n", 
            "+                                                  SSLContext sslContext,\n", 
            "+                                                  SSLSetupHandler sslSetupHandler,\n", 
            "+                                                  Map<String, SSLContext> customContexts) {\n", 
            "+        super(config);\n", 
            "+        this.sslContext = sslContext;\n", 
            "+        this.sslSetupHandler = sslSetupHandler;\n", 
            "+        this.customContexts = customContexts;\n", 
            "+    }\n", 
            "+\n", 
            "+    @Override\n", 
            "+    public DefaultNHttpClientConnection createConnection(IOSession session) {\n", 
            "+        final SSLIOSession ssliosession = new SSLIOSession(\n", 
            "+                session,\n", 
            "+                SSLMode.CLIENT,\n", 
            "+                getSSLContext(session),\n", 
            "+                sslSetupHandler);\n", 
            "+        session.setAttribute(SSLIOSession.SESSION_KEY, ssliosession);\n", 
            "+        return super.createConnection(ssliosession);\n", 
            "+    }\n", 
            "+\n", 
            "+    private SSLContext getSSLContext(IOSession session) {\n", 
            "+        InetSocketAddress address = (InetSocketAddress) session.getRemoteAddress();\n", 
            "+        String host = address.getHostName() + \":\" + address.getPort();\n", 
            "+        SSLContext customContext = null;\n", 
            "+        if (customContexts != null) {\n", 
            "+            // See if there's a custom SSL profile configured for this server\n", 
            "+            customContext = customContexts.get(host);\n", 
            "+        }\n", 
            "+\n", 
            "+        if (customContext == null) {\n", 
            "+            customContext = sslContext;\n", 
            "+        }\n", 
            "+        return customContext;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpSSLClientConnectionFactory.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingNHttpSSLClientConnectionFactory.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,43", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.transport.utils.logging;\n", 
            "+\n", 
            "+public class LoggingConstants {\n", 
            "+\n", 
            "+    public static final String SOURCE_CONNECTION_LOG_ID =\n", 
            "+            \"org.apache.synapse.transport.http.conn.SourceConnection\";\n", 
            "+    public static final String TARGET_CONNECTION_LOG_ID =\n", 
            "+            \"org.apache.synapse.transport.http.conn.TargetConnection\";\n", 
            "+\n", 
            "+    public static final String SOURCE_HEADER_LOG_ID =\n", 
            "+            \"org.apache.synapse.transport.http.headers.SourceHeaders\";\n", 
            "+    public static final String TARGET_HEADER_LOG_ID =\n", 
            "+            \"org.apache.synapse.transport.http.headers.TargetHeaders\";\n", 
            "+\n", 
            "+    public static final String SOURCE_SESSION_LOG_ID =\n", 
            "+            \"org.apache.synapse.transport.http.session.SourceSession\";\n", 
            "+    public static final String TARGET_SESSION_LOG_ID =\n", 
            "+            \"org.apache.synapse.transport.http.session.TargetSession\";\n", 
            "+\n", 
            "+    public static final String SOURCE_WIRE_LOG_ID =\n", 
            "+            \"org.apache.synapse.transport.http.wire.SourceWire\";\n", 
            "+    public static final String TARGET_WIRE_LOG_ID =\n", 
            "+            \"org.apache.synapse.transport.http.wire.TargetWire\";\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingConstants.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/utils/logging/LoggingConstants.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-1,6 +1,6", 
          "lines": [
            " http.socket.timeout=60000\n", 
            " http.connection.timeout=0\n", 
            "-http.socket.buffer-size=8096\n", 
            "+http.socket.buffer-size=8192\n", 
            " http.tcp.nodelay=true\n", 
            " http.nio.interest-ops-queueing=false\n", 
            " \n"
          ]
        }
      ], 
      "to": "java/modules/integration/src/test/resources/passthru-http.properties", 
      "from": "java/modules/integration/src/test/resources/passthru-http.properties"
    }
  ], 
  "id": "1512866"
}