{
  "when": "2011-12-07T02:32:27-05:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-38,7 +38,6", 
          "lines": [
            " import org.apache.synapse.util.MessageHelper;\n", 
            " \n", 
            " /**\n", 
            "- * @author nuwan\n", 
            "  * <p>\n", 
            "  * A Recipient List endpoint can contain multiple child endpoints or member elements. \n", 
            "  * It routes cloned copies of messages to each child recipient. This will assume that \n"
          ]
        }, 
        {
          "locn": "-49,7 +48,8", 
          "lines": [
            " public class RecipientListEndpoint extends AbstractEndpoint {\n", 
            " \n", 
            "     private static final Log log = LogFactory.getLog(RecipientListEndpoint.class);\n", 
            "-    private static final String DELIMETER = \",\";\n", 
            "+\n", 
            "+    private static final String DELIMITER = \",\";\n", 
            "     /**\n", 
            " \t * The list of members to which the message is delivered to\n", 
            " \t */\n"
          ]
        }, 
        {
          "locn": "-56,10 +56,10", 
          "lines": [
            " \tprivate List<Member> members;\n", 
            " \n", 
            "     private Map<String,Endpoint> dynamicEndpointPool ;\n", 
            "-    private Value dynamicEnpointSet;\n", 
            "+    private Value dynamicEndpointSet;\n", 
            "     public final static int DEFAULT_MAX_POOL = 20;\n", 
            " \t/**\n", 
            "-\t * Should this recipient list failover;\n", 
            "+\t * Should this recipient list fail over;\n", 
            " \t */\n", 
            "     private boolean failover;\n", 
            "     private int currentPool;\n"
          ]
        }, 
        {
          "locn": "-66,9 +66,10", 
          "lines": [
            " \n", 
            "     private SynapseEnvironment env = null;\n", 
            " \n", 
            "-    public RecipientListEndpoint(int poolsize){\n", 
            "-        dynamicEndpointPool = Collections.synchronizedMap(new DynamicEndpointPool<String, Endpoint>(poolsize));\n", 
            "-        this.currentPool = poolsize;\n", 
            "+    public RecipientListEndpoint(int poolSize){\n", 
            "+        dynamicEndpointPool = Collections.synchronizedMap(\n", 
            "+                new DynamicEndpointPool<String, Endpoint>(poolSize));\n", 
            "+        this.currentPool = poolSize;\n", 
            "     }\n", 
            " \n", 
            "     public RecipientListEndpoint(){\n"
          ]
        }, 
        {
          "locn": "-100,16 +101,13", 
          "lines": [
            " \t\t//Service child endpoints\n", 
            "         if (children != null && !children.isEmpty()) {\n", 
            "             sendToEndpointList(synCtx, children);\n", 
            "-        }\n", 
            "-        //Service member elements if specified\n", 
            "-        else if (members != null && !members.isEmpty()) {\n", 
            "+        } else if (members != null && !members.isEmpty()) {\n", 
            "+            //Service member elements if specified\n", 
            "             sendToApplicationMembers(synCtx);\n", 
            "-        }\n", 
            "-        else if (dynamicEnpointSet != null) {\n", 
            "+        } else if (dynamicEndpointSet != null) {\n", 
            "             sendToDynamicMembers(synCtx);\n", 
            "-        }\n", 
            "-        else {\n", 
            "-            String msg = \"No child endpoints nor member elements available\";\n", 
            "+        } else {\n", 
            "+            String msg = \"No child endpoints nor members available\";\n", 
            "             log.error(msg);\n", 
            "             throw new SynapseException(msg);\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-118,16 +116,15", 
          "lines": [
            "     private void sendToEndpointList(MessageContext synCtx, List<Endpoint> children) {\n", 
            "         int i = 0;\n", 
            "         boolean foundEndpoint = false;\n", 
            "-\n", 
            "         for (Endpoint childEndpoint : children) {\n", 
            "-\n", 
            "             if (childEndpoint.readyToSend()) {\n", 
            "                 foundEndpoint = true;\n", 
            "-                MessageContext newCtx = null;\n", 
            "+                MessageContext newCtx;\n", 
            "                 try {\n", 
            "                     newCtx = MessageHelper.cloneMessageContext(synCtx);\n", 
            "                 } catch (AxisFault e) {\n", 
            "                     handleException(\"Error cloning the message context\", e);\n", 
            "+                    return;\n", 
            "                 }\n", 
            "                 //Used when aggregating responses\n", 
            "                 newCtx.setProperty(EIPConstants.MESSAGE_SEQUENCE,\n"
          ]
        }, 
        {
          "locn": "-150,10 +147,10", 
          "lines": [
            "     }\n", 
            " \n", 
            "     private void sendToDynamicMembers(MessageContext synCtx) {\n", 
            "-        String dynamicUrlStr = dynamicEnpointSet.evaluateValue(synCtx);\n", 
            "-        String[] dynamicUrlSet = dynamicUrlStr.split(DELIMETER);\n", 
            "+        String dynamicUrlStr = dynamicEndpointSet.evaluateValue(synCtx);\n", 
            "+        String[] dynamicUrlSet = dynamicUrlStr.split(DELIMITER);\n", 
            "         if (dynamicUrlSet.length == 0) {\n", 
            "-            log.warn(\"No recipient/s was derived from the expression : \" + dynamicEnpointSet.toString());\n", 
            "+            log.warn(\"No recipients were derived from the expression : \" + dynamicEndpointSet.toString());\n", 
            "             return;\n", 
            "         }\n", 
            "         List<Endpoint> children = new ArrayList<Endpoint>();\n"
          ]
        }, 
        {
          "locn": "-212,20 +209,18", 
          "lines": [
            " \t\t\t\tcontinue;\n", 
            " \t\t\t}\t\n", 
            " \t\t\t\n", 
            "-\t\t\tMessageContext newCtx = null;\n", 
            "-\n", 
            "+\t\t\tMessageContext newCtx;\n", 
            " \t\t\ttry {\n", 
            " \t\t\t\tnewCtx = MessageHelper.cloneMessageContext(synCtx);\n", 
            " \t\t\t} catch (AxisFault e) {\n", 
            " \t\t\t\thandleException(\"Error cloning the message context\", e);\n", 
            "+                return;\n", 
            " \t\t\t}\n", 
            " \n", 
            " \t\t\t// Used when aggregating responses\n", 
            " \t\t\tnewCtx.setProperty(\n", 
            "-\t\t\t\t\tEIPConstants.MESSAGE_SEQUENCE,\n", 
            "-\t\t\t\t\tString.valueOf(i++)\n", 
            "-\t\t\t\t\t\t\t+ EIPConstants.MESSAGE_SEQUENCE_DELEMITER\n", 
            "-\t\t\t\t\t\t\t+ members.size());\n", 
            "+\t\t\t\t\tEIPConstants.MESSAGE_SEQUENCE, String.valueOf(i++) +\n", 
            "+                    EIPConstants.MESSAGE_SEQUENCE_DELEMITER + members.size());\n", 
            " \n", 
            " \t\t\t// evaluate the endpoint properties\n", 
            " \t\t\tevaluateProperties(newCtx);\n"
          ]
        }, 
        {
          "locn": "-232,7 +227,7", 
          "lines": [
            " \n", 
            " \t\t\t// URL rewrite\n", 
            " \t\t\tString address = newCtx.getTo().getAddress();\n", 
            "-\t\t\tif (address.indexOf(\":\") != -1) {\n", 
            "+\t\t\tif (address.contains(\":\")) {\n", 
            " \t\t\t\ttry {\n", 
            " \t\t\t\t\taddress = new URL(address).getPath();\n", 
            " \t\t\t\t} catch (MalformedURLException e) {\n"
          ]
        }, 
        {
          "locn": "-308,12 +303,12", 
          "lines": [
            " \t\tthis.members = members;\n", 
            " \t}\n", 
            " \n", 
            "-    public Value getDynamicEnpointSet() {\n", 
            "-        return dynamicEnpointSet;\n", 
            "+    public Value getDynamicEndpointSet() {\n", 
            "+        return dynamicEndpointSet;\n", 
            "     }\n", 
            " \n", 
            "-    public void setDynamicEnpointSet(Value dynamicEnpointSet) {\n", 
            "-        this.dynamicEnpointSet = dynamicEnpointSet;\n", 
            "+    public void setDynamicEndpointSet(Value dynamicEndpointSet) {\n", 
            "+        this.dynamicEndpointSet = dynamicEndpointSet;\n", 
            "     }\n", 
            " \n", 
            "     public int getCurrentPoolSize() {\n"
          ]
        }, 
        {
          "locn": "-344,8 +339,6", 
          "lines": [
            "         protected boolean removeEldestEntry(final Map.Entry<String, Endpoint> eldest) {\n", 
            "             return super.size() > maxPoolSize;\n", 
            "         }\n", 
            "-\n", 
            "-\n", 
            "     }\n", 
            " \n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/endpoints/RecipientListEndpoint.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/endpoints/RecipientListEndpoint.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-74,10 +74,10", 
          "lines": [
            "                         \"httpsPort\", null, String.valueOf(member.getHttpsPort())));\n", 
            "                 recipientListElement.addChild(memberEle);\n", 
            "             }\n", 
            "-        }else{\n", 
            "+        } else {\n", 
            "             OMElement dynamicEpEle = fac.createOMElement(\n", 
            "                     \"endpoints\", SynapseConstants.SYNAPSE_OMNAMESPACE, recipientListElement);\n", 
            "-            new ValueSerializer().serializeValue(recipientListEndpoint.getDynamicEnpointSet(),\n", 
            "+            new ValueSerializer().serializeValue(recipientListEndpoint.getDynamicEndpointSet(),\n", 
            "                     \"value\", dynamicEpEle);\n", 
            "             dynamicEpEle.addAttribute(fac.createOMAttribute(\"max-cache\", null,\n", 
            "                     String.valueOf(recipientListEndpoint.getCurrentPoolSize())));\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/endpoints/RecipientListEndpointSerializer.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/endpoints/RecipientListEndpointSerializer.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-121,15 +121,15", 
          "lines": [
            "                 if (name != null) {\n", 
            "                     recipientListEndpoint.setName(name.getAttributeValue());\n", 
            "                 }\n", 
            "-                recipientListEndpoint.setDynamicEnpointSet(dynamicEndpointSet);\n", 
            "+                recipientListEndpoint.setDynamicEndpointSet(dynamicEndpointSet);\n", 
            "             }\n", 
            " \n", 
            "             if (recipientListEndpoint.getChildren() == null && \n", 
            "             \t\trecipientListEndpoint.getMembers() == null &&\n", 
            "-                    recipientListEndpoint.getDynamicEnpointSet() == null) {\n", 
            "-                String msg = \"Invalid Synapse configuration.\\n\"\n", 
            "-                    + \"A RecipientListEndpoint must have child/member elements, but the RecipientListEndpoint \"\n", 
            "-                    + \"'\" + recipientListEndpoint.getName() + \"' does not have any child/member/dynamic endpoint elements.\";\n", 
            "+                    recipientListEndpoint.getDynamicEndpointSet() == null) {\n", 
            "+                String msg = \"A RecipientListEndpoint must have child/member elements, but the \" +\n", 
            "+                        \"RecipientListEndpoint \" + \"'\" + recipientListEndpoint.getName() + \"' \" +\n", 
            "+                        \"does not have any child/member/dynamic endpoint elements.\";\n", 
            "                 log.error(msg);\n", 
            "                 throw new SynapseException(msg);\n", 
            "             }\n"
          ]
        }, 
        {
          "locn": "-149,12 +149,7", 
          "lines": [
            "         \n", 
            "         for(Iterator memberIter = loadbalanceElement.getChildrenWithName(MEMBER);\n", 
            "             memberIter.hasNext();){\n", 
            "-        \t\n", 
            "-        \tif(log.isDebugEnabled()){\n", 
            "-        \t\tlog.debug(\"Getting Members..\");\n", 
            "-        \t}\n", 
            "-        \t\n", 
            "-            OMElement memberEle = (OMElement) memberIter.next();\n", 
            "+        \tOMElement memberEle = (OMElement) memberIter.next();\n", 
            "             Member member = new Member(memberEle.getAttributeValue(new QName(\"hostName\")), -1);\n", 
            "             String http = memberEle.getAttributeValue(new QName(\"httpPort\"));\n", 
            "             if (http != null) {\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/xml/endpoints/RecipientListEndpointFactory.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/xml/endpoints/RecipientListEndpointFactory.java"
    }
  ], 
  "id": "1211317"
}