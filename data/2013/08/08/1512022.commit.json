{
  "when": "2013-08-08T16:36:28-04:00", 
  "who": "rajikak", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-21,8 +21,10", 
          "lines": [
            " \n", 
            " import org.apache.commons.logging.Log;\n", 
            " import org.apache.commons.logging.LogFactory;\n", 
            "+import org.apache.http.params.HttpProtocolParams;\n", 
            " import org.apache.synapse.commons.util.MiscellaneousUtil;\n", 
            " \n", 
            "+import java.nio.charset.CodingErrorAction;\n", 
            " import java.util.Properties;\n", 
            " \n", 
            " /**\n"
          ]
        }, 
        {
          "locn": "-190,4 +192,26", 
          "lines": [
            "         return val == null ? def : val;\n", 
            "     }\n", 
            " \n", 
            "+    public CodingErrorAction getMalformedInputActionValue() {\n", 
            "+        String val = getStringProperty(HttpProtocolParams.HTTP_MALFORMED_INPUT_ACTION, \"report\");\n", 
            "+        return getCodingErrorAction(val);\n", 
            "+    }\n", 
            "+\n", 
            "+    public CodingErrorAction getUnMappableInputActionValue() {\n", 
            "+        String val = getStringProperty(HttpProtocolParams.HTTP_UNMAPPABLE_INPUT_ACTION, \"report\");\n", 
            "+        return getCodingErrorAction(val);\n", 
            "+    }\n", 
            "+\n", 
            "+    private CodingErrorAction getCodingErrorAction(String action) {\n", 
            "+        if (\"report\".equals(action)) {\n", 
            "+            return CodingErrorAction.REPORT;\n", 
            "+        } else if (\"ignore\".equals(action)) {\n", 
            "+            return CodingErrorAction.IGNORE;\n", 
            "+        } else if (\"replace\".equals(action)) {\n", 
            "+            return CodingErrorAction.REPLACE;\n", 
            "+        } else {\n", 
            "+            return CodingErrorAction.REPORT;\n", 
            "+        }\n", 
            "+    }\n", 
            "+\n", 
            " }\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/PassThroughConfiguration.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/PassThroughConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-142,8 +142,11", 
          "lines": [
            "             setBooleanParameter(NIOReactorPNames.INTEREST_OPS_QUEUEING,\n", 
            "                     conf.getBooleanProperty(NIOReactorParams.INTEREST_OPS_QUEUEING, false)).\n", 
            "             setParameter(HttpProtocolParams.ORIGIN_SERVER,\n", 
            "-                    conf.getStringProperty(HttpProtocolParams.ORIGIN_SERVER, \"Synapse-PassThrough-HTTP\"));\n", 
            "-\n", 
            "+                    conf.getStringProperty(HttpProtocolParams.ORIGIN_SERVER, \"Synapse-PassThrough-HTTP\")).\n", 
            "+            setParameter(HttpProtocolParams.HTTP_MALFORMED_INPUT_ACTION,\n", 
            "+                    conf.getMalformedInputActionValue()).\n", 
            "+            setParameter(HttpProtocolParams.HTTP_UNMAPPABLE_INPUT_ACTION,\n", 
            "+                    conf.getUnMappableInputActionValue());\n", 
            "         /* Set advanced tuning params only if they are explicitly set so that we are not loosing\n", 
            "            internal defaults of HttpCore-NIO */\n", 
            "         if (conf.getIntProperty(HttpConnectionParams.SO_LINGER) != null) {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/BaseConfiguration.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/config/BaseConfiguration.java"
    }
  ], 
  "id": "1512022"
}