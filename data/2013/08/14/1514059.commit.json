{
  "when": "2013-08-14T17:35:25-04:00", 
  "message": "Handling the endOfInput property in the PT SourceHandler - Otherwise JMX stats get messed up.", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-250,9 +250,7", 
          "lines": [
            "             metrics.incrementBytesSent(bytesSent);\n", 
            "         } catch (IOException e) {\n", 
            "             logIOException(e);\n", 
            "-\n", 
            "             informWriterError(conn);\n", 
            "-\n", 
            "             SourceContext.updateState(conn, ProtocolState.CLOSING);\n", 
            "             sourceConfiguration.getSourceConnections().shutDownConnection(conn);\n", 
            "         } \n"
          ]
        }, 
        {
          "locn": "-259,7 +257,24", 
          "lines": [
            "     }\n", 
            " \n", 
            "     public void endOfInput(NHttpServerConnection conn) throws IOException {\n", 
            "-        closed(conn);\n", 
            "+        ProtocolState state = SourceContext.getState(conn);\n", 
            "+\n", 
            "+        if (state == ProtocolState.REQUEST_READY || state == ProtocolState.RESPONSE_DONE) {\n", 
            "+            if (log.isDebugEnabled()) {\n", 
            "+                log.debug(\"Keep-Alive connection was closed at the remote end: \" + conn);\n", 
            "+            }\n", 
            "+        } else if (state == ProtocolState.REQUEST_BODY || state == ProtocolState.REQUEST_HEAD) {\n", 
            "+            informReaderError(conn);\n", 
            "+            log.warn(\"Connection closed at the remote end while reading the request: \" + conn);\n", 
            "+        } else if (state == ProtocolState.RESPONSE_BODY || state == ProtocolState.RESPONSE_HEAD) {\n", 
            "+            informWriterError(conn);\n", 
            "+            log.warn(\"Connection closed at the remote end while writing the response: \" + conn);\n", 
            "+        } else if (state == ProtocolState.REQUEST_DONE) {\n", 
            "+            log.warn(\"Connection closed by the client after request is read: \" + conn);\n", 
            "+        }\n", 
            "+\n", 
            "+        SourceContext.updateState(conn, ProtocolState.CLOSED);\n", 
            "+        sourceConfiguration.getSourceConnections().shutDownConnection(conn);\n", 
            "     }\n", 
            " \n", 
            "     public void exception(NHttpServerConnection conn, Exception e) {\n"
          ]
        }, 
        {
          "locn": "-361,10 +376,9", 
          "lines": [
            "         try {\n", 
            "             sourceConfiguration.getHttpProcessor().process(response, httpContext);\n", 
            "             conn.submitResponse(response);\n", 
            "-            SourceContext.updateState(conn, ProtocolState.CLOSED);\n", 
            "-            conn.close();\n", 
            "         } catch (Exception ex) {\n", 
            "             log.error(\"Error while handling HttpException\", ex);\n", 
            "+        } finally {\n", 
            "             SourceContext.updateState(conn, ProtocolState.CLOSED);\n", 
            "             sourceConfiguration.getSourceConnections().shutDownConnection(conn);\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-403,12 +417,10", 
          "lines": [
            "             if (log.isDebugEnabled()) {\n", 
            "                 log.debug(\"Keep-Alive connection was closed: \" + conn);\n", 
            "             }\n", 
            "-        } else if (state == ProtocolState.REQUEST_BODY ||\n", 
            "-                state == ProtocolState.REQUEST_HEAD) {\n", 
            "+        } else if (state == ProtocolState.REQUEST_BODY || state == ProtocolState.REQUEST_HEAD) {\n", 
            "             informReaderError(conn);\n", 
            "             log.warn(\"Connection closed while reading the request: \" + conn);\n", 
            "-        } else if (state == ProtocolState.RESPONSE_BODY ||\n", 
            "-                state == ProtocolState.RESPONSE_HEAD) {\n", 
            "+        } else if (state == ProtocolState.RESPONSE_BODY || state == ProtocolState.RESPONSE_HEAD) {\n", 
            "             informWriterError(conn);\n", 
            "             log.warn(\"Connection closed while writing the response: \" + conn);\n", 
            "         } else if (state == ProtocolState.REQUEST_DONE) {\n"
          ]
        }, 
        {
          "locn": "-416,9 +428,10", 
          "lines": [
            "         }\n", 
            " \n", 
            "         metrics.disconnected();\n", 
            "-\n", 
            "-        SourceContext.updateState(conn, ProtocolState.CLOSED);\n", 
            "-        sourceConfiguration.getSourceConnections().shutDownConnection(conn);\n", 
            "+        if (state != ProtocolState.CLOSED) {\n", 
            "+            SourceContext.updateState(conn, ProtocolState.CLOSED);\n", 
            "+            sourceConfiguration.getSourceConnections().shutDownConnection(conn);\n", 
            "+        }\n", 
            "     }\n", 
            " \n", 
            "     private void handleInvalidState(NHttpServerConnection conn, String action) {\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceHandler.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-78,7 +78,11", 
          "lines": [
            "     public void reset() {\n", 
            "         this.request = null;\n", 
            "         this.response = null;\n", 
            "-        this.state = ProtocolState.REQUEST_READY;\n", 
            "+        if (this.state != ProtocolState.CLOSED) {\n", 
            "+            // if the connection is not closed yet, prepare to receive a new request\n", 
            "+            // on it\n", 
            "+            this.state = ProtocolState.REQUEST_READY;\n", 
            "+        }\n", 
            " \n", 
            "         if (writer != null) {\n", 
            "             ByteBuffer buffer = writer.getBuffer();\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceContext.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/SourceContext.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-46,7 +46,7", 
          "lines": [
            "  *\n", 
            "  * <ul>\n", 
            "  *  <li>t1 - Receiving a new request (ServerHandler#requestReceived)</li>\n", 
            "- *  <li>t2 - Obtaining a connection to forward the request (Clienthandler#processConnection)</li>\n", 
            "+ *  <li>t2 - Obtaining a connection to forward the request (ClientHandler#processConnection)</li>\n", 
            "  *  <li>t3 - Reading the complete response from the backend server (ClientHandler#inputReady)</li>\n", 
            "  *  <li>t4 - Writing the complete response to the client (ServerHandler#outputReady)</li>\n", 
            "  * <ul>\n"
          ]
        }, 
        {
          "locn": "-58,7 +58,7", 
          "lines": [
            "  */\n", 
            " public class LatencyView implements LatencyViewMBean {\n", 
            " \n", 
            "-    private static final String NHTTP_LATENCY_VIEW = \"NhttpTransportLatency\";\n", 
            "+    private static final String NHTTP_LATENCY_VIEW = \"PassThroughTransportLatency\";\n", 
            " \n", 
            "     private static final int SMALL_DATA_COLLECTION_PERIOD = 5;\n", 
            "     private static final int LARGE_DATA_COLLECTION_PERIOD = 5 * 60;\n"
          ]
        }, 
        {
          "locn": "-124,7 +124,7", 
          "lines": [
            "      *\n", 
            "      * @param reqArrival The request arrival time\n", 
            "      * @param reqDeparture The request departure time (backend connection establishment)\n", 
            "-     * @param resArrival The resoponse arrival time\n", 
            "+     * @param resArrival The response arrival time\n", 
            "      * @param resDeparture The response departure time\n", 
            "      */\n", 
            "     public void notifyTimes(long reqArrival, long reqDeparture,\n"
          ]
        }
      ], 
      "to": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/jmx/LatencyView.java", 
      "from": "java/modules/transports/core/nhttp/src/main/java/org/apache/synapse/transport/passthru/jmx/LatencyView.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-101,7 +101,7", 
          "lines": [
            "         System.out.println(\"Testing advanced sequence caching...\");\n", 
            "         synCtx = TestUtils.createLightweightSynapseMessageContext(\"<empty/>\", config);\n", 
            "         System.out.println(\"Waiting for the cache to expire...\");\n", 
            "-        Thread.sleep(8500L);\n", 
            "+        Thread.sleep(10000L);\n", 
            "         Mediator seq3 = synCtx.getSequence(KEY_DYNAMIC_SEQUENCE_1);\n", 
            "         assertNotNull(seq3);\n", 
            "         assertTrue(((SequenceMediator) seq3).isInitialized());\n"
          ]
        }, 
        {
          "locn": "-114,7 +114,7", 
          "lines": [
            "         System.out.println(\"Testing sequence reloading...\");\n", 
            "         registry.updateResource(KEY_DYNAMIC_SEQUENCE_1, TestUtils.createOMElement(DYNAMIC_SEQUENCE_2));\n", 
            "         System.out.println(\"Waiting for the cache to expire...\");\n", 
            "-        Thread.sleep(8500L);\n", 
            "+        Thread.sleep(10000L);\n", 
            "         synCtx = TestUtils.createLightweightSynapseMessageContext(\"<empty/>\", config);\n", 
            "         Mediator seq4 = synCtx.getSequence(KEY_DYNAMIC_SEQUENCE_1);\n", 
            "         assertNotNull(seq4);\n"
          ]
        }, 
        {
          "locn": "-158,7 +158,7", 
          "lines": [
            "         System.out.println(\"Testing advanced endpoint caching...\");\n", 
            "         synCtx = TestUtils.createSynapseMessageContext(\"<empty/>\", config);\n", 
            "         System.out.println(\"Waiting for the cache to expire...\");\n", 
            "-        Thread.sleep(8500L);\n", 
            "+        Thread.sleep(10000L);\n", 
            "         Endpoint ep3 = synCtx.getEndpoint(KEY_DYNAMIC_ENDPOINT_1);\n", 
            "         assertNotNull(ep3);\n", 
            "         assertEquals(1, registry.getHitCount());\n"
          ]
        }, 
        {
          "locn": "-168,7 +168,7", 
          "lines": [
            "         System.out.println(\"Testing endpoint reloading...\");\n", 
            "         registry.updateResource(KEY_DYNAMIC_ENDPOINT_1, TestUtils.createOMElement(DYNAMIC_ENDPOINT_2));\n", 
            "         System.out.println(\"Waiting for the cache to expire...\");\n", 
            "-        Thread.sleep(8500L);\n", 
            "+        Thread.sleep(10000L);\n", 
            "         synCtx = TestUtils.createSynapseMessageContext(\"<empty/>\", config);\n", 
            "         Endpoint ep4 = synCtx.getEndpoint(KEY_DYNAMIC_ENDPOINT_1);\n", 
            "         assertNotNull(ep4);\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/registry/DynamicResourceTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/registry/DynamicResourceTest.java"
    }
  ], 
  "id": "1514059"
}