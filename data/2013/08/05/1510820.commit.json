{
  "when": "2013-08-05T19:53:59-04:00", 
  "message": "Adding test cases for session dispatchers", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-0,0 +1,84", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.endpoints.dispatch;\n", 
            "+\n", 
            "+import junit.framework.TestCase;\n", 
            "+import org.apache.axis2.context.ConfigurationContext;\n", 
            "+import org.apache.axis2.engine.AxisConfiguration;\n", 
            "+import org.apache.synapse.MessageContext;\n", 
            "+import org.apache.synapse.SynapseConstants;\n", 
            "+import org.apache.synapse.core.axis2.Axis2MessageContext;\n", 
            "+import org.apache.synapse.endpoints.AddressEndpoint;\n", 
            "+import org.apache.synapse.endpoints.Endpoint;\n", 
            "+import org.apache.synapse.mediators.TestUtils;\n", 
            "+\n", 
            "+import javax.xml.namespace.QName;\n", 
            "+import java.util.ArrayList;\n", 
            "+import java.util.List;\n", 
            "+\n", 
            "+public class SimpleClientSessionDispatcherTest extends TestCase {\n", 
            "+\n", 
            "+    private static final QName CLIENT_ID= new QName(\"http://ws.apache.org/ns/synapse\",\n", 
            "+            \"ClientID\", \"syn\");\n", 
            "+\n", 
            "+    public void testClientSessionDispatcher() throws Exception {\n", 
            "+        AxisConfiguration axisConfiguration = new AxisConfiguration();\n", 
            "+        ConfigurationContext configContext = new ConfigurationContext(axisConfiguration);\n", 
            "+        SALSessions.getInstance().initialize(true, configContext);\n", 
            "+\n", 
            "+        List<Endpoint> endpoints = new ArrayList<Endpoint>();\n", 
            "+        AddressEndpoint endpoint = new AddressEndpoint();\n", 
            "+        endpoint.setName(\"ep1\");\n", 
            "+        endpoints.add(endpoint);\n", 
            "+\n", 
            "+        Dispatcher dispatcher = new SimpleClientSessionDispatcher();\n", 
            "+        assertFalse(dispatcher.isServerInitiatedSession());\n", 
            "+\n", 
            "+        // test session creation\n", 
            "+        String clientId = \"client0001\";\n", 
            "+        dispatcher.updateSession(getMessageContext(clientId, endpoints));\n", 
            "+        assertNotNull(SALSessions.getInstance().getSession(clientId));\n", 
            "+\n", 
            "+        // test session query\n", 
            "+        SessionInformation session = dispatcher.getSession(getMessageContext(clientId,\n", 
            "+                endpoints));\n", 
            "+        assertNotNull(session);\n", 
            "+        assertEquals(session.getEndpointList().get(0).getName(), \"ep1\");\n", 
            "+\n", 
            "+        // test session removal\n", 
            "+        dispatcher.unbind(getMessageContext(clientId, endpoints));\n", 
            "+        session = dispatcher.getSession(getMessageContext(clientId, endpoints));\n", 
            "+        assertNull(session);\n", 
            "+        assertNull(SALSessions.getInstance().getSession(clientId));\n", 
            "+\n", 
            "+        SALSessions.getInstance().reset();\n", 
            "+    }\n", 
            "+\n", 
            "+    private MessageContext getMessageContext(String clientId,\n", 
            "+                                             List<Endpoint> endpoints) throws Exception {\n", 
            "+        MessageContext msgContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        msgContext.setProperty(SynapseConstants.PROP_SAL_ENDPOINT_ENDPOINT_LIST, endpoints);\n", 
            "+        org.apache.axis2.context.MessageContext axis2MsgContext =\n", 
            "+                ((Axis2MessageContext) msgContext).getAxis2MessageContext();\n", 
            "+        TestUtils.addSOAPHeaderBlock(axis2MsgContext, SimpleClientSessionDispatcherTest.CLIENT_ID,\n", 
            "+                clientId);\n", 
            "+        return msgContext;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/endpoints/dispatch/SimpleClientSessionDispatcherTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/endpoints/dispatch/SimpleClientSessionDispatcherTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,94", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.endpoints.dispatch;\n", 
            "+\n", 
            "+import junit.framework.TestCase;\n", 
            "+import org.apache.axis2.clustering.Member;\n", 
            "+import org.apache.axis2.context.ConfigurationContext;\n", 
            "+import org.apache.axis2.engine.AxisConfiguration;\n", 
            "+import org.apache.synapse.MessageContext;\n", 
            "+import org.apache.synapse.SynapseConstants;\n", 
            "+import org.apache.synapse.core.axis2.Axis2MessageContext;\n", 
            "+import org.apache.synapse.endpoints.AddressEndpoint;\n", 
            "+import org.apache.synapse.endpoints.Endpoint;\n", 
            "+import org.apache.synapse.mediators.TestUtils;\n", 
            "+\n", 
            "+import java.util.*;\n", 
            "+\n", 
            "+public class HttpSessionDispatcherTest extends TestCase {\n", 
            "+\n", 
            "+    public void testHttpSessionDispatcher() throws Exception {\n", 
            "+        AxisConfiguration axisConfiguration = new AxisConfiguration();\n", 
            "+        ConfigurationContext configContext = new ConfigurationContext(axisConfiguration);\n", 
            "+        SALSessions.getInstance().initialize(true, configContext);\n", 
            "+\n", 
            "+        List<Endpoint> endpoints = new ArrayList<Endpoint>();\n", 
            "+        AddressEndpoint endpoint = new AddressEndpoint();\n", 
            "+        endpoint.setName(\"ep1\");\n", 
            "+        endpoints.add(endpoint);\n", 
            "+\n", 
            "+        Dispatcher dispatcher = new HttpSessionDispatcher();\n", 
            "+        assertTrue(dispatcher.isServerInitiatedSession());\n", 
            "+\n", 
            "+        // test session creation\n", 
            "+        String clientId = \"JSESSIONID=760764CB72E96A7221506823748CF2AE\";\n", 
            "+        dispatcher.updateSession(getMessageContext(clientId + \"; Path=/\", true, endpoints));\n", 
            "+        assertNotNull(SALSessions.getInstance().getSession(clientId));\n", 
            "+\n", 
            "+        // test session query\n", 
            "+        SessionInformation session = dispatcher.getSession(getMessageContext(clientId, false,\n", 
            "+                endpoints));\n", 
            "+        assertNotNull(session);\n", 
            "+        assertNotNull(session.getMember());\n", 
            "+\n", 
            "+        // test session removal\n", 
            "+        dispatcher.unbind(getMessageContext(clientId, false, endpoints));\n", 
            "+        session = dispatcher.getSession(getMessageContext(clientId, false, endpoints));\n", 
            "+        assertNull(session);\n", 
            "+        assertNull(SALSessions.getInstance().getSession(clientId));\n", 
            "+\n", 
            "+        SALSessions.getInstance().reset();\n", 
            "+    }\n", 
            "+\n", 
            "+    private MessageContext getMessageContext(String clientId, boolean response,\n", 
            "+                                             List<Endpoint> endpoints) throws Exception {\n", 
            "+        MessageContext msgContext = TestUtils.createLightweightSynapseMessageContext(\"<test/>\");\n", 
            "+        msgContext.setProperty(SynapseConstants.PROP_SAL_ENDPOINT_ENDPOINT_LIST, endpoints);\n", 
            "+        Member member = new Member(\"127.0.0.1\", 9000);\n", 
            "+        Properties props = new Properties();\n", 
            "+        Map<String,String> hosts = new HashMap<String, String>();\n", 
            "+        hosts.put(\"127.0.0.1\", \"foo\");\n", 
            "+        props.put(HttpSessionDispatcher.HOSTS, hosts);\n", 
            "+        member.setProperties(props);\n", 
            "+        msgContext.setProperty(SynapseConstants.PROP_SAL_ENDPOINT_CURRENT_MEMBER, member);\n", 
            "+        org.apache.axis2.context.MessageContext axis2MsgContext =\n", 
            "+                ((Axis2MessageContext) msgContext).getAxis2MessageContext();\n", 
            "+        Map<String,String> headers = new HashMap<String, String>();\n", 
            "+        if (response) {\n", 
            "+            headers.put(\"Set-Cookie\", clientId);\n", 
            "+            msgContext.setResponse(true);\n", 
            "+        } else {\n", 
            "+            headers.put(\"Cookie\", clientId);\n", 
            "+            headers.put(\"Host\", \"127.0.0.1\");\n", 
            "+        }\n", 
            "+        axis2MsgContext.setProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS, headers);\n", 
            "+        return msgContext;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/test/java/org/apache/synapse/endpoints/dispatch/HttpSessionDispatcherTest.java", 
      "from": "java/modules/core/src/test/java/org/apache/synapse/endpoints/dispatch/HttpSessionDispatcherTest.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-131,7 +131,7", 
          "lines": [
            " \n", 
            "         if (sessionID == null || \"\".equals(sessionID)) {\n", 
            "             if (log.isDebugEnabled()) {\n", 
            "-                log.debug(\"Cannot find session ID .Returing null\");\n", 
            "+                log.debug(\"Cannot find session ID. Returning null.\");\n", 
            "             }\n", 
            "             return;\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-524,7 +524,7", 
          "lines": [
            " \n", 
            "     /*\n", 
            "      * Factory method to create a session information using given endpoint list,\n", 
            "-     * session id and other informations\n", 
            "+     * session id and other information\n", 
            "      */\n", 
            "     private SessionInformation createSessionInformation(MessageContext synCtx,\n", 
            "                                                         String id, List<Endpoint> endpoints) {\n"
          ]
        }, 
        {
          "locn": "-580,7 +580,7", 
          "lines": [
            " \n", 
            "     /*\n", 
            "      * Factory method to create a session information using a given member node ,\n", 
            "-     * session id and other informations\n", 
            "+     * session id and other information\n", 
            "      */\n", 
            "     private SessionInformation createSessionInformation(MessageContext synCtx,\n", 
            "                                                         String id, Member currentMember) {\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/endpoints/dispatch/SALSessions.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/endpoints/dispatch/SALSessions.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-36,7 +36,6", 
          "lines": [
            " public abstract class AbstractDispatcher implements Dispatcher {\n", 
            " \n", 
            "     protected Log log;\n", 
            "-    private final static String TRANSPORT_HEADERS = \"TRANSPORT_HEADERS\";\n", 
            " \n", 
            "     protected AbstractDispatcher() {\n", 
            "         log = LogFactory.getLog(this.getClass());\n"
          ]
        }, 
        {
          "locn": "-149,7 +148,7", 
          "lines": [
            "         org.apache.axis2.context.MessageContext axis2MessageContext =\n", 
            "                 ((Axis2MessageContext) synCtx).getAxis2MessageContext();\n", 
            " \n", 
            "-        Object o = axis2MessageContext.getProperty(TRANSPORT_HEADERS);\n", 
            "+        Object o = axis2MessageContext.getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n", 
            "         if (o != null && o instanceof Map) {\n", 
            "             return (Map) o;\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/endpoints/dispatch/AbstractDispatcher.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/endpoints/dispatch/AbstractDispatcher.java"
    }
  ], 
  "id": "1510820"
}