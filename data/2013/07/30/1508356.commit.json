{
  "when": "2013-07-30T05:27:10-04:00", 
  "who": "uswick", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-188,7 +188,32", 
          "lines": [
            "     public boolean hasExprTypeKey() {\n", 
            "         return keyValue != null && keyValue.startsWith(\"{\") && keyValue.endsWith(\"}\");\n", 
            "     }\n", 
            "+    \n", 
            "+    public boolean hasPropertyEvaluateExpr(){\n", 
            "+    \treturn keyValue != null && keyValue.contains(\"get-property\");\n", 
            "+    }\n", 
            " \n", 
            "+    public Object evalutePropertyExpression(MessageContext synCtx) {\n", 
            "+        SynapseXPath expr = null;\n", 
            "+        try {\n", 
            "+            expr = new SynapseXPath(this.keyValue.substring(1, keyValue.length() - 1));\n", 
            "+            for (OMNamespace aNamespaceList : namespaceList) {\n", 
            "+                expr.addNamespace(aNamespaceList);\n", 
            "+            }\n", 
            "+\n", 
            "+            String result = expr.stringValueOf(synCtx);\n", 
            "+            SynapseXPath expression = new SynapseXPath(result);\n", 
            "+            for (OMNamespace aNamespaceList : namespaceList) {\n", 
            "+                expression.addNamespace(aNamespaceList);\n", 
            "+            }\n", 
            "+            return expression;\n", 
            "+        } catch (Exception e) {\n", 
            "+            handleException(\"Can not evaluate escaped expression : \" + expr.toString());\n", 
            "+        }\n", 
            "+        return this.expression;\n", 
            "+\n", 
            "+    }\n", 
            "+\n", 
            "     public void setNamespaces(OMElement elem){\n", 
            "         Iterator namespaces = elem.getNamespacesInScope();\n", 
            "         while (namespaces.hasNext()){\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/Value.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/Value.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-91,6 +91,11", 
          "lines": [
            "         if (expression != null) {\n", 
            "             if (expression.getExpression() != null) {\n", 
            "                 if(expression.hasExprTypeKey()){\n", 
            "+                \tif(expression.hasPropertyEvaluateExpr()){\n", 
            "+                \t\t//TODO:evalute the string expression get the value\n", 
            "+                \t\t//String evaluatedPath =\"{//m0:getQuote/m0:request}\";\n", 
            "+                \t\treturn expression.evalutePropertyExpression(synCtx);\n", 
            "+                \t}\n", 
            "                     return expression.getExpression();\n", 
            "                 } else {\n", 
            "                     return expression.evaluateValue(synCtx);\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/template/TemplateContext.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/template/TemplateContext.java"
    }
  ], 
  "id": "1508356"
}