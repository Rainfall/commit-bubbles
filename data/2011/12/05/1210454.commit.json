{
  "when": "2011-12-05T08:20:26-05:00", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-269,57 +269,109", 
          "lines": [
            "                 case Types.CHAR:\n", 
            "                 case Types.VARCHAR:\n", 
            "                 case Types.LONGVARCHAR: {\n", 
            "-                    ps.setString(column++, value);\n", 
            "+                    if (value != null && value.length() != 0) {\n", 
            "+                        ps.setString(column++, value);\n", 
            "+                    } else {\n", 
            "+                        ps.setString(column++, null);\n", 
            "+                    }\n", 
            "                     break;\n", 
            "                 }\n", 
            "                 case Types.NUMERIC:\n", 
            "                 case Types.DECIMAL: {\n", 
            "-                    ps.setBigDecimal(column++, new BigDecimal(value));\n", 
            "+                    if (value != null && value.length() != 0) {\n", 
            "+                        ps.setBigDecimal(column++, new BigDecimal(value));\n", 
            "+                    } else {\n", 
            "+                        ps.setBigDecimal(column++, null);\n", 
            "+                    }\n", 
            "                     break;\n", 
            "                 }\n", 
            "                 case Types.BIT: {\n", 
            "-                    ps.setBoolean(column++, Boolean.parseBoolean(value));\n", 
            "+                    if (value != null && value.length() != 0) {\n", 
            "+                        ps.setBoolean(column++, Boolean.parseBoolean(value));\n", 
            "+                    } else {\n", 
            "+                        ps.setNull(column++, Types.BIT);\n", 
            "+                    }\n", 
            "                     break;\n", 
            "                 }\n", 
            "                 case Types.TINYINT: {\n", 
            "-                    ps.setByte(column++, Byte.parseByte(value));\n", 
            "+                    if (value != null && value.length() != 0) {\n", 
            "+                        ps.setByte(column++, Byte.parseByte(value));\n", 
            "+                    } else {\n", 
            "+                        ps.setNull(column++, Types.TINYINT);\n", 
            "+                    }\n", 
            "                     break;\n", 
            "                 }\n", 
            "                 case Types.SMALLINT: {\n", 
            "-                    ps.setShort(column++, Short.parseShort(value));\n", 
            "+                    if (value != null && value.length() != 0) {\n", 
            "+                        ps.setShort(column++, Short.parseShort(value));\n", 
            "+                    } else {\n", 
            "+                        ps.setNull(column++, Types.SMALLINT);\n", 
            "+                    }\n", 
            "                     break;\n", 
            "                 }\n", 
            "                 case Types.INTEGER: {\n", 
            "-                    ps.setInt(column++, Integer.parseInt(value));\n", 
            "+                    if (value != null && value.length() != 0) {\n", 
            "+                        ps.setInt(column++, Integer.parseInt(value));\n", 
            "+                    } else {\n", 
            "+                        ps.setNull(column++, Types.INTEGER);\n", 
            "+                    }\n", 
            "                     break;\n", 
            "                 }\n", 
            "                 case Types.BIGINT: {\n", 
            "-                    ps.setLong(column++, Long.parseLong(value));\n", 
            "+                    if (value != null && value.length() != 0) {\n", 
            "+                        ps.setLong(column++, Long.parseLong(value));\n", 
            "+                    } else {\n", 
            "+                        ps.setNull(column++, Types.BIGINT);\n", 
            "+                    }\n", 
            "                     break;\n", 
            "                 }\n", 
            "                 case Types.REAL: {\n", 
            "-                    ps.setFloat(column++, Float.parseFloat(value));\n", 
            "+                    if (value != null && value.length() != 0) {\n", 
            "+                        ps.setFloat(column++, Float.parseFloat(value));\n", 
            "+                    } else {\n", 
            "+                        ps.setNull(column++, Types.REAL);\n", 
            "+                    }\n", 
            "                     break;\n", 
            "                 }\n", 
            "                 case Types.FLOAT: {\n", 
            "-                    ps.setDouble(column++, Double.parseDouble(value));\n", 
            "+                    if (value != null && value.length() != 0) {\n", 
            "+                        ps.setDouble(column++, Double.parseDouble(value));\n", 
            "+                    } else {\n", 
            "+                        ps.setNull(column++, Types.FLOAT);\n", 
            "+                    }\n", 
            "                     break;\n", 
            "                 }\n", 
            "                 case Types.DOUBLE: {\n", 
            "-                    ps.setDouble(column++, Double.parseDouble(value));\n", 
            "+                    if (value != null && value.length() != 0) {\n", 
            "+                        ps.setDouble(column++, Double.parseDouble(value));\n", 
            "+                    } else {\n", 
            "+                        ps.setNull(column++, Types.DOUBLE);\n", 
            "+                    }\n", 
            "                     break;\n", 
            "                 }\n", 
            "                 // skip BINARY, VARBINARY and LONGVARBINARY\n", 
            "                 case Types.DATE: {\n", 
            "-                    ps.setDate(column++, Date.valueOf(value));\n", 
            "+                    if (value != null && value.length() != 0) {\n", 
            "+                        ps.setDate(column++, Date.valueOf(value));\n", 
            "+                    } else {\n", 
            "+                        ps.setNull(column++, Types.DATE);\n", 
            "+                    }\n", 
            "                     break;\n", 
            "                 }\n", 
            "                 case Types.TIME: {\n", 
            "-                    ps.setTime(column++, Time.valueOf(value));\n", 
            "+                    if (value != null && value.length() != 0) {\n", 
            "+                        ps.setTime(column++, Time.valueOf(value));\n", 
            "+                    } else {\n", 
            "+                        ps.setNull(column++, Types.TIME);\n", 
            "+                    }\n", 
            "                     break;\n", 
            "                 }\n", 
            "                 case Types.TIMESTAMP: {\n", 
            "-                    ps.setTimestamp(column++, Timestamp.valueOf(value));\n", 
            "+                    if (value != null && value.length() != 0) {\n", 
            "+                        ps.setTimestamp(column++, Timestamp.valueOf(value));\n", 
            "+                    } else {\n", 
            "+                        ps.setNull(column++, Types.TIMESTAMP);\n", 
            "+                    }\n", 
            "                     break;\n", 
            "                 }\n", 
            "                 // skip CLOB, BLOB, ARRAY, DISTINCT, STRUCT, REF, JAVA_OBJECT\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/db/AbstractDBMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/db/AbstractDBMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-78,8 +78,6", 
          "lines": [
            " \n", 
            "                 }\n", 
            " \n", 
            "-                // Ensure that the message is fully read\n", 
            "-                synCtx.getEnvelope().buildWithAttachments();\n", 
            "                 messageStore.offer(synCtx);\n", 
            " \n", 
            "                 // with the nio transport, this causes the listener not to write a 202\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/store/MessageStoreMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/store/MessageStoreMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-29,12 +29,12", 
          "lines": [
            " /**\n", 
            "  * Syntax for EnrichMediator\n", 
            "  * <p/>\n", 
            "- * <xmlStore>\n", 
            "+ * <enrich>\n", 
            "  * <source [clone=true | false] type=[custom|envelope|body|property] xpath=\"\" property=\"\"/>\n", 
            "  * <target [replace=true | false] type=[custom|envelope|body|property] xpath=\"\" property=\"\"/>\n", 
            "- * </xmlStore>\n", 
            "+ * </enrich>\n", 
            "  * <p/>\n", 
            "- * This mediator will first get an OMELement from the source. Then put it to the current message\n", 
            "+ * This mediator will first get an OMElement from the source. Then put it to the current message\n", 
            "  * according to the target element.\n", 
            "  * <p/>\n", 
            "  * Both target and source can specify a type. These are the types supported\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/elementary/EnrichMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/elementary/EnrichMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-19,12 +19,7", 
          "lines": [
            " \n", 
            " package org.apache.synapse.mediators.elementary;\n", 
            " \n", 
            "-import org.apache.axiom.om.OMAbstractFactory;\n", 
            "-import org.apache.axiom.om.OMElement;\n", 
            "-import org.apache.axiom.om.OMNode;\n", 
            "-import org.apache.axiom.om.OMText;\n", 
            "-import org.apache.axiom.om.OMFactory;\n", 
            "-import org.apache.axiom.om.OMXMLBuilderFactory;\n", 
            "+import org.apache.axiom.om.*;\n", 
            " import org.apache.axiom.soap.SOAP12Constants;\n", 
            " import org.apache.axiom.soap.SOAPEnvelope;\n", 
            " import org.apache.axiom.soap.SOAPFactory;\n"
          ]
        }, 
        {
          "locn": "-45,7 +40,7", 
          "lines": [
            "  * 3. SOAP Envelope\n", 
            "  * 4. SOAP Body\n", 
            "  * <p/>\n", 
            "- * If clone is true a clone will be create and stored from the origincal content. Otherwise a\n", 
            "+ * If clone is true a clone will be create and stored from the original content. Otherwise a\n", 
            "  * reference will be stored.\n", 
            "  * <p/>\n", 
            "  * In case of property a OMElement is stored in a property and it will be fetched.\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/elementary/Source.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/elementary/Source.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-0,0 +1,44", 
          "lines": [
            "+/*\n", 
            "+ *  Licensed to the Apache Software Foundation (ASF) under one\n", 
            "+ *  or more contributor license agreements.  See the NOTICE file\n", 
            "+ *  distributed with this work for additional information\n", 
            "+ *  regarding copyright ownership.  The ASF licenses this file\n", 
            "+ *  to you under the Apache License, Version 2.0 (the\n", 
            "+ *  \"License\"); you may not use this file except in compliance\n", 
            "+ *  with the License.  You may obtain a copy of the License at\n", 
            "+ *\n", 
            "+ *   http://www.apache.org/licenses/LICENSE-2.0\n", 
            "+ *\n", 
            "+ *  Unless required by applicable law or agreed to in writing,\n", 
            "+ *  software distributed under the License is distributed on an\n", 
            "+ *   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n", 
            "+ *  KIND, either express or implied.  See the License for the\n", 
            "+ *  specific language governing permissions and limitations\n", 
            "+ *  under the License.\n", 
            "+ */\n", 
            "+\n", 
            "+package org.apache.synapse.mediators.transform;\n", 
            "+\n", 
            "+import org.apache.synapse.util.xpath.SynapseXPath;\n", 
            "+\n", 
            "+public class Argument {\n", 
            "+\n", 
            "+    private String value;\n", 
            "+    private SynapseXPath expression;\n", 
            "+\n", 
            "+    public String getValue() {\n", 
            "+        return value;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setValue(String value) {\n", 
            "+        this.value = value;\n", 
            "+    }\n", 
            "+\n", 
            "+    public SynapseXPath getExpression() {\n", 
            "+        return expression;\n", 
            "+    }\n", 
            "+\n", 
            "+    public void setExpression(SynapseXPath expression) {\n", 
            "+        this.expression = expression;\n", 
            "+    }\n", 
            "+}\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/transform/Argument.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/transform/Argument.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-63,9 +63,10", 
          "lines": [
            "                 synLog.traceTrace(\"Message : \" + synCtx.getEnvelope());\n", 
            "             }\n", 
            "         }\n", 
            "-        populateParameters(synCtx);\n", 
            "+\n", 
            "         //get the target function template and invoke by passing populated parameters\n", 
            "         Mediator mediator = synCtx.getSequenceTemplate(targetTemplate);\n", 
            "+        populateParameters(synCtx, ((TemplateMediator)mediator).getName());\n", 
            "         if (mediator != null && mediator instanceof TemplateMediator) {\n", 
            "             return mediator.mediate(synCtx);\n", 
            "         }\n"
          ]
        }, 
        {
          "locn": "-73,10 +74,11", 
          "lines": [
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     * poplulate declared parameters on temp synapse properties\n", 
            "+     * populate declared parameters on temp synapse properties\n", 
            "      * @param synCtx\n", 
            "+     * @param templateQualifiedName\n", 
            "      */\n", 
            "-    private void populateParameters(MessageContext synCtx) {\n", 
            "+    private void populateParameters(MessageContext synCtx, String templateQualifiedName) {\n", 
            "         Iterator<String> params = pName2ExpressionMap.keySet().iterator();\n", 
            "         while (params.hasNext()) {\n", 
            "             String parameter = params.next();\n"
          ]
        }, 
        {
          "locn": "-83,7 +85,8", 
          "lines": [
            "             if (!\"\".equals(parameter)) {\n", 
            "                 Value expression = pName2ExpressionMap.get(parameter);\n", 
            "                 if (expression != null) {\n", 
            "-                    EIPUtils.createSynapseEIPTemplateProperty(synCtx, targetTemplate, parameter, expression);\n", 
            "+                    EIPUtils.createSynapseEIPTemplateProperty(synCtx, templateQualifiedName,\n", 
            "+                            parameter, expression);\n", 
            "                 }\n", 
            "             }\n", 
            "         }\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/template/InvokeMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/template/InvokeMediator.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-122,6 +122,9", 
          "lines": [
            "         MessageContext newCtx = null;\n", 
            "         try {\n", 
            "             newCtx = MessageHelper.cloneMessageContext(synCtx);\n", 
            "+            // Set isServerSide property in the cloned message context\n", 
            "+            ((Axis2MessageContext) newCtx).getAxis2MessageContext().setServerSide(\n", 
            "+                    ((Axis2MessageContext) synCtx).getAxis2MessageContext().isServerSide());\n", 
            " \n", 
            "             if (id != null) {\n", 
            "                 // set the parent correlation details to the cloned MC -\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/mediators/eip/splitter/CloneMediator.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/mediators/eip/splitter/CloneMediator.java"
    }
  ], 
  "id": "1210454"
}