{
  "when": "2012-07-29T08:57:15-04:00", 
  "message": "Fixing a race condition in SynapseConfiguration and using a shared thread pool for running endpoint stat collector tasks", 
  "who": "hiranya", 
  "changes": [
    {
      "chunks": [
        {
          "locn": "-739,10 +739,15", 
          "lines": [
            "         if (o == null || o instanceof Entry) {\n", 
            "             if (o == null) {\n", 
            "                 // this is not a local definition\n", 
            "-                Entry entry = new Entry(key);\n", 
            "-                entry.setType(Entry.REMOTE_ENTRY);\n", 
            "-                addEntry(key, entry);\n", 
            "-                return entry;\n", 
            "+                synchronized (this) {\n", 
            "+                    o = localRegistry.get(key);\n", 
            "+                    if (o == null) {\n", 
            "+                        Entry entry = new Entry(key);\n", 
            "+                        entry.setType(Entry.REMOTE_ENTRY);\n", 
            "+                        addEntry(key, entry);\n", 
            "+                        return entry;\n", 
            "+                    }\n", 
            "+                }\n", 
            "             }\n", 
            "             return (Entry) o;\n", 
            "         } else {\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/config/SynapseConfiguration.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/config/SynapseConfiguration.java"
    }, 
    {
      "chunks": [
        {
          "locn": "-24,10 +24,7", 
          "lines": [
            " import org.apache.commons.logging.LogFactory;\n", 
            " \n", 
            " import java.util.*;\n", 
            "-import java.util.concurrent.Executors;\n", 
            "-import java.util.concurrent.ScheduledExecutorService;\n", 
            "-import java.util.concurrent.ThreadFactory;\n", 
            "-import java.util.concurrent.TimeUnit;\n", 
            "+import java.util.concurrent.*;\n", 
            " import java.util.concurrent.atomic.AtomicInteger;\n", 
            " \n", 
            " /**\n"
          ]
        }, 
        {
          "locn": "-36,7 +33,14", 
          "lines": [
            " public class EndpointView implements EndpointViewMBean, MessageLevelMetricsCollector {\n", 
            " \n", 
            "     private static final Log log = LogFactory.getLog(EndpointView.class);\n", 
            "-    private static final Long ONE = (long) 1;\n", 
            "+    private static final Long ONE = 1L;\n", 
            "+    private static final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(20,\n", 
            "+        new ThreadFactory() {\n", 
            "+            public Thread newThread(Runnable r) {\n", 
            "+                return new Thread(r, \"endpoint-jmx-stat-collector\");\n", 
            "+            }\n", 
            "+        }\n", 
            "+    );\n", 
            " \n", 
            "     /** The name of the endpoint */\n", 
            "     private String endpointName = null;\n"
          ]
        }, 
        {
          "locn": "-79,7 +83,7", 
          "lines": [
            " \n", 
            "     private long lastResetTime = System.currentTimeMillis();\n", 
            " \n", 
            "-    private ScheduledExecutorService scheduler;\n", 
            "+    private ScheduledFuture future;\n", 
            " \n", 
            "     private Queue<Integer> suspensionCounts = new LinkedList<Integer>();\n", 
            "     private Queue<Integer> timeoutCounts = new LinkedList<Integer>();\n"
          ]
        }, 
        {
          "locn": "-93,13 +97,7", 
          "lines": [
            "         this.endpointName = endpointName;\n", 
            "         this.endpoint = endpoint;\n", 
            " \n", 
            "-        scheduler =  Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n", 
            "-            public Thread newThread(Runnable r) {\n", 
            "-                return new Thread(r, endpointName + \"-endpoint-stat-collector\");\n", 
            "-            }\n", 
            "-        });\n", 
            "-\n", 
            "-        scheduler.scheduleAtFixedRate(new Runnable() {\n", 
            "+        this.future = scheduler.scheduleAtFixedRate(new Runnable() {\n", 
            "             public void run() {\n", 
            "                 if (suspensionCounts.size() == 15) {\n", 
            "                     suspensionCounts.remove();\n"
          ]
        }, 
        {
          "locn": "-115,12 +113,12", 
          "lines": [
            "     }\n", 
            " \n", 
            "     public void destroy() {\n", 
            "-        scheduler.shutdownNow();\n", 
            "+        future.cancel(true);\n", 
            "     }\n", 
            " \n", 
            "     // --- endpoint control ---\n", 
            "     /**\n", 
            "-     * Switch on a leaf endpoint, or all endpoints on a group - from maintenence\n", 
            "+     * Switch on a leaf endpoint, or all endpoints on a group - from maintenance\n", 
            "      * @throws Exception\n", 
            "      */\n", 
            "     public void switchOn() throws Exception {\n"
          ]
        }, 
        {
          "locn": "-138,7 +136,7", 
          "lines": [
            "     }\n", 
            " \n", 
            "     /**\n", 
            "-     * Switch off a leaf endpoint, or all endpoints of a group - for maintenence\n", 
            "+     * Switch off a leaf endpoint, or all endpoints of a group - for maintenance\n", 
            "      *\n", 
            "      * @throws Exception\n", 
            "      */\n"
          ]
        }, 
        {
          "locn": "-173,7 +171,7", 
          "lines": [
            " \n", 
            "     /**\n", 
            "      * Is this leaf level endpoint in timeout state? For a group, has all endpoints timed out?\n", 
            "-     * @return true if a leaf level endpoint has timedout, For a group, has all endpoints timed out?\n", 
            "+     * @return true if a leaf level endpoint has timed out, For a group, has all endpoints timed out?\n", 
            "      * @throws Exception\n", 
            "      */\n", 
            "     public boolean isTimedout() throws Exception {\n"
          ]
        }, 
        {
          "locn": "-466,7 +464,7", 
          "lines": [
            " \n", 
            "     /**\n", 
            "      * Number of bytes received, receiving replies\n", 
            "-     * @return # of byted received, receiving replies\n", 
            "+     * @return # of bytes received, receiving replies\n", 
            "      */\n", 
            "     public long getBytesReceived() {\n", 
            "         if (endpoint.getChildren() != null) {\n"
          ]
        }
      ], 
      "to": "java/modules/core/src/main/java/org/apache/synapse/endpoints/EndpointView.java", 
      "from": "java/modules/core/src/main/java/org/apache/synapse/endpoints/EndpointView.java"
    }
  ], 
  "id": "1366841"
}